/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(537),r=n.n(i),s=n(645),a=n.n(s)()(r());a.push([t.id,"body {\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 14px 20px;\r\n  margin: 8px 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: large;\r\n}\r\n\r\n#hud {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  color: #fff;\r\n  font: 'VT323', monospace;\r\n}\r\n#minimap {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background-color: rgba(0,0,0,0.5);\r\n  /* make canvas cirular */\r\n  border-radius: 50%;\r\n\r\n}\r\n#restartInfo {\r\n  position:absolute;\r\n  bottom:5px;\r\n  right:5px;\r\n  font-size: 1.8vw;\r\n}\r\n#hud-inner {\r\n  position: absolute;\r\n  bottom: 5px;\r\n\r\n}\r\n#hud p {\r\n  padding-left: 10px;\r\n  font-family: 'VT323', monospace;\r\n  font-size: 40px;\r\n  margin: 0;\r\n}\r\n#blocker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(112, 112, 112, 0.8);\r\n  font-family: 'VT323', monospace;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n\r\n#instructions {\r\n  cursor: pointer;\r\n}\r\n#blocker h1 {\r\n  font-size: 5vw;\r\n}\r\n#blocker p {\r\n  font-size: 3vw;\r\n}\r\n#instructions small {\r\n  font-size: 2.5vw;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,wBAAwB;AAC1B;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,iCAAiC;EACjC,wBAAwB;EACxB,kBAAkB;;AAEpB;AACA;EACE,iBAAiB;EACjB,UAAU;EACV,SAAS;EACT,gBAAgB;AAClB;AACA;EACE,kBAAkB;EAClB,WAAW;;AAEb;AACA;EACE,kBAAkB;EAClB,+BAA+B;EAC/B,eAAe;EACf,SAAS;AACX;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,0CAA0C;EAC1C,+BAA+B;EAC/B,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB",sourcesContent:["body {\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 14px 20px;\r\n  margin: 8px 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: large;\r\n}\r\n\r\n#hud {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  color: #fff;\r\n  font: 'VT323', monospace;\r\n}\r\n#minimap {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background-color: rgba(0,0,0,0.5);\r\n  /* make canvas cirular */\r\n  border-radius: 50%;\r\n\r\n}\r\n#restartInfo {\r\n  position:absolute;\r\n  bottom:5px;\r\n  right:5px;\r\n  font-size: 1.8vw;\r\n}\r\n#hud-inner {\r\n  position: absolute;\r\n  bottom: 5px;\r\n\r\n}\r\n#hud p {\r\n  padding-left: 10px;\r\n  font-family: 'VT323', monospace;\r\n  font-size: 40px;\r\n  margin: 0;\r\n}\r\n#blocker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(112, 112, 112, 0.8);\r\n  font-family: 'VT323', monospace;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n\r\n#instructions {\r\n  cursor: pointer;\r\n}\r\n#blocker h1 {\r\n  font-size: 5vw;\r\n}\r\n#blocker p {\r\n  font-size: 3vw;\r\n}\r\n#instructions small {\r\n  font-size: 2.5vw;\r\n}"],sourceRoot:""}]);const o=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(i)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);i&&a[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([s]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var s={},a=[],o=0;o<t.length;o++){var l=t[o],c=i.base?l[0]+i.base:l[0],h=s[c]||0,u="".concat(c," ").concat(h);s[c]=h+1;var d=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var m=r(p,i);i.byIndex=o,e.splice(o,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var s=i(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var o=n(s[a]);e[o].references--}for(var l=i(t,r),c=0;c<s.length;c++){var h=n(s[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}s=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},922:t=>{t.exports=function(t){var e=function(e){this.manager=void 0!==e?e:t.DefaultLoadingManager};return e.prototype={constructor:t.STLLoader,load:function(e,n,i,r){var s=this,a=new t.FileLoader(s.manager);a.setResponseType("arraybuffer"),a.load(e,(function(t){n(s.parse(t))}),i,r)},parse:function(t){var e=this.ensureBinary(t);return function(){var t;if(84+50*(t=new DataView(e)).getUint32(80,!0)===t.byteLength)return!0;for(var n=[115,111,108,105,100],i=0;i<5;i++)if(n[i]!=t.getUint8(i,!1))return!0;return!1}()?this.parseBinary(e):this.parseASCII(this.ensureString(t))},parseBinary:function(e){for(var n,i,r,s,a,o,l,c,h=new DataView(e),u=h.getUint32(80,!0),d=!1,p=0;p<70;p++)1129270351==h.getUint32(p,!1)&&82==h.getUint8(p+4)&&61==h.getUint8(p+5)&&(d=!0,s=[],a=h.getUint8(p+6)/255,o=h.getUint8(p+7)/255,l=h.getUint8(p+8)/255,c=h.getUint8(p+9)/255);for(var m=new t.BufferGeometry,f=[],g=[],v=0;v<u;v++){var y=84+50*v,x=h.getFloat32(y,!0),_=h.getFloat32(y+4,!0),w=h.getFloat32(y+8,!0);if(d){var b=h.getUint16(y+48,!0);0==(32768&b)?(n=(31&b)/31,i=(b>>5&31)/31,r=(b>>10&31)/31):(n=a,i=o,r=l)}for(var M=1;M<=3;M++){var S=y+12*M;f.push(h.getFloat32(S,!0)),f.push(h.getFloat32(S+4,!0)),f.push(h.getFloat32(S+8,!0)),g.push(x,_,w),d&&s.push(n,i,r)}}return m.addAttribute("position",new t.BufferAttribute(new Float32Array(f),3)),m.addAttribute("normal",new t.BufferAttribute(new Float32Array(g),3)),d&&(m.addAttribute("color",new t.BufferAttribute(new Float32Array(s),3)),m.hasColors=!0,m.alpha=c),m},parseASCII:function(e){var n,i,r,s,a,o;n=new t.BufferGeometry,i=/facet([\s\S]*?)endfacet/g;for(var l=[],c=[],h=new t.Vector3;null!==(a=i.exec(e));){for(o=a[0],r=/normal[\s]+([\-+]?[0-9]+\.?[0-9]*([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+/g;null!==(a=r.exec(o));)h.x=parseFloat(a[1]),h.y=parseFloat(a[3]),h.z=parseFloat(a[5]);for(s=/vertex[\s]+([\-+]?[0-9]+\.?[0-9]*([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+[\s]+([\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?)+/g;null!==(a=s.exec(o));)l.push(parseFloat(a[1]),parseFloat(a[3]),parseFloat(a[5])),c.push(h.x,h.y,h.z)}return n.addAttribute("position",new t.BufferAttribute(new Float32Array(l),3)),n.addAttribute("normal",new t.BufferAttribute(new Float32Array(c),3)),n},ensureString:function(t){if("string"!=typeof t){for(var e=new Uint8Array(t),n=[],i=0;i<t.byteLength;i++)n.push(String.fromCharCode(e[i]));return n.join("")}return t},ensureBinary:function(t){if("string"==typeof t){for(var e=new Uint8Array(t.length),n=0;n<t.length;n++)e[n]=255&t.charCodeAt(n);return e.buffer||e}return t}},e}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var s=e[i]={id:i,exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t={};n.r(t),n.d(t,{ACESFilmicToneMapping:()=>et,AddEquation:()=>S,AddOperation:()=>Z,AdditiveAnimationBlendMode:()=>Ce,AdditiveBlending:()=>_,AlphaFormat:()=>Bt,AlwaysDepth:()=>G,AlwaysStencilFunc:()=>$e,AmbientLight:()=>Lu,AmbientLightProbe:()=>Xu,AnimationClip:()=>eu,AnimationLoader:()=>cu,AnimationMixer:()=>Ed,AnimationObjectGroup:()=>Md,AnimationUtils:()=>kh,ArcCurve:()=>bc,ArrayCamera:()=>jo,ArrowHelper:()=>mp,Audio:()=>sd,AudioAnalyser:()=>ud,AudioContext:()=>Wu,AudioListener:()=>rd,AudioLoader:()=>ju,AxesHelper:()=>fp,AxisHelper:()=>Wp,BackSide:()=>m,BasicDepthPacking:()=>Be,BasicShadowMap:()=>c,BinaryTextureLoader:()=>Jp,Bone:()=>Pl,BooleanKeyframeTrack:()=>Yh,BoundingBoxHelper:()=>jp,Box2:()=>zd,Box3:()=>ni,Box3Helper:()=>cp,BoxBufferGeometry:()=>ns,BoxGeometry:()=>ns,BoxHelper:()=>lp,BufferAttribute:()=>yr,BufferGeometry:()=>Nr,BufferGeometryLoader:()=>Ou,ByteType:()=>St,Cache:()=>iu,Camera:()=>os,CameraHelper:()=>sp,CanvasRenderer:()=>Kp,CanvasTexture:()=>cc,CatmullRomCurve3:()=>Cc,CineonToneMapping:()=>tt,CircleBufferGeometry:()=>hc,CircleGeometry:()=>hc,ClampToEdgeWrapping:()=>ut,Clock:()=>Qu,Color:()=>Fn,ColorKeyframeTrack:()=>Jh,CompressedTexture:()=>lc,CompressedTextureLoader:()=>hu,ConeBufferGeometry:()=>dc,ConeGeometry:()=>dc,CubeCamera:()=>hs,CubeReflectionMapping:()=>rt,CubeRefractionMapping:()=>st,CubeTexture:()=>us,CubeTextureLoader:()=>du,CubeUVReflectionMapping:()=>lt,CubeUVRefractionMapping:()=>ct,CubicBezierCurve:()=>Dc,CubicBezierCurve3:()=>Ic,CubicInterpolant:()=>Wh,CullFaceBack:()=>a,CullFaceFront:()=>o,CullFaceFrontBack:()=>l,CullFaceNone:()=>s,Curve:()=>_c,CurvePath:()=>Hc,CustomBlending:()=>M,CustomToneMapping:()=>nt,CylinderBufferGeometry:()=>uc,CylinderGeometry:()=>uc,Cylindrical:()=>Id,Data3DTexture:()=>Jn,DataArrayTexture:()=>Xn,DataTexture:()=>Dl,DataTexture2DArray:()=>om,DataTexture3D:()=>lm,DataTextureLoader:()=>pu,DataUtils:()=>xp,DecrementStencilOp:()=>ke,DecrementWrapStencilOp:()=>We,DefaultLoadingManager:()=>su,DepthFormat:()=>Ut,DepthStencilFormat:()=>Ht,DepthTexture:()=>Jo,DirectionalLight:()=>Ru,DirectionalLightHelper:()=>np,DiscreteInterpolant:()=>qh,DodecahedronBufferGeometry:()=>mc,DodecahedronGeometry:()=>mc,DoubleSide:()=>f,DstAlphaFactor:()=>z,DstColorFactor:()=>O,DynamicBufferAttribute:()=>Bp,DynamicCopyUsage:()=>ln,DynamicDrawUsage:()=>en,DynamicReadUsage:()=>sn,EdgesGeometry:()=>xc,EdgesHelper:()=>qp,EllipseCurve:()=>wc,EqualDepth:()=>W,EqualStencilFunc:()=>Ye,EquirectangularReflectionMapping:()=>at,EquirectangularRefractionMapping:()=>ot,Euler:()=>Hi,EventDispatcher:()=>pn,ExtrudeBufferGeometry:()=>gh,ExtrudeGeometry:()=>gh,FaceColors:()=>Mp,FileLoader:()=>lu,FlatShading:()=>g,Float16BufferAttribute:()=>Tr,Float32Attribute:()=>kp,Float32BufferAttribute:()=>Ar,Float64Attribute:()=>Vp,Float64BufferAttribute:()=>Cr,FloatType:()=>Rt,Fog:()=>el,FogExp2:()=>tl,Font:()=>rm,FontLoader:()=>im,FramebufferTexture:()=>oc,FrontSide:()=>p,Frustum:()=>xs,GLBufferAttribute:()=>Cd,GLSL1:()=>hn,GLSL3:()=>un,GreaterDepth:()=>q,GreaterEqualDepth:()=>j,GreaterEqualStencilFunc:()=>Qe,GreaterStencilFunc:()=>Ze,GridHelper:()=>Kd,Group:()=>qo,HalfFloatType:()=>Lt,HemisphereLight:()=>gu,HemisphereLightHelper:()=>Zd,HemisphereLightProbe:()=>qu,IcosahedronBufferGeometry:()=>yh,IcosahedronGeometry:()=>yh,ImageBitmapLoader:()=>ku,ImageLoader:()=>uu,ImageUtils:()=>Hn,ImmediateRenderObject:()=>sm,IncrementStencilOp:()=>Ge,IncrementWrapStencilOp:()=>Ve,InstancedBufferAttribute:()=>Nl,InstancedBufferGeometry:()=>Nu,InstancedInterleavedBuffer:()=>Ad,InstancedMesh:()=>Gl,Int16Attribute:()=>Fp,Int16BufferAttribute:()=>br,Int32Attribute:()=>Hp,Int32BufferAttribute:()=>Sr,Int8Attribute:()=>zp,Int8BufferAttribute:()=>xr,IntType:()=>At,InterleavedBuffer:()=>il,InterleavedBufferAttribute:()=>sl,Interpolant:()=>Vh,InterpolateDiscrete:()=>we,InterpolateLinear:()=>be,InterpolateSmooth:()=>Me,InvertStencilOp:()=>je,JSONLoader:()=>Qp,KeepStencilOp:()=>Ue,KeyframeTrack:()=>Xh,LOD:()=>Sl,LatheBufferGeometry:()=>xh,LatheGeometry:()=>xh,Layers:()=>Gi,LensFlare:()=>tm,LessDepth:()=>k,LessEqualDepth:()=>V,LessEqualStencilFunc:()=>Je,LessStencilFunc:()=>Xe,Light:()=>fu,LightProbe:()=>Iu,Line:()=>Yl,Line3:()=>Fd,LineBasicMaterial:()=>kl,LineCurve:()=>Bc,LineCurve3:()=>zc,LineDashedMaterial:()=>Hh,LineLoop:()=>Ql,LinePieces:()=>wp,LineSegments:()=>Kl,LineStrip:()=>_p,LinearEncoding:()=>De,LinearFilter:()=>yt,LinearInterpolant:()=>jh,LinearMipMapLinearFilter:()=>bt,LinearMipMapNearestFilter:()=>_t,LinearMipmapLinearFilter:()=>wt,LinearMipmapNearestFilter:()=>xt,LinearToneMapping:()=>Q,Loader:()=>au,LoaderUtils:()=>zu,LoadingManager:()=>ru,LoopOnce:()=>ye,LoopPingPong:()=>_e,LoopRepeat:()=>xe,LuminanceAlphaFormat:()=>Ft,LuminanceFormat:()=>Ot,MOUSE:()=>i,Material:()=>mr,MaterialLoader:()=>Bu,Math:()=>En,MathUtils:()=>En,Matrix3:()=>An,Matrix4:()=>Li,MaxEquation:()=>C,Mesh:()=>ts,MeshBasicMaterial:()=>fr,MeshDepthMaterial:()=>Uo,MeshDistanceMaterial:()=>Ho,MeshFaceMaterial:()=>Ep,MeshLambertMaterial:()=>Fh,MeshMatcapMaterial:()=>Uh,MeshNormalMaterial:()=>Oh,MeshPhongMaterial:()=>zh,MeshPhysicalMaterial:()=>Bh,MeshStandardMaterial:()=>Ih,MeshToonMaterial:()=>Nh,MinEquation:()=>A,MirroredRepeatWrapping:()=>dt,MixOperation:()=>J,MultiMaterial:()=>Tp,MultiplyBlending:()=>b,MultiplyOperation:()=>Y,NearestFilter:()=>pt,NearestMipMapLinearFilter:()=>vt,NearestMipMapNearestFilter:()=>ft,NearestMipmapLinearFilter:()=>gt,NearestMipmapNearestFilter:()=>mt,NeverDepth:()=>H,NeverStencilFunc:()=>qe,NoBlending:()=>y,NoColors:()=>bp,NoToneMapping:()=>K,NormalAnimationBlendMode:()=>Ae,NormalBlending:()=>x,NotEqualDepth:()=>X,NotEqualStencilFunc:()=>Ke,NumberKeyframeTrack:()=>Zh,Object3D:()=>er,ObjectLoader:()=>Fu,ObjectSpaceNormalMap:()=>Oe,OctahedronBufferGeometry:()=>_h,OctahedronGeometry:()=>_h,OneFactor:()=>L,OneMinusDstAlphaFactor:()=>N,OneMinusDstColorFactor:()=>F,OneMinusSrcAlphaFactor:()=>B,OneMinusSrcColorFactor:()=>D,OrthographicCamera:()=>Ds,PCFShadowMap:()=>h,PCFSoftShadowMap:()=>u,PMREMGenerator:()=>Hs,ParametricGeometry:()=>em,Particle:()=>Cp,ParticleBasicMaterial:()=>Pp,ParticleSystem:()=>Rp,ParticleSystemMaterial:()=>Dp,Path:()=>Gc,PerspectiveCamera:()=>ls,Plane:()=>gs,PlaneBufferGeometry:()=>bs,PlaneGeometry:()=>bs,PlaneHelper:()=>hp,PointCloud:()=>Ap,PointCloudMaterial:()=>Lp,PointLight:()=>Au,PointLightHelper:()=>qd,Points:()=>rc,PointsMaterial:()=>$l,PolarGridHelper:()=>Qd,PolyhedronBufferGeometry:()=>pc,PolyhedronGeometry:()=>pc,PositionalAudio:()=>hd,PropertyBinding:()=>bd,PropertyMixer:()=>dd,QuadraticBezierCurve:()=>Nc,QuadraticBezierCurve3:()=>Oc,Quaternion:()=>Qn,QuaternionKeyframeTrack:()=>Qh,QuaternionLinearInterpolant:()=>Kh,REVISION:()=>e,RGBADepthPacking:()=>ze,RGBAFormat:()=>Nt,RGBAIntegerFormat:()=>jt,RGBA_ASTC_10x10_Format:()=>me,RGBA_ASTC_10x5_Format:()=>ue,RGBA_ASTC_10x6_Format:()=>de,RGBA_ASTC_10x8_Format:()=>pe,RGBA_ASTC_12x10_Format:()=>fe,RGBA_ASTC_12x12_Format:()=>ge,RGBA_ASTC_4x4_Format:()=>ie,RGBA_ASTC_5x4_Format:()=>re,RGBA_ASTC_5x5_Format:()=>se,RGBA_ASTC_6x5_Format:()=>ae,RGBA_ASTC_6x6_Format:()=>oe,RGBA_ASTC_8x5_Format:()=>le,RGBA_ASTC_8x6_Format:()=>ce,RGBA_ASTC_8x8_Format:()=>he,RGBA_BPTC_Format:()=>ve,RGBA_ETC2_EAC_Format:()=>ne,RGBA_PVRTC_2BPPV1_Format:()=>$t,RGBA_PVRTC_4BPPV1_Format:()=>Qt,RGBA_S3TC_DXT1_Format:()=>Xt,RGBA_S3TC_DXT3_Format:()=>Yt,RGBA_S3TC_DXT5_Format:()=>Jt,RGBFormat:()=>zt,RGB_ETC1_Format:()=>te,RGB_ETC2_Format:()=>ee,RGB_PVRTC_2BPPV1_Format:()=>Kt,RGB_PVRTC_4BPPV1_Format:()=>Zt,RGB_S3TC_DXT1_Format:()=>qt,RGFormat:()=>Vt,RGIntegerFormat:()=>Wt,RawShaderMaterial:()=>Dh,Ray:()=>Ri,Raycaster:()=>Rd,RectAreaLight:()=>Pu,RedFormat:()=>Gt,RedIntegerFormat:()=>kt,ReinhardToneMapping:()=>$,RepeatWrapping:()=>ht,ReplaceStencilOp:()=>He,ReverseSubtractEquation:()=>T,RingBufferGeometry:()=>wh,RingGeometry:()=>wh,Scene:()=>nl,SceneUtils:()=>$p,ShaderChunk:()=>Ms,ShaderLib:()=>Es,ShaderMaterial:()=>as,ShadowMaterial:()=>Ph,Shape:()=>kc,ShapeBufferGeometry:()=>bh,ShapeGeometry:()=>bh,ShapePath:()=>gp,ShapeUtils:()=>ph,ShortType:()=>Et,Skeleton:()=>zl,SkeletonHelper:()=>Wd,SkinnedMesh:()=>Ll,SmoothShading:()=>v,Sphere:()=>wi,SphereBufferGeometry:()=>Mh,SphereGeometry:()=>Mh,Spherical:()=>Dd,SphericalHarmonics3:()=>Du,SplineCurve:()=>Fc,SpotLight:()=>bu,SpotLightHelper:()=>Hd,Sprite:()=>_l,SpriteMaterial:()=>al,SrcAlphaFactor:()=>I,SrcAlphaSaturateFactor:()=>U,SrcColorFactor:()=>P,StaticCopyUsage:()=>on,StaticDrawUsage:()=>tn,StaticReadUsage:()=>rn,StereoCamera:()=>Ku,StreamCopyUsage:()=>cn,StreamDrawUsage:()=>nn,StreamReadUsage:()=>an,StringKeyframeTrack:()=>$h,SubtractEquation:()=>E,SubtractiveBlending:()=>w,TOUCH:()=>r,TangentSpaceNormalMap:()=>Ne,TetrahedronBufferGeometry:()=>Sh,TetrahedronGeometry:()=>Sh,TextGeometry:()=>nm,Texture:()=>Wn,TextureLoader:()=>mu,TorusBufferGeometry:()=>Eh,TorusGeometry:()=>Eh,TorusKnotBufferGeometry:()=>Th,TorusKnotGeometry:()=>Th,Triangle:()=>dr,TriangleFanDrawMode:()=>Pe,TriangleStripDrawMode:()=>Le,TrianglesDrawMode:()=>Re,TubeBufferGeometry:()=>Ah,TubeGeometry:()=>Ah,UVMapping:()=>it,Uint16Attribute:()=>Up,Uint16BufferAttribute:()=>Mr,Uint32Attribute:()=>Gp,Uint32BufferAttribute:()=>Er,Uint8Attribute:()=>Np,Uint8BufferAttribute:()=>_r,Uint8ClampedAttribute:()=>Op,Uint8ClampedBufferAttribute:()=>wr,Uniform:()=>Td,UniformsLib:()=>Ss,UniformsUtils:()=>ss,UnsignedByteType:()=>Mt,UnsignedInt248Type:()=>It,UnsignedIntType:()=>Ct,UnsignedShort4444Type:()=>Pt,UnsignedShort5551Type:()=>Dt,UnsignedShortType:()=>Tt,VSMShadowMap:()=>d,Vector2:()=>Tn,Vector3:()=>$n,Vector4:()=>jn,VectorKeyframeTrack:()=>tu,Vertex:()=>Ip,VertexColors:()=>Sp,VideoTexture:()=>ac,WebGL1Renderer:()=>$o,WebGL3DRenderTarget:()=>Zn,WebGLArrayRenderTarget:()=>Yn,WebGLCubeRenderTarget:()=>ds,WebGLMultipleRenderTargets:()=>Kn,WebGLMultisampleRenderTarget:()=>am,WebGLRenderTarget:()=>qn,WebGLRenderTargetCube:()=>Zp,WebGLRenderer:()=>Qo,WebGLUtils:()=>Wo,WireframeGeometry:()=>Ch,WireframeHelper:()=>Xp,WrapAroundEnding:()=>Te,XHRLoader:()=>Yp,ZeroCurvatureEnding:()=>Se,ZeroFactor:()=>R,ZeroSlopeEnding:()=>Ee,ZeroStencilOp:()=>Fe,_SRGBAFormat:()=>dn,sRGBEncoding:()=>Ie});const e="138",i={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},r={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},s=0,a=1,o=2,l=3,c=0,h=1,u=2,d=3,p=0,m=1,f=2,g=1,v=2,y=0,x=1,_=2,w=3,b=4,M=5,S=100,E=101,T=102,A=103,C=104,R=200,L=201,P=202,D=203,I=204,B=205,z=206,N=207,O=208,F=209,U=210,H=0,G=1,k=2,V=3,W=4,j=5,q=6,X=7,Y=0,J=1,Z=2,K=0,Q=1,$=2,tt=3,et=4,nt=5,it=300,rt=301,st=302,at=303,ot=304,lt=306,ct=307,ht=1e3,ut=1001,dt=1002,pt=1003,mt=1004,ft=1004,gt=1005,vt=1005,yt=1006,xt=1007,_t=1007,wt=1008,bt=1008,Mt=1009,St=1010,Et=1011,Tt=1012,At=1013,Ct=1014,Rt=1015,Lt=1016,Pt=1017,Dt=1018,It=1020,Bt=1021,zt=1022,Nt=1023,Ot=1024,Ft=1025,Ut=1026,Ht=1027,Gt=1028,kt=1029,Vt=1030,Wt=1031,jt=1033,qt=33776,Xt=33777,Yt=33778,Jt=33779,Zt=35840,Kt=35841,Qt=35842,$t=35843,te=36196,ee=37492,ne=37496,ie=37808,re=37809,se=37810,ae=37811,oe=37812,le=37813,ce=37814,he=37815,ue=37816,de=37817,pe=37818,me=37819,fe=37820,ge=37821,ve=36492,ye=2200,xe=2201,_e=2202,we=2300,be=2301,Me=2302,Se=2400,Ee=2401,Te=2402,Ae=2500,Ce=2501,Re=0,Le=1,Pe=2,De=3e3,Ie=3001,Be=3200,ze=3201,Ne=0,Oe=1,Fe=0,Ue=7680,He=7681,Ge=7682,ke=7683,Ve=34055,We=34056,je=5386,qe=512,Xe=513,Ye=514,Je=515,Ze=516,Ke=517,Qe=518,$e=519,tn=35044,en=35048,nn=35040,rn=35045,sn=35049,an=35041,on=35046,ln=35050,cn=35042,hn="100",un="300 es",dn=1035;class pn{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const mn=[];for(let t=0;t<256;t++)mn[t]=(t<16?"0":"")+t.toString(16);let fn=1234567;const gn=Math.PI/180,vn=180/Math.PI;function yn(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(mn[255&t]+mn[t>>8&255]+mn[t>>16&255]+mn[t>>24&255]+"-"+mn[255&e]+mn[e>>8&255]+"-"+mn[e>>16&15|64]+mn[e>>24&255]+"-"+mn[63&n|128]+mn[n>>8&255]+"-"+mn[n>>16&255]+mn[n>>24&255]+mn[255&i]+mn[i>>8&255]+mn[i>>16&255]+mn[i>>24&255]).toUpperCase()}function xn(t,e,n){return Math.max(e,Math.min(n,t))}function _n(t,e){return(t%e+e)%e}function wn(t,e,n){return(1-n)*t+n*e}function bn(t){return 0==(t&t-1)&&0!==t}function Mn(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function Sn(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}var En=Object.freeze({__proto__:null,DEG2RAD:gn,RAD2DEG:vn,generateUUID:yn,clamp:xn,euclideanModulo:_n,mapLinear:function(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)},inverseLerp:function(t,e,n){return t!==e?(n-t)/(e-t):0},lerp:wn,damp:function(t,e,n,i){return wn(t,e,1-Math.exp(-n*i))},pingpong:function(t,e=1){return e-Math.abs(_n(t,2*e)-e)},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){return void 0!==t&&(fn=t%2147483647),fn=16807*fn%2147483647,(fn-1)/2147483646},degToRad:function(t){return t*gn},radToDeg:function(t){return t*vn},isPowerOfTwo:bn,ceilPowerOfTwo:Mn,floorPowerOfTwo:Sn,setQuaternionFromProperEuler:function(t,e,n,i,r){const s=Math.cos,a=Math.sin,o=s(n/2),l=a(n/2),c=s((e+i)/2),h=a((e+i)/2),u=s((e-i)/2),d=a((e-i)/2),p=s((i-e)/2),m=a((i-e)/2);switch(r){case"XYX":t.set(o*h,l*u,l*d,o*c);break;case"YZY":t.set(l*d,o*h,l*u,o*c);break;case"ZXZ":t.set(l*u,l*d,o*h,o*c);break;case"XZX":t.set(o*h,l*m,l*p,o*c);break;case"YXY":t.set(l*p,o*h,l*m,o*c);break;case"ZYZ":t.set(l*m,l*p,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}});class Tn{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*n-s*i+t.x,this.y=r*i+s*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}Tn.prototype.isVector2=!0;class An{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],m=i[0],f=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],w=i[5],b=i[8];return r[0]=s*m+a*v+o*_,r[3]=s*f+a*y+o*w,r[6]=s*g+a*x+o*b,r[1]=l*m+c*v+h*_,r[4]=l*f+c*y+h*w,r[7]=l*g+c*x+h*b,r[2]=u*m+d*v+p*_,r[5]=u*f+d*y+p*w,r[8]=u*g+d*x+p*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=h*m,t[1]=(i*l-c*n)*m,t[2]=(a*n-i*s)*m,t[3]=u*m,t[4]=(c*e-i*o)*m,t[5]=(i*r-a*e)*m,t[6]=d*m,t[7]=(n*o-l*e)*m,t[8]=(s*e-n*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*s+l*a)+s+t,-i*l,i*o,-i*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],s=i[3],a=i[6],o=i[1],l=i[4],c=i[7];return i[0]=e*r+n*o,i[3]=e*s+n*l,i[6]=e*a+n*c,i[1]=-n*r+e*o,i[4]=-n*s+e*l,i[7]=-n*a+e*c,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}function Cn(t){for(let e=t.length-1;e>=0;--e)if(t[e]>65535)return!0;return!1}An.prototype.isMatrix3=!0;const Rn={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ln(t,e){return new Rn[t](e)}function Pn(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}const Dn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},In={h:0,s:0,l:0},Bn={h:0,s:0,l:0};function zn(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function Nn(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function On(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Fn{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=_n(t,1),e=xn(e,0,1),n=xn(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=zn(r,i,t+1/3),this.g=zn(r,i,t),this.b=zn(r,i,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const i=n[1],r=n[2];switch(i){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){const n=parseFloat(t[1])/360,i=parseInt(t[2],10)/100,r=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,i,r)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Dn[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Nn(t.r),this.g=Nn(t.g),this.b=Nn(t.b),this}copyLinearToSRGB(t){return this.r=On(t.r),this.g=On(t.g),this.b=On(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,i=this.b,r=Math.max(e,n,i),s=Math.min(e,n,i);let a,o;const l=(s+r)/2;if(s===r)a=0,o=0;else{const t=r-s;switch(o=l<=.5?t/(r+s):t/(2-r-s),r){case e:a=(n-i)/t+(n<i?6:0);break;case n:a=(i-e)/t+2;break;case i:a=(e-n)/t+4}a/=6}return t.h=a,t.s=o,t.l=l,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,n){return this.getHSL(In),In.h+=t,In.s+=e,In.l+=n,this.setHSL(In.h,In.s,In.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(In),t.getHSL(Bn);const n=wn(In.h,Bn.h,e),i=wn(In.s,Bn.s,e),r=wn(In.l,Bn.l,e);return this.setHSL(n,i,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}let Un;Fn.NAMES=Dn,Fn.prototype.isColor=!0,Fn.prototype.r=1,Fn.prototype.g=1,Fn.prototype.b=1;class Hn{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Un&&(Un=Pn("canvas")),Un.width=t.width,Un.height=t.height;const n=Un.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Un}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Pn("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*Nn(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*Nn(e[t]/255)):e[t]=Nn(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class Gn{constructor(t=null){this.uuid=yn(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(kn(i[e].image)):t.push(kn(i[e]))}else t=kn(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function kn(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?Hn.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}Gn.prototype.isSource=!0;let Vn=0;class Wn extends pn{constructor(t=Wn.DEFAULT_IMAGE,e=Wn.DEFAULT_MAPPING,n=ut,i=ut,r=yt,s=wt,a=Nt,o=Mt,l=1,c=De){super(),Object.defineProperty(this,"id",{value:Vn++}),this.uuid=yn(),this.name="",this.source=new Gn(t),this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Tn(0,0),this.repeat=new Tn(1,1),this.center=new Tn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new An,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==it)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case ht:t.x=t.x-Math.floor(t.x);break;case ut:t.x=t.x<0?0:1;break;case dt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case ht:t.y=t.y-Math.floor(t.y);break;case ut:t.y=t.y<0?0:1;break;case dt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}Wn.DEFAULT_IMAGE=null,Wn.DEFAULT_MAPPING=it,Wn.prototype.isTexture=!0;class jn{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-m)<s&&Math.abs(p-f)<s){if(Math.abs(c+u)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,y=(c+u)/4,x=(h+m)/4,_=(p+f)/4;return t>o&&t>v?t<s?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=y/n,r=x/n):o>v?o<s?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=y/i,r=_/i):v<s?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=_/r),this.set(n,i,r,e),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}jn.prototype.isVector4=!0;class qn extends pn{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new jn(0,0,t,e),this.scissorTest=!1,this.viewport=new jn(0,0,t,e);const i={width:t,height:e,depth:1};this.texture=new Wn(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:yt,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image=Object.assign({},t.texture.image),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}qn.prototype.isWebGLRenderTarget=!0;class Xn extends Wn{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=pt,this.minFilter=pt,this.wrapR=ut,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Xn.prototype.isDataArrayTexture=!0;class Yn extends qn{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new Xn(null,t,e,n),this.texture.isRenderTargetTexture=!0}}Yn.prototype.isWebGLArrayRenderTarget=!0;class Jn extends Wn{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=pt,this.minFilter=pt,this.wrapR=ut,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Jn.prototype.isData3DTexture=!0;class Zn extends qn{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new Jn(null,t,e,n),this.texture.isRenderTargetTexture=!0}}Zn.prototype.isWebGL3DRenderTarget=!0;class Kn extends qn{constructor(t,e,n,i={}){super(t,e,i);const r=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=r.clone(),this.texture[t].isRenderTargetTexture=!0}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=t,this.texture[i].image.height=e,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}Kn.prototype.isWebGLMultipleRenderTargets=!0;class Qn{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}static slerp(t,e,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[s+0],d=r[s+1],p=r[s+2],m=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(h!==m||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*m,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),s=Math.atan2(r,e*n);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=t._x,i=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(n/2),c=a(i/2),h=a(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-i)*t}else if(n>a&&n>h){const t=2*Math.sqrt(1+n-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-n-h);this._w=(r-l)/t,this._x=(i+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-a);this._w=(s-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(xn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+s*a+i*l-r*o,this._y=i*c+s*o+r*a-n*l,this._z=r*c+s*l+n*o-i*a,this._w=s*c-n*a-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random(),e=Math.sqrt(1-t),n=Math.sqrt(t),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Qn.prototype.isQuaternion=!0;class $n{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(ei.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ei.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=o*e+s*i-a*n,c=o*n+a*e-r*i,h=o*i+r*n-s*e,u=-r*e-s*n-a*i;return this.x=l*o+u*-r+c*-a-h*-s,this.y=c*o+u*-s+h*-r-l*-a,this.z=h*o+u*-a+l*-s-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=i*o-r*a,this.y=r*s-n*o,this.z=n*a-i*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return ti.copy(this).projectOnVector(t),this.sub(ti)}reflect(t){return this.sub(ti.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(xn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,n=Math.sqrt(1-t**2);return this.x=n*Math.cos(e),this.y=n*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}$n.prototype.isVector3=!0;const ti=new $n,ei=new Qn;class ni{constructor(t=new $n(1/0,1/0,1/0),e=new $n(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromBufferAttribute(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=ri.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n)if(e&&null!=n.attributes&&void 0!==n.attributes.position){const e=n.attributes.position;for(let n=0,i=e.count;n<i;n++)ri.fromBufferAttribute(e,n).applyMatrix4(t.matrixWorld),this.expandByPoint(ri)}else null===n.boundingBox&&n.computeBoundingBox(),si.copy(n.boundingBox),si.applyMatrix4(t.matrixWorld),this.union(si);const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,ri),ri.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(di),pi.subVectors(this.max,di),ai.subVectors(t.a,di),oi.subVectors(t.b,di),li.subVectors(t.c,di),ci.subVectors(oi,ai),hi.subVectors(li,oi),ui.subVectors(ai,li);let e=[0,-ci.z,ci.y,0,-hi.z,hi.y,0,-ui.z,ui.y,ci.z,0,-ci.x,hi.z,0,-hi.x,ui.z,0,-ui.x,-ci.y,ci.x,0,-hi.y,hi.x,0,-ui.y,ui.x,0];return!!gi(e,ai,oi,li,pi)&&(e=[1,0,0,0,1,0,0,0,1],!!gi(e,ai,oi,li,pi)&&(mi.crossVectors(ci,hi),e=[mi.x,mi.y,mi.z],gi(e,ai,oi,li,pi)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return ri.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(ri).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(ii[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ii[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ii[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ii[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ii[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ii[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ii[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ii[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ii)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}ni.prototype.isBox3=!0;const ii=[new $n,new $n,new $n,new $n,new $n,new $n,new $n,new $n],ri=new $n,si=new ni,ai=new $n,oi=new $n,li=new $n,ci=new $n,hi=new $n,ui=new $n,di=new $n,pi=new $n,mi=new $n,fi=new $n;function gi(t,e,n,i,r){for(let s=0,a=t.length-3;s<=a;s+=3){fi.fromArray(t,s);const a=r.x*Math.abs(fi.x)+r.y*Math.abs(fi.y)+r.z*Math.abs(fi.z),o=e.dot(fi),l=n.dot(fi),c=i.dot(fi);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const vi=new ni,yi=new $n,xi=new $n,_i=new $n;class wi{constructor(t=new $n,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):vi.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){_i.subVectors(t,this.center);const e=_i.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(_i.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return!0===this.center.equals(t.center)?xi.set(0,0,1).multiplyScalar(t.radius):xi.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(yi.copy(t.center).add(xi)),this.expandByPoint(yi.copy(t.center).sub(xi)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const bi=new $n,Mi=new $n,Si=new $n,Ei=new $n,Ti=new $n,Ai=new $n,Ci=new $n;class Ri{constructor(t=new $n,e=new $n(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,bi)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=bi.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(bi.copy(this.direction).multiplyScalar(e).add(this.origin),bi.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Mi.copy(t).add(e).multiplyScalar(.5),Si.copy(e).sub(t).normalize(),Ei.copy(this.origin).sub(Mi);const r=.5*t.distanceTo(e),s=-this.direction.dot(Si),a=Ei.dot(this.direction),o=-Ei.dot(Si),l=Ei.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(Si).multiplyScalar(u).add(Mi),d}intersectSphere(t,e){bi.subVectors(t.center,this.origin);const n=bi.dot(this.direction),i=bi.dot(bi)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,o=n+s;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),n>s||r>i?null:((r>n||n!=n)&&(n=r),(s<i||i!=i)&&(i=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,bi)}intersectTriangle(t,e,n,i,r){Ti.subVectors(e,t),Ai.subVectors(n,t),Ci.crossVectors(Ti,Ai);let s,a=this.direction.dot(Ci);if(a>0){if(i)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}Ei.subVectors(this.origin,t);const o=s*this.direction.dot(Ai.crossVectors(Ei,Ai));if(o<0)return null;const l=s*this.direction.dot(Ti.cross(Ei));if(l<0)return null;if(o+l>a)return null;const c=-s*Ei.dot(Ci);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Li{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l,c,h,u,d,p,m,f){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Li).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Pi.setFromMatrixColumn(t,0).length(),r=1/Pi.setFromMatrixColumn(t,1).length(),s=1/Pi.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*s,e[9]=n[9]*s,e[10]=n[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),a=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*a,e[4]=i*a-n,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=n*a-i,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=i+n*a,e[1]=n+i*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Ii,t,Bi)}lookAt(t,e,n){const i=this.elements;return Oi.subVectors(t,e),0===Oi.lengthSq()&&(Oi.z=1),Oi.normalize(),zi.crossVectors(n,Oi),0===zi.lengthSq()&&(1===Math.abs(n.z)?Oi.x+=1e-4:Oi.z+=1e-4,Oi.normalize(),zi.crossVectors(n,Oi)),zi.normalize(),Ni.crossVectors(Oi,zi),i[0]=zi.x,i[4]=Ni.x,i[8]=Oi.x,i[1]=zi.y,i[5]=Ni.y,i[9]=Oi.y,i[2]=zi.z,i[6]=Ni.z,i[10]=Oi.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],m=n[6],f=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],w=i[0],b=i[4],M=i[8],S=i[12],E=i[1],T=i[5],A=i[9],C=i[13],R=i[2],L=i[6],P=i[10],D=i[14],I=i[3],B=i[7],z=i[11],N=i[15];return r[0]=s*w+a*E+o*R+l*I,r[4]=s*b+a*T+o*L+l*B,r[8]=s*M+a*A+o*P+l*z,r[12]=s*S+a*C+o*D+l*N,r[1]=c*w+h*E+u*R+d*I,r[5]=c*b+h*T+u*L+d*B,r[9]=c*M+h*A+u*P+d*z,r[13]=c*S+h*C+u*D+d*N,r[2]=p*w+m*E+f*R+g*I,r[6]=p*b+m*T+f*L+g*B,r[10]=p*M+m*A+f*P+g*z,r[14]=p*S+m*C+f*D+g*N,r[3]=v*w+y*E+x*R+_*I,r[7]=v*b+y*T+x*L+_*B,r[11]=v*M+y*A+x*P+_*z,r[15]=v*S+y*C+x*D+_*N,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*a*u+n*l*u+i*a*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-i*s*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+n*s*d+r*a*c-n*l*c)+t[15]*(-i*a*c-e*o*h+e*a*u+i*s*h-n*s*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15],v=h*f*l-m*u*l+m*o*d-a*f*d-h*o*g+a*u*g,y=p*u*l-c*f*l-p*o*d+s*f*d+c*o*g-s*u*g,x=c*m*l-p*h*l+p*a*d-s*m*d-c*a*g+s*h*g,_=p*h*o-c*m*o-p*a*u+s*m*u+c*a*f-s*h*f,w=e*v+n*y+i*x+r*_;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/w;return t[0]=v*b,t[1]=(m*u*r-h*f*r-m*i*d+n*f*d+h*i*g-n*u*g)*b,t[2]=(a*f*r-m*o*r+m*i*l-n*f*l-a*i*g+n*o*g)*b,t[3]=(h*o*r-a*u*r-h*i*l+n*u*l+a*i*d-n*o*d)*b,t[4]=y*b,t[5]=(c*f*r-p*u*r+p*i*d-e*f*d-c*i*g+e*u*g)*b,t[6]=(p*o*r-s*f*r-p*i*l+e*f*l+s*i*g-e*o*g)*b,t[7]=(s*u*r-c*o*r+c*i*l-e*u*l-s*i*d+e*o*d)*b,t[8]=x*b,t[9]=(p*h*r-c*m*r-p*n*d+e*m*d+c*n*g-e*h*g)*b,t[10]=(s*m*r-p*a*r+p*n*l-e*m*l-s*n*g+e*a*g)*b,t[11]=(c*a*r-s*h*r-c*n*l+e*h*l+s*n*d-e*a*d)*b,t[12]=_*b,t[13]=(c*m*i-p*h*i+p*n*u-e*m*u-c*n*f+e*h*f)*b,t[14]=(p*a*i-s*m*i-p*n*o+e*m*o+s*n*f-e*a*f)*b,t[15]=(s*h*i-c*a*i+c*n*o-e*h*o-s*n*u+e*a*u)*b,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,s){return this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,m=s*c,f=s*h,g=a*h,v=o*l,y=o*c,x=o*h,_=n.x,w=n.y,b=n.z;return i[0]=(1-(m+g))*_,i[1]=(d+x)*_,i[2]=(p-y)*_,i[3]=0,i[4]=(d-x)*w,i[5]=(1-(u+g))*w,i[6]=(f+v)*w,i[7]=0,i[8]=(p+y)*b,i[9]=(f-v)*b,i[10]=(1-(u+m))*b,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=Pi.set(i[0],i[1],i[2]).length();const s=Pi.set(i[4],i[5],i[6]).length(),a=Pi.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],Di.copy(this);const o=1/r,l=1/s,c=1/a;return Di.elements[0]*=o,Di.elements[1]*=o,Di.elements[2]*=o,Di.elements[4]*=l,Di.elements[5]*=l,Di.elements[6]*=l,Di.elements[8]*=c,Di.elements[9]*=c,Di.elements[10]*=c,e.setFromRotationMatrix(Di),n.x=r,n.y=s,n.z=a,this}makePerspective(t,e,n,i,r,s){void 0===s&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,o=2*r/(e-t),l=2*r/(n-i),c=(e+t)/(e-t),h=(n+i)/(n-i),u=-(s+r)/(s-r),d=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,n,i,r,s){const a=this.elements,o=1/(e-t),l=1/(n-i),c=1/(s-r),h=(e+t)*o,u=(n+i)*l,d=(s+r)*c;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*c,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}Li.prototype.isMatrix4=!0;const Pi=new $n,Di=new Li,Ii=new $n(0,0,0),Bi=new $n(1,1,1),zi=new $n,Ni=new $n,Oi=new $n,Fi=new Li,Ui=new Qn;class Hi{constructor(t=0,e=0,n=0,i=Hi.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],s=i[4],a=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(xn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-xn(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(xn(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-xn(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(xn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-xn(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Fi.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Fi,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Ui.setFromEuler(this),this.setFromQuaternion(Ui,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Hi.prototype.isEuler=!0,Hi.DefaultOrder="XYZ",Hi.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Gi{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let ki=0;const Vi=new $n,Wi=new Qn,ji=new Li,qi=new $n,Xi=new $n,Yi=new $n,Ji=new Qn,Zi=new $n(1,0,0),Ki=new $n(0,1,0),Qi=new $n(0,0,1),$i={type:"added"},tr={type:"removed"};class er extends pn{constructor(){super(),Object.defineProperty(this,"id",{value:ki++}),this.uuid=yn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=er.DefaultUp.clone();const t=new $n,e=new Hi,n=new Qn,i=new $n(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Li},normalMatrix:{value:new An}}),this.matrix=new Li,this.matrixWorld=new Li,this.matrixAutoUpdate=er.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Gi,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Wi.setFromAxisAngle(t,e),this.quaternion.multiply(Wi),this}rotateOnWorldAxis(t,e){return Wi.setFromAxisAngle(t,e),this.quaternion.premultiply(Wi),this}rotateX(t){return this.rotateOnAxis(Zi,t)}rotateY(t){return this.rotateOnAxis(Ki,t)}rotateZ(t){return this.rotateOnAxis(Qi,t)}translateOnAxis(t,e){return Vi.copy(t).applyQuaternion(this.quaternion),this.position.add(Vi.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Zi,t)}translateY(t){return this.translateOnAxis(Ki,t)}translateZ(t){return this.translateOnAxis(Qi,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(ji.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?qi.copy(t):qi.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Xi.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ji.lookAt(Xi,qi,this.up):ji.lookAt(qi,Xi,this.up),this.quaternion.setFromRotationMatrix(ji),i&&(ji.extractRotation(i.matrixWorld),Wi.setFromRotationMatrix(ji),this.quaternion.premultiply(Wi.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent($i)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(tr)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(tr)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),ji.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),ji.multiply(t.parent.matrixWorld)),t.applyMatrix4(ji),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Xi,t,Yi),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Xi,Ji,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=s(t.geometries),i=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function s(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}er.DefaultUp=new $n(0,1,0),er.DefaultMatrixAutoUpdate=!0,er.prototype.isObject3D=!0;const nr=new $n,ir=new $n,rr=new $n,sr=new $n,ar=new $n,or=new $n,lr=new $n,cr=new $n,hr=new $n,ur=new $n;class dr{constructor(t=new $n,e=new $n,n=new $n){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),nr.subVectors(t,e),i.cross(nr);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){nr.subVectors(i,e),ir.subVectors(n,e),rr.subVectors(t,e);const s=nr.dot(nr),a=nr.dot(ir),o=nr.dot(rr),l=ir.dot(ir),c=ir.dot(rr),h=s*l-a*a;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,sr),sr.x>=0&&sr.y>=0&&sr.x+sr.y<=1}static getUV(t,e,n,i,r,s,a,o){return this.getBarycoord(t,e,n,i,sr),o.set(0,0),o.addScaledVector(r,sr.x),o.addScaledVector(s,sr.y),o.addScaledVector(a,sr.z),o}static isFrontFacing(t,e,n,i){return nr.subVectors(n,e),ir.subVectors(t,e),nr.cross(ir).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return nr.subVectors(this.c,this.b),ir.subVectors(this.a,this.b),.5*nr.cross(ir).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return dr.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return dr.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return dr.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return dr.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return dr.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;ar.subVectors(i,n),or.subVectors(r,n),cr.subVectors(t,n);const o=ar.dot(cr),l=or.dot(cr);if(o<=0&&l<=0)return e.copy(n);hr.subVectors(t,i);const c=ar.dot(hr),h=or.dot(hr);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(n).addScaledVector(ar,s);ur.subVectors(t,r);const d=ar.dot(ur),p=or.dot(ur);if(p>=0&&d<=p)return e.copy(r);const m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(n).addScaledVector(or,a);const f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return lr.subVectors(r,i),a=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(lr,a);const g=1/(f+m+u);return s=m*g,a=u*g,e.copy(n).addScaledVector(ar,s).addScaledVector(or,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let pr=0;class mr extends pn{constructor(){super(),Object.defineProperty(this,"id",{value:pr++}),this.uuid=yn(),this.name="",this.type="Material",this.fog=!0,this.blending=x,this.side=p,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=I,this.blendDst=B,this.blendEquation=S,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=V,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=$e,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Ue,this.stencilZFail=Ue,this.stencilZPass=Ue,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===g;continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==x&&(n.blending=this.blending),this.side!==p&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}mr.prototype.isMaterial=!0,mr.fromType=function(){return null};class fr extends mr{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new Fn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}fr.prototype.isMeshBasicMaterial=!0;const gr=new $n,vr=new Tn;class yr{constructor(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=tn,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new Fn),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new Tn),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new $n),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new jn),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)vr.fromBufferAttribute(this,e),vr.applyMatrix3(t),this.setXY(e,vr.x,vr.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)gr.fromBufferAttribute(this,e),gr.applyMatrix3(t),this.setXYZ(e,gr.x,gr.y,gr.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)gr.x=this.getX(e),gr.y=this.getY(e),gr.z=this.getZ(e),gr.applyMatrix4(t),this.setXYZ(e,gr.x,gr.y,gr.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)gr.x=this.getX(e),gr.y=this.getY(e),gr.z=this.getZ(e),gr.applyNormalMatrix(t),this.setXYZ(e,gr.x,gr.y,gr.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)gr.x=this.getX(e),gr.y=this.getY(e),gr.z=this.getZ(e),gr.transformDirection(t),this.setXYZ(e,gr.x,gr.y,gr.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==tn&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}yr.prototype.isBufferAttribute=!0;class xr extends yr{constructor(t,e,n){super(new Int8Array(t),e,n)}}class _r extends yr{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class wr extends yr{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class br extends yr{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Mr extends yr{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Sr extends yr{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Er extends yr{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Tr extends yr{constructor(t,e,n){super(new Uint16Array(t),e,n)}}Tr.prototype.isFloat16BufferAttribute=!0;class Ar extends yr{constructor(t,e,n){super(new Float32Array(t),e,n)}}class Cr extends yr{constructor(t,e,n){super(new Float64Array(t),e,n)}}let Rr=0;const Lr=new Li,Pr=new er,Dr=new $n,Ir=new ni,Br=new ni,zr=new $n;class Nr extends pn{constructor(){super(),Object.defineProperty(this,"id",{value:Rr++}),this.uuid=yn(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Cn(t)?Er:Mr)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new An).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Lr.makeRotationFromQuaternion(t),this.applyMatrix4(Lr),this}rotateX(t){return Lr.makeRotationX(t),this.applyMatrix4(Lr),this}rotateY(t){return Lr.makeRotationY(t),this.applyMatrix4(Lr),this}rotateZ(t){return Lr.makeRotationZ(t),this.applyMatrix4(Lr),this}translate(t,e,n){return Lr.makeTranslation(t,e,n),this.applyMatrix4(Lr),this}scale(t,e,n){return Lr.makeScale(t,e,n),this.applyMatrix4(Lr),this}lookAt(t){return Pr.lookAt(t),Pr.updateMatrix(),this.applyMatrix4(Pr.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Dr).negate(),this.translate(Dr.x,Dr.y,Dr.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new Ar(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ni);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new $n(-1/0,-1/0,-1/0),new $n(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Ir.setFromBufferAttribute(n),this.morphTargetsRelative?(zr.addVectors(this.boundingBox.min,Ir.min),this.boundingBox.expandByPoint(zr),zr.addVectors(this.boundingBox.max,Ir.max),this.boundingBox.expandByPoint(zr)):(this.boundingBox.expandByPoint(Ir.min),this.boundingBox.expandByPoint(Ir.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new wi);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new $n,1/0);if(t){const n=this.boundingSphere.center;if(Ir.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Br.setFromBufferAttribute(n),this.morphTargetsRelative?(zr.addVectors(Ir.min,Br.min),Ir.expandByPoint(zr),zr.addVectors(Ir.max,Br.max),Ir.expandByPoint(zr)):(Ir.expandByPoint(Br.min),Ir.expandByPoint(Br.max))}Ir.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)zr.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(zr));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)zr.fromBufferAttribute(s,e),a&&(Dr.fromBufferAttribute(t,e),zr.add(Dr)),i=Math.max(i,n.distanceToSquared(zr))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.array,i=e.position.array,r=e.normal.array,s=e.uv.array,a=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new yr(new Float32Array(4*a),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<a;t++)l[t]=new $n,c[t]=new $n;const h=new $n,u=new $n,d=new $n,p=new Tn,m=new Tn,f=new Tn,g=new $n,v=new $n;function y(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(s,2*t),m.fromArray(s,2*e),f.fromArray(s,2*n),u.sub(h),d.sub(h),m.sub(p),f.sub(p);const r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(u).multiplyScalar(f.y).addScaledVector(d,-m.y).multiplyScalar(r),v.copy(d).multiplyScalar(m.x).addScaledVector(u,-f.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(v),c[e].add(v),c[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const _=new $n,w=new $n,b=new $n,M=new $n;function S(t){b.fromArray(r,3*t),M.copy(b);const e=l[t];_.copy(e),_.sub(b.multiplyScalar(b.dot(e))).normalize(),w.crossVectors(M,e);const n=w.dot(c[t])<0?-1:1;o[4*t]=_.x,o[4*t+1]=_.y,o[4*t+2]=_.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new yr(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new $n,r=new $n,s=new $n,a=new $n,o=new $n,l=new $n,c=new $n,h=new $n;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,m),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),a.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,m),a.add(c),o.add(c),l.add(c),n.setXYZ(d,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(void 0===t.attributes[i])continue;const r=n[i].array,s=t.attributes[i],a=s.array,o=s.itemSize*e,l=Math.min(a.length,r.length-o);for(let t=0,e=o;t<l;t++,e++)r[e]=a[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)zr.fromBufferAttribute(t,e),zr.normalize(),t.setXYZ(e,zr.x,zr.y,zr.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,s=new n.constructor(e.length*i);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)s[o++]=n[a++]}return new yr(s,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Nr,n=this.index.array,i=this.attributes;for(const r in i){const s=t(i[r],n);e.setAttribute(r,s)}const r=this.morphAttributes;for(const i in r){const s=[],a=r[i];for(let e=0,i=a.length;e<i;e++){const i=t(a[e],n);s.push(i)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,n=s.length;t<n;t++){const n=s[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],s=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];s.push(i.toJSON(t.data))}s.length>0&&(i[e]=s,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Nr.prototype.isBufferGeometry=!0;const Or=new Li,Fr=new Ri,Ur=new wi,Hr=new $n,Gr=new $n,kr=new $n,Vr=new $n,Wr=new $n,jr=new $n,qr=new $n,Xr=new $n,Yr=new $n,Jr=new Tn,Zr=new Tn,Kr=new Tn,Qr=new $n,$r=new $n;class ts extends er{constructor(t=new Nr,e=new fr){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),Ur.copy(n.boundingSphere),Ur.applyMatrix4(r),!1===t.ray.intersectsSphere(Ur))return;if(Or.copy(r).invert(),Fr.copy(t.ray).applyMatrix4(Or),null!==n.boundingBox&&!1===Fr.intersectsBox(n.boundingBox))return;let s;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,c=n.attributes.uv,h=n.attributes.uv2,u=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(i))for(let n=0,p=u.length;n<p;n++){const p=u[n],m=i[p.materialIndex];for(let n=Math.max(p.start,d.start),i=Math.min(r.count,Math.min(p.start+p.count,d.start+d.count));n<i;n+=3){const i=r.getX(n),u=r.getX(n+1),d=r.getX(n+2);s=es(this,m,t,Fr,a,o,l,c,h,i,u,d),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=p.materialIndex,e.push(s))}}else for(let n=Math.max(0,d.start),u=Math.min(r.count,d.start+d.count);n<u;n+=3){const u=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);s=es(this,i,t,Fr,a,o,l,c,h,u,d,p),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else if(void 0!==a)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],p=i[r.materialIndex];for(let n=Math.max(r.start,d.start),i=Math.min(a.count,Math.min(r.start+r.count,d.start+d.count));n<i;n+=3)s=es(this,p,t,Fr,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=r.materialIndex,e.push(s))}else for(let n=Math.max(0,d.start),r=Math.min(a.count,d.start+d.count);n<r;n+=3)s=es(this,i,t,Fr,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function es(t,e,n,i,r,s,a,o,l,c,h,u){Hr.fromBufferAttribute(r,c),Gr.fromBufferAttribute(r,h),kr.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(s&&d){qr.set(0,0,0),Xr.set(0,0,0),Yr.set(0,0,0);for(let t=0,e=s.length;t<e;t++){const e=d[t],n=s[t];0!==e&&(Vr.fromBufferAttribute(n,c),Wr.fromBufferAttribute(n,h),jr.fromBufferAttribute(n,u),a?(qr.addScaledVector(Vr,e),Xr.addScaledVector(Wr,e),Yr.addScaledVector(jr,e)):(qr.addScaledVector(Vr.sub(Hr),e),Xr.addScaledVector(Wr.sub(Gr),e),Yr.addScaledVector(jr.sub(kr),e)))}Hr.add(qr),Gr.add(Xr),kr.add(Yr)}t.isSkinnedMesh&&(t.boneTransform(c,Hr),t.boneTransform(h,Gr),t.boneTransform(u,kr));const p=function(t,e,n,i,r,s,a,o){let l;if(l=e.side===m?i.intersectTriangle(a,s,r,!0,o):i.intersectTriangle(r,s,a,e.side!==f,o),null===l)return null;$r.copy(o),$r.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo($r);return c<n.near||c>n.far?null:{distance:c,point:$r.clone(),object:t}}(t,e,n,i,Hr,Gr,kr,Qr);if(p){o&&(Jr.fromBufferAttribute(o,c),Zr.fromBufferAttribute(o,h),Kr.fromBufferAttribute(o,u),p.uv=dr.getUV(Qr,Hr,Gr,kr,Jr,Zr,Kr,new Tn)),l&&(Jr.fromBufferAttribute(l,c),Zr.fromBufferAttribute(l,h),Kr.fromBufferAttribute(l,u),p.uv2=dr.getUV(Qr,Hr,Gr,kr,Jr,Zr,Kr,new Tn));const t={a:c,b:h,c:u,normal:new $n,materialIndex:0};dr.getNormal(Hr,Gr,kr,t.normal),p.face=t}return p}ts.prototype.isMesh=!0;class ns extends Nr{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,s,p,m,f,g,v){const y=s/f,x=p/g,_=s/2,w=p/2,b=m/2,M=f+1,S=g+1;let E=0,T=0;const A=new $n;for(let s=0;s<S;s++){const a=s*x-w;for(let o=0;o<M;o++){const u=o*y-_;A[t]=u*i,A[e]=a*r,A[n]=b,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=m>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/f),h.push(1-s/g),E+=1}}for(let t=0;t<g;t++)for(let e=0;e<f;e++){const n=u+e+M*t,i=u+e+M*(t+1),r=u+(e+1)+M*(t+1),s=u+(e+1)+M*t;o.push(n,i,s),o.push(i,r,s),T+=6}a.addGroup(d,T,v),d+=T,u+=E}p("z","y","x",-1,-1,n,e,t,s,r,0),p("z","y","x",1,-1,n,e,-t,s,r,1),p("x","z","y",1,1,t,n,e,i,s,2),p("x","z","y",1,-1,t,n,-e,i,s,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new Ar(l,3)),this.setAttribute("normal",new Ar(c,3)),this.setAttribute("uv",new Ar(h,2))}static fromJSON(t){return new ns(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function is(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function rs(t){const e={};for(let n=0;n<t.length;n++){const i=is(t[n]);for(const t in i)e[t]=i[t]}return e}const ss={clone:is,merge:rs};class as extends mr{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=is(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}as.prototype.isShaderMaterial=!0;class os extends er{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Li,this.projectionMatrix=new Li,this.projectionMatrixInverse=new Li}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}os.prototype.isCamera=!0;class ls extends os{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*vn*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*gn*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*vn*Math.atan(Math.tan(.5*gn*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*gn*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*i/t,e-=s.offsetY*n/a,i*=s.width/t,n*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}ls.prototype.isPerspectiveCamera=!0;const cs=90;class hs extends er{constructor(t,e,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const i=new ls(cs,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new $n(1,0,0)),this.add(i);const r=new ls(cs,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new $n(-1,0,0)),this.add(r);const s=new ls(cs,1,t,e);s.layers=this.layers,s.up.set(0,0,1),s.lookAt(new $n(0,1,0)),this.add(s);const a=new ls(cs,1,t,e);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new $n(0,-1,0)),this.add(a);const o=new ls(cs,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new $n(0,0,1)),this.add(o);const l=new ls(cs,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new $n(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,s,a,o,l]=this.children,c=t.xr.enabled,h=t.getRenderTarget();t.xr.enabled=!1;const u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,i),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,s),t.setRenderTarget(n,3),t.render(e,a),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=u,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(h),t.xr.enabled=c,n.texture.needsPMREMUpdate=!0}}class us extends Wn{constructor(t,e,n,i,r,s,a,o,l,c){super(t=void 0!==t?t:[],e=void 0!==e?e:rt,n,i,r,s,a,o,l,c),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}us.prototype.isCubeTexture=!0;class ds extends qn{constructor(t,e={}){super(t,t,e);const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new us(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:yt}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Nt,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",s=new ns(5,5,5),a=new as({name:"CubemapFromEquirect",uniforms:is(n),vertexShader:i,fragmentShader:r,side:m,blending:y});a.uniforms.tEquirect.value=e;const o=new ts(s,a),l=e.minFilter;return e.minFilter===wt&&(e.minFilter=yt),new hs(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}ds.prototype.isWebGLCubeRenderTarget=!0;const ps=new $n,ms=new $n,fs=new An;class gs{constructor(t=new $n(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=ps.subVectors(n,e).cross(ms.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(ps),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||fs.getNormalMatrix(t),i=this.coplanarPoint(ps).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}gs.prototype.isPlane=!0;const vs=new wi,ys=new $n;class xs{constructor(t=new gs,e=new gs,n=new gs,i=new gs,r=new gs,s=new gs){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],s=n[2],a=n[3],o=n[4],l=n[5],c=n[6],h=n[7],u=n[8],d=n[9],p=n[10],m=n[11],f=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(a-i,h-o,m-u,y-f).normalize(),e[1].setComponents(a+i,h+o,m+u,y+f).normalize(),e[2].setComponents(a+r,h+l,m+d,y+g).normalize(),e[3].setComponents(a-r,h-l,m-d,y-g).normalize(),e[4].setComponents(a-s,h-c,m-p,y-v).normalize(),e[5].setComponents(a+s,h+c,m+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),vs.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(vs)}intersectsSprite(t){return vs.center.set(0,0,0),vs.radius=.7071067811865476,vs.applyMatrix4(t.matrixWorld),this.intersectsSphere(vs)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(ys.x=i.normal.x>0?t.max.x:t.min.x,ys.y=i.normal.y>0?t.max.y:t.min.y,ys.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(ys)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function _s(){let t=null,e=!1,n=null,i=null;function r(e,s){n(e,s),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function ws(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const s=i.get(e);void 0===s?i.set(e,function(e,i){const r=e.array,s=e.usage,a=t.createBuffer();let o;if(t.bindBuffer(i,a),t.bufferData(i,r,s),e.onUploadCallback(),r instanceof Float32Array)o=5126;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=5131}else o=5123;else if(r instanceof Int16Array)o=5122;else if(r instanceof Uint32Array)o=5125;else if(r instanceof Int32Array)o=5124;else if(r instanceof Int8Array)o=5120;else if(r instanceof Uint8Array)o=5121;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):s.version<e.version&&(function(e,i,r){const s=i.array,a=i.updateRange;t.bindBuffer(r,e),-1===a.count?t.bufferSubData(r,0,s):(n?t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s,a.offset,a.count):t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s.subarray(a.offset,a.offset+a.count)),a.count=-1)}(s.buffer,e,r),s.version=e.version)}}}class bs extends Nr{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,s=e/2,a=Math.floor(n),o=Math.floor(i),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],m=[],f=[];for(let t=0;t<c;t++){const e=t*u-s;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),m.push(0,0,1),f.push(n/a),f.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(n,i,s),d.push(i,r,s)}this.setIndex(d),this.setAttribute("position",new Ar(p,3)),this.setAttribute("normal",new Ar(m,3)),this.setAttribute("uv",new Ar(f,2))}static fromJSON(t){return new bs(t.width,t.height,t.widthSegments,t.heightSegments)}}const Ms={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tfloat texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},Ss={common:{diffuse:{value:new Fn(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new An},uv2Transform:{value:new An},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Tn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Fn(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Fn(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new An}},sprite:{diffuse:{value:new Fn(16777215)},opacity:{value:1},center:{value:new Tn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new An}}},Es={basic:{uniforms:rs([Ss.common,Ss.specularmap,Ss.envmap,Ss.aomap,Ss.lightmap,Ss.fog]),vertexShader:Ms.meshbasic_vert,fragmentShader:Ms.meshbasic_frag},lambert:{uniforms:rs([Ss.common,Ss.specularmap,Ss.envmap,Ss.aomap,Ss.lightmap,Ss.emissivemap,Ss.fog,Ss.lights,{emissive:{value:new Fn(0)}}]),vertexShader:Ms.meshlambert_vert,fragmentShader:Ms.meshlambert_frag},phong:{uniforms:rs([Ss.common,Ss.specularmap,Ss.envmap,Ss.aomap,Ss.lightmap,Ss.emissivemap,Ss.bumpmap,Ss.normalmap,Ss.displacementmap,Ss.fog,Ss.lights,{emissive:{value:new Fn(0)},specular:{value:new Fn(1118481)},shininess:{value:30}}]),vertexShader:Ms.meshphong_vert,fragmentShader:Ms.meshphong_frag},standard:{uniforms:rs([Ss.common,Ss.envmap,Ss.aomap,Ss.lightmap,Ss.emissivemap,Ss.bumpmap,Ss.normalmap,Ss.displacementmap,Ss.roughnessmap,Ss.metalnessmap,Ss.fog,Ss.lights,{emissive:{value:new Fn(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ms.meshphysical_vert,fragmentShader:Ms.meshphysical_frag},toon:{uniforms:rs([Ss.common,Ss.aomap,Ss.lightmap,Ss.emissivemap,Ss.bumpmap,Ss.normalmap,Ss.displacementmap,Ss.gradientmap,Ss.fog,Ss.lights,{emissive:{value:new Fn(0)}}]),vertexShader:Ms.meshtoon_vert,fragmentShader:Ms.meshtoon_frag},matcap:{uniforms:rs([Ss.common,Ss.bumpmap,Ss.normalmap,Ss.displacementmap,Ss.fog,{matcap:{value:null}}]),vertexShader:Ms.meshmatcap_vert,fragmentShader:Ms.meshmatcap_frag},points:{uniforms:rs([Ss.points,Ss.fog]),vertexShader:Ms.points_vert,fragmentShader:Ms.points_frag},dashed:{uniforms:rs([Ss.common,Ss.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ms.linedashed_vert,fragmentShader:Ms.linedashed_frag},depth:{uniforms:rs([Ss.common,Ss.displacementmap]),vertexShader:Ms.depth_vert,fragmentShader:Ms.depth_frag},normal:{uniforms:rs([Ss.common,Ss.bumpmap,Ss.normalmap,Ss.displacementmap,{opacity:{value:1}}]),vertexShader:Ms.meshnormal_vert,fragmentShader:Ms.meshnormal_frag},sprite:{uniforms:rs([Ss.sprite,Ss.fog]),vertexShader:Ms.sprite_vert,fragmentShader:Ms.sprite_frag},background:{uniforms:{uvTransform:{value:new An},t2D:{value:null}},vertexShader:Ms.background_vert,fragmentShader:Ms.background_frag},cube:{uniforms:rs([Ss.envmap,{opacity:{value:1}}]),vertexShader:Ms.cube_vert,fragmentShader:Ms.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ms.equirect_vert,fragmentShader:Ms.equirect_frag},distanceRGBA:{uniforms:rs([Ss.common,Ss.displacementmap,{referencePosition:{value:new $n},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ms.distanceRGBA_vert,fragmentShader:Ms.distanceRGBA_frag},shadow:{uniforms:rs([Ss.lights,Ss.fog,{color:{value:new Fn(0)},opacity:{value:1}}]),vertexShader:Ms.shadow_vert,fragmentShader:Ms.shadow_frag}};function Ts(t,e,n,i,r,s){const a=new Fn(0);let o,l,c=!0===r?0:1,h=null,u=0,d=null;function f(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,s)}return{getClearColor:function(){return a},setClearColor:function(t,e=1){a.set(t),c=e,f(a,c)},getClearAlpha:function(){return c},setClearAlpha:function(t){c=t,f(a,c)},render:function(n,r){let s=!1,g=!0===r.isScene?r.background:null;g&&g.isTexture&&(g=e.get(g));const v=t.xr,y=v.getSession&&v.getSession();y&&"additive"===y.environmentBlendMode&&(g=null),null===g?f(a,c):g&&g.isColor&&(f(g,1),s=!0),(t.autoClear||s)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),g&&(g.isCubeTexture||g.mapping===lt)?(void 0===l&&(l=new ts(new ns(1,1,1),new as({name:"BackgroundCubeMaterial",uniforms:is(Es.cube.uniforms),vertexShader:Es.cube.vertexShader,fragmentShader:Es.cube.fragmentShader,side:m,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(l)),l.material.uniforms.envMap.value=g,l.material.uniforms.flipEnvMap.value=g.isCubeTexture&&!1===g.isRenderTargetTexture?-1:1,h===g&&u===g.version&&d===t.toneMapping||(l.material.needsUpdate=!0,h=g,u=g.version,d=t.toneMapping),n.unshift(l,l.geometry,l.material,0,0,null)):g&&g.isTexture&&(void 0===o&&(o=new ts(new bs(2,2),new as({name:"BackgroundMaterial",uniforms:is(Es.background.uniforms),vertexShader:Es.background.vertexShader,fragmentShader:Es.background.fragmentShader,side:p,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(o)),o.material.uniforms.t2D.value=g,!0===g.matrixAutoUpdate&&g.updateMatrix(),o.material.uniforms.uvTransform.value.copy(g.matrix),h===g&&u===g.version&&d===t.toneMapping||(o.material.needsUpdate=!0,h=g,u=g.version,d=t.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null))}}}function As(t,e,n,i){const r=t.getParameter(34921),s=i.isWebGL2?null:e.get("OES_vertex_array_object"),a=i.isWebGL2||null!==s,o={},l=d(null);let c=l;function h(e){return i.isWebGL2?t.bindVertexArray(e):s.bindVertexArrayOES(e)}function u(e){return i.isWebGL2?t.deleteVertexArray(e):s.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function p(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function m(t){f(t,0)}function f(n,r){const s=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;s[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),o[n]!==r&&((i.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),o[n]=r)}function g(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function v(e,n,r,s,a,o){!0!==i.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,s,a,o):t.vertexAttribIPointer(e,n,r,a,o)}function y(){x(),c!==l&&(c=l,h(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,u,y,x){let _=!1;if(a){const e=function(e,n,r){const a=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[a];return void 0===h&&(h=d(i.isWebGL2?t.createVertexArray():s.createVertexArrayOES()),c[a]=h),h}(y,u,l);c!==e&&(c=e,h(c.object)),_=function(t,e){const n=c.attributes,i=t.attributes;let r=0;for(const t in i){const e=n[t],s=i[t];if(void 0===e)return!0;if(e.attribute!==s)return!0;if(e.data!==s.data)return!0;r++}return c.attributesNum!==r||c.index!==e}(y,x),_&&function(t,e){const n={},i=t.attributes;let r=0;for(const t in i){const e=i[t],s={};s.attribute=e,e.data&&(s.data=e.data),n[t]=s,r++}c.attributes=n,c.attributesNum=r,c.index=e}(y,x)}else{const t=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===t||(c.geometry=y.id,c.program=u.id,c.wireframe=t,_=!0)}!0===r.isInstancedMesh&&(_=!0),null!==x&&n.update(x,34963),_&&(function(r,s,a,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;p();const l=o.attributes,c=a.getAttributes(),h=s.defaultAttributeValues;for(const e in c){const i=c[e];if(i.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,a=s.itemSize,l=n.get(s);if(void 0===l)continue;const c=l.buffer,h=l.type,u=l.bytesPerElement;if(s.isInterleavedBufferAttribute){const n=s.data,l=n.stride,d=s.offset;if(n.isInstancedInterleavedBuffer){for(let t=0;t<i.locationSize;t++)f(i.location+t,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)v(i.location+t,a/i.locationSize,h,e,l*u,(d+a/i.locationSize*t)*u)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<i.locationSize;t++)f(i.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)v(i.location+t,a/i.locationSize,h,e,a*u,a/i.locationSize*t*u)}}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(i.location,n);break;case 3:t.vertexAttrib3fv(i.location,n);break;case 4:t.vertexAttrib4fv(i.location,n);break;default:t.vertexAttrib1fv(i.location,n)}}}}g()}(r,l,u,y),null!==x&&t.bindBuffer(34963,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function(){y();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)u(i[t].object),delete i[t];delete n[t.id]}},initAttributes:p,enableAttribute:m,disableUnusedAttributes:g}}function Cs(t,e,n,i){const r=i.isWebGL2;let s;this.setMode=function(t){s=t},this.render=function(e,i){t.drawArrays(s,e,i),n.update(i,s,1)},this.renderInstances=function(i,a,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](s,i,a,o),n.update(a,s,o)}}function Rs(t,e,n){let i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==n.precision?n.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||e.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),m=t.getParameter(34921),f=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=u>0,x=s||e.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:s?t.getParameter(36183):0}}function Ls(t){const e=this;let n=null,i=0,r=!1,s=!1;const a=new gs,o=new An,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(t,n,i,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=i+4*s,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==s;++e,n+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,n),c[n+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,s){const a=0!==t.length||e||0!==i||r;return r=e,n=h(t,s,0),i=t.length,a},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(e,a,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,m=t.get(e);if(!r||null===u||0===u.length||s&&!p)s?h(null):c();else{const t=s?0:i,e=4*t;let r=m.clippingState||null;l.value=r,r=h(u,a,e,o);for(let t=0;t!==e;++t)r[t]=n[t];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Ps(t){let e=new WeakMap;function n(t,e){return e===at?t.mapping=rt:e===ot&&(t.mapping=st),t}function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){const s=r.mapping;if(s===at||s===ot){if(e.has(r))return n(e.get(r).texture,r.mapping);{const s=r.image;if(s&&s.height>0){const a=new ds(s.height/2);return a.fromEquirectangularTexture(t,r),e.set(r,a),r.addEventListener("dispose",i),n(a.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}Es.physical={uniforms:rs([Es.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Tn(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Fn(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Tn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Fn(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Fn(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Ms.meshphysical_vert,fragmentShader:Ms.meshphysical_frag};class Ds extends os{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,a=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Ds.prototype.isOrthographicCamera=!0;const Is=[.125,.215,.35,.446,.526,.582],Bs=new Ds,zs=new Fn;let Ns=null;const Os=(1+Math.sqrt(5))/2,Fs=1/Os,Us=[new $n(1,1,1),new $n(-1,1,1),new $n(1,1,-1),new $n(-1,1,-1),new $n(0,Os,Fs),new $n(0,Os,-Fs),new $n(Fs,0,Os),new $n(-Fs,0,Os),new $n(Os,Fs,0),new $n(-Os,Fs,0)];class Hs{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Ns=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Ws(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Vs(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Ns),t.scissorTest=!1,ks(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===rt||t.mapping===st?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Ns=this._renderer.getRenderTarget();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize-32,n={magFilter:yt,minFilter:yt,generateMipmaps:!1,type:Lt,format:Nt,encoding:De,depthBuffer:!1},i=Gs(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Gs(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const s=t-4+1+Is.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);n.push(s);let o=1/s;a>t-4?o=Is[a-t+4-1]:0===a&&(o=0),i.push(o);const l=1/(s-1),c=-l/2,h=1+l/2,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*d),y=new Float32Array(f*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];v.set(i,m*p*t),y.set(u,f*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const _=new Nr;_.setAttribute("position",new yr(v,m)),_.setAttribute("uv",new yr(y,f)),_.setAttribute("faceIndex",new yr(x,g)),e.push(_),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(20),r=new $n(0,1,0);return new as({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:y,depthTest:!1,depthWrite:!1})}(i,t,e)}return i}_compileMaterial(t){const e=new ts(this._lodPlanes[0],t);this._renderer.compile(e,Bs)}_sceneToCubeUV(t,e,n,i){const r=new ls(90,1,e,n),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(zs),o.toneMapping=K,o.autoClear=!1;const h=new fr({name:"PMREM.Background",side:m,depthWrite:!1,depthTest:!1}),u=new ts(new ns,h);let d=!1;const p=t.background;p?p.isColor&&(h.color.copy(p),t.background=null,d=!0):(h.color.copy(zs),d=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===n?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;ks(i,n*l,e>2?l:0,l,l),o.setRenderTarget(i),d&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=p}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===rt||t.mapping===st;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=Ws()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Vs());const r=i?this._cubemapMaterial:this._equirectMaterial,s=new ts(this._lodPlanes[0],r);r.uniforms.envMap.value=t;const a=this._cubeSize;ks(e,0,0,3*a,2*a),n.setRenderTarget(e),n.render(s,Bs)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),i=Us[(e-1)%Us.length];this._blur(t,e-1,e,n,i)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r),this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new ts(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):20;m>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);f.push(n),0===t?g+=n:t<m&&(g+=2*n)}for(let t=0;t<f.length;t++)f[t]=f[t]/g;h.envMap.value=t.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-n;const y=this._sizeLods[i];ks(e,3*y*(i>v-4?i-v+4:0),4*(this._cubeSize-y),3*y,2*y),o.setRenderTarget(e),o.render(c,Bs)}}function Gs(t,e,n){const i=new qn(t,e,n);return i.texture.mapping=lt,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function ks(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function Vs(){return new as({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:y,depthTest:!1,depthWrite:!1})}function Ws(){return new as({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:y,depthTest:!1,depthWrite:!1})}function js(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const s=r.mapping,a=s===at||s===ot,o=s===rt||s===st;if(a||o){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=e.get(r);return null===n&&(n=new Hs(t)),i=a?n.fromEquirectangular(r,i):n.fromCubemap(r,i),e.set(r,i),i.texture}if(e.has(r))return e.get(r).texture;{const s=r.image;if(a&&s&&s.height>0||o&&s&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(s)){null===n&&(n=new Hs(t));const s=a?n.fromEquirectangular(r):n.fromCubemap(r);return e.set(r,s),r.addEventListener("dispose",i),s.texture}return null}}}return r},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function qs(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(t){const e=n(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Xs(t,e,n,i){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let a=0;if(null!==i){const t=i.array;a=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],s=t[e+2];n.push(i,r,r,s,s,i)}}else{const t=r.array;a=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}const o=new(Cn(n)?Er:Mr)(n,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,n.memory.geometries++),e},update:function(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++)e.update(n[t],34962)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return s.get(t)}}}function Ys(t,e,n,i){const r=i.isWebGL2;let s,a,o;this.setMode=function(t){s=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,i){t.drawElements(s,i,a,e*o),n.update(i,s,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](s,l,a,i*o,c),n.update(l,s,c)}}function Js(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,i){switch(e.calls++,n){case 4:e.triangles+=i*(t/3);break;case 1:e.lines+=i*(t/2);break;case 3:e.lines+=i*(t-1);break;case 2:e.lines+=i*t;break;case 0:e.points+=i*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function Zs(t,e){return t[0]-e[0]}function Ks(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Qs(t,e){let n=1;const i=e.isInterleavedBufferAttribute?e.data.array:e.array;i instanceof Int8Array?n=127:i instanceof Int16Array?n=32767:i instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i),t.divideScalar(n)}function $s(t,e,n){const i={},r=new Float32Array(8),s=new WeakMap,a=new jn,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h,u){const d=l.morphTargetInfluences;if(!0===e.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,m=void 0!==p?p.length:0;let f=s.get(c);if(void 0===f||f.count!==m){void 0!==f&&f.texture.dispose();const y=void 0!==c.morphAttributes.position,x=void 0!==c.morphAttributes.normal,_=void 0!==c.morphAttributes.color,w=c.morphAttributes.position||[],b=c.morphAttributes.normal||[],M=c.morphAttributes.color||[];let S=0;!0===y&&(S=1),!0===x&&(S=2),!0===_&&(S=3);let E=c.attributes.position.count*S,T=1;E>e.maxTextureSize&&(T=Math.ceil(E/e.maxTextureSize),E=e.maxTextureSize);const A=new Float32Array(E*T*4*m),C=new Xn(A,E,T,m);C.format=Nt,C.type=Rt,C.needsUpdate=!0;const R=4*S;for(let P=0;P<m;P++){const D=w[P],I=b[P],B=M[P],z=E*T*4*P;for(let N=0;N<D.count;N++){const O=N*R;!0===y&&(a.fromBufferAttribute(D,N),!0===D.normalized&&Qs(a,D),A[z+O+0]=a.x,A[z+O+1]=a.y,A[z+O+2]=a.z,A[z+O+3]=0),!0===x&&(a.fromBufferAttribute(I,N),!0===I.normalized&&Qs(a,I),A[z+O+4]=a.x,A[z+O+5]=a.y,A[z+O+6]=a.z,A[z+O+7]=0),!0===_&&(a.fromBufferAttribute(B,N),!0===B.normalized&&Qs(a,I),A[z+O+8]=a.x,A[z+O+9]=a.y,A[z+O+10]=a.z,A[z+O+11]=4===B.itemSize?a.w:1)}}function L(){C.dispose(),s.delete(c),c.removeEventListener("dispose",L)}f={count:m,texture:C,size:new Tn(E,T)},s.set(c,f),c.addEventListener("dispose",L)}let g=0;for(let F=0;F<d.length;F++)g+=d[F];const v=c.morphTargetsRelative?1:1-g;u.getUniforms().setValue(t,"morphTargetBaseInfluence",v),u.getUniforms().setValue(t,"morphTargetInfluences",d),u.getUniforms().setValue(t,"morphTargetsTexture",f.texture,n),u.getUniforms().setValue(t,"morphTargetsTextureSize",f.size)}else{const U=void 0===d?0:d.length;let H=i[c.id];if(void 0===H||H.length!==U){H=[];for(let j=0;j<U;j++)H[j]=[j,0];i[c.id]=H}for(let q=0;q<U;q++){const X=H[q];X[0]=q,X[1]=d[q]}H.sort(Ks);for(let Y=0;Y<8;Y++)Y<U&&H[Y][1]?(o[Y][0]=H[Y][0],o[Y][1]=H[Y][1]):(o[Y][0]=Number.MAX_SAFE_INTEGER,o[Y][1]=0);o.sort(Zs);const G=c.morphAttributes.position,k=c.morphAttributes.normal;let V=0;for(let J=0;J<8;J++){const Z=o[J],K=Z[0],Q=Z[1];K!==Number.MAX_SAFE_INTEGER&&Q?(G&&c.getAttribute("morphTarget"+J)!==G[K]&&c.setAttribute("morphTarget"+J,G[K]),k&&c.getAttribute("morphNormal"+J)!==k[K]&&c.setAttribute("morphNormal"+J,k[K]),r[J]=Q,V+=Q):(G&&!0===c.hasAttribute("morphTarget"+J)&&c.deleteAttribute("morphTarget"+J),k&&!0===c.hasAttribute("morphNormal"+J)&&c.deleteAttribute("morphNormal"+J),r[J]=0)}const W=c.morphTargetsRelative?1:1-V;u.getUniforms().setValue(t,"morphTargetBaseInfluence",W),u.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function ta(t,e,n,i){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(t){const a=i.render.frame,o=t.geometry,l=e.get(t,o);return r.get(l)!==a&&(e.update(l),r.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",s)&&t.addEventListener("dispose",s),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),l},dispose:function(){r=new WeakMap}}}const ea=new Wn,na=new Xn,ia=new Jn,ra=new us,sa=[],aa=[],oa=new Float32Array(16),la=new Float32Array(9),ca=new Float32Array(4);function ha(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let s=sa[r];if(void 0===s&&(s=new Float32Array(r),sa[r]=s),0!==e){i.toArray(s,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(s,r)}return s}function ua(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function da(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function pa(t,e){let n=aa[e];void 0===n&&(n=new Int32Array(e),aa[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function ma(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function fa(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(ua(n,e))return;t.uniform2fv(this.addr,e),da(n,e)}}function ga(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(ua(n,e))return;t.uniform3fv(this.addr,e),da(n,e)}}function va(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(ua(n,e))return;t.uniform4fv(this.addr,e),da(n,e)}}function ya(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ua(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),da(n,e)}else{if(ua(n,i))return;ca.set(i),t.uniformMatrix2fv(this.addr,!1,ca),da(n,i)}}function xa(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ua(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),da(n,e)}else{if(ua(n,i))return;la.set(i),t.uniformMatrix3fv(this.addr,!1,la),da(n,i)}}function _a(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(ua(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),da(n,e)}else{if(ua(n,i))return;oa.set(i),t.uniformMatrix4fv(this.addr,!1,oa),da(n,i)}}function wa(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function ba(t,e){const n=this.cache;ua(n,e)||(t.uniform2iv(this.addr,e),da(n,e))}function Ma(t,e){const n=this.cache;ua(n,e)||(t.uniform3iv(this.addr,e),da(n,e))}function Sa(t,e){const n=this.cache;ua(n,e)||(t.uniform4iv(this.addr,e),da(n,e))}function Ea(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Ta(t,e){const n=this.cache;ua(n,e)||(t.uniform2uiv(this.addr,e),da(n,e))}function Aa(t,e){const n=this.cache;ua(n,e)||(t.uniform3uiv(this.addr,e),da(n,e))}function Ca(t,e){const n=this.cache;ua(n,e)||(t.uniform4uiv(this.addr,e),da(n,e))}function Ra(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(e||ea,r)}function La(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||ia,r)}function Pa(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||ra,r)}function Da(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||na,r)}function Ia(t,e){t.uniform1fv(this.addr,e)}function Ba(t,e){const n=ha(e,this.size,2);t.uniform2fv(this.addr,n)}function za(t,e){const n=ha(e,this.size,3);t.uniform3fv(this.addr,n)}function Na(t,e){const n=ha(e,this.size,4);t.uniform4fv(this.addr,n)}function Oa(t,e){const n=ha(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Fa(t,e){const n=ha(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Ua(t,e){const n=ha(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Ha(t,e){t.uniform1iv(this.addr,e)}function Ga(t,e){t.uniform2iv(this.addr,e)}function ka(t,e){t.uniform3iv(this.addr,e)}function Va(t,e){t.uniform4iv(this.addr,e)}function Wa(t,e){t.uniform1uiv(this.addr,e)}function ja(t,e){t.uniform2uiv(this.addr,e)}function qa(t,e){t.uniform3uiv(this.addr,e)}function Xa(t,e){t.uniform4uiv(this.addr,e)}function Ya(t,e,n){const i=e.length,r=pa(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2D(e[t]||ea,r[t])}function Ja(t,e,n){const i=e.length,r=pa(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture3D(e[t]||ia,r[t])}function Za(t,e,n){const i=e.length,r=pa(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTextureCube(e[t]||ra,r[t])}function Ka(t,e,n){const i=e.length,r=pa(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2DArray(e[t]||na,r[t])}function Qa(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return ma;case 35664:return fa;case 35665:return ga;case 35666:return va;case 35674:return ya;case 35675:return xa;case 35676:return _a;case 5124:case 35670:return wa;case 35667:case 35671:return ba;case 35668:case 35672:return Ma;case 35669:case 35673:return Sa;case 5125:return Ea;case 36294:return Ta;case 36295:return Aa;case 36296:return Ca;case 35678:case 36198:case 36298:case 36306:case 35682:return Ra;case 35679:case 36299:case 36307:return La;case 35680:case 36300:case 36308:case 36293:return Pa;case 36289:case 36303:case 36311:case 36292:return Da}}(e.type)}function $a(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Ia;case 35664:return Ba;case 35665:return za;case 35666:return Na;case 35674:return Oa;case 35675:return Fa;case 35676:return Ua;case 5124:case 35670:return Ha;case 35667:case 35671:return Ga;case 35668:case 35672:return ka;case 35669:case 35673:return Va;case 5125:return Wa;case 36294:return ja;case 36295:return qa;case 36296:return Xa;case 35678:case 36198:case 36298:case 36306:case 35682:return Ya;case 35679:case 36299:case 36307:return Ja;case 35680:case 36300:case 36308:case 36293:return Za;case 36289:case 36303:case 36311:case 36292:return Ka}}(e.type)}function to(t){this.id=t,this.seq=[],this.map={}}$a.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),da(e,t)},to.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const s=i[r];s.setValue(t,e[s.id],n)}};const eo=/(\w+)(\])?(\[|\.)?/g;function no(t,e){t.seq.push(e),t.map[e.id]=e}function io(t,e,n){const i=t.name,r=i.length;for(eo.lastIndex=0;;){const s=eo.exec(i),a=eo.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){no(n,void 0===c?new Qa(o,t,e):new $a(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new to(o),no(n,t)),n=t}}}function ro(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);io(n,t.getUniformLocation(e,n.name),this)}}function so(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}ro.prototype.setValue=function(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)},ro.prototype.setOptional=function(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)},ro.upload=function(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=n[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,i)}},ro.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n};let ao=0;function oo(t,e,n){const i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();return i&&""===r?"":n.toUpperCase()+"\n\n"+r+"\n\n"+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function lo(t,e){const n=function(t){switch(t){case De:return["Linear","( value )"];case Ie:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function co(t,e){let n;switch(e){case Q:n="Linear";break;case $:n="Reinhard";break;case tt:n="OptimizedCineon";break;case et:n="ACESFilmic";break;case nt:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function ho(t){return""!==t}function uo(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function po(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const mo=/^[ \t]*#include +<([\w\d./]+)>/gm;function fo(t){return t.replace(mo,go)}function go(t,e){const n=Ms[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return fo(n)}const vo=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,yo=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function xo(t){return t.replace(yo,wo).replace(vo,_o)}function _o(t,e,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),wo(0,e,n,i)}function wo(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function bo(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Mo(t,e,n,i){const r=t.getContext(),s=n.defines;let a=n.vertexShader,o=n.fragmentShader;const l=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===h?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===u?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===d&&(e="SHADOWMAP_TYPE_VSM"),e}(n),c=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case rt:case st:e="ENVMAP_TYPE_CUBE";break;case lt:case ct:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),p=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case st:case ct:e="ENVMAP_MODE_REFRACTION"}return e}(n),m=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case Y:e="ENVMAP_BLENDING_MULTIPLY";break;case J:e="ENVMAP_BLENDING_MIX";break;case Z:e="ENVMAP_BLENDING_ADD"}return e}(n),f=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e/32+1)+3,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),g=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(ho).join("\n")}(n),v=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(s),y=r.createProgram();let x,_,w=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=[v].filter(ho).join("\n"),x.length>0&&(x+="\n"),_=[g,v].filter(ho).join("\n"),_.length>0&&(_+="\n")):(x=[bo(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+p:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ho).join("\n"),_=[g,bo(n),"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+p:"",n.envMap?"#define "+m:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==K?"#define TONE_MAPPING":"",n.toneMapping!==K?Ms.tonemapping_pars_fragment:"",n.toneMapping!==K?co("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Ms.encodings_pars_fragment,lo("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(ho).join("\n")),a=fo(a),a=uo(a,n),a=po(a,n),o=fo(o),o=uo(o,n),o=po(o,n),a=xo(a),o=xo(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(w="#version 300 es\n",x=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,_=["#define varying in",n.glslVersion===un?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===un?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const b=w+_+o,M=so(r,35633,w+x+a),S=so(r,35632,b);if(r.attachShader(y,M),r.attachShader(y,S),void 0!==n.index0AttributeName?r.bindAttribLocation(y,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(y,0,"position"),r.linkProgram(y),t.debug.checkShaderErrors){const t=r.getProgramInfoLog(y).trim(),e=r.getShaderInfoLog(M).trim(),n=r.getShaderInfoLog(S).trim();let i=!0,s=!0;if(!1===r.getProgramParameter(y,35714)){i=!1;const e=oo(r,M,"vertex"),n=oo(r,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(y,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+n)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==n||(s=!1);s&&(this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:x},fragmentShader:{log:n,prefix:_}})}let E,T;return r.deleteShader(M),r.deleteShader(S),this.getUniforms=function(){return void 0===E&&(E=new ro(r,y)),E},this.getAttributes=function(){return void 0===T&&(T=function(t,e){const n={},i=t.getProgramParameter(e,35721);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),s=i.name;let a=1;35674===i.type&&(a=2),35675===i.type&&(a=3),35676===i.type&&(a=4),n[s]={type:i.type,location:t.getAttribLocation(e,s),locationSize:a}}return n}(r,y)),T},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(y),this.program=void 0},this.name=n.shaderName,this.id=ao++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=S,this}let So=0;class Eo{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(t);return!1===s.has(i)&&(s.add(i),i.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;return!1===e.has(t)&&e.set(t,new Set),e.get(t)}_getShaderStage(t){const e=this.shaderCache;if(!1===e.has(t)){const n=new To;e.set(t,n)}return e.get(t)}}class To{constructor(){this.id=So++,this.usedTimes=0}}function Ao(t,e,n,i,r,s,a){const o=new Gi,l=new Eo,c=[],h=r.isWebGL2,u=r.logarithmicDepthBuffer,d=r.floatVertexTextures,p=r.maxVertexUniforms,g=r.vertexTextures;let v=r.precision;const y={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(s,o,c,_,w){const b=_.fog,M=w.geometry,S=s.isMeshStandardMaterial?_.environment:null,E=(s.isMeshStandardMaterial?n:e).get(s.envMap||S),T=!E||E.mapping!==lt&&E.mapping!==ct?null:E.image.height,A=y[s.type],C=w.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(d)return 1024;{const t=p,n=Math.floor((t-20)/4),i=Math.min(n,e.length);return i<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+i+"."),0):i}}(w):0;null!==s.precision&&(v=r.getMaxPrecision(s.precision),v!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",v,"instead."));const R=M.morphAttributes.position||M.morphAttributes.normal||M.morphAttributes.color,L=void 0!==R?R.length:0;let P,D,I,B,z=0;if(void 0!==M.morphAttributes.position&&(z=1),void 0!==M.morphAttributes.normal&&(z=2),void 0!==M.morphAttributes.color&&(z=3),A){const t=Es[A];P=t.vertexShader,D=t.fragmentShader}else P=s.vertexShader,D=s.fragmentShader,l.update(s),I=l.getVertexShaderID(s),B=l.getFragmentShaderID(s);const N=t.getRenderTarget(),O=s.alphaTest>0,F=s.clearcoat>0;return{isWebGL2:h,shaderID:A,shaderName:s.type,vertexShader:P,fragmentShader:D,defines:s.defines,customVertexShaderID:I,customFragmentShaderID:B,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:v,instancing:!0===w.isInstancedMesh,instancingColor:!0===w.isInstancedMesh&&null!==w.instanceColor,supportsVertexTextures:g,outputEncoding:null===N?t.outputEncoding:!0===N.isXRRenderTarget?N.texture.encoding:De,map:!!s.map,matcap:!!s.matcap,envMap:!!E,envMapMode:E&&E.mapping,envMapCubeUVHeight:T,lightMap:!!s.lightMap,aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:s.normalMapType===Oe,tangentSpaceNormalMap:s.normalMapType===Ne,decodeVideoTexture:!!s.map&&!0===s.map.isVideoTexture&&s.map.encoding===Ie,clearcoat:F,clearcoatMap:F&&!!s.clearcoatMap,clearcoatRoughnessMap:F&&!!s.clearcoatRoughnessMap,clearcoatNormalMap:F&&!!s.clearcoatNormalMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,specularIntensityMap:!!s.specularIntensityMap,specularColorMap:!!s.specularColorMap,opaque:!1===s.transparent&&s.blending===x,alphaMap:!!s.alphaMap,alphaTest:O,gradientMap:!!s.gradientMap,sheen:s.sheen>0,sheenColorMap:!!s.sheenColorMap,sheenRoughnessMap:!!s.sheenRoughnessMap,transmission:s.transmission>0,transmissionMap:!!s.transmissionMap,thicknessMap:!!s.thicknessMap,combine:s.combine,vertexTangents:!!s.normalMap&&!!M.attributes.tangent,vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!M.attributes.color&&4===M.attributes.color.itemSize,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.displacementMap||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheenColorMap||s.sheenRoughnessMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.transmission>0||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheen>0||s.sheenColorMap||s.sheenRoughnessMap||!s.displacementMap),fog:!!b,useFog:s.fog,fogExp2:b&&b.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===w.isSkinnedMesh&&C>0,maxBones:C,useVertexTexture:d,morphTargets:void 0!==M.morphAttributes.position,morphNormals:void 0!==M.morphAttributes.normal,morphColors:void 0!==M.morphAttributes.color,morphTargetsCount:L,morphTextureStride:z,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&c.length>0,shadowMapType:t.shadowMap.type,toneMapping:s.toneMapped?t.toneMapping:K,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,doubleSided:s.side===f,flipSided:s.side===m,depthPacking:void 0!==s.depthPacking&&s.depthPacking,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:h||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||i.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(function(t,e){t.push(e.precision),t.push(e.outputEncoding),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.combine),t.push(e.vertexUvs),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.maxBones),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection)}(n,e),function(t,e){o.disableAll(),e.isWebGL2&&o.enable(0),e.supportsVertexTextures&&o.enable(1),e.instancing&&o.enable(2),e.instancingColor&&o.enable(3),e.map&&o.enable(4),e.matcap&&o.enable(5),e.envMap&&o.enable(6),e.lightMap&&o.enable(7),e.aoMap&&o.enable(8),e.emissiveMap&&o.enable(9),e.bumpMap&&o.enable(10),e.normalMap&&o.enable(11),e.objectSpaceNormalMap&&o.enable(12),e.tangentSpaceNormalMap&&o.enable(13),e.clearcoat&&o.enable(14),e.clearcoatMap&&o.enable(15),e.clearcoatRoughnessMap&&o.enable(16),e.clearcoatNormalMap&&o.enable(17),e.displacementMap&&o.enable(18),e.specularMap&&o.enable(19),e.roughnessMap&&o.enable(20),e.metalnessMap&&o.enable(21),e.gradientMap&&o.enable(22),e.alphaMap&&o.enable(23),e.alphaTest&&o.enable(24),e.vertexColors&&o.enable(25),e.vertexAlphas&&o.enable(26),e.vertexUvs&&o.enable(27),e.vertexTangents&&o.enable(28),e.uvsVertexOnly&&o.enable(29),e.fog&&o.enable(30),t.push(o.mask),o.disableAll(),e.useFog&&o.enable(0),e.flatShading&&o.enable(1),e.logarithmicDepthBuffer&&o.enable(2),e.skinning&&o.enable(3),e.useVertexTexture&&o.enable(4),e.morphTargets&&o.enable(5),e.morphNormals&&o.enable(6),e.morphColors&&o.enable(7),e.premultipliedAlpha&&o.enable(8),e.shadowMapEnabled&&o.enable(9),e.physicallyCorrectLights&&o.enable(10),e.doubleSided&&o.enable(11),e.flipSided&&o.enable(12),e.depthPacking&&o.enable(13),e.dithering&&o.enable(14),e.specularIntensityMap&&o.enable(15),e.specularColorMap&&o.enable(16),e.transmission&&o.enable(17),e.transmissionMap&&o.enable(18),e.thicknessMap&&o.enable(19),e.sheen&&o.enable(20),e.sheenColorMap&&o.enable(21),e.sheenRoughnessMap&&o.enable(22),e.decodeVideoTexture&&o.enable(23),e.opaque&&o.enable(24),t.push(o.mask)}(n,e),n.push(t.outputEncoding)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=y[t.type];let n;if(e){const t=Es[e];n=ss.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=c.length;t<e;t++){const e=c[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Mo(t,n,e,s),c.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=c.indexOf(t);c[e]=c[c.length-1],c.pop(),t.destroy()}},releaseShaderCache:function(t){l.remove(t)},programs:c,dispose:function(){l.dispose()}}}function Co(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Ro(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Lo(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Po(){const t=[];let e=0;const n=[],i=[],r=[];function s(n,i,r,s,a,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:s,renderOrder:n.renderOrder,z:a,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=s,l.renderOrder=n.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.push(h):!0===a.transparent?r.push(h):n.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.unshift(h):!0===a.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Ro),i.length>1&&i.sort(e||Lo),r.length>1&&r.sort(e||Lo)}}}function Do(){let t=new WeakMap;return{get:function(e,n){let i;return!1===t.has(e)?(i=new Po,t.set(e,[i])):n>=t.get(e).length?(i=new Po,t.get(e).push(i)):i=t.get(e)[n],i},dispose:function(){t=new WeakMap}}}function Io(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new $n,color:new Fn};break;case"SpotLight":n={position:new $n,direction:new $n,color:new Fn,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new $n,color:new Fn,distance:0,decay:0};break;case"HemisphereLight":n={direction:new $n,skyColor:new Fn,groundColor:new Fn};break;case"RectAreaLight":n={color:new Fn,position:new $n,halfWidth:new $n,halfHeight:new $n}}return t[e.id]=n,n}}}let Bo=0;function zo(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function No(t,e){const n=new Io,i=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Tn};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Tn,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)r.probe.push(new $n);const s=new $n,a=new Li,o=new Li;return{setup:function(s,a){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,m=0,f=0,g=0,v=0;s.sort(zo);const y=!0!==a?Math.PI:1;for(let t=0,e=s.length;t<e;t++){const e=s[t],a=e.color,x=e.intensity,_=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*x*y,l+=a.g*x*y,c+=a.b*x*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],x);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.directionalShadow[h]=n,r.directionalShadowMap[h]=w,r.directionalShadowMatrix[h]=e.shadow.matrix,f++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(x*y),t.distance=_,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.spotShadow[d]=n,r.spotShadowMap[d]=w,r.spotShadowMatrix[d]=e.shadow.matrix,v++}r.spot[d]=t,d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(a).multiplyScalar(x),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,r.pointShadow[u]=n,r.pointShadowMap[u]=w,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(x*y),t.groundColor.copy(e.groundColor).multiplyScalar(x*y),r.hemi[m]=t,m++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=Ss.LTC_FLOAT_1,r.rectAreaLTC2=Ss.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=Ss.LTC_HALF_1,r.rectAreaLTC2=Ss.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const x=r.hash;x.directionalLength===h&&x.pointLength===u&&x.spotLength===d&&x.rectAreaLength===p&&x.hemiLength===m&&x.numDirectionalShadows===f&&x.numPointShadows===g&&x.numSpotShadows===v||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotShadowMatrix.length=v,x.directionalLength=h,x.pointLength=u,x.spotLength=d,x.rectAreaLength=p,x.hemiLength=m,x.numDirectionalShadows=f,x.numPointShadows=g,x.numSpotShadows=v,r.version=Bo++)},setupView:function(t,e){let n=0,i=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),a.copy(d.matrixWorld),a.premultiply(u),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),t.direction.normalize(),h++}}},state:r}}function Oo(t,e){const n=new No(t,e),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(t){n.setup(i,t)},setupLightsView:function(t){n.setupView(i,t)},pushLight:function(t){i.push(t)},pushShadow:function(t){r.push(t)}}}function Fo(t,e){let n=new WeakMap;return{get:function(i,r=0){let s;return!1===n.has(i)?(s=new Oo(t,e),n.set(i,[s])):r>=n.get(i).length?(s=new Oo(t,e),n.get(i).push(s)):s=n.get(i)[r],s},dispose:function(){n=new WeakMap}}}class Uo extends mr{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=Be,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}Uo.prototype.isMeshDepthMaterial=!0;class Ho extends mr{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new $n,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Go(t,e,n){let i=new xs;const r=new Tn,s=new Tn,a=new jn,o=new Uo({depthPacking:ze}),l=new Ho,c={},u=n.maxTextureSize,g={0:m,1:p,2:f},v=new as({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Tn},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),x=v.clone();x.defines.HORIZONTAL_PASS=1;const _=new Nr;_.setAttribute("position",new yr(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const w=new ts(_,v),b=this;function M(n,i){const r=e.update(w);v.defines.VSM_SAMPLES!==n.blurSamples&&(v.defines.VSM_SAMPLES=n.blurSamples,x.defines.VSM_SAMPLES=n.blurSamples,v.needsUpdate=!0,x.needsUpdate=!0),v.uniforms.shadow_pass.value=n.map.texture,v.uniforms.resolution.value=n.mapSize,v.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,v,w,null),x.uniforms.shadow_pass.value=n.mapPass.texture,x.uniforms.resolution.value=n.mapSize,x.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,x,w,null)}function S(e,n,i,r,s,a){let h=null;const u=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==u?u:!0===i.isPointLight?l:o,t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0){const t=h.uuid,e=n.uuid;let i=c[t];void 0===i&&(i={},c[t]=i);let r=i[e];void 0===r&&(r=h.clone(),i[e]=r),h=r}return h.visible=n.visible,h.wireframe=n.wireframe,h.side=a===d?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:g[n.side],h.alphaMap=n.alphaMap,h.alphaTest=n.alphaTest,h.clipShadows=n.clipShadows,h.clippingPlanes=n.clippingPlanes,h.clipIntersection=n.clipIntersection,h.displacementMap=n.displacementMap,h.displacementScale=n.displacementScale,h.displacementBias=n.displacementBias,h.wireframeLinewidth=n.wireframeLinewidth,h.linewidth=n.linewidth,!0===i.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(i.matrixWorld),h.nearDistance=r,h.farDistance=s),h}function E(n,r,s,a,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&o===d)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,n.matrixWorld);const i=e.update(n),r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=S(n,h,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,c)}}}else if(r.visible){const e=S(n,r,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)E(l[t],r,s,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=h,this.render=function(e,n,o){if(!1===b.enabled)return;if(!1===b.autoUpdate&&!1===b.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),h=t.getActiveMipmapLevel(),p=t.state;p.setBlending(y),p.buffers.color.setClear(1,1,1,1),p.buffers.depth.setTest(!0),p.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],h=c.shadow;if(void 0===h){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===h.autoUpdate&&!1===h.needsUpdate)continue;r.copy(h.mapSize);const m=h.getFrameExtents();if(r.multiply(m),s.copy(h.mapSize),(r.x>u||r.y>u)&&(r.x>u&&(s.x=Math.floor(u/m.x),r.x=s.x*m.x,h.mapSize.x=s.x),r.y>u&&(s.y=Math.floor(u/m.y),r.y=s.y*m.y,h.mapSize.y=s.y)),null===h.map&&!h.isPointLightShadow&&this.type===d){const t={minFilter:yt,magFilter:yt,format:Nt};h.map=new qn(r.x,r.y,t),h.map.texture.name=c.name+".shadowMap",h.mapPass=new qn(r.x,r.y,t),h.camera.updateProjectionMatrix()}if(null===h.map){const t={minFilter:pt,magFilter:pt,format:Nt};h.map=new qn(r.x,r.y,t),h.map.texture.name=c.name+".shadowMap",h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map),t.clear();const f=h.getViewportCount();for(let t=0;t<f;t++){const e=h.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),p.viewport(a),h.updateMatrices(c,t),i=h.getFrustum(),E(n,o,h.camera,c,this.type)}h.isPointLightShadow||this.type!==d||M(h,o),h.needsUpdate=!1}b.needsUpdate=!1,t.setRenderTarget(l,c,h)}}function ko(t,e,n){const i=n.isWebGL2,r=new function(){let e=!1;const n=new jn;let i=null;const r=new jn(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,s,a,o){!0===o&&(e*=a,i*=a,s*=a),n.set(e,i,s,a),!1===r.equals(n)&&(t.clearColor(e,i,s,a),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},l=new function(){let e=!1,n=null,i=null,r=null;return{setTest:function(t){t?xt(2929):_t(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case H:t.depthFunc(512);break;case G:t.depthFunc(519);break;case k:t.depthFunc(513);break;case V:t.depthFunc(515);break;case W:t.depthFunc(514);break;case j:t.depthFunc(518);break;case q:t.depthFunc(516);break;case X:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},c=new function(){let e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?xt(2960):_t(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,a){i===e&&r===n&&s===a||(t.stencilFunc(e,n,a),i=e,r=n,s=a)},setOp:function(e,n,i){a===e&&o===n&&l===i||(t.stencilOp(e,n,i),a=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null}}};let h={},u={},d=new WeakMap,p=[],g=null,v=!1,Y=null,J=null,Z=null,K=null,Q=null,$=null,tt=null,et=!1,nt=null,it=null,rt=null,st=null,at=null;const ot=t.getParameter(35661);let lt=!1,ct=0;const ht=t.getParameter(7938);-1!==ht.indexOf("WebGL")?(ct=parseFloat(/^WebGL (\d)/.exec(ht)[1]),lt=ct>=1):-1!==ht.indexOf("OpenGL ES")&&(ct=parseFloat(/^OpenGL ES (\d)/.exec(ht)[1]),lt=ct>=2);let ut=null,dt={};const pt=t.getParameter(3088),mt=t.getParameter(2978),ft=(new jn).fromArray(pt),gt=(new jn).fromArray(mt);function vt(e,n,i){const r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<i;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return s}const yt={};function xt(e){!0!==h[e]&&(t.enable(e),h[e]=!0)}function _t(e){!1!==h[e]&&(t.disable(e),h[e]=!1)}yt[3553]=vt(3553,3553,1),yt[34067]=vt(34067,34069,6),r.setClear(0,0,0,1),l.setClear(1),c.setClear(0),xt(2929),l.setFunc(V),St(!1),Et(a),xt(2884),Mt(y);const wt={[S]:32774,[E]:32778,[T]:32779};if(i)wt[A]=32775,wt[C]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(wt[A]=t.MIN_EXT,wt[C]=t.MAX_EXT)}const bt={[R]:0,[L]:1,[P]:768,[I]:770,[U]:776,[O]:774,[z]:772,[D]:769,[B]:771,[F]:775,[N]:773};function Mt(e,n,i,r,s,a,o,l){if(e!==y){if(!1===v&&(xt(3042),v=!0),e===M)s=s||n,a=a||i,o=o||r,n===J&&s===Q||(t.blendEquationSeparate(wt[n],wt[s]),J=n,Q=s),i===Z&&r===K&&a===$&&o===tt||(t.blendFuncSeparate(bt[i],bt[r],bt[a],bt[o]),Z=i,K=r,$=a,tt=o),Y=e,et=null;else if(e!==Y||l!==et){if(J===S&&Q===S||(t.blendEquation(32774),J=S,Q=S),l)switch(e){case x:t.blendFuncSeparate(1,771,1,771);break;case _:t.blendFunc(1,1);break;case w:t.blendFuncSeparate(0,769,0,1);break;case b:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case x:t.blendFuncSeparate(770,771,1,771);break;case _:t.blendFunc(770,1);break;case w:t.blendFuncSeparate(0,769,0,1);break;case b:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}Z=null,K=null,$=null,tt=null,Y=e,et=l}}else!0===v&&(_t(3042),v=!1)}function St(e){nt!==e&&(e?t.frontFace(2304):t.frontFace(2305),nt=e)}function Et(e){e!==s?(xt(2884),e!==it&&(e===a?t.cullFace(1029):e===o?t.cullFace(1028):t.cullFace(1032))):_t(2884),it=e}function Tt(e,n,i){e?(xt(32823),st===n&&at===i||(t.polygonOffset(n,i),st=n,at=i)):_t(32823)}function At(e){void 0===e&&(e=33984+ot-1),ut!==e&&(t.activeTexture(e),ut=e)}return{buffers:{color:r,depth:l,stencil:c},enable:xt,disable:_t,bindFramebuffer:function(e,n){return u[e]!==n&&(t.bindFramebuffer(e,n),u[e]=n,i&&(36009===e&&(u[36160]=n),36160===e&&(u[36009]=n)),!0)},drawBuffers:function(i,r){let s=p,a=!1;if(i)if(s=d.get(r),void 0===s&&(s=[],d.set(r,s)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(s.length!==t.length||36064!==s[0]){for(let e=0,n=t.length;e<n;e++)s[e]=36064+e;s.length=t.length,a=!0}}else 36064!==s[0]&&(s[0]=36064,a=!0);else 1029!==s[0]&&(s[0]=1029,a=!0);a&&(n.isWebGL2?t.drawBuffers(s):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(s))},useProgram:function(e){return g!==e&&(t.useProgram(e),g=e,!0)},setBlending:Mt,setMaterial:function(t,e){t.side===f?_t(2884):xt(2884);let n=t.side===m;e&&(n=!n),St(n),t.blending===x&&!1===t.transparent?Mt(y):Mt(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),l.setFunc(t.depthFunc),l.setTest(t.depthTest),l.setMask(t.depthWrite),r.setMask(t.colorWrite);const i=t.stencilWrite;c.setTest(i),i&&(c.setMask(t.stencilWriteMask),c.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),c.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Tt(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?xt(32926):_t(32926)},setFlipSided:St,setCullFace:Et,setLineWidth:function(e){e!==rt&&(lt&&t.lineWidth(e),rt=e)},setPolygonOffset:Tt,setScissorTest:function(t){t?xt(3089):_t(3089)},activeTexture:At,bindTexture:function(e,n){null===ut&&At();let i=dt[ut];void 0===i&&(i={type:void 0,texture:void 0},dt[ut]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||yt[e]),i.type=e,i.texture=n)},unbindTexture:function(){const e=dt[ut];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===ft.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),ft.copy(e))},viewport:function(e){!1===gt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),gt.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===i&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),h={},ut=null,dt={},u={},d=new WeakMap,p=[],g=null,v=!1,Y=null,J=null,Z=null,K=null,Q=null,$=null,tt=null,et=!1,nt=null,it=null,rt=null,st=null,at=null,ft.set(0,0,t.canvas.width,t.canvas.height),gt.set(0,0,t.canvas.width,t.canvas.height),r.reset(),l.reset(),c.reset()}}}function Vo(t,e,n,i,r,s,a){const o=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,p=new WeakMap;let m;const f=new WeakMap;let g=!1;try{g="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function v(t,e){return g?new OffscreenCanvas(t,e):Pn("canvas")}function y(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?Sn:Math.floor,s=i(r*t.width),a=i(r*t.height);void 0===m&&(m=v(s,a));const o=n?v(s,a):m;return o.width=s,o.height=a,o.getContext("2d").drawImage(t,0,0,s,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+a+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function x(t){return bn(t.width)&&bn(t.height)}function _(t,e){return t.generateMipmaps&&e&&t.minFilter!==pt&&t.minFilter!==yt}function w(e){t.generateMipmap(e)}function b(n,i,r,s,a=!1){if(!1===o)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;return 6403===i&&(5126===r&&(l=33326),5131===r&&(l=33325),5121===r&&(l=33321)),33319===i&&(5126===r&&(l=33328),5131===r&&(l=33327),5121===r&&(l=33323)),6408===i&&(5126===r&&(l=34836),5131===r&&(l=34842),5121===r&&(l=s===Ie&&!1===a?35907:32856),32819===r&&(l=32854),32820===r&&(l=32855)),33325!==l&&33326!==l&&33327!==l&&33328!==l&&34842!==l&&34836!==l||e.get("EXT_color_buffer_float"),l}function M(t,e,n){return!0===_(t,n)||t.isFramebufferTexture&&t.minFilter!==pt&&t.minFilter!==yt?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function S(t){return t===pt||t===mt||t===gt?9728:9729}function E(t){const e=t.target;e.removeEventListener("dispose",E),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=f.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&A(t),0===Object.keys(r).length&&f.delete(n)}i.remove(t)}(e),e.isVideoTexture&&p.delete(e)}function T(e){const n=e.target;n.removeEventListener("dispose",T),function(e){const n=e.texture,r=i.get(e),s=i.get(n);if(void 0!==s.__webglTexture&&(t.deleteTexture(s.__webglTexture),a.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),a.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)}(n)}function A(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete f.get(r)[n.__cacheKey],a.memory.textures--}let C=0;function R(t,e){const r=i.get(t);if(t.isVideoTexture&&function(t){const e=a.render.frame;p.get(t)!==e&&(p.set(t,e),t.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const n=t.image;if(null===n)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==n.complete)return void B(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}const L={[ht]:10497,[ut]:33071,[dt]:33648},P={[pt]:9728,[mt]:9984,[gt]:9986,[yt]:9729,[xt]:9985,[wt]:9987};function D(n,s,a){if(a?(t.texParameteri(n,10242,L[s.wrapS]),t.texParameteri(n,10243,L[s.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,L[s.wrapR]),t.texParameteri(n,10240,P[s.magFilter]),t.texParameteri(n,10241,P[s.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),s.wrapS===ut&&s.wrapT===ut||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,S(s.magFilter)),t.texParameteri(n,10241,S(s.minFilter)),s.minFilter!==pt&&s.minFilter!==yt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const a=e.get("EXT_texture_filter_anisotropic");if(s.type===Rt&&!1===e.has("OES_texture_float_linear"))return;if(!1===o&&s.type===Lt&&!1===e.has("OES_texture_half_float_linear"))return;(s.anisotropy>1||i.get(s).__currentAnisotropy)&&(t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),i.get(s).__currentAnisotropy=s.anisotropy)}}function I(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",E));const r=n.source;let s=f.get(r);void 0===s&&(s={},f.set(r,s));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.encoding),e.join()}(n);if(o!==e.__cacheKey){void 0===s[o]&&(s[o]={texture:t.createTexture(),usedTimes:0},a.memory.textures++,i=!0),s[o].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&A(n)),e.__cacheKey=o,e.__webglTexture=s[o].texture}return i}function B(e,i,r){let a=3553;i.isDataArrayTexture&&(a=35866),i.isData3DTexture&&(a=32879);const l=I(e,i),c=i.source;if(n.activeTexture(33984+r),n.bindTexture(a,e.__webglTexture),c.version!==c.__currentVersion||!0===l){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=function(t){return!o&&(t.wrapS!==ut||t.wrapT!==ut||t.minFilter!==pt&&t.minFilter!==yt)}(i)&&!1===x(i.image);let l=y(i.image,r,!1,h);l=H(i,l);const u=x(l)||o,d=s.convert(i.format,i.encoding);let p,m=s.convert(i.type),f=b(i.internalFormat,d,m,i.encoding,i.isVideoTexture);D(a,i,u);const g=i.mipmaps,v=o&&!0!==i.isVideoTexture,S=void 0===e.__version,E=M(i,l,u);if(i.isDepthTexture)f=6402,o?f=i.type===Rt?36012:i.type===Ct?33190:i.type===It?35056:33189:i.type===Rt&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),i.format===Ut&&6402===f&&i.type!==Tt&&i.type!==Ct&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=Tt,m=s.convert(i.type)),i.format===Ht&&6402===f&&(f=34041,i.type!==It&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=It,m=s.convert(i.type))),v&&S?n.texStorage2D(3553,1,f,l.width,l.height):n.texImage2D(3553,0,f,l.width,l.height,0,d,m,null);else if(i.isDataTexture)if(g.length>0&&u){v&&S&&n.texStorage2D(3553,E,f,g[0].width,g[0].height);for(let t=0,e=g.length;t<e;t++)p=g[t],v?n.texSubImage2D(3553,t,0,0,p.width,p.height,d,m,p.data):n.texImage2D(3553,t,f,p.width,p.height,0,d,m,p.data);i.generateMipmaps=!1}else v?(S&&n.texStorage2D(3553,E,f,l.width,l.height),n.texSubImage2D(3553,0,0,0,l.width,l.height,d,m,l.data)):n.texImage2D(3553,0,f,l.width,l.height,0,d,m,l.data);else if(i.isCompressedTexture){v&&S&&n.texStorage2D(3553,E,f,g[0].width,g[0].height);for(let t=0,e=g.length;t<e;t++)p=g[t],i.format!==Nt?null!==d?v?n.compressedTexSubImage2D(3553,t,0,0,p.width,p.height,d,p.data):n.compressedTexImage2D(3553,t,f,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):v?n.texSubImage2D(3553,t,0,0,p.width,p.height,d,m,p.data):n.texImage2D(3553,t,f,p.width,p.height,0,d,m,p.data)}else if(i.isDataArrayTexture)v?(S&&n.texStorage3D(35866,E,f,l.width,l.height,l.depth),n.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,d,m,l.data)):n.texImage3D(35866,0,f,l.width,l.height,l.depth,0,d,m,l.data);else if(i.isData3DTexture)v?(S&&n.texStorage3D(32879,E,f,l.width,l.height,l.depth),n.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,d,m,l.data)):n.texImage3D(32879,0,f,l.width,l.height,l.depth,0,d,m,l.data);else if(i.isFramebufferTexture)v&&S?n.texStorage2D(3553,E,f,l.width,l.height):n.texImage2D(3553,0,f,l.width,l.height,0,d,m,null);else if(g.length>0&&u){v&&S&&n.texStorage2D(3553,E,f,g[0].width,g[0].height);for(let t=0,e=g.length;t<e;t++)p=g[t],v?n.texSubImage2D(3553,t,0,0,d,m,p):n.texImage2D(3553,t,f,d,m,p);i.generateMipmaps=!1}else v?(S&&n.texStorage2D(3553,E,f,l.width,l.height),n.texSubImage2D(3553,0,0,0,d,m,l)):n.texImage2D(3553,0,f,d,m,l);_(i,u)&&w(a),c.__currentVersion=c.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}function z(e,r,a,o,l){const c=s.convert(a.format,a.encoding),h=s.convert(a.type),u=b(a.internalFormat,c,h,a.encoding);i.get(r).__hasExternalTextures||(32879===l||35866===l?n.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,u,r.width,r.height,0,c,h,null)),n.bindFramebuffer(36160,e),U(r)?d.framebufferTexture2DMultisampleEXT(36160,o,l,i.get(a).__webglTexture,0,F(r)):t.framebufferTexture2D(36160,o,l,i.get(a).__webglTexture,0),n.bindFramebuffer(36160,null)}function N(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i||U(n)){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===Rt?r=36012:e.type===Ct&&(r=33190));const i=F(n);U(n)?d.renderbufferStorageMultisampleEXT(36161,i,r,n.width,n.height):t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){const r=F(n);i&&!1===U(n)?t.renderbufferStorageMultisample(36161,r,35056,n.width,n.height):U(n)?d.renderbufferStorageMultisampleEXT(36161,r,35056,n.width,n.height):t.renderbufferStorage(36161,34041,n.width,n.height),t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=s.convert(e.format,e.encoding),a=s.convert(e.type),o=b(e.internalFormat,r,a,e.encoding),l=F(n);i&&!1===U(n)?t.renderbufferStorageMultisample(36161,l,o,n.width,n.height):U(n)?d.renderbufferStorageMultisampleEXT(36161,l,o,n.width,n.height):t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function O(e){const r=i.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),R(r.depthTexture,0);const s=i.get(r.depthTexture).__webglTexture,a=F(r);if(r.depthTexture.format===Ut)U(r)?d.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,a):t.framebufferTexture2D(36160,36096,3553,s,0);else{if(r.depthTexture.format!==Ht)throw new Error("Unknown depthTexture format");U(r)?d.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,a):t.framebufferTexture2D(36160,33306,3553,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),N(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),N(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}function F(t){return Math.min(u,t.samples)}function U(t){const n=i.get(t);return o&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function H(t,n){const i=t.encoding,r=t.format,s=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===dn||i!==De&&(i===Ie?!1===o?!0===e.has("EXT_sRGB")&&r===Nt?(t.format=dn,t.minFilter=yt,t.generateMipmaps=!1):n=Hn.sRGBToLinear(n):r===Nt&&s===Mt||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",i)),n}this.allocateTextureUnit=function(){const t=C;return t>=l&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+l),C+=1,t},this.resetTextureUnits=function(){C=0},this.setTexture2D=R,this.setTexture2DArray=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?B(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?B(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?function(e,i,r){if(6!==i.image.length)return;const a=I(e,i),l=i.source;if(n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),l.version!==l.__currentVersion||!0===a){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=i.isCompressedTexture||i.image[0].isCompressedTexture,a=i.image[0]&&i.image[0].isDataTexture,h=[];for(let t=0;t<6;t++)h[t]=r||a?a?i.image[t].image:i.image[t]:y(i.image[t],!1,!0,c),h[t]=H(i,h[t]);const u=h[0],d=x(u)||o,p=s.convert(i.format,i.encoding),m=s.convert(i.type),f=b(i.internalFormat,p,m,i.encoding),g=o&&!0!==i.isVideoTexture,v=void 0===e.__version;let S,E=M(i,u,d);if(D(34067,i,d),r){g&&v&&n.texStorage2D(34067,E,f,u.width,u.height);for(let t=0;t<6;t++){S=h[t].mipmaps;for(let e=0;e<S.length;e++){const r=S[e];i.format!==Nt?null!==p?g?n.compressedTexSubImage2D(34069+t,e,0,0,r.width,r.height,p,r.data):n.compressedTexImage2D(34069+t,e,f,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):g?n.texSubImage2D(34069+t,e,0,0,r.width,r.height,p,m,r.data):n.texImage2D(34069+t,e,f,r.width,r.height,0,p,m,r.data)}}}else{S=i.mipmaps,g&&v&&(S.length>0&&E++,n.texStorage2D(34067,E,f,h[0].width,h[0].height));for(let t=0;t<6;t++)if(a){g?n.texSubImage2D(34069+t,0,0,0,h[t].width,h[t].height,p,m,h[t].data):n.texImage2D(34069+t,0,f,h[t].width,h[t].height,0,p,m,h[t].data);for(let e=0;e<S.length;e++){const i=S[e].image[t].image;g?n.texSubImage2D(34069+t,e+1,0,0,i.width,i.height,p,m,i.data):n.texImage2D(34069+t,e+1,f,i.width,i.height,0,p,m,i.data)}}else{g?n.texSubImage2D(34069+t,0,0,0,p,m,h[t]):n.texImage2D(34069+t,0,f,p,m,h[t]);for(let e=0;e<S.length;e++){const i=S[e];g?n.texSubImage2D(34069+t,e+1,0,0,p,m,i.image[t]):n.texImage2D(34069+t,e+1,f,p,m,i.image[t])}}}_(i,d)&&w(34067),l.__currentVersion=l.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}(a,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,a.__webglTexture))},this.rebindTextures=function(t,e,n){const r=i.get(t);void 0!==e&&z(r.__webglFramebuffer,t,t.texture,36064,3553),void 0!==n&&O(t)},this.setupRenderTarget=function(e){const l=e.texture,c=i.get(e),h=i.get(l);e.addEventListener("dispose",T),!0!==e.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=t.createTexture()),h.__version=l.version,a.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=x(e)||o;if(u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(o&&e.samples>0&&!1===U(e)){c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer);const i=s.convert(l.format,l.encoding),r=s.convert(l.type),a=b(l.internalFormat,i,r,l.encoding),o=F(e);t.renderbufferStorageMultisample(36161,o,a,e.width,e.height),n.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),N(c.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}if(u){n.bindTexture(34067,h.__webglTexture),D(34067,l,p);for(let t=0;t<6;t++)z(c.__webglFramebuffer[t],e,l,36064,34069+t);_(l,p)&&w(34067),n.unbindTexture()}else if(d){const t=e.texture;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=i.get(s);n.bindTexture(3553,a.__webglTexture),D(3553,s,p),z(c.__webglFramebuffer,e,s,36064+r,3553),_(s,p)&&w(3553)}n.unbindTexture()}else{let t=3553;(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(o?t=e.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(t,h.__webglTexture),D(t,l,p),z(c.__webglFramebuffer,e,l,36064,t),_(l,p)&&w(t),n.unbindTexture()}e.depthBuffer&&O(e)},this.updateRenderTargetMipmap=function(t){const e=x(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,a=r.length;s<a;s++){const a=r[s];if(_(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=i.get(a).__webglTexture;n.bindTexture(e,r),w(e),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(o&&e.samples>0&&!1===U(e)){const r=e.width,s=e.height;let a=16384;const o=[36064],l=e.stencilBuffer?33306:36096;e.depthBuffer&&o.push(l);const c=i.get(e),h=void 0!==c.__ignoreDepthValues&&c.__ignoreDepthValues;!1===h&&(e.depthBuffer&&(a|=256),e.stencilBuffer&&(a|=1024)),n.bindFramebuffer(36008,c.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,c.__webglFramebuffer),!0===h&&(t.invalidateFramebuffer(36008,[l]),t.invalidateFramebuffer(36009,[l])),t.blitFramebuffer(0,0,r,s,0,0,r,s,a,9728),t.invalidateFramebuffer(36008,o),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,c.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=O,this.setupFrameBufferTexture=z,this.useMultisampledRTT=U}function Wo(t,e,n){const i=n.isWebGL2;return{convert:function(t,n=null){let r;if(t===Mt)return 5121;if(t===Pt)return 32819;if(t===Dt)return 32820;if(t===St)return 5120;if(t===Et)return 5122;if(t===Tt)return 5123;if(t===At)return 5124;if(t===Ct)return 5125;if(t===Rt)return 5126;if(t===Lt)return i?5131:(r=e.get("OES_texture_half_float"),null!==r?r.HALF_FLOAT_OES:null);if(t===Bt)return 6406;if(t===Nt)return 6408;if(t===Ot)return 6409;if(t===Ft)return 6410;if(t===Ut)return 6402;if(t===Ht)return 34041;if(t===Gt)return 6403;if(t===zt)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(t===dn)return r=e.get("EXT_sRGB"),null!==r?r.SRGB_ALPHA_EXT:null;if(t===kt)return 36244;if(t===Vt)return 33319;if(t===Wt)return 33320;if(t===jt)return 36249;if(t===qt||t===Xt||t===Yt||t===Jt)if(n===Ie){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(t===qt)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===Xt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===Yt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===Jt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(t===qt)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Xt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===Yt)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===Jt)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===Zt||t===Kt||t===Qt||t===$t){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(t===Zt)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===Kt)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===Qt)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===$t)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===te)return r=e.get("WEBGL_compressed_texture_etc1"),null!==r?r.COMPRESSED_RGB_ETC1_WEBGL:null;if(t===ee||t===ne){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(t===ee)return n===Ie?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(t===ne)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(t===ie||t===re||t===se||t===ae||t===oe||t===le||t===ce||t===he||t===ue||t===de||t===pe||t===me||t===fe||t===ge){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(t===ie)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(t===re)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(t===se)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(t===ae)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(t===oe)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(t===le)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(t===ce)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(t===he)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(t===ue)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(t===de)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(t===pe)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(t===me)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(t===fe)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(t===ge)return n===Ie?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(t===ve){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(t===ve)return n===Ie?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}return t===It?i?34042:(r=e.get("WEBGL_depth_texture"),null!==r?r.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}Ho.prototype.isMeshDistanceMaterial=!0;class jo extends ls{constructor(t=[]){super(),this.cameras=t}}jo.prototype.isArrayCamera=!0;class qo extends er{constructor(){super(),this.type="Group"}}qo.prototype.isGroup=!0;const Xo={type:"move"};class Yo{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new qo,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new qo,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new $n,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new $n),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new qo,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new $n,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new $n),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==a&&(i=e.getPose(t.targetRaySpace,n),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Xo))),l&&t.hand){s=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const t=new qo;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[i.jointName]=t,l.add(t)}const r=l.joints[i.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return null!==a&&(a.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}}class Jo extends Wn{constructor(t,e,n,i,r,s,a,o,l,c){if((c=void 0!==c?c:Ut)!==Ut&&c!==Ht)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===Ut&&(n=Tt),void 0===n&&c===Ht&&(n=It),super(null,i,r,s,a,o,c,n,l),this.image={width:t,height:e},this.magFilter=void 0!==a?a:pt,this.minFilter=void 0!==o?o:pt,this.flipY=!1,this.generateMipmaps=!1}}Jo.prototype.isDepthTexture=!0;class Zo extends pn{constructor(t,e){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=null,l=null,c=null,h=null,u=null;const d=e.getContextAttributes();let p=null,m=null;const f=[],g=new Map,v=new ls;v.layers.enable(1),v.viewport=new jn;const y=new ls;y.layers.enable(2),y.viewport=new jn;const x=[v,y],_=new jo;_.layers.enable(1),_.layers.enable(2);let w=null,b=null;function M(t){const e=g.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function S(){g.forEach((function(t,e){t.disconnect(e)})),g.clear(),w=null,b=null,t.setRenderTarget(p),h=null,c=null,l=null,i=null,m=null,L.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function E(t){const e=i.inputSources;for(let t=0;t<f.length;t++)g.set(e[t],f[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=g.get(n);i&&(i.dispatchEvent({type:"disconnected",data:n}),g.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],i=g.get(n);i&&i.dispatchEvent({type:"connected",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=f[t];return void 0===e&&(e=new Yo,f[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=f[t];return void 0===e&&(e=new Yo,f[t]=e),e.getGripSpace()},this.getHand=function(t){let e=f[t];return void 0===e&&(e=new Yo,f[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){a=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s},this.getBaseLayer=function(){return null!==c?c:h},this.getBinding=function(){return l},this.getFrame=function(){return u},this.getSession=function(){return i},this.setSession=async function(o){if(i=o,null!==i){if(p=t.getRenderTarget(),i.addEventListener("select",M),i.addEventListener("selectstart",M),i.addEventListener("selectend",M),i.addEventListener("squeeze",M),i.addEventListener("squeezestart",M),i.addEventListener("squeezeend",M),i.addEventListener("end",S),i.addEventListener("inputsourceschange",E),!0!==d.xrCompatible&&await e.makeXRCompatible(),void 0===i.renderState.layers||!1===t.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||d.antialias,alpha:d.alpha,depth:d.depth,stencil:d.stencil,framebufferScaleFactor:r};h=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:h}),m=new qn(h.framebufferWidth,h.framebufferHeight,{format:Nt,type:Mt,encoding:t.outputEncoding})}else{let n=null,s=null,a=null;d.depth&&(a=d.stencil?35056:33190,n=d.stencil?Ht:Ut,s=d.stencil?It:Tt);const o={colorFormat:t.outputEncoding===Ie?35907:32856,depthFormat:a,scaleFactor:r};l=new XRWebGLBinding(i,e),c=l.createProjectionLayer(o),i.updateRenderState({layers:[c]}),m=new qn(c.textureWidth,c.textureHeight,{format:Nt,type:Mt,depthTexture:new Jo(c.textureWidth,c.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:d.stencil,encoding:t.outputEncoding,samples:d.antialias?4:0}),t.properties.get(m).__ignoreDepthValues=c.ignoreDepthValues}m.isXRRenderTarget=!0,this.setFoveation(1),s=await i.requestReferenceSpace(a),L.setContext(i),L.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const T=new $n,A=new $n;function C(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;_.near=y.near=v.near=t.near,_.far=y.far=v.far=t.far,w===_.near&&b===_.far||(i.updateRenderState({depthNear:_.near,depthFar:_.far}),w=_.near,b=_.far);const e=t.parent,n=_.cameras;C(_,e);for(let t=0;t<n.length;t++)C(n[t],e);_.matrixWorld.decompose(_.position,_.quaternion,_.scale),t.position.copy(_.position),t.quaternion.copy(_.quaternion),t.scale.copy(_.scale),t.matrix.copy(_.matrix),t.matrixWorld.copy(_.matrixWorld);const r=t.children;for(let t=0,e=r.length;t<e;t++)r[t].updateMatrixWorld(!0);2===n.length?function(t,e,n){T.setFromMatrixPosition(e.matrixWorld),A.setFromMatrixPosition(n.matrixWorld);const i=T.distanceTo(A),r=e.projectionMatrix.elements,s=n.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=i/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+m,v=o+m,y=d-f,x=p+(i-f),_=l*o/v*g,w=c*o/v*g;t.projectionMatrix.makePerspective(y,x,_,w,g,v)}(_,v,y):_.projectionMatrix.copy(v.projectionMatrix)},this.getCamera=function(){return _},this.getFoveation=function(){return null!==c?c.fixedFoveation:null!==h?h.fixedFoveation:void 0},this.setFoveation=function(t){null!==c&&(c.fixedFoveation=t),null!==h&&void 0!==h.fixedFoveation&&(h.fixedFoveation=t)};let R=null;const L=new _s;L.setAnimationLoop((function(e,n){if(o=n.getViewerPose(s),u=n,null!==o){const e=o.views;null!==h&&(t.setRenderTargetFramebuffer(m,h.framebuffer),t.setRenderTarget(m));let n=!1;e.length!==_.cameras.length&&(_.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let s=null;if(null!==h)s=h.getViewport(r);else{const e=l.getViewSubImage(c,r);s=e.viewport,0===i&&(t.setRenderTargetTextures(m,e.colorTexture,c.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(m))}const a=x[i];a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===i&&_.matrix.copy(a.matrix),!0===n&&_.cameras.push(a)}}const r=i.inputSources;for(let t=0;t<f.length;t++){const e=f[t],i=r[t];e.update(i,n,s)}R&&R(e,n),u=null})),this.setAnimationLoop=function(t){R=t},this.dispose=function(){}}}function Ko(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap),n.alphaTest>0&&(e.alphaTest.value=n.alphaTest);const i=t.get(n).envMap;let r,s;i&&(e.envMap.value=i,e.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.ior.value=n.ior,e.refractionRatio.value=n.refractionRatio),n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap?r=n.clearcoatRoughnessMap:n.specularIntensityMap?r=n.specularIntensityMap:n.specularColorMap?r=n.specularColorMap:n.transmissionMap?r=n.transmissionMap:n.thicknessMap?r=n.thicknessMap:n.sheenColorMap?r=n.sheenColorMap:n.sheenRoughnessMap&&(r=n.sheenRoughnessMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix)),n.aoMap?s=n.aoMap:n.lightMap&&(s=n.lightMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),e.uv2Transform.value.copy(s.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,n.side===m&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),n.side===m&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,i,r,s,a){i.isMeshBasicMaterial?e(t,i):i.isMeshLambertMaterial?(e(t,i),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,i)):i.isMeshToonMaterial?(e(t,i),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshPhongMaterial?(e(t,i),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshStandardMaterial?(e(t,i),i.isMeshPhysicalMaterial?function(t,e,i){n(t,e),t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap)),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===m&&t.clearcoatNormalScale.value.negate())),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,i,a):n(t,i)):i.isMeshMatcapMaterial?(e(t,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshDepthMaterial?(e(t,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshDistanceMaterial?(e(t,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,i)):i.isMeshNormalMaterial?(e(t,i),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,i)):i.isPointsMaterial?function(t,e,n,i){let r;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*i,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?r=e.map:e.alphaMap&&(r=e.alphaMap),void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,i,r,s):i.isSpriteMaterial?function(t,e){let n;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?n=e.map:e.alphaMap&&(n=e.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(t,i):i.isShadowMaterial?(t.color.value.copy(i.color),t.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function Qo(t={}){const n=void 0!==t.canvas?t.canvas:function(){const t=Pn("canvas");return t.style.display="block",t}(),i=void 0!==t.context?t.context:null,r=void 0===t.depth||t.depth,s=void 0===t.stencil||t.stencil,a=void 0!==t.antialias&&t.antialias,o=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,c=void 0!==t.powerPreference?t.powerPreference:"default",h=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let u;u=void 0!==t.context?i.getContextAttributes().alpha:void 0!==t.alpha&&t.alpha;let d=null,g=null;const v=[],y=[];this.domElement=n,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=De,this.physicallyCorrectLights=!1,this.toneMapping=K,this.toneMappingExposure=1;const x=this;let _=!1,w=0,b=0,M=null,S=-1,E=null;const T=new jn,A=new jn;let C=null,R=n.width,L=n.height,P=1,D=null,I=null;const B=new jn(0,0,R,L),z=new jn(0,0,R,L);let N=!1;const O=new xs;let F=!1,U=!1,H=null;const G=new Li,k=new Tn,V=new $n,W={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function j(){return null===M?P:1}let q,X,Y,J,Z,Q,$,tt,et,nt,it,rt,st,at,ot,lt,ct,ht,ut,dt,pt,mt,ft,gt=i;function vt(t,e){for(let i=0;i<t.length;i++){const r=t[i],s=n.getContext(r,e);if(null!==s)return s}return null}try{const t={alpha:!0,depth:r,stencil:s,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${e}`),n.addEventListener("webglcontextlost",_t,!1),n.addEventListener("webglcontextrestored",bt,!1),null===gt){const e=["webgl2","webgl","experimental-webgl"];if(!0===x.isWebGL1Renderer&&e.shift(),gt=vt(e,t),null===gt)throw vt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===gt.getShaderPrecisionFormat&&(gt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function yt(){q=new qs(gt),X=new Rs(gt,q,t),q.init(X),mt=new Wo(gt,q,X),Y=new ko(gt,q,X),J=new Js(gt),Z=new Co,Q=new Vo(gt,q,Y,Z,X,mt,J),$=new Ps(x),tt=new js(x),et=new ws(gt,X),ft=new As(gt,q,et,X),nt=new Xs(gt,et,J,ft),it=new ta(gt,nt,et,J),ut=new $s(gt,X,Q),lt=new Ls(Z),rt=new Ao(x,$,tt,q,X,ft,lt),st=new Ko(Z),at=new Do,ot=new Fo(q,X),ht=new Ts(x,$,Y,it,u,o),ct=new Go(x,it,X),dt=new Cs(gt,q,J,X),pt=new Ys(gt,q,J,X),J.programs=rt.programs,x.capabilities=X,x.extensions=q,x.properties=Z,x.renderLists=at,x.shadowMap=ct,x.state=Y,x.info=J}yt();const xt=new Zo(x,gt);function _t(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),_=!0}function bt(){console.log("THREE.WebGLRenderer: Context Restored."),_=!1;const t=J.autoReset,e=ct.enabled,n=ct.autoUpdate,i=ct.needsUpdate,r=ct.type;yt(),J.autoReset=t,ct.enabled=e,ct.autoUpdate=n,ct.needsUpdate=i,ct.type=r}function St(t){const e=t.target;e.removeEventListener("dispose",St),function(t){(function(t){const e=Z.get(t).programs;void 0!==e&&(e.forEach((function(t){rt.releaseProgram(t)})),t.isShaderMaterial&&rt.releaseShaderCache(t))})(t),Z.remove(t)}(e)}this.xr=xt,this.getContext=function(){return gt},this.getContextAttributes=function(){return gt.getContextAttributes()},this.forceContextLoss=function(){const t=q.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=q.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return P},this.setPixelRatio=function(t){void 0!==t&&(P=t,this.setSize(R,L,!1))},this.getSize=function(t){return t.set(R,L)},this.setSize=function(t,e,i){xt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(R=t,L=e,n.width=Math.floor(t*P),n.height=Math.floor(e*P),!1!==i&&(n.style.width=t+"px",n.style.height=e+"px"),this.setViewport(0,0,t,e))},this.getDrawingBufferSize=function(t){return t.set(R*P,L*P).floor()},this.setDrawingBufferSize=function(t,e,i){R=t,L=e,P=i,n.width=Math.floor(t*i),n.height=Math.floor(e*i),this.setViewport(0,0,t,e)},this.getCurrentViewport=function(t){return t.copy(T)},this.getViewport=function(t){return t.copy(B)},this.setViewport=function(t,e,n,i){t.isVector4?B.set(t.x,t.y,t.z,t.w):B.set(t,e,n,i),Y.viewport(T.copy(B).multiplyScalar(P).floor())},this.getScissor=function(t){return t.copy(z)},this.setScissor=function(t,e,n,i){t.isVector4?z.set(t.x,t.y,t.z,t.w):z.set(t,e,n,i),Y.scissor(A.copy(z).multiplyScalar(P).floor())},this.getScissorTest=function(){return N},this.setScissorTest=function(t){Y.setScissorTest(N=t)},this.setOpaqueSort=function(t){D=t},this.setTransparentSort=function(t){I=t},this.getClearColor=function(t){return t.copy(ht.getClearColor())},this.setClearColor=function(){ht.setClearColor.apply(ht,arguments)},this.getClearAlpha=function(){return ht.getClearAlpha()},this.setClearAlpha=function(){ht.setClearAlpha.apply(ht,arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;t&&(i|=16384),e&&(i|=256),n&&(i|=1024),gt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",_t,!1),n.removeEventListener("webglcontextrestored",bt,!1),at.dispose(),ot.dispose(),Z.dispose(),$.dispose(),tt.dispose(),it.dispose(),ft.dispose(),rt.dispose(),xt.dispose(),xt.removeEventListener("sessionstart",Tt),xt.removeEventListener("sessionend",At),H&&(H.dispose(),H=null),Ct.stop()},this.renderBufferDirect=function(t,e,n,i,r,s){null===e&&(e=W);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=W),Q.resetTextureUnits();const s=e.fog,a=i.isMeshStandardMaterial?e.environment:null,o=null===M?x.outputEncoding:!0===M.isXRRenderTarget?M.texture.encoding:De,l=(i.isMeshStandardMaterial?tt:$).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!i.normalMap&&!!n.attributes.tangent,u=!!n.morphAttributes.position,d=!!n.morphAttributes.normal,p=!!n.morphAttributes.color,m=i.toneMapped?x.toneMapping:K,f=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==f?f.length:0,y=Z.get(i),_=g.state.lights;if(!0===F&&(!0===U||t!==E)){const e=t===E&&i.id===S;lt.setState(i,t,e)}let w=!1;i.version===y.__version?y.needsLights&&y.lightsStateVersion!==_.state.version||y.outputEncoding!==o||r.isInstancedMesh&&!1===y.instancing?w=!0:r.isInstancedMesh||!0!==y.instancing?r.isSkinnedMesh&&!1===y.skinning?w=!0:r.isSkinnedMesh||!0!==y.skinning?y.envMap!==l||i.fog&&y.fog!==s?w=!0:void 0===y.numClippingPlanes||y.numClippingPlanes===lt.numPlanes&&y.numIntersection===lt.numIntersection?(y.vertexAlphas!==c||y.vertexTangents!==h||y.morphTargets!==u||y.morphNormals!==d||y.morphColors!==p||y.toneMapping!==m||!0===X.isWebGL2&&y.morphTargetsCount!==v)&&(w=!0):w=!0:w=!0:w=!0:(w=!0,y.__version=i.version);let b=y.currentProgram;!0===w&&(b=zt(i,e,r));let T=!1,A=!1,C=!1;const R=b.getUniforms(),D=y.uniforms;if(Y.useProgram(b.program)&&(T=!0,A=!0,C=!0),i.id!==S&&(S=i.id,A=!0),T||E!==t){if(R.setValue(gt,"projectionMatrix",t.projectionMatrix),X.logarithmicDepthBuffer&&R.setValue(gt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),E!==t&&(E=t,A=!0,C=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const e=R.map.cameraPosition;void 0!==e&&e.setValue(gt,V.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&R.setValue(gt,"isOrthographic",!0===t.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&R.setValue(gt,"viewMatrix",t.matrixWorldInverse)}if(r.isSkinnedMesh){R.setOptional(gt,r,"bindMatrix"),R.setOptional(gt,r,"bindMatrixInverse");const t=r.skeleton;t&&(X.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),R.setValue(gt,"boneTexture",t.boneTexture,Q),R.setValue(gt,"boneTextureSize",t.boneTextureSize)):R.setOptional(gt,t,"boneMatrices"))}const I=n.morphAttributes;var B,z;return(void 0!==I.position||void 0!==I.normal||void 0!==I.color&&!0===X.isWebGL2)&&ut.update(r,n,i,b),(A||y.receiveShadow!==r.receiveShadow)&&(y.receiveShadow=r.receiveShadow,R.setValue(gt,"receiveShadow",r.receiveShadow)),A&&(R.setValue(gt,"toneMappingExposure",x.toneMappingExposure),y.needsLights&&(z=C,(B=D).ambientLightColor.needsUpdate=z,B.lightProbe.needsUpdate=z,B.directionalLights.needsUpdate=z,B.directionalLightShadows.needsUpdate=z,B.pointLights.needsUpdate=z,B.pointLightShadows.needsUpdate=z,B.spotLights.needsUpdate=z,B.spotLightShadows.needsUpdate=z,B.rectAreaLights.needsUpdate=z,B.hemisphereLights.needsUpdate=z),s&&i.fog&&st.refreshFogUniforms(D,s),st.refreshMaterialUniforms(D,i,P,L,H),ro.upload(gt,y.uniformsList,D,Q)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(ro.upload(gt,y.uniformsList,D,Q),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&R.setValue(gt,"center",r.center),R.setValue(gt,"modelViewMatrix",r.modelViewMatrix),R.setValue(gt,"normalMatrix",r.normalMatrix),R.setValue(gt,"modelMatrix",r.matrixWorld),b}(t,e,n,i,r);Y.setMaterial(i,a);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,u=1;!0===i.wireframe&&(l=nt.getWireframeAttribute(n),u=2),ft.setup(r,i,o,n,l);let d=dt;null!==l&&(h=et.get(l),d=pt,d.setIndex(h));const p=null!==l?l.count:c.count,m=n.drawRange.start*u,f=n.drawRange.count*u,v=null!==s?s.start*u:0,y=null!==s?s.count*u:1/0,_=Math.max(m,v),w=Math.min(p,m+f,v+y)-1,b=Math.max(0,w-_+1);if(0!==b){if(r.isMesh)!0===i.wireframe?(Y.setLineWidth(i.wireframeLinewidth*j()),d.setMode(1)):d.setMode(4);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),Y.setLineWidth(t*j()),r.isLineSegments?d.setMode(1):r.isLineLoop?d.setMode(2):d.setMode(3)}else r.isPoints?d.setMode(0):r.isSprite&&d.setMode(4);if(r.isInstancedMesh)d.renderInstances(_,b,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(_,b,t)}else d.render(_,b)}},this.compile=function(t,e){g=ot.get(t),g.init(),y.push(g),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(g.pushLight(t),t.castShadow&&g.pushShadow(t))})),g.setupLights(x.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++)zt(n[i],t,e);else zt(n,t,e)})),y.pop(),g=null};let Et=null;function Tt(){Ct.stop()}function At(){Ct.start()}const Ct=new _s;function Pt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)g.pushLight(t),t.castShadow&&g.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||O.intersectsSprite(t)){i&&V.setFromMatrixPosition(t.matrixWorld).applyMatrix4(G);const e=it.update(t),r=t.material;r.visible&&d.push(t,e,r,n,V.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==J.render.frame&&(t.skeleton.update(),t.skeleton.frame=J.render.frame),!t.frustumCulled||O.intersectsObject(t))){i&&V.setFromMatrixPosition(t.matrixWorld).applyMatrix4(G);const e=it.update(t),r=t.material;if(Array.isArray(r)){const i=e.groups;for(let s=0,a=i.length;s<a;s++){const a=i[s],o=r[a.materialIndex];o&&o.visible&&d.push(t,e,o,n,V.z,a)}}else r.visible&&d.push(t,e,r,n,V.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)Pt(r[t],e,n,i)}function Dt(t,e,n,i){const r=t.opaque,s=t.transmissive,o=t.transparent;g.setupLightsView(n),s.length>0&&function(t,e,n){const i=X.isWebGL2;null===H&&(H=new qn(1,1,{generateMipmaps:!0,type:null!==mt.convert(Lt)?Lt:Mt,minFilter:wt,samples:i&&!0===a?4:0})),x.getDrawingBufferSize(k),i?H.setSize(k.x,k.y):H.setSize(Sn(k.x),Sn(k.y));const r=x.getRenderTarget();x.setRenderTarget(H),x.clear();const s=x.toneMapping;x.toneMapping=K,It(t,e,n),x.toneMapping=s,Q.updateMultisampleRenderTarget(H),Q.updateRenderTargetMipmap(H),x.setRenderTarget(r)}(r,e,n),i&&Y.viewport(T.copy(i)),r.length>0&&It(r,e,n),s.length>0&&It(s,e,n),o.length>0&&It(o,e,n),Y.buffers.depth.setTest(!0),Y.buffers.depth.setMask(!0),Y.buffers.color.setMask(!0),Y.setPolygonOffset(!1)}function It(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===i?s.material:i,c=s.group;a.layers.test(n.layers)&&Bt(a,e,n,o,l,c)}}function Bt(t,e,n,i,r,s){t.onBeforeRender(x,e,n,i,r,s),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(x,e,n,i,t,s),!0===r.transparent&&r.side===f?(r.side=m,r.needsUpdate=!0,x.renderBufferDirect(n,e,i,r,t,s),r.side=p,r.needsUpdate=!0,x.renderBufferDirect(n,e,i,r,t,s),r.side=f):x.renderBufferDirect(n,e,i,r,t,s),t.onAfterRender(x,e,n,i,r,s)}function zt(t,e,n){!0!==e.isScene&&(e=W);const i=Z.get(t),r=g.state.lights,s=g.state.shadowsArray,a=r.state.version,o=rt.getParameters(t,r.state,s,e,n),l=rt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?tt:$).get(t.envMap||i.environment),void 0===c&&(t.addEventListener("dispose",St),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===a)return Ot(t,o),h}else o.uniforms=rt.getUniforms(t),t.onBuild(n,o,x),t.onBeforeCompile(o,x),h=rt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=lt.uniform),Ot(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=a,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotShadowMatrix.value=r.state.spotShadowMatrix,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const d=h.getUniforms(),p=ro.seqWithValue(d.seq,u);return i.currentProgram=h,i.uniformsList=p,h}function Ot(t,e){const n=Z.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}Ct.setAnimationLoop((function(t){Et&&Et(t)})),"undefined"!=typeof window&&Ct.setContext(window),this.setAnimationLoop=function(t){Et=t,xt.setAnimationLoop(t),null===t?Ct.stop():Ct.start()},xt.addEventListener("sessionstart",Tt),xt.addEventListener("sessionend",At),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===_)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===xt.enabled&&!0===xt.isPresenting&&(!0===xt.cameraAutoUpdate&&xt.updateCamera(e),e=xt.getCamera()),!0===t.isScene&&t.onBeforeRender(x,t,e,M),g=ot.get(t,y.length),g.init(),y.push(g),G.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),O.setFromProjectionMatrix(G),U=this.localClippingEnabled,F=lt.init(this.clippingPlanes,U,e),d=at.get(t,v.length),d.init(),v.push(d),Pt(t,e,0,x.sortObjects),d.finish(),!0===x.sortObjects&&d.sort(D,I),!0===F&&lt.beginShadows();const n=g.state.shadowsArray;if(ct.render(n,t,e),!0===F&&lt.endShadows(),!0===this.info.autoReset&&this.info.reset(),ht.render(d,t),g.setupLights(x.physicallyCorrectLights),e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];Dt(d,t,i,i.viewport)}}else Dt(d,t,e);null!==M&&(Q.updateMultisampleRenderTarget(M),Q.updateRenderTargetMipmap(M)),!0===t.isScene&&t.onAfterRender(x,t,e),ft.resetDefaultState(),S=-1,E=null,y.pop(),g=y.length>0?y[y.length-1]:null,v.pop(),d=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return w},this.getActiveMipmapLevel=function(){return b},this.getRenderTarget=function(){return M},this.setRenderTargetTextures=function(t,e,n){Z.get(t.texture).__webglTexture=e,Z.get(t.depthTexture).__webglTexture=n;const i=Z.get(t);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===q.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const n=Z.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){M=t,w=e,b=n;let i=!0;if(t){const e=Z.get(t);void 0!==e.__useDefaultFramebuffer?(Y.bindFramebuffer(36160,null),i=!1):void 0===e.__webglFramebuffer?Q.setupRenderTarget(t):e.__hasExternalTextures&&Q.rebindTextures(t,Z.get(t.texture).__webglTexture,Z.get(t.depthTexture).__webglTexture)}let r=null,s=!1,a=!1;if(t){const n=t.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(a=!0);const i=Z.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=i[e],s=!0):r=X.isWebGL2&&t.samples>0&&!1===Q.useMultisampledRTT(t)?Z.get(t).__webglMultisampledFramebuffer:i,T.copy(t.viewport),A.copy(t.scissor),C=t.scissorTest}else T.copy(B).multiplyScalar(P).floor(),A.copy(z).multiplyScalar(P).floor(),C=N;if(Y.bindFramebuffer(36160,r)&&X.drawBuffers&&i&&Y.drawBuffers(t,r),Y.viewport(T),Y.scissor(A),Y.setScissorTest(C),s){const i=Z.get(t.texture);gt.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(a){const i=Z.get(t.texture),r=e||0;gt.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,r)}S=-1},this.readRenderTargetPixels=function(t,e,n,i,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=Z.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){Y.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==Nt&&mt.convert(o)!==gt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===Lt&&(q.has("EXT_color_buffer_half_float")||X.isWebGL2&&q.has("EXT_color_buffer_float"));if(!(l===Mt||mt.convert(l)===gt.getParameter(35738)||l===Rt&&(X.isWebGL2||q.has("OES_texture_float")||q.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===gt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&gt.readPixels(e,n,i,r,mt.convert(o),mt.convert(l),s):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const t=null!==M?Z.get(M).__webglFramebuffer:null;Y.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){if(!0!==e.isFramebufferTexture)return void console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),s=Math.floor(e.image.height*i);Q.setTexture2D(e,0),gt.copyTexSubImage2D(3553,n,0,0,t.x,t.y,r,s),Y.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,s=e.image.height,a=mt.convert(n.format),o=mt.convert(n.type);Q.setTexture2D(n,0),gt.pixelStorei(37440,n.flipY),gt.pixelStorei(37441,n.premultiplyAlpha),gt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?gt.texSubImage2D(3553,i,t.x,t.y,r,s,a,o,e.image.data):e.isCompressedTexture?gt.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):gt.texSubImage2D(3553,i,t.x,t.y,a,o,e.image),0===i&&n.generateMipmaps&&gt.generateMipmap(3553),Y.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(x.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const s=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=mt.convert(i.format),c=mt.convert(i.type);let h;if(i.isData3DTexture)Q.setTexture3D(i,0),h=32879;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");Q.setTexture2DArray(i,0),h=35866}gt.pixelStorei(37440,i.flipY),gt.pixelStorei(37441,i.premultiplyAlpha),gt.pixelStorei(3317,i.unpackAlignment);const u=gt.getParameter(3314),d=gt.getParameter(32878),p=gt.getParameter(3316),m=gt.getParameter(3315),f=gt.getParameter(32877),g=n.isCompressedTexture?n.mipmaps[0]:n.image;gt.pixelStorei(3314,g.width),gt.pixelStorei(32878,g.height),gt.pixelStorei(3316,t.min.x),gt.pixelStorei(3315,t.min.y),gt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isData3DTexture?gt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),gt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,g.data)):gt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g),gt.pixelStorei(3314,u),gt.pixelStorei(32878,d),gt.pixelStorei(3316,p),gt.pixelStorei(3315,m),gt.pixelStorei(32877,f),0===r&&i.generateMipmaps&&gt.generateMipmap(h),Y.unbindTexture()},this.initTexture=function(t){Q.setTexture2D(t,0),Y.unbindTexture()},this.resetState=function(){w=0,b=0,M=null,Y.reset(),ft.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Qo.prototype.isWebGLRenderer=!0;class $o extends Qo{}$o.prototype.isWebGL1Renderer=!0;class tl{constructor(t,e=25e-5){this.name="",this.color=new Fn(t),this.density=e}clone(){return new tl(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}tl.prototype.isFogExp2=!0;class el{constructor(t,e=1,n=1e3){this.name="",this.color=new Fn(t),this.near=e,this.far=n}clone(){return new el(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}el.prototype.isFog=!0;class nl extends er{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}nl.prototype.isScene=!0;class il{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=tn,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=yn()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=yn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}il.prototype.isInterleavedBuffer=!0;const rl=new $n;class sl{constructor(t,e,n,i=!1){this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)rl.x=this.getX(e),rl.y=this.getY(e),rl.z=this.getZ(e),rl.applyMatrix4(t),this.setXYZ(e,rl.x,rl.y,rl.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)rl.x=this.getX(e),rl.y=this.getY(e),rl.z=this.getZ(e),rl.applyNormalMatrix(t),this.setXYZ(e,rl.x,rl.y,rl.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)rl.x=this.getX(e),rl.y=this.getY(e),rl.z=this.getZ(e),rl.transformDirection(t),this.setXYZ(e,rl.x,rl.y,rl.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new yr(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new sl(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}sl.prototype.isInterleavedBufferAttribute=!0;class al extends mr{constructor(t){super(),this.type="SpriteMaterial",this.color=new Fn(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let ol;al.prototype.isSpriteMaterial=!0;const ll=new $n,cl=new $n,hl=new $n,ul=new Tn,dl=new Tn,pl=new Li,ml=new $n,fl=new $n,gl=new $n,vl=new Tn,yl=new Tn,xl=new Tn;class _l extends er{constructor(t){if(super(),this.type="Sprite",void 0===ol){ol=new Nr;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new il(t,5);ol.setIndex([0,1,2,0,2,3]),ol.setAttribute("position",new sl(e,3,0,!1)),ol.setAttribute("uv",new sl(e,2,3,!1))}this.geometry=ol,this.material=void 0!==t?t:new al,this.center=new Tn(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),cl.setFromMatrixScale(this.matrixWorld),pl.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),hl.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&cl.multiplyScalar(-hl.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const s=this.center;wl(ml.set(-.5,-.5,0),hl,s,cl,i,r),wl(fl.set(.5,-.5,0),hl,s,cl,i,r),wl(gl.set(.5,.5,0),hl,s,cl,i,r),vl.set(0,0),yl.set(1,0),xl.set(1,1);let a=t.ray.intersectTriangle(ml,fl,gl,!1,ll);if(null===a&&(wl(fl.set(-.5,.5,0),hl,s,cl,i,r),yl.set(0,1),a=t.ray.intersectTriangle(ml,gl,fl,!1,ll),null===a))return;const o=t.ray.origin.distanceTo(ll);o<t.near||o>t.far||e.push({distance:o,point:ll.clone(),uv:dr.getUV(ll,ml,fl,gl,vl,yl,xl,new Tn),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function wl(t,e,n,i,r,s){ul.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(dl.x=s*ul.x-r*ul.y,dl.y=r*ul.x+s*ul.y):dl.copy(ul),t.copy(e),t.x+=dl.x,t.y+=dl.y,t.applyMatrix4(pl)}_l.prototype.isSprite=!0;const bl=new $n,Ml=new $n;class Sl extends er{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0){e=Math.abs(e);const n=this.levels;let i;for(i=0;i<n.length&&!(e<n[i].distance);i++);return n.splice(i,0,{distance:e,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,i;for(n=1,i=e.length;n<i&&!(t<e[n].distance);n++);return e[n-1].object}return null}raycast(t,e){if(this.levels.length>0){bl.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(bl);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){bl.setFromMatrixPosition(t.matrixWorld),Ml.setFromMatrixPosition(this.matrixWorld);const n=bl.distanceTo(Ml)/t.zoom;let i,r;for(e[0].object.visible=!0,i=1,r=e.length;i<r&&n>=e[i].distance;i++)e[i-1].object.visible=!1,e[i].object.visible=!0;for(this._currentLevel=i-1;i<r;i++)e[i].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const n=this.levels;for(let t=0,i=n.length;t<i;t++){const i=n[t];e.object.levels.push({object:i.object.uuid,distance:i.distance})}return e}}const El=new $n,Tl=new jn,Al=new jn,Cl=new $n,Rl=new Li;class Ll extends ts{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Li,this.bindMatrixInverse=new Li}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new jn,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const n=this.skeleton,i=this.geometry;Tl.fromBufferAttribute(i.attributes.skinIndex,t),Al.fromBufferAttribute(i.attributes.skinWeight,t),El.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=Al.getComponent(t);if(0!==i){const r=Tl.getComponent(t);Rl.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(Cl.copy(El).applyMatrix4(Rl),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}Ll.prototype.isSkinnedMesh=!0;class Pl extends er{constructor(){super(),this.type="Bone"}}Pl.prototype.isBone=!0;class Dl extends Wn{constructor(t=null,e=1,n=1,i,r,s,a,o,l=pt,c=pt,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Dl.prototype.isDataTexture=!0;const Il=new Li,Bl=new Li;class zl{constructor(t=[],e=[]){this.uuid=yn(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Li)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Li;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:Bl;Il.multiplyMatrices(r,e[i]),Il.toArray(n,16*i)}null!==i&&(i.needsUpdate=!0)}clone(){return new zl(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=Mn(t),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new Dl(e,t,t,Nt,Rt);return n.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=n,this.boneTextureSize=t,this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t)return n}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,i=t.bones.length;n<i;n++){const i=t.bones[n];let r=e[i];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",i),r=new Pl),this.bones.push(r),this.boneInverses.push((new Li).fromArray(t.boneInverses[n]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,n=this.boneInverses;for(let i=0,r=e.length;i<r;i++){const r=e[i];t.bones.push(r.uuid);const s=n[i];t.boneInverses.push(s.toArray())}return t}}class Nl extends yr{constructor(t,e,n,i=1){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,n),this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}Nl.prototype.isInstancedBufferAttribute=!0;const Ol=new Li,Fl=new Li,Ul=[],Hl=new ts;class Gl extends ts{constructor(t,e,n){super(t,e),this.instanceMatrix=new Nl(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Hl.geometry=this.geometry,Hl.material=this.material,void 0!==Hl.material)for(let r=0;r<i;r++){this.getMatrixAt(r,Ol),Fl.multiplyMatrices(n,Ol),Hl.matrixWorld=Fl,Hl.raycast(t,Ul);for(let t=0,n=Ul.length;t<n;t++){const n=Ul[t];n.instanceId=r,n.object=this,e.push(n)}Ul.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Nl(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}Gl.prototype.isInstancedMesh=!0;class kl extends mr{constructor(t){super(),this.type="LineBasicMaterial",this.color=new Fn(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}kl.prototype.isLineBasicMaterial=!0;const Vl=new $n,Wl=new $n,jl=new Li,ql=new Ri,Xl=new wi;class Yl extends er{constructor(t=new Nr,e=new kl){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)Vl.fromBufferAttribute(e,t-1),Wl.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=Vl.distanceTo(Wl);t.setAttribute("lineDistance",new Ar(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Xl.copy(n.boundingSphere),Xl.applyMatrix4(i),Xl.radius+=r,!1===t.ray.intersectsSphere(Xl))return;jl.copy(i).invert(),ql.copy(t.ray).applyMatrix4(jl);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new $n,c=new $n,h=new $n,u=new $n,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index,r=n.attributes.position;if(null!==i)for(let n=Math.max(0,s.start),a=Math.min(i.count,s.start+s.count)-1;n<a;n+=d){const s=i.getX(n),a=i.getX(n+1);if(l.fromBufferAttribute(r,s),c.fromBufferAttribute(r,a),ql.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(u);d<t.near||d>t.far||e.push({distance:d,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,s.start),i=Math.min(r.count,s.start+s.count)-1;n<i;n+=d){if(l.fromBufferAttribute(r,n),c.fromBufferAttribute(r,n+1),ql.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Yl.prototype.isLine=!0;const Jl=new $n,Zl=new $n;class Kl extends Yl{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)Jl.fromBufferAttribute(e,t),Zl.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+Jl.distanceTo(Zl);t.setAttribute("lineDistance",new Ar(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Kl.prototype.isLineSegments=!0;class Ql extends Yl{constructor(t,e){super(t,e),this.type="LineLoop"}}Ql.prototype.isLineLoop=!0;class $l extends mr{constructor(t){super(),this.type="PointsMaterial",this.color=new Fn(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}$l.prototype.isPointsMaterial=!0;const tc=new Li,ec=new Ri,nc=new wi,ic=new $n;class rc extends er{constructor(t=new Nr,e=new $l){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),nc.copy(n.boundingSphere),nc.applyMatrix4(i),nc.radius+=r,!1===t.ray.intersectsSphere(nc))return;tc.copy(i).invert(),ec.copy(t.ray).applyMatrix4(tc);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position;if(null!==r)for(let n=Math.max(0,s.start),l=Math.min(r.count,s.start+s.count);n<l;n++){const s=r.getX(n);ic.fromBufferAttribute(a,s),sc(ic,s,o,i,t,e,this)}else for(let n=Math.max(0,s.start),r=Math.min(a.count,s.start+s.count);n<r;n++)ic.fromBufferAttribute(a,n),sc(ic,n,o,i,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function sc(t,e,n,i,r,s,a){const o=ec.distanceSqToPoint(t);if(o<n){const n=new $n;ec.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:a})}}rc.prototype.isPoints=!0;class ac extends Wn{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.minFilter=void 0!==s?s:yt,this.magFilter=void 0!==r?r:yt,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}ac.prototype.isVideoTexture=!0;class oc extends Wn{constructor(t,e,n){super({width:t,height:e}),this.format=n,this.magFilter=pt,this.minFilter=pt,this.generateMipmaps=!1,this.needsUpdate=!0}}oc.prototype.isFramebufferTexture=!0;class lc extends Wn{constructor(t,e,n,i,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}lc.prototype.isCompressedTexture=!0;class cc extends Wn{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.needsUpdate=!0}}cc.prototype.isCanvasTexture=!0;class hc extends Nr{constructor(t=1,e=8,n=0,i=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},e=Math.max(3,e);const r=[],s=[],a=[],o=[],l=new $n,c=new Tn;s.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=n+r/e*i;l.x=t*Math.cos(u),l.y=t*Math.sin(u),s.push(l.x,l.y,l.z),a.push(0,0,1),c.x=(s[h]/t+1)/2,c.y=(s[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new Ar(s,3)),this.setAttribute("normal",new Ar(a,3)),this.setAttribute("uv",new Ar(o,2))}static fromJSON(t){return new hc(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class uc extends Nr{constructor(t=1,e=1,n=1,i=8,r=1,s=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;i=Math.floor(i),r=Math.floor(r);const c=[],h=[],u=[],d=[];let p=0;const m=[],f=n/2;let g=0;function v(n){const r=p,s=new Tn,m=new $n;let v=0;const y=!0===n?t:e,x=!0===n?1:-1;for(let t=1;t<=i;t++)h.push(0,f*x,0),u.push(0,x,0),d.push(.5,.5),p++;const _=p;for(let t=0;t<=i;t++){const e=t/i*o+a,n=Math.cos(e),r=Math.sin(e);m.x=y*r,m.y=f*x,m.z=y*n,h.push(m.x,m.y,m.z),u.push(0,x,0),s.x=.5*n+.5,s.y=.5*r*x+.5,d.push(s.x,s.y),p++}for(let t=0;t<i;t++){const e=r+t,i=_+t;!0===n?c.push(i,i+1,e):c.push(i+1,i,e),v+=3}l.addGroup(g,v,!0===n?1:2),g+=v}!function(){const s=new $n,v=new $n;let y=0;const x=(e-t)/n;for(let l=0;l<=r;l++){const c=[],g=l/r,y=g*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i,r=e*o+a,l=Math.sin(r),m=Math.cos(r);v.x=y*l,v.y=-g*n+f,v.z=y*m,h.push(v.x,v.y,v.z),s.set(l,x,m).normalize(),u.push(s.x,s.y,s.z),d.push(e,1-g),c.push(p++)}m.push(c)}for(let t=0;t<i;t++)for(let e=0;e<r;e++){const n=m[e][t],i=m[e+1][t],r=m[e+1][t+1],s=m[e][t+1];c.push(n,i,s),c.push(i,r,s),y+=6}l.addGroup(g,y,0),g+=y}(),!1===s&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new Ar(h,3)),this.setAttribute("normal",new Ar(u,3)),this.setAttribute("uv",new Ar(d,2))}static fromJSON(t){return new uc(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class dc extends uc{constructor(t=1,e=1,n=8,i=1,r=!1,s=0,a=2*Math.PI){super(0,t,e,n,i,r,s,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(t){return new dc(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class pc extends Nr{constructor(t=[],e=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i};const r=[],s=[];function a(t,e,n,i){const r=i+1,s=[];for(let i=0;i<=r;i++){s[i]=[];const a=t.clone().lerp(n,i/r),o=e.clone().lerp(n,i/r),l=r-i;for(let t=0;t<=l;t++)s[i][t]=0===t&&i===r?a:a.clone().lerp(o,t/l)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const n=Math.floor(e/2);e%2==0?(o(s[t][n+1]),o(s[t+1][n]),o(s[t][n])):(o(s[t][n+1]),o(s[t+1][n+1]),o(s[t+1][n]))}}function o(t){r.push(t.x,t.y,t.z)}function l(e,n){const i=3*e;n.x=t[i+0],n.y=t[i+1],n.z=t[i+2]}function c(t,e,n,i){i<0&&1===t.x&&(s[e]=t.x-1),0===n.x&&0===n.z&&(s[e]=i/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}!function(t){const n=new $n,i=new $n,r=new $n;for(let s=0;s<e.length;s+=3)l(e[s+0],n),l(e[s+1],i),l(e[s+2],r),a(n,i,r,t)}(i),function(t){const e=new $n;for(let n=0;n<r.length;n+=3)e.x=r[n+0],e.y=r[n+1],e.z=r[n+2],e.normalize().multiplyScalar(t),r[n+0]=e.x,r[n+1]=e.y,r[n+2]=e.z}(n),function(){const t=new $n;for(let n=0;n<r.length;n+=3){t.x=r[n+0],t.y=r[n+1],t.z=r[n+2];const i=h(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);s.push(i,1-a)}var e;(function(){const t=new $n,e=new $n,n=new $n,i=new $n,a=new Tn,o=new Tn,l=new Tn;for(let u=0,d=0;u<r.length;u+=9,d+=6){t.set(r[u+0],r[u+1],r[u+2]),e.set(r[u+3],r[u+4],r[u+5]),n.set(r[u+6],r[u+7],r[u+8]),a.set(s[d+0],s[d+1]),o.set(s[d+2],s[d+3]),l.set(s[d+4],s[d+5]),i.copy(t).add(e).add(n).divideScalar(3);const p=h(i);c(a,d+0,t,p),c(o,d+2,e,p),c(l,d+4,n,p)}})(),function(){for(let t=0;t<s.length;t+=6){const e=s[t+0],n=s[t+2],i=s[t+4],r=Math.max(e,n,i),a=Math.min(e,n,i);r>.9&&a<.1&&(e<.2&&(s[t+0]+=1),n<.2&&(s[t+2]+=1),i<.2&&(s[t+4]+=1))}}()}(),this.setAttribute("position",new Ar(r,3)),this.setAttribute("normal",new Ar(r.slice(),3)),this.setAttribute("uv",new Ar(s,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new pc(t.vertices,t.indices,t.radius,t.details)}}class mc extends pc{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2,i=1/n;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new mc(t.radius,t.detail)}}const fc=new $n,gc=new $n,vc=new $n,yc=new dr;class xc extends Nr{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const n=4,i=Math.pow(10,n),r=Math.cos(gn*e),s=t.getIndex(),a=t.getAttribute("position"),o=s?s.count:a.count,l=[0,0,0],c=["a","b","c"],h=new Array(3),u={},d=[];for(let t=0;t<o;t+=3){s?(l[0]=s.getX(t),l[1]=s.getX(t+1),l[2]=s.getX(t+2)):(l[0]=t,l[1]=t+1,l[2]=t+2);const{a:e,b:n,c:o}=yc;if(e.fromBufferAttribute(a,l[0]),n.fromBufferAttribute(a,l[1]),o.fromBufferAttribute(a,l[2]),yc.getNormal(vc),h[0]=`${Math.round(e.x*i)},${Math.round(e.y*i)},${Math.round(e.z*i)}`,h[1]=`${Math.round(n.x*i)},${Math.round(n.y*i)},${Math.round(n.z*i)}`,h[2]=`${Math.round(o.x*i)},${Math.round(o.y*i)},${Math.round(o.z*i)}`,h[0]!==h[1]&&h[1]!==h[2]&&h[2]!==h[0])for(let t=0;t<3;t++){const e=(t+1)%3,n=h[t],i=h[e],s=yc[c[t]],a=yc[c[e]],o=`${n}_${i}`,p=`${i}_${n}`;p in u&&u[p]?(vc.dot(u[p].normal)<=r&&(d.push(s.x,s.y,s.z),d.push(a.x,a.y,a.z)),u[p]=null):o in u||(u[o]={index0:l[t],index1:l[e],normal:vc.clone()})}}for(const t in u)if(u[t]){const{index0:e,index1:n}=u[t];fc.fromBufferAttribute(a,e),gc.fromBufferAttribute(a,n),d.push(fc.x,fc.y,fc.z),d.push(gc.x,gc.y,gc.z)}this.setAttribute("position",new Ar(d,3))}}}class _c{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)n=this.getPoint(s/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let s;s=e||t*n[r-1];let a,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),a=n[i]-s,a<0)o=i+1;else{if(!(a>0)){l=i;break}l=i-1}if(i=l,n[i]===s)return i/(r-1);const c=n[i];return(i+(s-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),a=this.getPoint(r),o=e||(s.isVector2?new Tn:new $n);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new $n,i=[],r=[],s=[],a=new $n,o=new Li;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new $n)}r[0]=new $n,s[0]=new $n;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],a),s[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(i[e-1],i[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(xn(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(xn(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),s[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class wc extends _c{constructor(t=0,e=0,n=1,i=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const n=e||new Tn,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=s?0:i),!0!==this.aClockwise||s||(r===i?r=-i:r-=i);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}wc.prototype.isEllipseCurve=!0;class bc extends wc{constructor(t,e,n,i,r,s){super(t,e,n,n,i,r,s),this.type="ArcCurve"}}function Mc(){let t=0,e=0,n=0,i=0;function r(r,s,a,o){t=r,e=a,n=-3*r+3*s-2*a-o,i=2*r-2*s+a+o}return{initCatmullRom:function(t,e,n,i,s){r(e,n,s*(n-t),s*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,s,a,o){let l=(e-t)/s-(n-t)/(s+a)+(n-e)/a,c=(n-e)/a-(i-e)/(a+o)+(i-n)/o;l*=a,c*=a,r(e,n,l,c)},calc:function(r){const s=r*r;return t+e*r+n*s+i*(s*r)}}}bc.prototype.isArcCurve=!0;const Sc=new $n,Ec=new Mc,Tc=new Mc,Ac=new Mc;class Cc extends _c{constructor(t=[],e=!1,n="centripetal",i=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new $n){const n=e,i=this.points,r=i.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=i[(l-1)%r]:(Sc.subVectors(i[0],i[1]).add(i[0]),a=Sc);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(Sc.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=Sc),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),Ec.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,n,i),Tc.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,n,i),Ac.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,n,i)}else"catmullrom"===this.curveType&&(Ec.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),Tc.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),Ac.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return n.set(Ec.calc(c),Tc.calc(c),Ac.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new $n).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Rc(t,e,n,i,r){const s=.5*(i-e),a=.5*(r-n),o=t*t;return(2*n-2*i+s+a)*(t*o)+(-3*n+3*i-2*s-a)*o+s*t+n}function Lc(t,e,n,i){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function Pc(t,e,n,i,r){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}Cc.prototype.isCatmullRomCurve3=!0;class Dc extends _c{constructor(t=new Tn,e=new Tn,n=new Tn,i=new Tn){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new Tn){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(Pc(t,i.x,r.x,s.x,a.x),Pc(t,i.y,r.y,s.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Dc.prototype.isCubicBezierCurve=!0;class Ic extends _c{constructor(t=new $n,e=new $n,n=new $n,i=new $n){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new $n){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(Pc(t,i.x,r.x,s.x,a.x),Pc(t,i.y,r.y,s.y,a.y),Pc(t,i.z,r.z,s.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Ic.prototype.isCubicBezierCurve3=!0;class Bc extends _c{constructor(t=new Tn,e=new Tn){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Tn){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new Tn;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Bc.prototype.isLineCurve=!0;class zc extends _c{constructor(t=new $n,e=new $n){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new $n){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Nc extends _c{constructor(t=new Tn,e=new Tn,n=new Tn){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Tn){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(Lc(t,i.x,r.x,s.x),Lc(t,i.y,r.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Nc.prototype.isQuadraticBezierCurve=!0;class Oc extends _c{constructor(t=new $n,e=new $n,n=new $n){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new $n){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(Lc(t,i.x,r.x,s.x),Lc(t,i.y,r.y,s.y),Lc(t,i.z,r.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Oc.prototype.isQuadraticBezierCurve3=!0;class Fc extends _c{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new Tn){const n=e,i=this.points,r=(i.length-1)*t,s=Math.floor(r),a=r-s,o=i[0===s?s:s-1],l=i[s],c=i[s>i.length-2?i.length-1:s+1],h=i[s>i.length-3?i.length-1:s+2];return n.set(Rc(a,o.x,l.x,c.x,h.x),Rc(a,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Tn).fromArray(n))}return this}}Fc.prototype.isSplineCurve=!0;var Uc=Object.freeze({__proto__:null,ArcCurve:bc,CatmullRomCurve3:Cc,CubicBezierCurve:Dc,CubicBezierCurve3:Ic,EllipseCurve:wc,LineCurve:Bc,LineCurve3:zc,QuadraticBezierCurve:Nc,QuadraticBezierCurve3:Oc,SplineCurve:Fc});class Hc extends _c{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Bc(e,t))}getPoint(t,e){const n=t*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const t=i[r]-n,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const i=o[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new Uc[n.type]).fromJSON(n))}return this}}class Gc extends Hc{constructor(t){super(),this.type="Path",this.currentPoint=new Tn,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new Bc(this.currentPoint.clone(),new Tn(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new Nc(this.currentPoint.clone(),new Tn(t,e),new Tn(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,s){const a=new Dc(this.currentPoint.clone(),new Tn(t,e),new Tn(n,i),new Tn(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new Fc(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,n,i,r,s),this}absarc(t,e,n,i,r,s){return this.absellipse(t,e,n,n,i,r,s),this}ellipse(t,e,n,i,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,n,i,r,s,a,o),this}absellipse(t,e,n,i,r,s,a,o){const l=new wc(t,e,n,i,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class kc extends Gc{constructor(t){super(t),this.uuid=yn(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new Gc).fromJSON(n))}return this}}function Vc(t,e,n,i,r){let s,a;if(r===function(t,e,n,i){let r=0;for(let s=e,a=n-i;s<n;s+=i)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,n,i)>0)for(s=e;s<n;s+=i)a=hh(s,t[s],t[s+1],a);else for(s=n-i;s>=e;s-=i)a=hh(s,t[s],t[s+1],a);return a&&rh(a,a.next)&&(uh(a),a=a.next),a}function Wc(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!rh(i,i.next)&&0!==ih(i.prev,i,i.next))i=i.next;else{if(uh(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function jc(t,e,n,i,r,s,a){if(!t)return;!a&&s&&function(t,e,n,i){let r=t;do{null===r.z&&(r.z=$c(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,n,i,r,s,a,o,l,c=1;do{for(n=t,t=null,s=null,a=0;n;){for(a++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;n=i}s.nextZ=null,c*=2}while(a>1)}(r)}(t,i,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?Xc(t,i,r,s):qc(t))e.push(o.i/n),e.push(t.i/n),e.push(l.i/n),uh(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?jc(t=Yc(Wc(t),e,n),e,n,i,r,s,2):2===a&&Jc(t,e,n,i,r,s):jc(Wc(t),e,n,i,r,s,1);break}}function qc(t){const e=t.prev,n=t,i=t.next;if(ih(e,n,i)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(eh(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&ih(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Xc(t,e,n,i){const r=t.prev,s=t,a=t.next;if(ih(r,s,a)>=0)return!1;const o=r.x<s.x?r.x<a.x?r.x:a.x:s.x<a.x?s.x:a.x,l=r.y<s.y?r.y<a.y?r.y:a.y:s.y<a.y?s.y:a.y,c=r.x>s.x?r.x>a.x?r.x:a.x:s.x>a.x?s.x:a.x,h=r.y>s.y?r.y>a.y?r.y:a.y:s.y>a.y?s.y:a.y,u=$c(o,l,e,n,i),d=$c(c,h,e,n,i);let p=t.prevZ,m=t.nextZ;for(;p&&p.z>=u&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&eh(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&ih(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&eh(r.x,r.y,s.x,s.y,a.x,a.y,m.x,m.y)&&ih(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=u;){if(p!==t.prev&&p!==t.next&&eh(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&ih(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&eh(r.x,r.y,s.x,s.y,a.x,a.y,m.x,m.y)&&ih(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function Yc(t,e,n){let i=t;do{const r=i.prev,s=i.next.next;!rh(r,s)&&sh(r,i,i.next,s)&&lh(r,s)&&lh(s,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(s.i/n),uh(i),uh(i.next),i=t=s),i=i.next}while(i!==t);return Wc(i)}function Jc(t,e,n,i,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&nh(a,t)){let o=ch(a,t);return a=Wc(a,a.next),o=Wc(o,o.next),jc(a,e,n,i,r,s),void jc(o,e,n,i,r,s)}t=t.next}a=a.next}while(a!==t)}function Zc(t,e){return t.x-e.x}function Kc(t,e){if(e=function(t,e){let n=e;const i=t.x,r=t.y;let s,a=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>a){if(a=t,t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!s)return null;if(i===a)return s;const o=s,l=s.x,c=s.y;let h,u=1/0;n=s;do{i>=n.x&&n.x>=l&&i!==n.x&&eh(r<c?i:a,r,l,c,r<c?a:i,r,n.x,n.y)&&(h=Math.abs(r-n.y)/(i-n.x),lh(n,t)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&Qc(s,n)))&&(s=n,u=h)),n=n.next}while(n!==o);return s}(t,e),e){const n=ch(e,t);Wc(e,e.next),Wc(n,n.next)}}function Qc(t,e){return ih(t.prev,t,e.prev)<0&&ih(e.next,t,t.next)<0}function $c(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function th(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function eh(t,e,n,i,r,s,a,o){return(r-a)*(e-o)-(t-a)*(s-o)>=0&&(t-a)*(i-o)-(n-a)*(e-o)>=0&&(n-a)*(s-o)-(r-a)*(i-o)>=0}function nh(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&sh(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(lh(t,e)&&lh(e,t)&&function(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{n.y>s!=n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)&&(ih(t.prev,t,e.prev)||ih(t,e.prev,e))||rh(t,e)&&ih(t.prev,t,t.next)>0&&ih(e.prev,e,e.next)>0)}function ih(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function rh(t,e){return t.x===e.x&&t.y===e.y}function sh(t,e,n,i){const r=oh(ih(t,e,n)),s=oh(ih(t,e,i)),a=oh(ih(n,i,t)),o=oh(ih(n,i,e));return r!==s&&a!==o||!(0!==r||!ah(t,n,e))||!(0!==s||!ah(t,i,e))||!(0!==a||!ah(n,t,i))||!(0!==o||!ah(n,e,i))}function ah(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function oh(t){return t>0?1:t<0?-1:0}function lh(t,e){return ih(t.prev,t,t.next)<0?ih(t,e,t.next)>=0&&ih(t,t.prev,e)>=0:ih(t,e,t.prev)<0||ih(t,t.next,e)<0}function ch(t,e){const n=new dh(t.i,t.x,t.y),i=new dh(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,s.next=i,i.prev=s,i}function hh(t,e,n,i){const r=new dh(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function uh(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function dh(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class ph{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return ph.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];mh(t),fh(n,t);let s=t.length;e.forEach(mh);for(let t=0;t<e.length;t++)i.push(s),s+=e[t].length,fh(n,e[t]);const a=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let s=Vc(t,0,r,n,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(i&&(s=function(t,e,n,i){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*i,l=s<a-1?e[s+1]*i:t.length,c=Vc(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(th(c));for(r.sort(Zc),s=0;s<r.length;s++)Kc(r[s],n),n=Wc(n,n.next);return n}(t,e,s,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?1/p:0}return jc(s,a,n,o,l,p),a}(n,i);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function mh(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function fh(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class gh extends Nr{constructor(t=new kc([new Tn(.5,.5),new Tn(-.5,.5),new Tn(-.5,-.5),new Tn(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++)s(t[e]);function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:1,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:vh;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),l=e.amount);let g,v,y,x,_,w=!1;m&&(g=m.getSpacedPoints(o),w=!0,c=!1,v=m.computeFrenetFrames(o,!1),y=new $n,x=new $n,_=new $n),c||(p=0,h=0,u=0,d=0);const b=t.extractPoints(a);let M=b.shape;const S=b.holes;if(!ph.isClockWise(M)){M=M.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];ph.isClockWise(e)&&(S[t]=e.reverse())}}const E=ph.triangulateShape(M,S),T=M;for(let t=0,e=S.length;t<e;t++){const e=S[t];M=M.concat(e)}function A(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}const C=M.length,R=E.length;function L(t,e,n){let i,r,s;const a=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,m=e.y+a/u,f=((n.x-c/d-p)*c-(n.y+l/d-m)*l)/(a*c-o*l);i=p+a*f-t.x,r=m+o*f-t.y;const g=i*i+r*r;if(g<=2)return new Tn(i,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=a,s=Math.sqrt(h)):(i=a,r=o,s=Math.sqrt(h/2))}return new Tn(i/s,r/s)}const P=[];for(let t=0,e=T.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),P[t]=L(T[t],T[n],T[i]);const D=[];let I,B=P.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];I=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),I[t]=L(e[t],e[i],e[r]);D.push(I),B=B.concat(I)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],P[t],i);O(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);O(r.x,r.y,-n)}}}const z=u+d;for(let t=0;t<C;t++){const e=c?A(M[t],B[t],z):M[t];w?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),_.copy(g[0]).add(x).add(y),O(_.x,_.y,_.z)):O(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<C;e++){const n=c?A(M[e],B[e],z):M[e];w?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),_.copy(g[t]).add(x).add(y),O(_.x,_.y,_.z)):O(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],P[t],i);O(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);w?O(r.x,r.y+g[o-1].y,g[o-1].x+n):O(r.x,r.y,l+n)}}}function N(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=C*t,s=C*(t+1);U(e+i+n,e+r+n,e+r+s,e+i+s)}}}function O(t,e,n){s.push(t),s.push(e),s.push(n)}function F(t,e,r){H(t),H(e),H(r);const s=i.length/3,a=f.generateTopUV(n,i,s-3,s-2,s-1);G(a[0]),G(a[1]),G(a[2])}function U(t,e,r,s){H(t),H(e),H(s),H(e),H(r),H(s);const a=i.length/3,o=f.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);G(o[0]),G(o[1]),G(o[3]),G(o[1]),G(o[2]),G(o[3])}function H(t){i.push(s[3*t+0]),i.push(s[3*t+1]),i.push(s[3*t+2])}function G(t){r.push(t.x),r.push(t.y)}!function(){const t=i.length/3;if(c){let t=0,e=C*t;for(let t=0;t<R;t++){const n=E[t];F(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=C*t;for(let t=0;t<R;t++){const n=E[t];F(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<R;t++){const e=E[t];F(e[2],e[1],e[0])}for(let t=0;t<R;t++){const e=E[t];F(e[0]+C*o,e[1]+C*o,e[2]+C*o)}}n.addGroup(t,i.length/3-t,0)}(),function(){const t=i.length/3;let e=0;N(T,e),e+=T.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];N(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)}()}this.setAttribute("position",new Ar(i,3)),this.setAttribute("uv",new Ar(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new Uc[i.type]).fromJSON(i)),new gh(n,t.options)}}const vh={generateTopUV:function(t,e,n,i,r){const s=e[3*n],a=e[3*n+1],o=e[3*i],l=e[3*i+1],c=e[3*r],h=e[3*r+1];return[new Tn(s,a),new Tn(o,l),new Tn(c,h)]},generateSideWallUV:function(t,e,n,i,r,s){const a=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new Tn(a,1-l),new Tn(c,1-u),new Tn(d,1-m),new Tn(f,1-v)]:[new Tn(o,1-l),new Tn(h,1-u),new Tn(p,1-m),new Tn(g,1-v)]}};class yh extends pc{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;super([-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new yh(t.radius,t.detail)}}class xh extends Nr{constructor(t=[new Tn(0,.5),new Tn(.5,0),new Tn(0,-.5)],e=12,n=0,i=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},e=Math.floor(e),i=xn(i,0,2*Math.PI);const r=[],s=[],a=[],o=[],l=[],c=1/e,h=new $n,u=new Tn,d=new $n,p=new $n,m=new $n;let f=0,g=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,m.copy(d),d.normalize(),o.push(d.x,d.y,d.z);break;case t.length-1:o.push(m.x,m.y,m.z);break;default:f=t[e+1].x-t[e].x,g=t[e+1].y-t[e].y,d.x=1*g,d.y=-f,d.z=0*g,p.copy(d),d.x+=m.x,d.y+=m.y,d.z+=m.z,d.normalize(),o.push(d.x,d.y,d.z),m.copy(p)}for(let r=0;r<=e;r++){const d=n+r*c*i,p=Math.sin(d),m=Math.cos(d);for(let n=0;n<=t.length-1;n++){h.x=t[n].x*p,h.y=t[n].y,h.z=t[n].x*m,s.push(h.x,h.y,h.z),u.x=r/e,u.y=n/(t.length-1),a.push(u.x,u.y);const i=o[3*n+0]*p,c=o[3*n+1],d=o[3*n+0]*m;l.push(i,c,d)}}for(let n=0;n<e;n++)for(let e=0;e<t.length-1;e++){const i=e+n*t.length,s=i,a=i+t.length,o=i+t.length+1,l=i+1;r.push(s,a,l),r.push(o,l,a)}this.setIndex(r),this.setAttribute("position",new Ar(s,3)),this.setAttribute("uv",new Ar(a,2)),this.setAttribute("normal",new Ar(l,3))}static fromJSON(t){return new xh(t.points,t.segments,t.phiStart,t.phiLength)}}class _h extends pc{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new _h(t.radius,t.detail)}}class wh extends Nr{constructor(t=.5,e=1,n=8,i=1,r=0,s=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s},n=Math.max(3,n);const a=[],o=[],l=[],c=[];let h=t;const u=(e-t)/(i=Math.max(1,i)),d=new $n,p=new Tn;for(let t=0;t<=i;t++){for(let t=0;t<=n;t++){const i=r+t/n*s;d.x=h*Math.cos(i),d.y=h*Math.sin(i),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,c.push(p.x,p.y)}h+=u}for(let t=0;t<i;t++){const e=t*(n+1);for(let t=0;t<n;t++){const i=t+e,r=i,s=i+n+1,o=i+n+2,l=i+1;a.push(r,s,l),a.push(s,o,l)}}this.setIndex(a),this.setAttribute("position",new Ar(o,3)),this.setAttribute("normal",new Ar(l,3)),this.setAttribute("uv",new Ar(c,2))}static fromJSON(t){return new wh(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class bh extends Nr{constructor(t=new kc([new Tn(0,.5),new Tn(-.5,-.5),new Tn(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===ph.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===ph.isClockWise(e)&&(h[t]=e.reverse())}const u=ph.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],i=e[0]+a,r=e[1]+a,s=e[2]+a;n.push(i,r,s),o+=3}}this.setIndex(n),this.setAttribute("position",new Ar(i,3)),this.setAttribute("normal",new Ar(r,3)),this.setAttribute("uv",new Ar(s,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new bh(n,t.curveSegments)}}class Mh extends Nr{constructor(t=1,e=32,n=16,i=0,r=2*Math.PI,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(s+a,Math.PI);let l=0;const c=[],h=new $n,u=new $n,d=[],p=[],m=[],f=[];for(let d=0;d<=n;d++){const g=[],v=d/n;let y=0;0==d&&0==s?y=.5/e:d==n&&o==Math.PI&&(y=-.5/e);for(let n=0;n<=e;n++){const o=n/e;h.x=-t*Math.cos(i+o*r)*Math.sin(s+v*a),h.y=t*Math.cos(s+v*a),h.z=t*Math.sin(i+o*r)*Math.sin(s+v*a),p.push(h.x,h.y,h.z),u.copy(h).normalize(),m.push(u.x,u.y,u.z),f.push(o+y,1-v),g.push(l++)}c.push(g)}for(let t=0;t<n;t++)for(let i=0;i<e;i++){const e=c[t][i+1],r=c[t][i],a=c[t+1][i],l=c[t+1][i+1];(0!==t||s>0)&&d.push(e,r,l),(t!==n-1||o<Math.PI)&&d.push(r,a,l)}this.setIndex(d),this.setAttribute("position",new Ar(p,3)),this.setAttribute("normal",new Ar(m,3)),this.setAttribute("uv",new Ar(f,2))}static fromJSON(t){return new Mh(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class Sh extends pc{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new Sh(t.radius,t.detail)}}class Eh extends Nr{constructor(t=1,e=.4,n=8,i=6,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},n=Math.floor(n),i=Math.floor(i);const s=[],a=[],o=[],l=[],c=new $n,h=new $n,u=new $n;for(let s=0;s<=n;s++)for(let d=0;d<=i;d++){const p=d/i*r,m=s/n*Math.PI*2;h.x=(t+e*Math.cos(m))*Math.cos(p),h.y=(t+e*Math.cos(m))*Math.sin(p),h.z=e*Math.sin(m),a.push(h.x,h.y,h.z),c.x=t*Math.cos(p),c.y=t*Math.sin(p),u.subVectors(h,c).normalize(),o.push(u.x,u.y,u.z),l.push(d/i),l.push(s/n)}for(let t=1;t<=n;t++)for(let e=1;e<=i;e++){const n=(i+1)*t+e-1,r=(i+1)*(t-1)+e-1,a=(i+1)*(t-1)+e,o=(i+1)*t+e;s.push(n,r,o),s.push(r,a,o)}this.setIndex(s),this.setAttribute("position",new Ar(a,3)),this.setAttribute("normal",new Ar(o,3)),this.setAttribute("uv",new Ar(l,2))}static fromJSON(t){return new Eh(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Th extends Nr{constructor(t=1,e=.4,n=64,i=8,r=2,s=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:s},n=Math.floor(n),i=Math.floor(i);const a=[],o=[],l=[],c=[],h=new $n,u=new $n,d=new $n,p=new $n,m=new $n,f=new $n,g=new $n;for(let a=0;a<=n;++a){const y=a/n*r*Math.PI*2;v(y,r,s,t,d),v(y+.01,r,s,t,p),f.subVectors(p,d),g.addVectors(p,d),m.crossVectors(f,g),g.crossVectors(m,f),m.normalize(),g.normalize();for(let t=0;t<=i;++t){const r=t/i*Math.PI*2,s=-e*Math.cos(r),p=e*Math.sin(r);h.x=d.x+(s*g.x+p*m.x),h.y=d.y+(s*g.y+p*m.y),h.z=d.z+(s*g.z+p*m.z),o.push(h.x,h.y,h.z),u.subVectors(h,d).normalize(),l.push(u.x,u.y,u.z),c.push(a/n),c.push(t/i)}}for(let t=1;t<=n;t++)for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1),r=(i+1)*t+(e-1),s=(i+1)*t+e,o=(i+1)*(t-1)+e;a.push(n,r,o),a.push(r,s,o)}function v(t,e,n,i,r){const s=Math.cos(t),a=Math.sin(t),o=n/e*t,l=Math.cos(o);r.x=i*(2+l)*.5*s,r.y=i*(2+l)*a*.5,r.z=i*Math.sin(o)*.5}this.setIndex(a),this.setAttribute("position",new Ar(o,3)),this.setAttribute("normal",new Ar(l,3)),this.setAttribute("uv",new Ar(c,2))}static fromJSON(t){return new Th(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Ah extends Nr{constructor(t=new Oc(new $n(-1,-1,0),new $n(-1,1,0),new $n(1,1,0)),e=64,n=1,i=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r};const s=t.computeFrenetFrames(e,r);this.tangents=s.tangents,this.normals=s.normals,this.binormals=s.binormals;const a=new $n,o=new $n,l=new Tn;let c=new $n;const h=[],u=[],d=[],p=[];function m(r){c=t.getPointAt(r/e,c);const l=s.normals[r],d=s.binormals[r];for(let t=0;t<=i;t++){const e=t/i*Math.PI*2,r=Math.sin(e),s=-Math.cos(e);o.x=s*l.x+r*d.x,o.y=s*l.y+r*d.y,o.z=s*l.z+r*d.z,o.normalize(),u.push(o.x,o.y,o.z),a.x=c.x+n*o.x,a.y=c.y+n*o.y,a.z=c.z+n*o.z,h.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)m(t);m(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let n=0;n<=i;n++)l.x=t/e,l.y=n/i,d.push(l.x,l.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1),r=(i+1)*t+(e-1),s=(i+1)*t+e,a=(i+1)*(t-1)+e;p.push(n,r,a),p.push(r,s,a)}}()}(),this.setIndex(p),this.setAttribute("position",new Ar(h,3)),this.setAttribute("normal",new Ar(u,3)),this.setAttribute("uv",new Ar(d,2))}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Ah((new Uc[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class Ch extends Nr{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],n=new Set,i=new $n,r=new $n;if(null!==t.index){const s=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,l=o.length;t<l;++t){const l=o[t],c=l.start;for(let t=c,o=c+l.count;t<o;t+=3)for(let o=0;o<3;o++){const l=a.getX(t+o),c=a.getX(t+(o+1)%3);i.fromBufferAttribute(s,l),r.fromBufferAttribute(s,c),!0===Rh(i,r,n)&&(e.push(i.x,i.y,i.z),e.push(r.x,r.y,r.z))}}}else{const s=t.attributes.position;for(let t=0,a=s.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,l=3*t+(a+1)%3;i.fromBufferAttribute(s,o),r.fromBufferAttribute(s,l),!0===Rh(i,r,n)&&(e.push(i.x,i.y,i.z),e.push(r.x,r.y,r.z))}}this.setAttribute("position",new Ar(e,3))}}}function Rh(t,e,n){const i=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==n.has(i)&&!0!==n.has(r)&&(n.add(i),n.add(r),!0)}var Lh=Object.freeze({__proto__:null,BoxGeometry:ns,BoxBufferGeometry:ns,CircleGeometry:hc,CircleBufferGeometry:hc,ConeGeometry:dc,ConeBufferGeometry:dc,CylinderGeometry:uc,CylinderBufferGeometry:uc,DodecahedronGeometry:mc,DodecahedronBufferGeometry:mc,EdgesGeometry:xc,ExtrudeGeometry:gh,ExtrudeBufferGeometry:gh,IcosahedronGeometry:yh,IcosahedronBufferGeometry:yh,LatheGeometry:xh,LatheBufferGeometry:xh,OctahedronGeometry:_h,OctahedronBufferGeometry:_h,PlaneGeometry:bs,PlaneBufferGeometry:bs,PolyhedronGeometry:pc,PolyhedronBufferGeometry:pc,RingGeometry:wh,RingBufferGeometry:wh,ShapeGeometry:bh,ShapeBufferGeometry:bh,SphereGeometry:Mh,SphereBufferGeometry:Mh,TetrahedronGeometry:Sh,TetrahedronBufferGeometry:Sh,TorusGeometry:Eh,TorusBufferGeometry:Eh,TorusKnotGeometry:Th,TorusKnotBufferGeometry:Th,TubeGeometry:Ah,TubeBufferGeometry:Ah,WireframeGeometry:Ch});class Ph extends mr{constructor(t){super(),this.type="ShadowMaterial",this.color=new Fn(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}Ph.prototype.isShadowMaterial=!0;class Dh extends as{constructor(t){super(t),this.type="RawShaderMaterial"}}Dh.prototype.isRawShaderMaterial=!0;class Ih extends mr{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Fn(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ne,this.normalScale=new Tn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}Ih.prototype.isMeshStandardMaterial=!0;class Bh extends Ih{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Tn(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return xn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new Fn(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Fn(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Fn(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}Bh.prototype.isMeshPhysicalMaterial=!0;class zh extends mr{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new Fn(16777215),this.specular=new Fn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ne,this.normalScale=new Tn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}zh.prototype.isMeshPhongMaterial=!0;class Nh extends mr{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Fn(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ne,this.normalScale=new Tn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Nh.prototype.isMeshToonMaterial=!0;class Oh extends mr{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ne,this.normalScale=new Tn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}Oh.prototype.isMeshNormalMaterial=!0;class Fh extends mr{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new Fn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=Y,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Fh.prototype.isMeshLambertMaterial=!0;class Uh extends mr{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Fn(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ne,this.normalScale=new Tn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}Uh.prototype.isMeshMatcapMaterial=!0;class Hh extends kl{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}Hh.prototype.isLineDashedMaterial=!0;const Gh={ShadowMaterial:Ph,SpriteMaterial:al,RawShaderMaterial:Dh,ShaderMaterial:as,PointsMaterial:$l,MeshPhysicalMaterial:Bh,MeshStandardMaterial:Ih,MeshPhongMaterial:zh,MeshToonMaterial:Nh,MeshNormalMaterial:Oh,MeshLambertMaterial:Fh,MeshDepthMaterial:Uo,MeshDistanceMaterial:Ho,MeshBasicMaterial:fr,MeshMatcapMaterial:Uh,LineDashedMaterial:Hh,LineBasicMaterial:kl,Material:mr};mr.fromType=function(t){return new Gh[t]};const kh={arraySlice:function(t,e,n){return kh.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const i=t.length,r=new t.constructor(i);for(let s=0,a=0;a!==i;++s){const i=n[s]*e;for(let n=0;n!==e;++n)r[a++]=t[i+n]}return r},flattenJSON:function(t,e,n,i){let r=1,s=t[0];for(;void 0!==s&&void 0===s[i];)s=t[r++];if(void 0===s)return;let a=s[i];if(void 0!==a)if(Array.isArray(a))do{a=s[i],void 0!==a&&(e.push(s.time),n.push.apply(n,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[i],void 0!==a&&(e.push(s.time),a.toArray(n,n.length)),s=t[r++]}while(void 0!==s);else do{a=s[i],void 0!==a&&(e.push(s.time),n.push(a)),s=t[r++]}while(void 0!==s)},subclip:function(t,e,n,i,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<n||s>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=kh.convertArray(l,e.times.constructor),e.values=kh.convertArray(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,s=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(s<=i.times[0]){const t=o,e=l-o;d=kh.arraySlice(i.values,t,e)}else if(s>=i.times[u]){const t=u*l+o,e=t+l-o;d=kh.arraySlice(i.values,t,e)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(s),d=kh.arraySlice(t.resultBuffer,e,n)}"quaternion"===r&&(new Qn).fromArray(d).normalize().conjugate().toArray(d);const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)Qn.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)a.values[e+n]-=d[n]}}}return t.blendMode=Ce,t}};class Vh{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let s;n:{i:if(!(t<i)){for(let s=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===s)break;if(r=i,i=e[++n],t<i)break e}s=e.length;break n}if(t>=r)break t;{const a=e[1];t<a&&(n=2,r=a);for(let s=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===s)break;if(i=r,r=e[--n-1],t>=r)break e}s=n,n=0}}for(;n<s;){const i=n+s>>>1;t<e[i]?s=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Vh.prototype.beforeStart_=Vh.prototype.copySampleValue_,Vh.prototype.afterEnd_=Vh.prototype.copySampleValue_;class Wh extends Vh{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Se,endingEnd:Se}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,s=t+1,a=i[r],o=i[s];if(void 0===a)switch(this.getSettings_().endingStart){case Ee:r=t,a=2*e-n;break;case Te:r=i.length-2,a=e+i[r]-i[r+1];break;default:r=t,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case Ee:s=t,o=2*n-e;break;case Te:s=1,o=n+i[1]-i[0];break;default:s=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,v=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,y=(-1-d)*f+(1.5+d)*m+.5*p,x=d*f-d*m;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+y*s[o+t]+x*s[h+t];return r}}class jh extends Vh{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class qh extends Vh{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class Xh{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=kh.convertArray(e,this.TimeBufferType),this.values=kh.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:kh.convertArray(t.times,Array),values:kh.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new qh(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new jh(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Wh(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case we:e=this.InterpolantFactoryMethodDiscrete;break;case be:e=this.InterpolantFactoryMethodLinear;break;case Me:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return we;case this.InterpolantFactoryMethodLinear:return be;case this.InterpolantFactoryMethodSmooth:return Me}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,s=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==s&&n[s]>e;)--s;if(++s,0!==r||s!==i){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=kh.arraySlice(n,r,s),this.values=kh.arraySlice(this.values,r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==s&&s>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,s),t=!1;break}s=i}if(void 0!==i&&kh.isTypedArray(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}return t}optimize(){const t=kh.arraySlice(this.times),e=kh.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===Me,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(i)r=!0;else{const t=a*n,i=t-n,s=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[i+a]||n!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const i=a*n,r=s*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*n,i=s*n,a=0;a!==n;++a)e[i+a]=e[t+a];++s}return s!==t.length?(this.times=kh.arraySlice(t,0,s),this.values=kh.arraySlice(e,0,s*n)):(this.times=t,this.values=e),this}clone(){const t=kh.arraySlice(this.times,0),e=kh.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}Xh.prototype.TimeBufferType=Float32Array,Xh.prototype.ValueBufferType=Float32Array,Xh.prototype.DefaultInterpolation=be;class Yh extends Xh{}Yh.prototype.ValueTypeName="bool",Yh.prototype.ValueBufferType=Array,Yh.prototype.DefaultInterpolation=we,Yh.prototype.InterpolantFactoryMethodLinear=void 0,Yh.prototype.InterpolantFactoryMethodSmooth=void 0;class Jh extends Xh{}Jh.prototype.ValueTypeName="color";class Zh extends Xh{}Zh.prototype.ValueTypeName="number";class Kh extends Vh{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-e)/(i-e);let l=t*a;for(let t=l+a;l!==t;l+=4)Qn.slerpFlat(r,0,s,l-a,s,l,o);return r}}class Qh extends Xh{InterpolantFactoryMethodLinear(t){return new Kh(this.times,this.values,this.getValueSize(),t)}}Qh.prototype.ValueTypeName="quaternion",Qh.prototype.DefaultInterpolation=be,Qh.prototype.InterpolantFactoryMethodSmooth=void 0;class $h extends Xh{}$h.prototype.ValueTypeName="string",$h.prototype.ValueBufferType=Array,$h.prototype.DefaultInterpolation=we,$h.prototype.InterpolantFactoryMethodLinear=void 0,$h.prototype.InterpolantFactoryMethodSmooth=void 0;class tu extends Xh{}tu.prototype.ValueTypeName="vector";class eu{constructor(t,e=-1,n,i=Ae){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=yn(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(nu(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(Xh.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=kh.getKeyframeOrder(a);a=kh.sortedArray(a,1,l),o=kh.sortedArray(o,1,l),i||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new Zh(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/n))}return new this(t,-1,s)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.name.match(r);if(s&&s.length>1){const t=s[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const s=[];for(const t in i)s.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,i,r){if(0!==n.length){const s=[],a=[];kh.flattenJSON(n,s,a,i),0!==s.length&&r.push(new t(e,s,a))}},i=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],s=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),s.push(i.morphTarget===n?1:0)}i.push(new Zh(".morphTargetInfluence["+n+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";n(tu,s+".position",r,"pos",i),n(Qh,s+".quaternion",r,"rot",i),n(tu,s+".scale",r,"scl",i)}}return 0===i.length?null:new this(r,o,i,a)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function nu(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Zh;case"vector":case"vector2":case"vector3":case"vector4":return tu;case"color":return Jh;case"quaternion":return Qh;case"bool":case"boolean":return Yh;case"string":return $h}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];kh.flattenJSON(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const iu={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class ru{constructor(t,e,n){const i=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===s&&void 0!==i.onStart&&i.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(s=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}}const su=new ru;class au{constructor(t){this.manager=void 0!==t?t:su,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const ou={};class lu extends au{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=iu.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==ou[t])return void ou[t].push({onLoad:e,onProgress:n,onError:i});ou[t]=[],ou[t].push({onLoad:e,onProgress:n,onError:i});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const n=ou[t],i=e.body.getReader(),r=e.headers.get("Content-Length"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){i.read().then((({done:i,value:r})=>{if(i)t.close();else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onProgress&&e.onProgress(i)}t.enqueue(r),e()}}))}()}});return new Response(l)}throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),n=e&&e[1]?e[1].toLowerCase():void 0,i=new TextDecoder(n);return t.arrayBuffer().then((t=>i.decode(t)))}}})).then((e=>{iu.add(t,e);const n=ou[t];delete ou[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onLoad&&i.onLoad(e)}})).catch((e=>{const n=ou[t];if(void 0===n)throw this.manager.itemError(t),e;delete ou[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class cu extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new lu(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e=[];for(let n=0;n<t.length;n++){const i=eu.parse(t[n]);e.push(i)}return e}}class hu extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=[],a=new lc,o=new lu(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],(function(t){const n=r.parse(t,!0);s[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},l+=1,6===l&&(1===n.mipmapCount&&(a.minFilter=yt),a.image=s,a.format=n.format,a.needsUpdate=!0,e&&e(a))}),n,i)}if(Array.isArray(t))for(let e=0,n=t.length;e<n;++e)c(e);else o.load(t,(function(t){const n=r.parse(t,!0);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){s[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++)s[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]),s[e].format=n.format,s[e].width=n.width,s[e].height=n.height}a.image=s}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=yt),a.format=n.format,a.needsUpdate=!0,e&&e(a)}),n,i);return a}}class uu extends au{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=iu.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=Pn("img");function o(){c(),iu.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class du extends au{constructor(t){super(t)}load(t,e,n,i){const r=new us,s=new uu(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(n){s.load(t[n],(function(t){r.images[n]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class pu extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Dl,a=new lu(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(t,(function(t){const n=r.parse(t);n&&(void 0!==n.image?s.image=n.image:void 0!==n.data&&(s.image.width=n.width,s.image.height=n.height,s.image.data=n.data),s.wrapS=void 0!==n.wrapS?n.wrapS:ut,s.wrapT=void 0!==n.wrapT?n.wrapT:ut,s.magFilter=void 0!==n.magFilter?n.magFilter:yt,s.minFilter=void 0!==n.minFilter?n.minFilter:yt,s.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.encoding&&(s.encoding=n.encoding),void 0!==n.flipY&&(s.flipY=n.flipY),void 0!==n.format&&(s.format=n.format),void 0!==n.type&&(s.type=n.type),void 0!==n.mipmaps&&(s.mipmaps=n.mipmaps,s.minFilter=wt),1===n.mipmapCount&&(s.minFilter=yt),void 0!==n.generateMipmaps&&(s.generateMipmaps=n.generateMipmaps),s.needsUpdate=!0,e&&e(s,n))}),n,i),s}}class mu extends au{constructor(t){super(t)}load(t,e,n,i){const r=new Wn,s=new uu(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class fu extends er{constructor(t,e=1){super(),this.type="Light",this.color=new Fn(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}fu.prototype.isLight=!0;class gu extends fu{constructor(t,e,n){super(t,n),this.type="HemisphereLight",this.position.copy(er.DefaultUp),this.updateMatrix(),this.groundColor=new Fn(e)}copy(t){return fu.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}gu.prototype.isHemisphereLight=!0;const vu=new Li,yu=new $n,xu=new $n;class _u{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Tn(512,512),this.map=null,this.mapPass=null,this.matrix=new Li,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new xs,this._frameExtents=new Tn(1,1),this._viewportCount=1,this._viewports=[new jn(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;yu.setFromMatrixPosition(t.matrixWorld),e.position.copy(yu),xu.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(xu),e.updateMatrixWorld(),vu.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(vu),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class wu extends _u{constructor(){super(new ls(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*vn*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}wu.prototype.isSpotLightShadow=!0;class bu extends fu{constructor(t,e,n=0,i=Math.PI/3,r=0,s=1){super(t,e),this.type="SpotLight",this.position.copy(er.DefaultUp),this.updateMatrix(),this.target=new er,this.distance=n,this.angle=i,this.penumbra=r,this.decay=s,this.shadow=new wu}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}bu.prototype.isSpotLight=!0;const Mu=new Li,Su=new $n,Eu=new $n;class Tu extends _u{constructor(){super(new ls(90,1,.5,500)),this._frameExtents=new Tn(4,2),this._viewportCount=6,this._viewports=[new jn(2,1,1,1),new jn(0,1,1,1),new jn(3,1,1,1),new jn(1,1,1,1),new jn(3,0,1,1),new jn(1,0,1,1)],this._cubeDirections=[new $n(1,0,0),new $n(-1,0,0),new $n(0,0,1),new $n(0,0,-1),new $n(0,1,0),new $n(0,-1,0)],this._cubeUps=[new $n(0,1,0),new $n(0,1,0),new $n(0,1,0),new $n(0,1,0),new $n(0,0,1),new $n(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Su.setFromMatrixPosition(t.matrixWorld),n.position.copy(Su),Eu.copy(n.position),Eu.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Eu),n.updateMatrixWorld(),i.makeTranslation(-Su.x,-Su.y,-Su.z),Mu.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Mu)}}Tu.prototype.isPointLightShadow=!0;class Au extends fu{constructor(t,e,n=0,i=1){super(t,e),this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Tu}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}Au.prototype.isPointLight=!0;class Cu extends _u{constructor(){super(new Ds(-5,5,5,-5,.5,500))}}Cu.prototype.isDirectionalLightShadow=!0;class Ru extends fu{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(er.DefaultUp),this.updateMatrix(),this.target=new er,this.shadow=new Cu}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Ru.prototype.isDirectionalLight=!0;class Lu extends fu{constructor(t,e){super(t,e),this.type="AmbientLight"}}Lu.prototype.isAmbientLight=!0;class Pu extends fu{constructor(t,e,n=10,i=10){super(t,e),this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}Pu.prototype.isRectAreaLight=!0;class Du{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new $n)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*i),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*n),e.addScaledVector(s[4],n*i*1.092548),e.addScaledVector(s[5],i*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],n*r*1.092548),e.addScaledVector(s[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*i),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*n),e.addScaledVector(s[4],.858086*n*i),e.addScaledVector(s[5],.858086*i*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*n*r),e.addScaledVector(s[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}Du.prototype.isSphericalHarmonics3=!0;class Iu extends fu{constructor(t=new Du,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}Iu.prototype.isLightProbe=!0;class Bu extends au{constructor(t){super(t),this.textures={}}load(t,e,n,i){const r=this,s=new lu(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const i=mr.fromType(t.type);if(void 0!==t.uuid&&(i.uuid=t.uuid),void 0!==t.name&&(i.name=t.name),void 0!==t.color&&void 0!==i.color&&i.color.setHex(t.color),void 0!==t.roughness&&(i.roughness=t.roughness),void 0!==t.metalness&&(i.metalness=t.metalness),void 0!==t.sheen&&(i.sheen=t.sheen),void 0!==t.sheenColor&&(i.sheenColor=(new Fn).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(i.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==i.emissive&&i.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==i.specular&&i.specular.setHex(t.specular),void 0!==t.specularIntensity&&(i.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==i.specularColor&&i.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(i.shininess=t.shininess),void 0!==t.clearcoat&&(i.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(i.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.transmission&&(i.transmission=t.transmission),void 0!==t.thickness&&(i.thickness=t.thickness),void 0!==t.attenuationDistance&&(i.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==i.attenuationColor&&i.attenuationColor.setHex(t.attenuationColor),void 0!==t.fog&&(i.fog=t.fog),void 0!==t.flatShading&&(i.flatShading=t.flatShading),void 0!==t.blending&&(i.blending=t.blending),void 0!==t.combine&&(i.combine=t.combine),void 0!==t.side&&(i.side=t.side),void 0!==t.shadowSide&&(i.shadowSide=t.shadowSide),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.transparent&&(i.transparent=t.transparent),void 0!==t.alphaTest&&(i.alphaTest=t.alphaTest),void 0!==t.depthTest&&(i.depthTest=t.depthTest),void 0!==t.depthWrite&&(i.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(i.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(i.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(i.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(i.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(i.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(i.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(i.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(i.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(i.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(i.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(i.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(i.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(i.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(i.rotation=t.rotation),1!==t.linewidth&&(i.linewidth=t.linewidth),void 0!==t.dashSize&&(i.dashSize=t.dashSize),void 0!==t.gapSize&&(i.gapSize=t.gapSize),void 0!==t.scale&&(i.scale=t.scale),void 0!==t.polygonOffset&&(i.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(i.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(i.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(i.dithering=t.dithering),void 0!==t.alphaToCoverage&&(i.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(i.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.toneMapped&&(i.toneMapped=t.toneMapped),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?i.vertexColors=t.vertexColors>0:i.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(i.uniforms[e]={},r.type){case"t":i.uniforms[e].value=n(r.value);break;case"c":i.uniforms[e].value=(new Fn).setHex(r.value);break;case"v2":i.uniforms[e].value=(new Tn).fromArray(r.value);break;case"v3":i.uniforms[e].value=(new $n).fromArray(r.value);break;case"v4":i.uniforms[e].value=(new jn).fromArray(r.value);break;case"m3":i.uniforms[e].value=(new An).fromArray(r.value);break;case"m4":i.uniforms[e].value=(new Li).fromArray(r.value);break;default:i.uniforms[e].value=r.value}}if(void 0!==t.defines&&(i.defines=t.defines),void 0!==t.vertexShader&&(i.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(i.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(const e in t.extensions)i.extensions[e]=t.extensions[e];if(void 0!==t.shading&&(i.flatShading=1===t.shading),void 0!==t.size&&(i.size=t.size),void 0!==t.sizeAttenuation&&(i.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(i.map=n(t.map)),void 0!==t.matcap&&(i.matcap=n(t.matcap)),void 0!==t.alphaMap&&(i.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(i.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(i.bumpScale=t.bumpScale),void 0!==t.normalMap&&(i.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(i.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),i.normalScale=(new Tn).fromArray(e)}return void 0!==t.displacementMap&&(i.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(i.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(i.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(i.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(i.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(i.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(i.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(i.specularMap=n(t.specularMap)),void 0!==t.specularIntensityMap&&(i.specularIntensityMap=n(t.specularIntensityMap)),void 0!==t.specularColorMap&&(i.specularColorMap=n(t.specularColorMap)),void 0!==t.envMap&&(i.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(i.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(i.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(i.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(i.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(i.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(i.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(i.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(i.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(i.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(i.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(i.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(i.clearcoatNormalScale=(new Tn).fromArray(t.clearcoatNormalScale)),void 0!==t.transmissionMap&&(i.transmissionMap=n(t.transmissionMap)),void 0!==t.thicknessMap&&(i.thicknessMap=n(t.thicknessMap)),void 0!==t.sheenColorMap&&(i.sheenColorMap=n(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(i.sheenRoughnessMap=n(t.sheenRoughnessMap)),i}setTextures(t){return this.textures=t,this}}class zu{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class Nu extends Nr{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}Nu.prototype.isInstancedBufferGeometry=!0;class Ou extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new lu(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}parse(t){const e={},n={};function i(t,i){if(void 0!==e[i])return e[i];const r=t.interleavedBuffers[i],s=function(t,e){if(void 0!==n[e])return n[e];const i=t.arrayBuffers[e],r=new Uint32Array(i).buffer;return n[e]=r,r}(t,r.buffer),a=Ln(r.type,s),o=new il(a,r.stride);return o.uuid=r.uuid,e[i]=o,o}const r=t.isInstancedBufferGeometry?new Nu:new Nr,s=t.data.index;if(void 0!==s){const t=Ln(s.type,s.array);r.setIndex(new yr(t,1))}const a=t.data.attributes;for(const e in a){const n=a[e];let s;if(n.isInterleavedBufferAttribute){const e=i(t.data,n.data);s=new sl(e,n.itemSize,n.offset,n.normalized)}else{const t=Ln(n.type,n.array);s=new(n.isInstancedBufferAttribute?Nl:yr)(t,n.itemSize,n.normalized)}void 0!==n.name&&(s.name=n.name),void 0!==n.usage&&s.setUsage(n.usage),void 0!==n.updateRange&&(s.updateRange.offset=n.updateRange.offset,s.updateRange.count=n.updateRange.count),r.setAttribute(e,s)}const o=t.data.morphAttributes;if(o)for(const e in o){const n=o[e],s=[];for(let e=0,r=n.length;e<r;e++){const r=n[e];let a;if(r.isInterleavedBufferAttribute){const e=i(t.data,r.data);a=new sl(e,r.itemSize,r.offset,r.normalized)}else{const t=Ln(r.type,r.array);a=new yr(t,r.itemSize,r.normalized)}void 0!==r.name&&(a.name=r.name),s.push(a)}r.morphAttributes[e]=s}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const l=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==l)for(let t=0,e=l.length;t!==e;++t){const e=l[t];r.addGroup(e.start,e.count,e.materialIndex)}const c=t.data.boundingSphere;if(void 0!==c){const t=new $n;void 0!==c.center&&t.fromArray(c.center),r.boundingSphere=new wi(t,c.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}class Fu extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=""===this.path?zu.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;const a=new lu(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){let s=null;try{s=JSON.parse(n)}catch(e){return void 0!==i&&i(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const a=s.metadata;void 0!==a&&void 0!==a.type&&"geometry"!==a.type.toLowerCase()?r.parse(s,e):console.error("THREE.ObjectLoader: Can't load "+t)}),n,i)}async loadAsync(t,e){const n=""===this.path?zu.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||n;const i=new lu(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials);const r=await i.loadAsync(t,e),s=JSON.parse(r),a=s.metadata;if(void 0===a||void 0===a.type||"geometry"===a.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(s)}parse(t,e){const n=this.parseAnimations(t.animations),i=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,i),s=this.parseImages(t.images,(function(){void 0!==e&&e(l)})),a=this.parseTextures(t.textures,s),o=this.parseMaterials(t.materials,a),l=this.parseObject(t.object,r,o,a,n),c=this.parseSkeletons(t.skeletons,l);if(this.bindSkeletons(l,c),void 0!==e){let t=!1;for(const e in s)if(s[e]instanceof HTMLImageElement){t=!0;break}!1===t&&e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),i=this.parseGeometries(t.geometries,n),r=await this.parseImagesAsync(t.images),s=this.parseTextures(t.textures,r),a=this.parseMaterials(t.materials,s),o=this.parseObject(t.object,i,a,s,e),l=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,l),o}parseShapes(t){const e={};if(void 0!==t)for(let n=0,i=t.length;n<i;n++){const i=(new kc).fromJSON(t[n]);e[i.uuid]=i}return e}parseSkeletons(t,e){const n={},i={};if(e.traverse((function(t){t.isBone&&(i[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new zl).fromJSON(t[e],i);n[r.uuid]=r}return n}parseGeometries(t,e){const n={};if(void 0!==t){const i=new Ou;for(let r=0,s=t.length;r<s;r++){let s;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=i.parse(a);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:a.type in Lh?s=Lh[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}s.uuid=a.uuid,void 0!==a.name&&(s.name=a.name),!0===s.isBufferGeometry&&void 0!==a.userData&&(s.userData=a.userData),n[a.uuid]=s}}return n}parseMaterials(t,e){const n={},i={};if(void 0!==t){const r=new Bu;r.setTextures(e);for(let e=0,s=t.length;e<s;e++){const s=t[e];if("MultiMaterial"===s.type){const t=[];for(let e=0;e<s.materials.length;e++){const i=s.materials[e];void 0===n[i.uuid]&&(n[i.uuid]=r.parse(i)),t.push(n[i.uuid])}i[s.uuid]=t}else void 0===n[s.uuid]&&(n[s.uuid]=r.parse(s)),i[s.uuid]=n[s.uuid]}}return i}parseAnimations(t){const e={};if(void 0!==t)for(let n=0;n<t.length;n++){const i=t[n],r=eu.parse(i);e[r.uuid]=r}return e}parseImages(t,e){const n=this,i={};let r;function s(t){if("string"==typeof t){const e=t;return function(t){return n.manager.itemStart(t),r.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:n.resourcePath+e)}return t.data?{data:Ln(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const n=new ru(e);r=new uu(n),r.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],r=n.url;if(Array.isArray(r)){const t=[];for(let e=0,n=r.length;e<n;e++){const n=s(r[e]);null!==n&&(n instanceof HTMLImageElement?t.push(n):t.push(new Dl(n.data,n.width,n.height)))}i[n.uuid]=new Gn(t)}else{const t=s(n.url);i[n.uuid]=new Gn(t)}}}return i}async parseImagesAsync(t){const e=this,n={};let i;async function r(t){if("string"==typeof t){const n=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(n)?n:e.resourcePath+n;return await i.loadAsync(r)}return t.data?{data:Ln(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){i=new uu(this.manager),i.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e],s=i.url;if(Array.isArray(s)){const t=[];for(let e=0,n=s.length;e<n;e++){const n=s[e],i=await r(n);null!==i&&(i instanceof HTMLImageElement?t.push(i):t.push(new Dl(i.data,i.width,i.height)))}n[i.uuid]=new Gn(t)}else{const t=await r(i.url);n[i.uuid]=new Gn(t)}}}return n}parseTextures(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const i={};if(void 0!==t)for(let r=0,s=t.length;r<s;r++){const s=t[r];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image);const a=e[s.image],o=a.data;let l;Array.isArray(o)?(l=new us,6===o.length&&(l.needsUpdate=!0)):(l=o&&o.data?new Dl:new Wn,o&&(l.needsUpdate=!0)),l.source=a,l.uuid=s.uuid,void 0!==s.name&&(l.name=s.name),void 0!==s.mapping&&(l.mapping=n(s.mapping,Uu)),void 0!==s.offset&&l.offset.fromArray(s.offset),void 0!==s.repeat&&l.repeat.fromArray(s.repeat),void 0!==s.center&&l.center.fromArray(s.center),void 0!==s.rotation&&(l.rotation=s.rotation),void 0!==s.wrap&&(l.wrapS=n(s.wrap[0],Hu),l.wrapT=n(s.wrap[1],Hu)),void 0!==s.format&&(l.format=s.format),void 0!==s.type&&(l.type=s.type),void 0!==s.encoding&&(l.encoding=s.encoding),void 0!==s.minFilter&&(l.minFilter=n(s.minFilter,Gu)),void 0!==s.magFilter&&(l.magFilter=n(s.magFilter,Gu)),void 0!==s.anisotropy&&(l.anisotropy=s.anisotropy),void 0!==s.flipY&&(l.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(l.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(l.unpackAlignment=s.unpackAlignment),void 0!==s.userData&&(l.userData=s.userData),i[s.uuid]=l}return i}parseObject(t,e,n,i,r){let s,a,o;function l(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function c(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];void 0===n[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(n[r])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}function h(t){return void 0===i[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),i[t]}switch(t.type){case"Scene":s=new nl,void 0!==t.background&&(Number.isInteger(t.background)?s.background=new Fn(t.background):s.background=h(t.background)),void 0!==t.environment&&(s.environment=h(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?s.fog=new el(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(s.fog=new tl(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":s=new ls(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(s.focus=t.focus),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.filmGauge&&(s.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(s.filmOffset=t.filmOffset),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"OrthographicCamera":s=new Ds(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(s.zoom=t.zoom),void 0!==t.view&&(s.view=Object.assign({},t.view));break;case"AmbientLight":s=new Lu(t.color,t.intensity);break;case"DirectionalLight":s=new Ru(t.color,t.intensity);break;case"PointLight":s=new Au(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new Pu(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new bu(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":s=new gu(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new Iu).fromJSON(t);break;case"SkinnedMesh":a=l(t.geometry),o=c(t.material),s=new Ll(a,o),void 0!==t.bindMode&&(s.bindMode=t.bindMode),void 0!==t.bindMatrix&&s.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(s.skeleton=t.skeleton);break;case"Mesh":a=l(t.geometry),o=c(t.material),s=new ts(a,o);break;case"InstancedMesh":a=l(t.geometry),o=c(t.material);const e=t.count,n=t.instanceMatrix,i=t.instanceColor;s=new Gl(a,o,e),s.instanceMatrix=new Nl(new Float32Array(n.array),16),void 0!==i&&(s.instanceColor=new Nl(new Float32Array(i.array),i.itemSize));break;case"LOD":s=new Sl;break;case"Line":s=new Yl(l(t.geometry),c(t.material));break;case"LineLoop":s=new Ql(l(t.geometry),c(t.material));break;case"LineSegments":s=new Kl(l(t.geometry),c(t.material));break;case"PointCloud":case"Points":s=new rc(l(t.geometry),c(t.material));break;case"Sprite":s=new _l(c(t.material));break;case"Group":s=new qo;break;case"Bone":s=new Pl;break;default:s=new er}if(s.uuid=t.uuid,void 0!==t.name&&(s.name=t.name),void 0!==t.matrix?(s.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(s.matrixAutoUpdate=t.matrixAutoUpdate),s.matrixAutoUpdate&&s.matrix.decompose(s.position,s.quaternion,s.scale)):(void 0!==t.position&&s.position.fromArray(t.position),void 0!==t.rotation&&s.rotation.fromArray(t.rotation),void 0!==t.quaternion&&s.quaternion.fromArray(t.quaternion),void 0!==t.scale&&s.scale.fromArray(t.scale)),void 0!==t.castShadow&&(s.castShadow=t.castShadow),void 0!==t.receiveShadow&&(s.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(s.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(s.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(s.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&s.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(s.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(s.visible=t.visible),void 0!==t.frustumCulled&&(s.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(s.renderOrder=t.renderOrder),void 0!==t.userData&&(s.userData=t.userData),void 0!==t.layers&&(s.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)s.add(this.parseObject(a[t],e,n,i,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];s.animations.push(r[n])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(s.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t],i=s.getObjectByProperty("uuid",n.object);void 0!==i&&s.addLevel(i,n.distance)}}return s}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const n=e[t.skeleton];void 0===n?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(n,t.bindMatrix)}}))}setTexturePath(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}const Uu={UVMapping:it,CubeReflectionMapping:rt,CubeRefractionMapping:st,EquirectangularReflectionMapping:at,EquirectangularRefractionMapping:ot,CubeUVReflectionMapping:lt,CubeUVRefractionMapping:ct},Hu={RepeatWrapping:ht,ClampToEdgeWrapping:ut,MirroredRepeatWrapping:dt},Gu={NearestFilter:pt,NearestMipmapNearestFilter:mt,NearestMipmapLinearFilter:gt,LinearFilter:yt,LinearMipmapNearestFilter:xt,LinearMipmapLinearFilter:wt};class ku extends au{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=iu.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){iu.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}let Vu;ku.prototype.isImageBitmapLoader=!0;const Wu={getContext:function(){return void 0===Vu&&(Vu=new(window.AudioContext||window.webkitAudioContext)),Vu},setContext:function(t){Vu=t}};class ju extends au{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new lu(this.manager);s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(n){try{const t=n.slice(0);Wu.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}}class qu extends Iu{constructor(t,e,n=1){super(void 0,n);const i=(new Fn).set(t),r=(new Fn).set(e),s=new $n(i.r,i.g,i.b),a=new $n(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(s).sub(a).multiplyScalar(l)}}qu.prototype.isHemisphereLightProbe=!0;class Xu extends Iu{constructor(t,e=1){super(void 0,e);const n=(new Fn).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Xu.prototype.isAmbientLightProbe=!0;const Yu=new Li,Ju=new Li,Zu=new Li;class Ku{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new ls,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ls,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,Zu.copy(t.projectionMatrix);const n=e.eyeSep/2,i=n*e.near/e.focus,r=e.near*Math.tan(gn*e.fov*.5)/e.zoom;let s,a;Ju.elements[12]=-n,Yu.elements[12]=n,s=-r*e.aspect+i,a=r*e.aspect+i,Zu.elements[0]=2*e.near/(a-s),Zu.elements[8]=(a+s)/(a-s),this.cameraL.projectionMatrix.copy(Zu),s=-r*e.aspect-i,a=r*e.aspect-i,Zu.elements[0]=2*e.near/(a-s),Zu.elements[8]=(a+s)/(a-s),this.cameraR.projectionMatrix.copy(Zu)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Ju),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Yu)}}class Qu{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=$u(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=$u();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function $u(){return("undefined"==typeof performance?Date:performance).now()}const td=new $n,ed=new Qn,nd=new $n,id=new $n;class rd extends er{constructor(){super(),this.type="AudioListener",this.context=Wu.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Qu}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(td,ed,nd),id.set(0,0,-1).applyQuaternion(ed),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(td.x,t),e.positionY.linearRampToValueAtTime(td.y,t),e.positionZ.linearRampToValueAtTime(td.z,t),e.forwardX.linearRampToValueAtTime(id.x,t),e.forwardY.linearRampToValueAtTime(id.y,t),e.forwardZ.linearRampToValueAtTime(id.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(td.x,td.y,td.z),e.setOrientation(id.x,id.y,id.z,n.x,n.y,n.z)}}class sd extends er{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const ad=new $n,od=new Qn,ld=new $n,cd=new $n;class hd extends sd{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(ad,od,ld),cd.set(0,0,1).applyQuaternion(od);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(ad.x,t),e.positionY.linearRampToValueAtTime(ad.y,t),e.positionZ.linearRampToValueAtTime(ad.z,t),e.orientationX.linearRampToValueAtTime(cd.x,t),e.orientationY.linearRampToValueAtTime(cd.y,t),e.orientationZ.linearRampToValueAtTime(cd.z,t)}else e.setPosition(ad.x,ad.y,ad.z),e.setOrientation(cd.x,cd.y,cd.z)}}class ud{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class dd{constructor(t,e,n){let i,r,s;switch(this.binding=t,this.valueSize=n,e){case"quaternion":i=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==i;++t)n[r+t]=n[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){a.setValue(n,i);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t)e[t]=e[i+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){Qn.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const s=this._workIndex*r;Qn.multiplyQuaternionsFlat(t,s,t,e,t,n),Qn.slerpFlat(t,e,t,e,t,s,i)}_lerp(t,e,n,i,r){const s=1-i;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[n+a]*i}}_lerpAdditive(t,e,n,i,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[n+s]*i}}}const pd=new RegExp("[\\[\\]\\.:\\/]","g"),md="[^\\[\\]\\.:\\/]",fd="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",gd=/((?:WC+[\/:])*)/.source.replace("WC",md),vd=/(WCOD+)?/.source.replace("WCOD",fd),yd=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",md),xd=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",md),_d=new RegExp("^"+gd+vd+yd+xd+"$"),wd=["material","materials","bones"];class bd{constructor(t,e,n){this.path=e,this.parsedPath=n||bd.parseTrackName(e),this.node=bd.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new bd.Composite(t,e,n):new bd(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(pd,"")}static parseTrackName(t){const e=_d.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==wd.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const s=n(r.children);if(s)return s}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=bd.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const s=t[i];if(void 0===s){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}bd.Composite=class{constructor(t,e,n){const i=n||bd.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},bd.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},bd.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},bd.prototype.GetterByBindingType=[bd.prototype._getValue_direct,bd.prototype._getValue_array,bd.prototype._getValue_arrayElement,bd.prototype._getValue_toArray],bd.prototype.SetterByBindingTypeAndVersioning=[[bd.prototype._setValue_direct,bd.prototype._setValue_direct_setNeedsUpdate,bd.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[bd.prototype._setValue_array,bd.prototype._setValue_array_setNeedsUpdate,bd.prototype._setValue_array_setMatrixWorldNeedsUpdate],[bd.prototype._setValue_arrayElement,bd.prototype._setValue_arrayElement_setNeedsUpdate,bd.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[bd.prototype._setValue_fromArray,bd.prototype._setValue_fromArray_setNeedsUpdate,bd.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Md{constructor(){this.uuid=yn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,i=this._parsedPaths,r=this._bindings,s=r.length;let a,o=t.length,l=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const h=arguments[c],u=h.uuid;let d=e[u];if(void 0===d){d=o++,e[u]=d,t.push(h);for(let t=0,e=s;t!==e;++t)r[t].push(new bd(h,n[t],i[t]))}else if(d<l){a=t[d];const o=--l,c=t[o];e[c.uuid]=d,t[d]=c,e[u]=o,t[o]=h;for(let t=0,e=s;t!==e;++t){const e=r[t],s=e[o];let a=e[d];e[d]=s,void 0===a&&(a=new bd(h,n[t],i[t])),e[o]=a}}else t[d]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_;for(let s=0,a=arguments.length;s!==a;++s){const a=arguments[s],o=a.uuid,l=e[o];if(void 0!==l&&l>=r){const s=r++,c=t[s];e[c.uuid]=l,t[l]=c,e[o]=s,t[s]=a;for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[s],r=e[l];e[l]=i,e[s]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_,s=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,l=e[o];if(void 0!==l)if(delete e[o],l<r){const a=--r,o=t[a],c=--s,h=t[c];e[o.uuid]=l,t[l]=o,e[h.uuid]=a,t[a]=h,t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[a],r=e[c];e[l]=i,e[a]=r,e.pop()}}else{const r=--s,a=t[r];r>0&&(e[a.uuid]=l),t[l]=a,t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t];e[l]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const n=this._bindingsIndicesByPath;let i=n[t];const r=this._bindings;if(void 0!==i)return r[i];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,h=new Array(l);i=r.length,n[t]=i,s.push(t),a.push(e),r.push(h);for(let n=c,i=o.length;n!==i;++n){const i=o[n];h[n]=new bd(i,t,e)}return h}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){const i=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a];e[t[a]]=n,s[n]=o,s.pop(),r[n]=r[a],r.pop(),i[n]=i[a],i.pop()}}}Md.prototype.isAnimationObjectGroup=!0;class Sd{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:Se,endingEnd:Se};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=xe,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=i/n,s=n/i;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;if(i<0||0===n)return;this._startTime=null,e=n*i}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===Ce)for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(s),e[n].accumulateAdditive(a);else for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(s),e[n].accumulate(i,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;null!==n&&(e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const s=n===_e;if(0===t)return-1===r?i:s&&1==(1&r)?e-i:i;if(n===ye){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=i;if(s&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=Ee,i.endingEnd=Ee):(i.endingStart=t?this.zeroSlopeAtStart?Ee:Se:Te,i.endingEnd=e?this.zeroSlopeAtEnd?Ee:Se:Te)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;null===s&&(s=i._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=n,this}}class Ed extends pn{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,s=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const i=e&&e._propertyBindings[t].binding.parsedPath;h=new dd(bd.create(n,l,i),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),s.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[e];void 0===s&&(s={},i[e]=s),s[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new jh(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let s="string"==typeof t?eu.findByName(i,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===n&&(n=null!==s?s.blendMode:Ae),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new Sd(this,s,e,n);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r="string"==typeof t?eu.findByName(n,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==n;++a)e[a]._update(i,t,r,s);const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,s=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}Ed.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Td{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new Td(void 0===this.value.clone?this.value:this.value.clone())}}class Ad extends il{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}Ad.prototype.isInstancedInterleavedBuffer=!0;class Cd{constructor(t,e,n,i,r){this.buffer=t,this.type=e,this.itemSize=n,this.elementSize=i,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}Cd.prototype.isGLBufferAttribute=!0;class Rd{constructor(t,e,n=0,i=1/0){this.ray=new Ri(t,e),this.near=n,this.far=i,this.camera=null,this.layers=new Gi,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!0,n=[]){return Pd(t,this,n,e),n.sort(Ld),n}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)Pd(t[i],this,n,e);return n.sort(Ld),n}}function Ld(t,e){return t.distance-e.distance}function Pd(t,e,n,i){if(t.layers.test(e.layers)&&t.raycast(e,n),!0===i){const i=t.children;for(let t=0,r=i.length;t<r;t++)Pd(i[t],e,n,!0)}}class Dd{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(xn(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Id{constructor(t=1,e=0,n=0){return this.radius=t,this.theta=e,this.y=n,this}set(t,e,n){return this.radius=t,this.theta=e,this.y=n,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}clone(){return(new this.constructor).copy(this)}}const Bd=new Tn;class zd{constructor(t=new Tn(1/0,1/0),e=new Tn(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Bd.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Bd.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}zd.prototype.isBox2=!0;const Nd=new $n,Od=new $n;class Fd{constructor(t=new $n,e=new $n){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Nd.subVectors(t,this.start),Od.subVectors(this.end,this.start);const n=Od.dot(Od);let i=Od.dot(Nd)/n;return e&&(i=xn(i,0,1)),i}closestPointToPoint(t,e,n){const i=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const Ud=new $n;class Hd extends er{constructor(t,e){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;const n=new Nr,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const r=t/n*Math.PI*2,s=e/n*Math.PI*2;i.push(Math.cos(r),Math.sin(r),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new Ar(i,3));const r=new kl({fog:!1,toneMapped:!1});this.cone=new Kl(n,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Ud.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Ud),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Gd=new $n,kd=new Li,Vd=new Li;class Wd extends Kl{constructor(t){const e=jd(t),n=new Nr,i=[],r=[],s=new Fn(0,0,1),a=new Fn(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}n.setAttribute("position",new Ar(i,3)),n.setAttribute("color",new Ar(r,3)),super(n,new kl({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute("position");Vd.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(kd.multiplyMatrices(Vd,r.matrixWorld),Gd.setFromMatrixPosition(kd),i.setXYZ(n,Gd.x,Gd.y,Gd.z),kd.multiplyMatrices(Vd,r.parent.matrixWorld),Gd.setFromMatrixPosition(kd),i.setXYZ(n+1,Gd.x,Gd.y,Gd.z),n+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}function jd(t){const e=[];!0===t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,jd(t.children[n]));return e}class qd extends ts{constructor(t,e,n){super(new Mh(e,4,2),new fr({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.light.updateMatrixWorld(),this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Xd=new $n,Yd=new Fn,Jd=new Fn;class Zd extends er{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const i=new _h(e);i.rotateY(.5*Math.PI),this.material=new fr({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=i.getAttribute("position"),s=new Float32Array(3*r.count);i.setAttribute("color",new yr(s,3)),this.add(new ts(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");Yd.copy(this.light.color),Jd.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const i=t<n/2?Yd:Jd;e.setXYZ(t,i.r,i.g,i.b)}e.needsUpdate=!0}t.lookAt(Xd.setFromMatrixPosition(this.light.matrixWorld).negate())}}class Kd extends Kl{constructor(t=10,e=10,n=4473924,i=8947848){n=new Fn(n),i=new Fn(i);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new Nr;c.setAttribute("position",new Ar(o,3)),c.setAttribute("color",new Ar(l,3)),super(c,new kl({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}class Qd extends Kl{constructor(t=10,e=16,n=8,i=64,r=4473924,s=8947848){r=new Fn(r),s=new Fn(s);const a=[],o=[];for(let n=0;n<=e;n++){const i=n/e*(2*Math.PI),l=Math.sin(i)*t,c=Math.cos(i)*t;a.push(0,0,0),a.push(l,0,c);const h=1&n?r:s;o.push(h.r,h.g,h.b),o.push(h.r,h.g,h.b)}for(let e=0;e<=n;e++){const l=1&e?r:s,c=t-t/n*e;for(let t=0;t<i;t++){let e=t/i*(2*Math.PI),n=Math.sin(e)*c,r=Math.cos(e)*c;a.push(n,0,r),o.push(l.r,l.g,l.b),e=(t+1)/i*(2*Math.PI),n=Math.sin(e)*c,r=Math.cos(e)*c,a.push(n,0,r),o.push(l.r,l.g,l.b)}}const l=new Nr;l.setAttribute("position",new Ar(a,3)),l.setAttribute("color",new Ar(o,3)),super(l,new kl({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}}const $d=new $n,tp=new $n,ep=new $n;class np extends er{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);let i=new Nr;i.setAttribute("position",new Ar([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new kl({fog:!1,toneMapped:!1});this.lightPlane=new Yl(i,r),this.add(this.lightPlane),i=new Nr,i.setAttribute("position",new Ar([0,0,0,0,0,1],3)),this.targetLine=new Yl(i,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){$d.setFromMatrixPosition(this.light.matrixWorld),tp.setFromMatrixPosition(this.light.target.matrixWorld),ep.subVectors(tp,$d),this.lightPlane.lookAt(tp),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(tp),this.targetLine.scale.z=ep.length()}}const ip=new $n,rp=new os;class sp extends Kl{constructor(t){const e=new Nr,n=new kl({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],r=[],s={},a=new Fn(16755200),o=new Fn(16711680),l=new Fn(43775),c=new Fn(16777215),h=new Fn(3355443);function u(t,e,n){d(t,n),d(e,n)}function d(t,e){i.push(0,0,0),r.push(e.r,e.g,e.b),void 0===s[t]&&(s[t]=[]),s[t].push(i.length/3-1)}u("n1","n2",a),u("n2","n4",a),u("n4","n3",a),u("n3","n1",a),u("f1","f2",a),u("f2","f4",a),u("f4","f3",a),u("f3","f1",a),u("n1","f1",a),u("n2","f2",a),u("n3","f3",a),u("n4","f4",a),u("p","n1",o),u("p","n2",o),u("p","n3",o),u("p","n4",o),u("u1","u2",l),u("u2","u3",l),u("u3","u1",l),u("c","t",c),u("p","c",h),u("cn1","cn2",h),u("cn3","cn4",h),u("cf1","cf2",h),u("cf3","cf4",h),e.setAttribute("position",new Ar(i,3)),e.setAttribute("color",new Ar(r,3)),super(e,n),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=s,this.update()}update(){const t=this.geometry,e=this.pointMap;rp.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),ap("c",e,t,rp,0,0,-1),ap("t",e,t,rp,0,0,1),ap("n1",e,t,rp,-1,-1,-1),ap("n2",e,t,rp,1,-1,-1),ap("n3",e,t,rp,-1,1,-1),ap("n4",e,t,rp,1,1,-1),ap("f1",e,t,rp,-1,-1,1),ap("f2",e,t,rp,1,-1,1),ap("f3",e,t,rp,-1,1,1),ap("f4",e,t,rp,1,1,1),ap("u1",e,t,rp,.7,1.1,-1),ap("u2",e,t,rp,-.7,1.1,-1),ap("u3",e,t,rp,0,2,-1),ap("cf1",e,t,rp,-1,0,1),ap("cf2",e,t,rp,1,0,1),ap("cf3",e,t,rp,0,-1,1),ap("cf4",e,t,rp,0,1,1),ap("cn1",e,t,rp,-1,0,-1),ap("cn2",e,t,rp,1,0,-1),ap("cn3",e,t,rp,0,-1,-1),ap("cn4",e,t,rp,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function ap(t,e,n,i,r,s,a){ip.set(r,s,a).unproject(i);const o=e[t];if(void 0!==o){const t=n.getAttribute("position");for(let e=0,n=o.length;e<n;e++)t.setXYZ(o[e],ip.x,ip.y,ip.z)}}const op=new ni;class lp extends Kl{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),r=new Nr;r.setIndex(new yr(n,1)),r.setAttribute("position",new yr(i,3)),super(r,new kl({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&op.setFromObject(this.object),op.isEmpty())return;const e=op.min,n=op.max,i=this.geometry.attributes.position,r=i.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=e.x,r[4]=n.y,r[5]=n.z,r[6]=e.x,r[7]=e.y,r[8]=n.z,r[9]=n.x,r[10]=e.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=e.z,r[15]=e.x,r[16]=n.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=n.x,r[22]=e.y,r[23]=e.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t){return Kl.prototype.copy.call(this,t),this.object=t.object,this}}class cp extends Kl{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Nr;i.setIndex(new yr(n,1)),i.setAttribute("position",new Ar([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(i,new kl({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}}class hp extends Yl{constructor(t,e=1,n=16776960){const i=n,r=new Nr;r.setAttribute("position",new Ar([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),super(r,new kl({color:i,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const s=new Nr;s.setAttribute("position",new Ar([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),s.computeBoundingSphere(),this.add(new ts(s,new fr({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){let e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?m:p,this.lookAt(this.plane.normal),super.updateMatrixWorld(t)}}const up=new $n;let dp,pp;class mp extends er{constructor(t=new $n(0,0,1),e=new $n(0,0,0),n=1,i=16776960,r=.2*n,s=.2*r){super(),this.type="ArrowHelper",void 0===dp&&(dp=new Nr,dp.setAttribute("position",new Ar([0,0,0,0,1,0],3)),pp=new uc(0,.5,1,5,1),pp.translate(0,-.5,0)),this.position.copy(e),this.line=new Yl(dp,new kl({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new ts(pp,new fr({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,r,s)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{up.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(up,e)}}setLength(t,e=.2*t,n=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}}class fp extends Kl{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new Nr;n.setAttribute("position",new Ar(e,3)),n.setAttribute("color",new Ar([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(n,new kl({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,n){const i=new Fn,r=this.geometry.attributes.color.array;return i.set(t),i.toArray(r,0),i.toArray(r,3),i.set(e),i.toArray(r,6),i.toArray(r,9),i.set(n),i.toArray(r,12),i.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class gp{constructor(){this.type="ShapePath",this.color=new Fn,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Gc,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,n,i){return this.currentPath.quadraticCurveTo(t,e,n,i),this}bezierCurveTo(t,e,n,i,r,s){return this.currentPath.bezierCurveTo(t,e,n,i,r,s),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function n(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n],r=new kc;r.curves=i.curves,e.push(r)}return e}function i(t,e){const n=e.length;let i=!1;for(let r=n-1,s=0;s<n;r=s++){let n=e[r],a=e[s],o=a.x-n.x,l=a.y-n.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(n=e[s],o=-o,a=e[r],l=-l),t.y<n.y||t.y>a.y)continue;if(t.y===n.y){if(t.x===n.x)return!0}else{const e=l*(t.x-n.x)-o*(t.y-n.y);if(0===e)return!0;if(e<0)continue;i=!i}}else{if(t.y!==n.y)continue;if(a.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=a.x)return!0}}return i}const r=ph.isClockWise,s=this.subPaths;if(0===s.length)return[];if(!0===e)return n(s);let a,o,l;const c=[];if(1===s.length)return o=s[0],l=new kc,l.curves=o.curves,c.push(l),c;let h=!r(s[0].getPoints());h=t?!h:h;const u=[],d=[];let p,m,f=[],g=0;d[g]=void 0,f[g]=[];for(let e=0,n=s.length;e<n;e++)o=s[e],p=o.getPoints(),a=r(p),a=t?!a:a,a?(!h&&d[g]&&g++,d[g]={s:new kc,p},d[g].s.curves=o.curves,h&&g++,f[g]=[]):f[g].push({h:o,p:p[0]});if(!d[0])return n(s);if(d.length>1){let t=!1,e=0;for(let t=0,e=d.length;t<e;t++)u[t]=[];for(let n=0,r=d.length;n<r;n++){const r=f[n];for(let s=0;s<r.length;s++){const a=r[s];let o=!0;for(let r=0;r<d.length;r++)i(a.p,d[r].p)&&(n!==r&&e++,o?(o=!1,u[r].push(a)):t=!0);o&&u[n].push(a)}}e>0&&!1===t&&(f=u)}for(let t=0,e=d.length;t<e;t++){l=d[t].s,c.push(l),m=f[t];for(let t=0,e=m.length;t<e;t++)l.holes.push(m[t].h)}return c}}const vp=new Float32Array(1),yp=new Int32Array(vp.buffer);class xp{static toHalfFloat(t){t>65504&&(console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504."),t=65504),vp[0]=t;const e=yp[0];let n=e>>16&32768,i=e>>12&2047;const r=e>>23&255;return r<103?n:r>142?(n|=31744,n|=(255==r?0:1)&&8388607&e,n):r<113?(i|=2048,n|=(i>>114-r)+(i>>113-r&1),n):(n|=r-112<<10|i>>1,n+=1&i,n)}}const _p=0,wp=1,bp=0,Mp=1,Sp=2;function Ep(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function Tp(t=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function Ap(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new rc(t,e)}function Cp(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new _l(t)}function Rp(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new rc(t,e)}function Lp(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new $l(t)}function Pp(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new $l(t)}function Dp(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new $l(t)}function Ip(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new $n(t,e,n)}function Bp(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new yr(t,e).setUsage(en)}function zp(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new xr(t,e)}function Np(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new _r(t,e)}function Op(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new wr(t,e)}function Fp(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new br(t,e)}function Up(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Mr(t,e)}function Hp(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Sr(t,e)}function Gp(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Er(t,e)}function kp(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ar(t,e)}function Vp(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Cr(t,e)}function Wp(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new fp(t)}function jp(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new lp(t,e)}function qp(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Kl(new xc(t.geometry),new kl({color:void 0!==e?e:16777215}))}function Xp(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Kl(new Ch(t.geometry),new kl({color:void 0!==e?e:16777215}))}function Yp(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new lu(t)}function Jp(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new pu(t)}function Zp(t,e,n){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new ds(t,n)}function Kp(){console.error("THREE.CanvasRenderer has been removed")}function Qp(){console.error("THREE.JSONLoader has been removed.")}_c.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(_c.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Gc.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},Kd.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Wd.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},au.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),zu.extractUrlBase(t)},au.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},zd.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},zd.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},zd.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},zd.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},ni.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},ni.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},ni.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},ni.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},ni.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},Hi.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")},wi.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},xs.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},Fd.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},An.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},An.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},An.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},An.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},An.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},An.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Li.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Li.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Li.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new $n).setFromMatrixColumn(this,3)},Li.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Li.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Li.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Li.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Li.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Li.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Li.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Li.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Li.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Li.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Li.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Li.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Li.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Li.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Li.prototype.makeFrustum=function(t,e,n,i,r,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,i,n,r,s)},Li.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},gs.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Qn.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Qn.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Ri.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Ri.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},Ri.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},dr.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},dr.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},dr.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},dr.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},dr.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},dr.barycoordFromPoint=function(t,e,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),dr.getBarycoord(t,e,n,i,r)},dr.normal=function(t,e,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),dr.getNormal(t,e,n,i)},kc.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},kc.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new gh(this,t)},kc.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new bh(this,t)},Tn.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},Tn.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},Tn.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},$n.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},$n.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},$n.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},$n.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},$n.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},$n.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},$n.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},$n.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},$n.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},jn.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},jn.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},er.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},er.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},er.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},er.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},er.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(er.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),ts.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(ts.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Re},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Ll.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},ls.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(fu.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(yr.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===en},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(en)}}}),yr.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?en:tn),this},yr.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},yr.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Nr.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Nr.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new yr(arguments[1],arguments[2])))},Nr.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Nr.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Nr.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Nr.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Nr.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Nr.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),il.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?en:tn),this},il.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},gh.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},gh.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},gh.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},nl.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Td.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(mr.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Fn}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===g}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(as.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Qo.prototype.clearTarget=function(t,e,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,i)},Qo.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},Qo.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},Qo.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},Qo.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},Qo.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},Qo.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},Qo.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},Qo.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},Qo.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},Qo.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},Qo.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},Qo.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},Qo.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},Qo.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},Qo.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},Qo.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},Qo.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},Qo.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},Qo.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},Qo.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},Qo.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},Qo.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},Qo.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},Qo.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(Qo.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?Ie:De}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties(Go.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(qn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),sd.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new ju).load(t,(function(t){e.setBuffer(t)})),this},ud.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},hs.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},hs.prototype.clear=function(t,e,n,i){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,n,i)},Hn.crossOrigin=void 0,Hn.loadTexture=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new mu;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},Hn.loadTextureCube=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new du;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},Hn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Hn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};const $p={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function tm(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}function em(){return console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js"),new Nr}function nm(){return console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js"),new Nr}function im(){console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js")}function rm(){console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js")}function sm(){console.error("THREE.ImmediateRenderObject has been removed.")}function am(t,e,n){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');const i=new qn(t,e,n);return i.samples=4,i}function om(t,e,n,i){return console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),new Xn(t,e,n,i)}function lm(t,e,n,i){return console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),new Jn(t,e,n,i)}function cm(t,e){let n=new ns(1,1,1),i=new fr({color:15658734}),r=new ts(n,i);return r.position.set(t+.5,5,e+.5),r.name="coin",r}function hm(t,e){let n=new Mh(2,8,8),i=new fr({color:16711422}),r=new ts(n,i);return r.position.set(t+.5,5,e+.5),r.name="powerup",r}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:e}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=e);const um=JSON.parse('[{"id":0,"x":12,"y":36,"dir":[6,1]},{"id":1,"x":52,"y":36,"dir":[7,2,0]},{"id":2,"x":100,"y":36,"dir":[9,1]},{"id":3,"x":124,"y":36,"dir":[10,4]},{"id":4,"x":172,"y":36,"dir":[12,5,3]},{"id":5,"x":212,"y":36,"dir":[13,4]},{"id":6,"x":12,"y":68,"dir":[14,0,7]},{"id":7,"x":52,"y":68,"dir":[15,1,8,6]},{"id":8,"x":76,"y":68,"dir":[16,9,7]},{"id":9,"x":100,"y":68,"dir":[2,8]},{"id":10,"x":124,"y":68,"dir":[3,11,9]},{"id":11,"x":148,"y":68,"dir":[19,12,10]},{"id":12,"x":172,"y":68,"dir":[20,4,13,11]},{"id":13,"x":212,"y":68,"dir":[21,5,12]},{"id":14,"x":12,"y":92,"dir":[6,15]},{"id":15,"x":52,"y":92,"dir":[27,7,14]},{"id":16,"x":76,"y":92,"dir":[8,17]},{"id":17,"x":100,"y":92,"dir":[23,16]},{"id":18,"x":124,"y":92,"dir":[24,19]},{"id":19,"x":148,"y":92,"dir":[11,18]},{"id":20,"x":172,"y":92,"dir":[30,12,21]},{"id":21,"x":212,"y":92,"dir":[13,20]},{"id":22,"x":76,"y":116,"dir":[28,23]},{"id":23,"x":100,"y":116,"dir":[17,24,22]},{"id":24,"x":124,"y":116,"dir":[18,25,23]},{"id":25,"x":148,"y":116,"dir":[29,24]},{"id":26,"x":7,"y":140,"dir":[27]},{"id":27,"x":52,"y":140,"dir":[35,15,28,26]},{"id":28,"x":76,"y":140,"dir":[32,22,27]},{"id":29,"x":148,"y":140,"dir":[33,25,30]},{"id":30,"x":172,"y":140,"dir":[40,20,31,29]},{"id":31,"x":218,"y":140,"dir":[30]},{"id":32,"x":76,"y":164,"dir":[36,28,33]},{"id":33,"x":148,"y":164,"dir":[39,29,32]},{"id":34,"x":12,"y":188,"dir":[42,35]},{"id":35,"x":52,"y":188,"dir":[44,27,36,34]},{"id":36,"x":76,"y":188,"dir":[32,37,35]},{"id":37,"x":100,"y":188,"dir":[46,36]},{"id":38,"x":124,"y":188,"dir":[47,39]},{"id":39,"x":148,"y":188,"dir":[33,40,38]},{"id":40,"x":172,"y":188,"dir":[49,30,41,39]},{"id":41,"x":212,"y":188,"dir":[51,40]},{"id":42,"x":12,"y":212,"dir":[34,43]},{"id":43,"x":28,"y":212,"dir":[53,42]},{"id":44,"x":52,"y":212,"dir":[54,35,45]},{"id":45,"x":76,"y":212,"dir":[55,46,44]},{"id":46,"x":100,"y":212,"dir":[37,47,45]},{"id":47,"x":124,"y":212,"dir":[38,48]},{"id":48,"x":148,"y":212,"dir":[58,49,47]},{"id":49,"x":172,"y":212,"dir":[59,40,48]},{"id":50,"x":196,"y":212,"dir":[60,51]},{"id":51,"x":212,"y":212,"dir":[41,50]},{"id":52,"x":12,"y":236,"dir":[62,53]},{"id":53,"x":28,"y":236,"dir":[43,54,52]},{"id":54,"x":52,"y":236,"dir":[44,53]},{"id":55,"x":76,"y":236,"dir":[45,56]},{"id":56,"x":100,"y":236,"dir":[63,55]},{"id":57,"x":124,"y":236,"dir":[64,58]},{"id":58,"x":148,"y":236,"dir":[48,57]},{"id":59,"x":172,"y":236,"dir":[49,60]},{"id":60,"x":196,"y":236,"dir":[50,61,59]},{"id":61,"x":212,"y":236,"dir":[65,60]},{"id":62,"x":12,"y":260,"dir":[52,63]},{"id":63,"x":100,"y":260,"dir":[56,64,62]},{"id":64,"x":124,"y":260,"dir":[57,65,63]},{"id":65,"x":212,"y":260,"dir":[61,64]}]');function dm(t,e,n,i,r,s){var a=new Uh({color:n,matcap:r});let o=new ts(i,a);return o.name="ghost",o.size=.27,o.scale.set(o.size,o.size,o.size),o.rotateOnAxis(new $n(1,0,0),-Math.PI/2),o.position.set(t,6,e),o.init=function(){this.prevWaypoint=null,this.nextWaypoint=um[23+Math.floor(2*Math.random())],console.log("ghost stage "+s),this.speed=1===s?20:30,console.log(this)},o.init(),o.update=function(t){let e=this.nextWaypoint.x,n=this.nextWaypoint.y;if(Math.sqrt(Math.pow(e-this.position.x,2)+Math.pow(n-this.position.z,2))<1){let t,e=this.nextWaypoint.dir.filter((t=>t!==this.prevWaypoint?.id));this.prevWaypoint=this.nextWaypoint,t=e.length>0?e[Math.floor(Math.random()*e.length)]:this.nextWaypoint.dir[0],this.nextWaypoint=um[t],this.rotation.z=Math.PI/2-Math.atan2(this.nextWaypoint.y-this.position.z,this.nextWaypoint.x-this.position.x)}let i=new $n(e-this.position.x,0,n-this.position.z);i.normalize(),i.multiplyScalar(this.speed*t),this.position.add(i)},o}function pm(t){var e=(new ni).setFromObject(t);t.bounds={xMin:e.min.x,xMax:e.max.x,yMin:e.min.y,yMax:e.max.y,zMin:e.min.z,zMax:e.max.z,isHorizontal:e.max.x-e.min.x>e.max.z-e.min.z},t.fillStyle=t.fillStyle||t.material.color?.getStyle()||t.material[3].color.getStyle()}const mm=new uu,fm=new $n,gm=new Fn;const vm=new Hi(0,0,0,"YXZ"),ym=new $n,xm={type:"change"},_m={type:"lock"},wm={type:"unlock"},bm=Math.PI/2;var Mm=n(922)(t);let Sm,Em,Tm,Am,Cm,Rm,Lm,Pm,Dm;const Im=[];let Bm=!1,zm=!1,Nm=!1,Om=!1,Fm=!0,Um=performance.now();const Hm=new ls(75,window.innerWidth/window.innerHeight,1,3e4),Gm=new $n,km=new $n,Vm=new class extends pn{constructor(t,e){super(),void 0===e&&(console.warn('THREE.PointerLockControls: The second parameter "domElement" is now mandatory.'),e=document.body),this.domElement=e,this.isLocked=!1,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.pointerSpeed=1;const n=this;function i(e){if(!1===n.isLocked)return;const i=e.movementX||e.mozMovementX||e.webkitMovementX||0,r=e.movementY||e.mozMovementY||e.webkitMovementY||0;vm.setFromQuaternion(t.quaternion),vm.y-=.002*i*n.pointerSpeed,vm.x-=.002*r*n.pointerSpeed,vm.x=Math.max(bm-n.maxPolarAngle,Math.min(bm-n.minPolarAngle,vm.x)),t.quaternion.setFromEuler(vm),n.dispatchEvent(xm)}function r(){n.domElement.ownerDocument.pointerLockElement===n.domElement?(n.dispatchEvent(_m),n.isLocked=!0):(n.dispatchEvent(wm),n.isLocked=!1)}function s(){console.error("THREE.PointerLockControls: Unable to use Pointer Lock API")}this.connect=function(){n.domElement.ownerDocument.addEventListener("mousemove",i),n.domElement.ownerDocument.addEventListener("pointerlockchange",r),n.domElement.ownerDocument.addEventListener("pointerlockerror",s)},this.disconnect=function(){n.domElement.ownerDocument.removeEventListener("mousemove",i),n.domElement.ownerDocument.removeEventListener("pointerlockchange",r),n.domElement.ownerDocument.removeEventListener("pointerlockerror",s)},this.dispose=function(){this.disconnect()},this.getObject=function(){return t},this.getDirection=function(){const e=new $n(0,0,-1);return function(n){return n.copy(e).applyQuaternion(t.quaternion)}}(),this.moveForward=function(e){ym.setFromMatrixColumn(t.matrix,0),ym.crossVectors(t.up,ym),t.position.addScaledVector(ym,e)},this.moveRight=function(e){ym.setFromMatrixColumn(t.matrix,0),t.position.addScaledVector(ym,e)},this.lock=function(){this.domElement.requestPointerLock()},this.unlock=function(){n.domElement.ownerDocument.exitPointerLock()},this.connect()}}(Hm,document.body),Wm=new class{constructor(t,e){this.objects=t,this.controls=e,this.canvas=document.getElementById("minimap");let n=Math.max(window.innerWidth,window.innerHeight);this.canvas.width=.25*n,this.canvas.height=.25*n,this.zoom=n/550,this.ctx=this.canvas.getContext("2d"),this.followX=0,this.followZ=0,this.lastPx=0,this.lastPz=0,this.eatTime=0}onResize(){let t=Math.max(window.innerWidth,window.innerHeight);this.canvas.width=.2*t,this.canvas.height=.2*t,this.zoom=t/550}X(t){return(t-this.followX)*this.zoom+this.canvas.width/2}Z(t){return(t-this.followZ)*this.zoom+this.canvas.height/2}update(t){let e=this.ctx;e.clearRect(0,0,this.canvas.width,this.canvas.height);let n=this.controls.getObject().position.x,i=this.controls.getObject().position.z;this.distanceTravelled=Math.sqrt(Math.pow(n-this.lastPx,2)+Math.pow(i-this.lastPz,2)),this.lastPx=n,this.lastPz=i,this.followX=.1*(n-this.followX)+this.followX,this.followZ=.1*(i-this.followZ)+this.followZ;for(let t of this.objects){let n=t.bounds,i=this.X(n.xMin),r=this.Z(n.zMin),s=(n.xMax-n.xMin)*this.zoom,a=(n.zMax-n.zMin)*this.zoom;e.fillStyle=t.fillStyle,e.fillRect(i,r,s,a)}let r=this.X(n),s=this.Z(i);e.beginPath(),e.fillStyle="#ffff00",e.moveTo(r,s),this.eatTime+=this.distanceTravelled,t=Math.PI/2-t;let a=.5+Math.sin(.7*this.eatTime)*Math.PI/4;e.arc(r,s,4*this.zoom,t+a,2*Math.PI+t-a,!1),e.lineTo(r,s),e.fill()}}(Im,Vm),jm=document.getElementById("blocker"),qm=document.getElementById("instructions"),Xm=document.getElementById("gameover-restart"),Ym=document.getElementById("instructions"),Jm=new class{constructor(){this.stage=1,this.lastStage=2,this.coins=0,this.score=0,this.coinsTotal=240,this.powerupActive=!1,this.powerupDuration=11,this.ghosts=[],this.powerupCountdown=0,this.gameOver=!1,this.highscore=0}loadStage(){for(this.powerupActive=!1,this.coins=0,this.score=0,document.getElementById("coins").innerHTML=this.coins,document.getElementById("score").innerHTML=this.score,document.getElementById("stage").innerHTML=this.stage,document.getElementById("powerup").style.display="none",Im.splice(0,Im.length);Sm.children.length>0;)Sm.remove(Sm.children[0]);Sm.add(Dm),Sm.add(Tm),Sm.add(Vm.getObject()),document.getElementById("gameover").style.display="none",this.gameOver=!1,Im.splice(0,Im.length),this.ghosts=[],Rm=new ts(Cm,1===this.stage?Lm:Pm),Sm.add(Rm),function(t){let e=new bs(300,300,16,16);e.rotateX(-Math.PI/2);let n=e.attributes.position;for(let t=0,e=n.count;t<e;t++)fm.fromBufferAttribute(n,t),fm.x+=20*Math.random()+100,fm.y+=.1*Math.random(),fm.z+=20*Math.random()+150,n.setXYZ(t,fm.x,fm.y,fm.z);e=e.toNonIndexed(),n=e.attributes.position;const i=[];for(let t=0,e=n.count;t<e;t++)gm.setHSL(.1*Math.random()+.6,.25,.25*Math.random()),i.push(gm.r,gm.g,gm.b);e.setAttribute("color",new Ar(i,3));const r=new fr({vertexColors:!0}),s=new ts(e,r);s.name="floor",t.add(s)}(Sm),(new mu).load(`asset/wall${this.stage}.jpg`,(function(t){!function(t,e,n,i){var r=new fr({color:2171358});const s=new ns(1,1,1).toNonIndexed(),a=[];for(let t=0,e=s.attributes.position.count;t<e;t++)gm.setHSL(.3*Math.random()+.5,.75,.25*Math.random()+.75),a.push(gm.r,gm.g,gm.b);s.setAttribute("color",new Ar(a,3)),mm.load("asset/maze.png",(function(s){let a=document.createElement("canvas");a.width=s.width,a.height=s.height,a.getContext("2d").drawImage(s,0,0,s.width,s.height);var o=a.getContext("2d").getImageData(0,0,s.width,s.height).data;let l=Array(s.height).fill(0).map((()=>Array(s.width).fill(0)));for(let n=0;n<o.length;n+=4){let i=n/4%s.width,r=Math.floor(n/4/s.width);if(33===o[n]&&33===o[n+1]&&222===o[n+2]&&(l[r][i]=1),151===o[n+2]&&o[n+1]===o[n+4+1]&&o[n+1]===o[n+4*s.width+1]){let n=new cm(i,r);pm(n),e.push(n),t.add(n)}if(185===o[n]&&122===o[n+1]&&87===o[n+2]){let n=new hm(i,r);pm(n),e.push(n),t.add(n)}}let c=function(t){let e=[];for(let n=0;n<t.length;n++)for(let i=0;i<t[n].length;i++)if(t[n][i]){let r=i,s=i;for(;1===t[n][s];)s++;if(s-r>1){for(let e=r;e<=s;e++)t[n][e]=2;e.push([r,n,s-r,1])}i=s}for(let n=0;n<t[0].length;n++)for(let i=0;i<t.length;i++)if(t[i][n]){let r=i,s=i;for(;1===t[s][n];)s++;if(s-r>1){for(let e=r;e<=s;e++)t[e][n]=2;e.push([n,r,1,s-r])}i=s}for(let n=0;n<t.length;n++)for(let i=0;i<t[n].length;i++)1===t[n][i]&&e.push([i,n,1,1]);return e}(l);c.forEach((s=>{((s,a,o,l,c,h)=>{let u,d=n.clone();const p=new ns(l,10,h);let m,f;2===i?((r=new zh).color.setHSL(.01*s,.9,.2),u=r):u=new zh({map:d,flatShading:!0}),l>h?(m=r,f=u):(m=u,f=r);const g=new ts(p,[m,m,r,r,f,f]);g.name="wall";let v=Math.max(l,h)/10;d.wrapS=ht,d.wrapT=ht,d.repeat.set(v,1),g.position.set(s+l/2,5,o+h/2),pm(g),e.push(g),t.add(g)})(s[0],0,s[1],s[2],0,s[3])}))}))}(Sm,Im,t,Jm.stage)})),(new Mm).load("asset/ghost.stl",(function(t){Jm.ghosts=function(t,e,n,i){let r=[16711680,65535,16759006,16758855],s=[[112,117],[96,140],[113,140],[129,140]];const a=[];let o=(new mu).load("asset/matghost.png");for(let l=0;l<r.length;l++){let[c,h]=s[l];const u=new dm(c,h,r[l],n,o,i);pm(u),t.add(u),e.push(u),a.push(u)}return a}(Sm,Im,t,Jm.stage)})),km.set(0,0,0),Gm.set(0,0,0),Vm.getObject().rotation.set(0,Math.PI,0),Vm.getObject().position.set(112,6,211),document.getElementById("coinsTotal").innerHTML=this.coinsTotal,document.getElementById("stage").innerHTML=this.stage}setTotalCoins(t){document.getElementById("coinsTotal").innerHTML=t}addCoin(){this.coins++,this.score+=10,document.getElementById("coins").innerHTML=this.coins,document.getElementById("score").innerHTML=this.score,this.coins>=this.coinsTotal&&setTimeout((()=>{if(this.coins=0,this.stage++,this.stage>this.lastStage)return this.stage=1,void this.loseGame(!1);document.getElementById("stage").innerHTML=this.stage,document.getElementById("coins").innerHTML=this.coins,document.getElementById("coinsTotal").innerHTML=this.coinsTotal,document.getElementById("stage").innerHTML=this.stage,this.loadStage()}),1e3)}addPowerup(){this.score+=50,document.getElementById("score").innerHTML=this.score,document.getElementById("powerup").style.display="block",this.powerupActive=!0,this.powerupCountdown=this.powerupDuration}removePowerup(){this.powerupActive=!1,document.getElementById("powerup").style.display="none"}loseGame(t){this.highscore=Math.max(this.highscore,this.score),document.getElementById("gameover-score").innerHTML=this.score,document.getElementById("gameover-highscore").innerHTML=this.highscore,Vm.unlock(),qm.style.display="none",document.getElementById("gameover").style.display="block",document.getElementById("gameover-title").innerHTML=!1===t?"Winner!":"Game Over",this.gameOver=!0,this.stage=1}update(t){for(let e=0;e<this.ghosts.length;e++){let n=this.ghosts[e];n.update(t),pm(n)}this.powerupActive&&(this.powerupCountdown-=t,this.powerupCountdown<=0&&this.removePowerup())}};function Zm(t){const e=function(t){const e="./asset/skybox/"+t;return["ft","bk","up","dn","rt","lf"].map((t=>e+"_"+t+".png"))}(t);return e.map((t=>{let e=(new mu).load(t);return new fr({map:e,side:m})}))}var Km=n(379),Qm=n.n(Km),$m=n(795),tf=n.n($m),ef=n(569),nf=n.n(ef),rf=n(565),sf=n.n(rf),af=n(216),of=n.n(af),lf=n(589),cf=n.n(lf),hf=n(426),uf={};uf.styleTagTransform=cf(),uf.setAttributes=sf(),uf.insert=nf().bind(null,"head"),uf.domAPI=tf(),uf.insertStyleElement=of(),Qm()(hf.Z,uf),hf.Z&&hf.Z.locals&&hf.Z.locals,Sm=new nl,Dm=new gu(15658751,7829384,.75),Dm.position.set(.5,1,.75),Tm=new Au(16777113,1.9,25),Lm=Zm("corona"),Pm=Zm("redeclipse"),Cm=new ns(1e4,1e4,1e4),qm.addEventListener("click",(function(){Vm.lock()})),Xm.addEventListener("click",(function(){Jm.loadStage(),Ym.style.display="",qm.style.display=""})),Vm.addEventListener("lock",(function(){qm.style.display="none",jm.style.display="none"})),Vm.addEventListener("unlock",(function(){jm.style.display="block",Jm.gameOver||(qm.style.display="")})),document.addEventListener("keydown",(function(t){switch(t.code){case"ArrowUp":case"KeyW":Bm=!0;break;case"ArrowLeft":case"KeyA":Nm=!0;break;case"ArrowDown":case"KeyS":zm=!0;break;case"ArrowRight":case"KeyD":Om=!0;break;case"Space":Jm.powerupActive&&(Fm&&0!=Gm.y||(Gm.y=50),Fm=!0)}})),document.addEventListener("keyup",(function(t){switch(t.code){case"ArrowUp":case"KeyW":Bm=!1;break;case"ArrowLeft":case"KeyA":Nm=!1;break;case"ArrowDown":case"KeyS":zm=!1;break;case"ArrowRight":case"KeyD":Om=!1;break;case"KeyP":Jm.loadStage()}})),Am=new Rd(new $n,new $n(0,-1,0),0,10),Jm.loadStage(),Em=new Qo({antialias:!0}),Em.setPixelRatio(window.devicePixelRatio),Em.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(Em.domElement),window.addEventListener("resize",(function(){Hm.aspect=window.innerWidth/window.innerHeight,Hm.updateProjectionMatrix(),Em.setSize(window.innerWidth,window.innerHeight),Wm.onResize()})),function t(){if(requestAnimationFrame(t),Jm.gameOver)return;const e=performance.now();if(!0===Vm.isLocked){const t=(e-Um)/1e3;Gm.x-=10*Gm.x*t,Gm.z-=10*Gm.z*t,Fm&&(Gm.y-=98*t),km.z=Number(Bm)-Number(zm),km.x=Number(Om)-Number(Nm),km.normalize(),(Bm||zm)&&(Gm.z-=380*km.z*t),(Nm||Om)&&(Gm.x-=380*km.x*t);let n=Vm.getObject().position.clone();Vm.moveRight(-Gm.x*t),Vm.moveForward(-Gm.z*t),Vm.getObject().position.y+=Gm.y*t,Fm=!function(t,e,n,i,r,s){let a=t.getObject(),o=2.8,l=a.position.x,c=a.position.y,h=a.position.z;for(var u=l-o,d=l+o,p=c-o,m=c+o,f=h-o,g=h+o,v=s.length-1;v>=0;v--){let a=s[v],o=a.bounds;if(u<=o.xMax&&d>=o.xMin&&p<=o.yMax&&m>=o.yMin&&f<=o.zMax&&g>=o.zMin){if("wall"===a.name){if(n.y<0&&Math.abs(p-o.yMax)<1)return t.getObject().position.y=e.y,!0;o.isHorizontal?t.getObject().position.z=e.z:t.getObject().position.x=e.x;break}"coin"===a.name?(s.splice(v,1),i.remove(a),r.addCoin()):"powerup"===a.name?(s.splice(v,1),i.remove(a),r.addPowerup()):"ghost"===a.name?r.loseGame():a.name}}return!1}(Vm,n,Gm,Sm,Jm,Im),Vm.getObject().position.y<6.5&&(Gm.y=0,Vm.getObject().position.y=6.5,Fm=!1),Jm.powerupActive&&(document.getElementById("powerup").style.color="hsl("+e+", 100%, 50%)"),Jm.update(t)}Tm.position.x=Vm.getObject().position.x,Tm.position.y=Vm.getObject().position.y,Tm.position.z=Vm.getObject().position.z,Um=e,Em.render(Sm,Hm);let n=Hm.getWorldDirection(new $n),i=Math.atan2(n.x,n.z);Wm.update(i)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bHBKLEVBQUksRUFDYm1wSixHQUFTZ0IsWUFBWXg2SCxTQUFTM3ZCLEVBQUksSUFDbEMrb0osSUFBVSxHQUlSZ0QsR0FBS0ssZ0JBQ1c5eEosU0FBU213SixlQUFlLFdBQzlCdHdKLE1BQU00aUIsTUFBUSxPQUFTNmhDLEVBQU8sZ0JBRzVDbXRHLEdBQUt2eUosT0FBT3drQixHQUtkc3FJLEdBQWEzNEgsU0FBUzd2QixFQUFJcXBKLEdBQVNnQixZQUFZeDZILFNBQVM3dkIsRUFDeER3b0osR0FBYTM0SCxTQUFTM3ZCLEVBQUltcEosR0FBU2dCLFlBQVl4NkgsU0FBUzN2QixFQUN4RHNvSixHQUFhMzRILFNBQVMxdkIsRUFBSWtwSixHQUFTZ0IsWUFBWXg2SCxTQUFTMXZCLEVBRXhEMnJILEdBQVdodEUsRUFFWHJFLEdBQVNPLE9BQU9OLEdBQU83dUIsSUFHdkIsSUFBSTJqSSxFQUFlM2pJLEdBQU8wVSxrQkFBbUIsSUFBSXBrQyxJQUM3QzhlLEVBQVF4TSxLQUFLK0csTUFBTWc2SSxFQUFheHZKLEVBQUd3dkosRUFBYXJ2SixHQUNwRHVxSixHQUFRaHhKLE9BQU91aEIsR0ExRmZ1b0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYWNtYW4tM2QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3BhY21hbi0zZC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3BhY21hbi0zZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3BhY21hbi0zZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9wYWNtYW4tM2QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9wYWNtYW4tM2QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9wYWNtYW4tM2QvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RsLWxvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wYWNtYW4tM2Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3BhY21hbi0zZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9wYWNtYW4tM2QvLi9zcmMvY29tcG9uZW50L2NvbGxlY3RhYmxlLmpzIiwid2VicGFjazovL3BhY21hbi0zZC8uL3NyYy9jb21wb25lbnQvZ2hvc3QuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vc3JjL2NvbXBvbmVudC9jb2xsaXNpb24uanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vc3JjL2NvbXBvbmVudC9mYWN0b3J5LmpzIiwid2VicGFjazovL3BhY21hbi0zZC8uL3NyYy91dGlsL1BvaW50ZXJMb2NrQ29udHJvbHMuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vcGFjbWFuLTNkLy4vc3JjL2NvbXBvbmVudC9taW5pbWFwLmpzIiwid2VicGFjazovL3BhY21hbi0zZC8uL3NyYy9zdHlsZS5jc3M/NzE2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHkge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIHBhZGRpbmc6IDE0cHggMjBweDtcXHJcXG4gIG1hcmdpbjogOHB4IDA7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICBmb250LXNpemU6IGxhcmdlO1xcclxcbn1cXHJcXG5cXHJcXG4jaHVkIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBmb250OiAnVlQzMjMnLCBtb25vc3BhY2U7XFxyXFxufVxcclxcbiNtaW5pbWFwIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogMTBweDtcXHJcXG4gIGxlZnQ6IDEwcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNSk7XFxyXFxuICAvKiBtYWtlIGNhbnZhcyBjaXJ1bGFyICovXFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuXFxyXFxufVxcclxcbiNyZXN0YXJ0SW5mbyB7XFxyXFxuICBwb3NpdGlvbjphYnNvbHV0ZTtcXHJcXG4gIGJvdHRvbTo1cHg7XFxyXFxuICByaWdodDo1cHg7XFxyXFxuICBmb250LXNpemU6IDEuOHZ3O1xcclxcbn1cXHJcXG4jaHVkLWlubmVyIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIGJvdHRvbTogNXB4O1xcclxcblxcclxcbn1cXHJcXG4jaHVkIHAge1xcclxcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcclxcbiAgZm9udC1mYW1pbHk6ICdWVDMyMycsIG1vbm9zcGFjZTtcXHJcXG4gIGZvbnQtc2l6ZTogNDBweDtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuI2Jsb2NrZXIge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMiwgMTEyLCAxMTIsIDAuOCk7XFxyXFxuICBmb250LWZhbWlseTogJ1ZUMzIzJywgbW9ub3NwYWNlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbiNpbnN0cnVjdGlvbnMge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4jYmxvY2tlciBoMSB7XFxyXFxuICBmb250LXNpemU6IDV2dztcXHJcXG59XFxyXFxuI2Jsb2NrZXIgcCB7XFxyXFxuICBmb250LXNpemU6IDN2dztcXHJcXG59XFxyXFxuI2luc3RydWN0aW9ucyBzbWFsbCB7XFxyXFxuICBmb250LXNpemU6IDIuNXZ3O1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztBQUNYOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLFlBQVk7RUFDWixlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxZQUFZO0VBQ1osV0FBVztFQUNYLHdCQUF3QjtBQUMxQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxVQUFVO0VBQ1YsaUNBQWlDO0VBQ2pDLHdCQUF3QjtFQUN4QixrQkFBa0I7O0FBRXBCO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsVUFBVTtFQUNWLFNBQVM7RUFDVCxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXOztBQUViO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsK0JBQStCO0VBQy9CLGVBQWU7RUFDZixTQUFTO0FBQ1g7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtFQUNaLDBDQUEwQztFQUMxQywrQkFBK0I7RUFDL0IsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJib2R5IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICBwYWRkaW5nOiAxNHB4IDIwcHg7XFxyXFxuICBtYXJnaW46IDhweCAwO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgZm9udC1zaXplOiBsYXJnZTtcXHJcXG59XFxyXFxuXFxyXFxuI2h1ZCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgZm9udDogJ1ZUMzIzJywgbW9ub3NwYWNlO1xcclxcbn1cXHJcXG4jbWluaW1hcCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDEwcHg7XFxyXFxuICBsZWZ0OiAxMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjUpO1xcclxcbiAgLyogbWFrZSBjYW52YXMgY2lydWxhciAqL1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcblxcclxcbn1cXHJcXG4jcmVzdGFydEluZm8ge1xcclxcbiAgcG9zaXRpb246YWJzb2x1dGU7XFxyXFxuICBib3R0b206NXB4O1xcclxcbiAgcmlnaHQ6NXB4O1xcclxcbiAgZm9udC1zaXplOiAxLjh2dztcXHJcXG59XFxyXFxuI2h1ZC1pbm5lciB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBib3R0b206IDVweDtcXHJcXG5cXHJcXG59XFxyXFxuI2h1ZCBwIHtcXHJcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnVlQzMjMnLCBtb25vc3BhY2U7XFxyXFxuICBmb250LXNpemU6IDQwcHg7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxufVxcclxcbiNibG9ja2VyIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTIsIDExMiwgMTEyLCAwLjgpO1xcclxcbiAgZm9udC1mYW1pbHk6ICdWVDMyMycsIG1vbm9zcGFjZTtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4jaW5zdHJ1Y3Rpb25zIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuI2Jsb2NrZXIgaDEge1xcclxcbiAgZm9udC1zaXplOiA1dnc7XFxyXFxufVxcclxcbiNibG9ja2VyIHAge1xcclxcbiAgZm9udC1zaXplOiAzdnc7XFxyXFxufVxcclxcbiNpbnN0cnVjdGlvbnMgc21hbGwge1xcclxcbiAgZm9udC1zaXplOiAyLjV2dztcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvKipcbiAqIEBhdXRob3IgYWxlZXBlciAvIGh0dHA6Ly9hZGFtbGVlcGVyLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGdlcm8zIC8gaHR0cHM6Ly9naXRodWIuY29tL2dlcm8zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIERlc2NyaXB0aW9uOiBBIFRIUkVFIGxvYWRlciBmb3IgU1RMIEFTQ0lJIGZpbGVzLCBhcyBjcmVhdGVkIGJ5IFNvbGlkd29ya3MgYW5kIG90aGVyIENBRCBwcm9ncmFtcy5cbiAqXG4gKiBTdXBwb3J0cyBib3RoIGJpbmFyeSBhbmQgQVNDSUkgZW5jb2RlZCBmaWxlcywgd2l0aCBhdXRvbWF0aWMgZGV0ZWN0aW9uIG9mIHR5cGUuXG4gKlxuICogVGhlIGxvYWRlciByZXR1cm5zIGEgbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5LlxuICpcbiAqIExpbWl0YXRpb25zOlxuICogIEJpbmFyeSBkZWNvZGluZyBzdXBwb3J0cyBcIk1hZ2ljc1wiIGNvbG9yIGZvcm1hdCAoaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TVExfKGZpbGVfZm9ybWF0KSNDb2xvcl9pbl9iaW5hcnlfU1RMKS5cbiAqICBUaGVyZSBpcyBwZXJoYXBzIHNvbWUgcXVlc3Rpb24gYXMgdG8gaG93IHZhbGlkIGl0IGlzIHRvIGFsd2F5cyBhc3N1bWUgbGl0dGxlLWVuZGlhbi1uZXNzLlxuICogIEFTQ0lJIGRlY29kaW5nIGFzc3VtZXMgZmlsZSBpcyBVVEYtOC5cbiAqXG4gKiBVc2FnZTpcbiAqICB2YXIgbG9hZGVyID0gbmV3IFRIUkVFLlNUTExvYWRlcigpO1xuICogIGxvYWRlci5sb2FkKCAnLi9tb2RlbHMvc3RsL3Nsb3R0ZWRfZGlzay5zdGwnLCBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuICogICAgc2NlbmUuYWRkKCBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnkgKSApO1xuICogIH0pO1xuICpcbiAqIEZvciBiaW5hcnkgU1RMcyBnZW9tZXRyeSBtaWdodCBjb250YWluIGNvbG9ycyBmb3IgdmVydGljZXMuIFRvIHVzZSBpdDpcbiAqICAvLyB1c2UgdGhlIHNhbWUgY29kZSB0byBsb2FkIFNUTCBhcyBhYm92ZVxuICogIGlmIChnZW9tZXRyeS5oYXNDb2xvcnMpIHtcbiAqICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgb3BhY2l0eTogZ2VvbWV0cnkuYWxwaGEsIHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzIH0pO1xuICogIH0gZWxzZSB7IC4uLi4gfVxuICogIHZhciBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICovXG5cbiBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUSFJFRSkge1xuXG4gICB2YXIgU1RMTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkge1xuXG4gICBcdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG4gICB9O1xuXG4gICBTVExMb2FkZXIucHJvdG90eXBlID0ge1xuXG4gICBcdGNvbnN0cnVjdG9yOiBUSFJFRS5TVExMb2FkZXIsXG5cbiAgIFx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuICAgXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cbiAgIFx0XHR2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcbiAgIFx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG4gICBcdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG4gICBcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCB0ZXh0ICkgKTtcblxuICAgXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuICAgXHR9LFxuXG4gICBcdHBhcnNlOiBmdW5jdGlvbiAoIGRhdGEgKSB7XG5cbiAgIFx0XHR2YXIgaXNCaW5hcnkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgIFx0XHRcdHZhciBleHBlY3QsIGZhY2Vfc2l6ZSwgbl9mYWNlcywgcmVhZGVyO1xuICAgXHRcdFx0cmVhZGVyID0gbmV3IERhdGFWaWV3KCBiaW5EYXRhICk7XG4gICBcdFx0XHRmYWNlX3NpemUgPSAoIDMyIC8gOCAqIDMgKSArICggKCAzMiAvIDggKiAzICkgKiAzICkgKyAoIDE2IC8gOCApO1xuICAgXHRcdFx0bl9mYWNlcyA9IHJlYWRlci5nZXRVaW50MzIoIDgwLCB0cnVlICk7XG4gICBcdFx0XHRleHBlY3QgPSA4MCArICggMzIgLyA4ICkgKyAoIG5fZmFjZXMgKiBmYWNlX3NpemUgKTtcblxuICAgXHRcdFx0aWYgKCBleHBlY3QgPT09IHJlYWRlci5ieXRlTGVuZ3RoICkge1xuXG4gICBcdFx0XHRcdHJldHVybiB0cnVlO1xuXG4gICBcdFx0XHR9XG5cbiAgIFx0XHRcdC8vIEFuIEFTQ0lJIFNUTCBkYXRhIG11c3QgYmVnaW4gd2l0aCAnc29saWQgJyBhcyB0aGUgZmlyc3Qgc2l4IGJ5dGVzLlxuICAgXHRcdFx0Ly8gSG93ZXZlciwgQVNDSUkgU1RMcyBsYWNraW5nIHRoZSBTUEFDRSBhZnRlciB0aGUgJ2QnIGFyZSBrbm93biB0byBiZVxuICAgXHRcdFx0Ly8gcGxlbnRpZnVsLiAgU28sIGNoZWNrIHRoZSBmaXJzdCA1IGJ5dGVzIGZvciAnc29saWQnLlxuXG4gICBcdFx0XHQvLyBVUy1BU0NJSSBvcmRpbmFsIHZhbHVlcyBmb3IgJ3MnLCAnbycsICdsJywgJ2knLCAnZCdcbiAgIFx0XHRcdHZhciBzb2xpZCA9IFsgMTE1LCAxMTEsIDEwOCwgMTA1LCAxMDAgXTtcblxuICAgXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNTsgaSArKyApIHtcblxuICAgXHRcdFx0XHQvLyBJZiBzb2xpZFsgaSBdIGRvZXMgbm90IG1hdGNoIHRoZSBpLXRoIGJ5dGUsIHRoZW4gaXQgaXMgbm90IGFuXG4gICBcdFx0XHRcdC8vIEFTQ0lJIFNUTDsgaGVuY2UsIGl0IGlzIGJpbmFyeSBhbmQgcmV0dXJuIHRydWUuXG5cbiAgIFx0XHRcdFx0aWYgKCBzb2xpZFsgaSBdICE9IHJlYWRlci5nZXRVaW50OCggaSwgZmFsc2UgKSApIHJldHVybiB0cnVlO1xuXG4gICAgXHRcdFx0fVxuXG4gICBcdFx0XHQvLyBGaXJzdCA1IGJ5dGVzIHJlYWQgXCJzb2xpZFwiOyBkZWNsYXJlIGl0IHRvIGJlIGFuIEFTQ0lJIFNUTFxuICAgXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG4gICBcdFx0fTtcblxuICAgXHRcdHZhciBiaW5EYXRhID0gdGhpcy5lbnN1cmVCaW5hcnkoIGRhdGEgKTtcblxuICAgXHRcdHJldHVybiBpc0JpbmFyeSgpID8gdGhpcy5wYXJzZUJpbmFyeSggYmluRGF0YSApIDogdGhpcy5wYXJzZUFTQ0lJKCB0aGlzLmVuc3VyZVN0cmluZyggZGF0YSApICk7XG5cbiAgIFx0fSxcblxuICAgXHRwYXJzZUJpbmFyeTogZnVuY3Rpb24gKCBkYXRhICkge1xuXG4gICBcdFx0dmFyIHJlYWRlciA9IG5ldyBEYXRhVmlldyggZGF0YSApO1xuICAgXHRcdHZhciBmYWNlcyA9IHJlYWRlci5nZXRVaW50MzIoIDgwLCB0cnVlICk7XG5cbiAgIFx0XHR2YXIgciwgZywgYiwgaGFzQ29sb3JzID0gZmFsc2UsIGNvbG9ycztcbiAgIFx0XHR2YXIgZGVmYXVsdFIsIGRlZmF1bHRHLCBkZWZhdWx0QiwgYWxwaGE7XG5cbiAgIFx0XHQvLyBwcm9jZXNzIFNUTCBoZWFkZXJcbiAgIFx0XHQvLyBjaGVjayBmb3IgZGVmYXVsdCBjb2xvciBpbiBoZWFkZXIgKFwiQ09MT1I9cmdiYVwiIHNlcXVlbmNlKS5cblxuICAgXHRcdGZvciAoIHZhciBpbmRleCA9IDA7IGluZGV4IDwgODAgLSAxMDsgaW5kZXggKysgKSB7XG5cbiAgIFx0XHRcdGlmICggKCByZWFkZXIuZ2V0VWludDMyKCBpbmRleCwgZmFsc2UgKSA9PSAweDQzNEY0QzRGIC8qQ09MTyovICkgJiZcbiAgIFx0XHRcdFx0KCByZWFkZXIuZ2V0VWludDgoIGluZGV4ICsgNCApID09IDB4NTIgLyonUicqLyApICYmXG4gICBcdFx0XHRcdCggcmVhZGVyLmdldFVpbnQ4KCBpbmRleCArIDUgKSA9PSAweDNEIC8qJz0nKi8gKSApIHtcblxuICAgXHRcdFx0XHRoYXNDb2xvcnMgPSB0cnVlO1xuICAgXHRcdFx0XHRjb2xvcnMgPSBbXTtcblxuICAgXHRcdFx0XHRkZWZhdWx0UiA9IHJlYWRlci5nZXRVaW50OCggaW5kZXggKyA2ICkgLyAyNTU7XG4gICBcdFx0XHRcdGRlZmF1bHRHID0gcmVhZGVyLmdldFVpbnQ4KCBpbmRleCArIDcgKSAvIDI1NTtcbiAgIFx0XHRcdFx0ZGVmYXVsdEIgPSByZWFkZXIuZ2V0VWludDgoIGluZGV4ICsgOCApIC8gMjU1O1xuICAgXHRcdFx0XHRhbHBoYSA9IHJlYWRlci5nZXRVaW50OCggaW5kZXggKyA5ICkgLyAyNTU7XG5cbiAgIFx0XHRcdH1cblxuICAgXHRcdH1cblxuICAgXHRcdHZhciBkYXRhT2Zmc2V0ID0gODQ7XG4gICBcdFx0dmFyIGZhY2VMZW5ndGggPSAxMiAqIDQgKyAyO1xuXG4gICBcdFx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cbiAgIFx0XHR2YXIgdmVydGljZXMgPSBbXTtcbiAgIFx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXG4gICBcdFx0Zm9yICggdmFyIGZhY2UgPSAwOyBmYWNlIDwgZmFjZXM7IGZhY2UgKysgKSB7XG5cbiAgIFx0XHRcdHZhciBzdGFydCA9IGRhdGFPZmZzZXQgKyBmYWNlICogZmFjZUxlbmd0aDtcbiAgIFx0XHRcdHZhciBub3JtYWxYID0gcmVhZGVyLmdldEZsb2F0MzIoIHN0YXJ0LCB0cnVlICk7XG4gICBcdFx0XHR2YXIgbm9ybWFsWSA9IHJlYWRlci5nZXRGbG9hdDMyKCBzdGFydCArIDQsIHRydWUgKTtcbiAgIFx0XHRcdHZhciBub3JtYWxaID0gcmVhZGVyLmdldEZsb2F0MzIoIHN0YXJ0ICsgOCwgdHJ1ZSApO1xuXG4gICBcdFx0XHRpZiAoIGhhc0NvbG9ycyApIHtcblxuICAgXHRcdFx0XHR2YXIgcGFja2VkQ29sb3IgPSByZWFkZXIuZ2V0VWludDE2KCBzdGFydCArIDQ4LCB0cnVlICk7XG5cbiAgIFx0XHRcdFx0aWYgKCAoIHBhY2tlZENvbG9yICYgMHg4MDAwICkgPT09IDAgKSB7XG5cbiAgIFx0XHRcdFx0XHQvLyBmYWNldCBoYXMgaXRzIG93biB1bmlxdWUgY29sb3JcblxuICAgXHRcdFx0XHRcdHIgPSAoIHBhY2tlZENvbG9yICYgMHgxRiApIC8gMzE7XG4gICBcdFx0XHRcdFx0ZyA9ICggKCBwYWNrZWRDb2xvciA+PiA1ICkgJiAweDFGICkgLyAzMTtcbiAgIFx0XHRcdFx0XHRiID0gKCAoIHBhY2tlZENvbG9yID4+IDEwICkgJiAweDFGICkgLyAzMTtcblxuICAgXHRcdFx0XHR9IGVsc2Uge1xuXG4gICBcdFx0XHRcdFx0ciA9IGRlZmF1bHRSO1xuICAgXHRcdFx0XHRcdGcgPSBkZWZhdWx0RztcbiAgIFx0XHRcdFx0XHRiID0gZGVmYXVsdEI7XG5cbiAgIFx0XHRcdFx0fVxuXG4gICBcdFx0XHR9XG5cbiAgIFx0XHRcdGZvciAoIHZhciBpID0gMTsgaSA8PSAzOyBpICsrICkge1xuXG4gICBcdFx0XHRcdHZhciB2ZXJ0ZXhzdGFydCA9IHN0YXJ0ICsgaSAqIDEyO1xuXG4gICBcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHJlYWRlci5nZXRGbG9hdDMyKCB2ZXJ0ZXhzdGFydCwgdHJ1ZSApICk7XG4gICBcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHJlYWRlci5nZXRGbG9hdDMyKCB2ZXJ0ZXhzdGFydCArIDQsIHRydWUgKSApO1xuICAgXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCByZWFkZXIuZ2V0RmxvYXQzMiggdmVydGV4c3RhcnQgKyA4LCB0cnVlICkgKTtcblxuICAgXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbFgsIG5vcm1hbFksIG5vcm1hbFogKTtcblxuICAgXHRcdFx0XHRpZiAoIGhhc0NvbG9ycyApIHtcblxuICAgXHRcdFx0XHRcdGNvbG9ycy5wdXNoKCByLCBnLCBiICk7XG5cbiAgIFx0XHRcdFx0fVxuXG4gICBcdFx0XHR9XG5cbiAgIFx0XHR9XG5cbiAgIFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHZlcnRpY2VzICksIDMgKSApO1xuICAgXHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIG5vcm1hbHMgKSwgMyApICk7XG5cbiAgIFx0XHRpZiAoIGhhc0NvbG9ycyApIHtcblxuICAgXHRcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBjb2xvcnMgKSwgMyApICk7XG4gICBcdFx0XHRnZW9tZXRyeS5oYXNDb2xvcnMgPSB0cnVlO1xuICAgXHRcdFx0Z2VvbWV0cnkuYWxwaGEgPSBhbHBoYTtcblxuICAgXHRcdH1cblxuICAgXHRcdHJldHVybiBnZW9tZXRyeTtcblxuICAgXHR9LFxuXG4gICBcdHBhcnNlQVNDSUk6IGZ1bmN0aW9uICggZGF0YSApIHtcblxuICAgXHRcdHZhciBnZW9tZXRyeSwgbGVuZ3RoLCBwYXR0ZXJuRmFjZSwgcGF0dGVybk5vcm1hbCwgcGF0dGVyblZlcnRleCwgcmVzdWx0LCB0ZXh0O1xuICAgXHRcdGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICBcdFx0cGF0dGVybkZhY2UgPSAvZmFjZXQoW1xcc1xcU10qPyllbmRmYWNldC9nO1xuXG4gICBcdFx0dmFyIHZlcnRpY2VzID0gW107XG4gICBcdFx0dmFyIG5vcm1hbHMgPSBbXTtcblxuICAgXHRcdHZhciBub3JtYWwgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG4gICBcdFx0d2hpbGUgKCAoIHJlc3VsdCA9IHBhdHRlcm5GYWNlLmV4ZWMoIGRhdGEgKSApICE9PSBudWxsICkge1xuXG4gICBcdFx0XHR0ZXh0ID0gcmVzdWx0WyAwIF07XG4gICBcdFx0XHRwYXR0ZXJuTm9ybWFsID0gL25vcm1hbFtcXHNdKyhbXFwtK10/WzAtOV0rXFwuP1swLTldKihbZUVdW1xcLStdP1swLTldKyk/KStbXFxzXSsoW1xcLStdP1swLTldKlxcLj9bMC05XSsoW2VFXVtcXC0rXT9bMC05XSspPykrW1xcc10rKFtcXC0rXT9bMC05XSpcXC4/WzAtOV0rKFtlRV1bXFwtK10/WzAtOV0rKT8pKy9nO1xuXG4gICBcdFx0XHR3aGlsZSAoICggcmVzdWx0ID0gcGF0dGVybk5vcm1hbC5leGVjKCB0ZXh0ICkgKSAhPT0gbnVsbCApIHtcblxuICAgXHRcdFx0XHRub3JtYWwueCA9IHBhcnNlRmxvYXQoIHJlc3VsdFsgMSBdICk7XG4gICBcdFx0XHRcdG5vcm1hbC55ID0gcGFyc2VGbG9hdCggcmVzdWx0WyAzIF0gKTtcbiAgIFx0XHRcdFx0bm9ybWFsLnogPSBwYXJzZUZsb2F0KCByZXN1bHRbIDUgXSApO1xuXG4gICBcdFx0XHR9XG5cbiAgIFx0XHRcdHBhdHRlcm5WZXJ0ZXggPSAvdmVydGV4W1xcc10rKFtcXC0rXT9bMC05XStcXC4/WzAtOV0qKFtlRV1bXFwtK10/WzAtOV0rKT8pK1tcXHNdKyhbXFwtK10/WzAtOV0qXFwuP1swLTldKyhbZUVdW1xcLStdP1swLTldKyk/KStbXFxzXSsoW1xcLStdP1swLTldKlxcLj9bMC05XSsoW2VFXVtcXC0rXT9bMC05XSspPykrL2c7XG5cbiAgIFx0XHRcdHdoaWxlICggKCByZXN1bHQgPSBwYXR0ZXJuVmVydGV4LmV4ZWMoIHRleHQgKSApICE9PSBudWxsICkge1xuXG4gICBcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHBhcnNlRmxvYXQoIHJlc3VsdFsgMSBdICksIHBhcnNlRmxvYXQoIHJlc3VsdFsgMyBdICksIHBhcnNlRmxvYXQoIHJlc3VsdFsgNSBdICkgKTtcbiAgIFx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cbiAgIFx0XHRcdH1cblxuICAgXHRcdH1cblxuICAgXHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggdmVydGljZXMgKSwgMyApICk7XG4gICBcdFx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggbm9ybWFscyApLCAzICkgKTtcblxuICAgXHRcdHJldHVybiBnZW9tZXRyeTtcblxuICAgXHR9LFxuXG4gICBcdGVuc3VyZVN0cmluZzogZnVuY3Rpb24gKCBidWYgKSB7XG5cbiAgIFx0XHRpZiAoIHR5cGVvZiBidWYgIT09IFwic3RyaW5nXCIgKSB7XG5cbiAgIFx0XHRcdHZhciBhcnJheV9idWZmZXIgPSBuZXcgVWludDhBcnJheSggYnVmICk7XG4gICBcdFx0XHR2YXIgc3RyQXJyYXkgPSBbXTtcbiAgIFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGJ1Zi5ieXRlTGVuZ3RoOyBpICsrICkge1xuXG4gICBcdFx0XHRcdHN0ckFycmF5LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlfYnVmZmVyWyBpIF0gKSk7IC8vIGltcGxpY2l0bHkgYXNzdW1lcyBsaXR0bGUtZW5kaWFuXG5cbiAgIFx0XHRcdH1cbiAgIFx0XHRcdHJldHVybiBzdHJBcnJheS5qb2luKCcnKTtcblxuICAgXHRcdH0gZWxzZSB7XG5cbiAgIFx0XHRcdHJldHVybiBidWY7XG5cbiAgIFx0XHR9XG5cbiAgIFx0fSxcblxuICAgXHRlbnN1cmVCaW5hcnk6IGZ1bmN0aW9uICggYnVmICkge1xuXG4gICBcdFx0aWYgKCB0eXBlb2YgYnVmID09PSBcInN0cmluZ1wiICkge1xuXG4gICBcdFx0XHR2YXIgYXJyYXlfYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoIGJ1Zi5sZW5ndGggKTtcbiAgIFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkgKysgKSB7XG5cbiAgIFx0XHRcdFx0YXJyYXlfYnVmZmVyWyBpIF0gPSBidWYuY2hhckNvZGVBdCggaSApICYgMHhmZjsgLy8gaW1wbGljaXRseSBhc3N1bWVzIGxpdHRsZS1lbmRpYW5cblxuICAgXHRcdFx0fVxuICAgXHRcdFx0cmV0dXJuIGFycmF5X2J1ZmZlci5idWZmZXIgfHwgYXJyYXlfYnVmZmVyO1xuXG4gICBcdFx0fSBlbHNlIHtcblxuICAgXHRcdFx0cmV0dXJuIGJ1ZjtcblxuICAgXHRcdH1cblxuICAgXHR9XG5cbiAgIH1cblxuICAgcmV0dXJuIFNUTExvYWRlclxuIH1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDIyIFRocmVlLmpzIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuY29uc3QgUkVWSVNJT04gPSAnMTM4JztcbmNvbnN0IE1PVVNFID0geyBMRUZUOiAwLCBNSURETEU6IDEsIFJJR0hUOiAyLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIgfTtcbmNvbnN0IFRPVUNIID0geyBST1RBVEU6IDAsIFBBTjogMSwgRE9MTFlfUEFOOiAyLCBET0xMWV9ST1RBVEU6IDMgfTtcbmNvbnN0IEN1bGxGYWNlTm9uZSA9IDA7XG5jb25zdCBDdWxsRmFjZUJhY2sgPSAxO1xuY29uc3QgQ3VsbEZhY2VGcm9udCA9IDI7XG5jb25zdCBDdWxsRmFjZUZyb250QmFjayA9IDM7XG5jb25zdCBCYXNpY1NoYWRvd01hcCA9IDA7XG5jb25zdCBQQ0ZTaGFkb3dNYXAgPSAxO1xuY29uc3QgUENGU29mdFNoYWRvd01hcCA9IDI7XG5jb25zdCBWU01TaGFkb3dNYXAgPSAzO1xuY29uc3QgRnJvbnRTaWRlID0gMDtcbmNvbnN0IEJhY2tTaWRlID0gMTtcbmNvbnN0IERvdWJsZVNpZGUgPSAyO1xuY29uc3QgRmxhdFNoYWRpbmcgPSAxO1xuY29uc3QgU21vb3RoU2hhZGluZyA9IDI7XG5jb25zdCBOb0JsZW5kaW5nID0gMDtcbmNvbnN0IE5vcm1hbEJsZW5kaW5nID0gMTtcbmNvbnN0IEFkZGl0aXZlQmxlbmRpbmcgPSAyO1xuY29uc3QgU3VidHJhY3RpdmVCbGVuZGluZyA9IDM7XG5jb25zdCBNdWx0aXBseUJsZW5kaW5nID0gNDtcbmNvbnN0IEN1c3RvbUJsZW5kaW5nID0gNTtcbmNvbnN0IEFkZEVxdWF0aW9uID0gMTAwO1xuY29uc3QgU3VidHJhY3RFcXVhdGlvbiA9IDEwMTtcbmNvbnN0IFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uID0gMTAyO1xuY29uc3QgTWluRXF1YXRpb24gPSAxMDM7XG5jb25zdCBNYXhFcXVhdGlvbiA9IDEwNDtcbmNvbnN0IFplcm9GYWN0b3IgPSAyMDA7XG5jb25zdCBPbmVGYWN0b3IgPSAyMDE7XG5jb25zdCBTcmNDb2xvckZhY3RvciA9IDIwMjtcbmNvbnN0IE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgPSAyMDM7XG5jb25zdCBTcmNBbHBoYUZhY3RvciA9IDIwNDtcbmNvbnN0IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSAyMDU7XG5jb25zdCBEc3RBbHBoYUZhY3RvciA9IDIwNjtcbmNvbnN0IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG5jb25zdCBEc3RDb2xvckZhY3RvciA9IDIwODtcbmNvbnN0IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgPSAyMDk7XG5jb25zdCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xuY29uc3QgTmV2ZXJEZXB0aCA9IDA7XG5jb25zdCBBbHdheXNEZXB0aCA9IDE7XG5jb25zdCBMZXNzRGVwdGggPSAyO1xuY29uc3QgTGVzc0VxdWFsRGVwdGggPSAzO1xuY29uc3QgRXF1YWxEZXB0aCA9IDQ7XG5jb25zdCBHcmVhdGVyRXF1YWxEZXB0aCA9IDU7XG5jb25zdCBHcmVhdGVyRGVwdGggPSA2O1xuY29uc3QgTm90RXF1YWxEZXB0aCA9IDc7XG5jb25zdCBNdWx0aXBseU9wZXJhdGlvbiA9IDA7XG5jb25zdCBNaXhPcGVyYXRpb24gPSAxO1xuY29uc3QgQWRkT3BlcmF0aW9uID0gMjtcbmNvbnN0IE5vVG9uZU1hcHBpbmcgPSAwO1xuY29uc3QgTGluZWFyVG9uZU1hcHBpbmcgPSAxO1xuY29uc3QgUmVpbmhhcmRUb25lTWFwcGluZyA9IDI7XG5jb25zdCBDaW5lb25Ub25lTWFwcGluZyA9IDM7XG5jb25zdCBBQ0VTRmlsbWljVG9uZU1hcHBpbmcgPSA0O1xuY29uc3QgQ3VzdG9tVG9uZU1hcHBpbmcgPSA1O1xuXG5jb25zdCBVVk1hcHBpbmcgPSAzMDA7XG5jb25zdCBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDE7XG5jb25zdCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDI7XG5jb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcbmNvbnN0IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nID0gMzA0O1xuY29uc3QgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDY7XG5jb25zdCBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IDMwNztcbmNvbnN0IFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcbmNvbnN0IENsYW1wVG9FZGdlV3JhcHBpbmcgPSAxMDAxO1xuY29uc3QgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XG5jb25zdCBOZWFyZXN0RmlsdGVyID0gMTAwMztcbmNvbnN0IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbmNvbnN0IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbmNvbnN0IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xuY29uc3QgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IDEwMDU7XG5jb25zdCBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xuY29uc3QgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG5jb25zdCBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNztcbmNvbnN0IExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XG5jb25zdCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xuY29uc3QgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7XG5jb25zdCBCeXRlVHlwZSA9IDEwMTA7XG5jb25zdCBTaG9ydFR5cGUgPSAxMDExO1xuY29uc3QgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyO1xuY29uc3QgSW50VHlwZSA9IDEwMTM7XG5jb25zdCBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xuY29uc3QgRmxvYXRUeXBlID0gMTAxNTtcbmNvbnN0IEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xuY29uc3QgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcbmNvbnN0IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7XG5jb25zdCBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xuY29uc3QgQWxwaGFGb3JtYXQgPSAxMDIxO1xuY29uc3QgUkdCRm9ybWF0ID0gMTAyMjtcbmNvbnN0IFJHQkFGb3JtYXQgPSAxMDIzO1xuY29uc3QgTHVtaW5hbmNlRm9ybWF0ID0gMTAyNDtcbmNvbnN0IEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcbmNvbnN0IERlcHRoRm9ybWF0ID0gMTAyNjtcbmNvbnN0IERlcHRoU3RlbmNpbEZvcm1hdCA9IDEwMjc7XG5jb25zdCBSZWRGb3JtYXQgPSAxMDI4O1xuY29uc3QgUmVkSW50ZWdlckZvcm1hdCA9IDEwMjk7XG5jb25zdCBSR0Zvcm1hdCA9IDEwMzA7XG5jb25zdCBSR0ludGVnZXJGb3JtYXQgPSAxMDMxO1xuY29uc3QgUkdCQUludGVnZXJGb3JtYXQgPSAxMDMzO1xuXG5jb25zdCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2O1xuY29uc3QgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7XG5jb25zdCBSR0JBX1MzVENfRFhUM19Gb3JtYXQgPSAzMzc3ODtcbmNvbnN0IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5O1xuY29uc3QgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcbmNvbnN0IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDE7XG5jb25zdCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MjtcbmNvbnN0IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzO1xuY29uc3QgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XG5jb25zdCBSR0JfRVRDMl9Gb3JtYXQgPSAzNzQ5MjtcbmNvbnN0IFJHQkFfRVRDMl9FQUNfRm9ybWF0ID0gMzc0OTY7XG5jb25zdCBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xuY29uc3QgUkdCQV9BU1RDXzV4NF9Gb3JtYXQgPSAzNzgwOTtcbmNvbnN0IFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG5jb25zdCBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xuY29uc3QgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgPSAzNzgxMjtcbmNvbnN0IFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG5jb25zdCBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xuY29uc3QgUkdCQV9BU1RDXzh4OF9Gb3JtYXQgPSAzNzgxNTtcbmNvbnN0IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xuY29uc3QgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7XG5jb25zdCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgPSAzNzgxODtcbmNvbnN0IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbmNvbnN0IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDtcbmNvbnN0IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgPSAzNzgyMTtcbmNvbnN0IFJHQkFfQlBUQ19Gb3JtYXQgPSAzNjQ5MjtcbmNvbnN0IExvb3BPbmNlID0gMjIwMDtcbmNvbnN0IExvb3BSZXBlYXQgPSAyMjAxO1xuY29uc3QgTG9vcFBpbmdQb25nID0gMjIwMjtcbmNvbnN0IEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xuY29uc3QgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xuY29uc3QgSW50ZXJwb2xhdGVTbW9vdGggPSAyMzAyO1xuY29uc3QgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XG5jb25zdCBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xuY29uc3QgV3JhcEFyb3VuZEVuZGluZyA9IDI0MDI7XG5jb25zdCBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUgPSAyNTAwO1xuY29uc3QgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUgPSAyNTAxO1xuY29uc3QgVHJpYW5nbGVzRHJhd01vZGUgPSAwO1xuY29uc3QgVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gMTtcbmNvbnN0IFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyO1xuY29uc3QgTGluZWFyRW5jb2RpbmcgPSAzMDAwO1xuY29uc3Qgc1JHQkVuY29kaW5nID0gMzAwMTtcbmNvbnN0IEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDtcbmNvbnN0IFJHQkFEZXB0aFBhY2tpbmcgPSAzMjAxO1xuY29uc3QgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDtcbmNvbnN0IE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuY29uc3QgWmVyb1N0ZW5jaWxPcCA9IDA7XG5jb25zdCBLZWVwU3RlbmNpbE9wID0gNzY4MDtcbmNvbnN0IFJlcGxhY2VTdGVuY2lsT3AgPSA3NjgxO1xuY29uc3QgSW5jcmVtZW50U3RlbmNpbE9wID0gNzY4MjtcbmNvbnN0IERlY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODM7XG5jb25zdCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTU7XG5jb25zdCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTY7XG5jb25zdCBJbnZlcnRTdGVuY2lsT3AgPSA1Mzg2O1xuXG5jb25zdCBOZXZlclN0ZW5jaWxGdW5jID0gNTEyO1xuY29uc3QgTGVzc1N0ZW5jaWxGdW5jID0gNTEzO1xuY29uc3QgRXF1YWxTdGVuY2lsRnVuYyA9IDUxNDtcbmNvbnN0IExlc3NFcXVhbFN0ZW5jaWxGdW5jID0gNTE1O1xuY29uc3QgR3JlYXRlclN0ZW5jaWxGdW5jID0gNTE2O1xuY29uc3QgTm90RXF1YWxTdGVuY2lsRnVuYyA9IDUxNztcbmNvbnN0IEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gNTE4O1xuY29uc3QgQWx3YXlzU3RlbmNpbEZ1bmMgPSA1MTk7XG5cbmNvbnN0IFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0O1xuY29uc3QgRHluYW1pY0RyYXdVc2FnZSA9IDM1MDQ4O1xuY29uc3QgU3RyZWFtRHJhd1VzYWdlID0gMzUwNDA7XG5jb25zdCBTdGF0aWNSZWFkVXNhZ2UgPSAzNTA0NTtcbmNvbnN0IER5bmFtaWNSZWFkVXNhZ2UgPSAzNTA0OTtcbmNvbnN0IFN0cmVhbVJlYWRVc2FnZSA9IDM1MDQxO1xuY29uc3QgU3RhdGljQ29weVVzYWdlID0gMzUwNDY7XG5jb25zdCBEeW5hbWljQ29weVVzYWdlID0gMzUwNTA7XG5jb25zdCBTdHJlYW1Db3B5VXNhZ2UgPSAzNTA0MjtcblxuY29uc3QgR0xTTDEgPSAnMTAwJztcbmNvbnN0IEdMU0wzID0gJzMwMCBlcyc7XG5cbmNvbnN0IF9TUkdCQUZvcm1hdCA9IDEwMzU7IC8vIGZhbGxiYWNrIGZvciBXZWJHTCAxXG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi9ldmVudGRpc3BhdGNoZXIuanMvXG4gKi9cblxuY2xhc3MgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRhZGRFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0gPSBbXTtcblxuXHRcdH1cblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSA9PT0gLSAxICkge1xuXG5cdFx0XHRsaXN0ZW5lcnNbIHR5cGUgXS5wdXNoKCBsaXN0ZW5lciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRoYXNFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRyZXR1cm4gbGlzdGVuZXJzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApICE9PSAtIDE7XG5cblx0fVxuXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHRjb25zdCBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyB0eXBlIF07XG5cblx0XHRpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YoIGxpc3RlbmVyICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0XHRsaXN0ZW5lckFycmF5LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRkaXNwYXRjaEV2ZW50KCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0Y29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXM7XG5cblx0XHRcdC8vIE1ha2UgYSBjb3B5LCBpbiBjYXNlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCB3aGlsZSBpdGVyYXRpbmcuXG5cdFx0XHRjb25zdCBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoIDAgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgX2x1dCA9IFtdO1xuXG5mb3IgKCBsZXQgaSA9IDA7IGkgPCAyNTY7IGkgKysgKSB7XG5cblx0X2x1dFsgaSBdID0gKCBpIDwgMTYgPyAnMCcgOiAnJyApICsgKCBpICkudG9TdHJpbmcoIDE2ICk7XG5cbn1cblxubGV0IF9zZWVkID0gMTIzNDU2NztcblxuXG5jb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MDtcbmNvbnN0IFJBRDJERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjE5NjMxMzYjMjE5NjMxMzZcbmZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcblxuXHRjb25zdCBkMCA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMyA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgdXVpZCA9IF9sdXRbIGQwICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDIgJiAweDNmIHwgMHg4MCBdICsgX2x1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDIgPj4gMjQgJiAweGZmIF0gK1xuXHRcdFx0X2x1dFsgZDMgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTtcblxuXHQvLyAudG9VcHBlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdHJldHVybiB1dWlkLnRvVXBwZXJDYXNlKCk7XG5cbn1cblxuZnVuY3Rpb24gY2xhbXAoIHZhbHVlLCBtaW4sIG1heCApIHtcblxuXHRyZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgdmFsdWUgKSApO1xuXG59XG5cbi8vIGNvbXB1dGUgZXVjbGlkaWFuIG1vZHVsbyBvZiBtICUgblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxvX29wZXJhdGlvblxuZnVuY3Rpb24gZXVjbGlkZWFuTW9kdWxvKCBuLCBtICkge1xuXG5cdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cbn1cblxuLy8gTGluZWFyIG1hcHBpbmcgZnJvbSByYW5nZSA8YTEsIGEyPiB0byByYW5nZSA8YjEsIGIyPlxuZnVuY3Rpb24gbWFwTGluZWFyKCB4LCBhMSwgYTIsIGIxLCBiMiApIHtcblxuXHRyZXR1cm4gYjEgKyAoIHggLSBhMSApICogKCBiMiAtIGIxICkgLyAoIGEyIC0gYTEgKTtcblxufVxuXG4vLyBodHRwczovL3d3dy5nYW1lZGV2Lm5ldC90dXRvcmlhbHMvcHJvZ3JhbW1pbmcvZ2VuZXJhbC1hbmQtZ2FtZXBsYXktcHJvZ3JhbW1pbmcvaW52ZXJzZS1sZXJwLWEtc3VwZXItdXNlZnVsLXlldC1vZnRlbi1vdmVybG9va2VkLWZ1bmN0aW9uLXI1MjMwL1xuZnVuY3Rpb24gaW52ZXJzZUxlcnAoIHgsIHksIHZhbHVlICkge1xuXG5cdGlmICggeCAhPT0geSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlIC0geCApIC8gKCB5IC0geCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gMDtcblxuXHR9XG5cbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cbmZ1bmN0aW9uIGxlcnAoIHgsIHksIHQgKSB7XG5cblx0cmV0dXJuICggMSAtIHQgKSAqIHggKyB0ICogeTtcblxufVxuXG4vLyBodHRwOi8vd3d3LnJvcnlkcmlzY29sbC5jb20vMjAxNi8wMy8wNy9mcmFtZS1yYXRlLWluZGVwZW5kZW50LWRhbXBpbmctdXNpbmctbGVycC9cbmZ1bmN0aW9uIGRhbXAoIHgsIHksIGxhbWJkYSwgZHQgKSB7XG5cblx0cmV0dXJuIGxlcnAoIHgsIHksIDEgLSBNYXRoLmV4cCggLSBsYW1iZGEgKiBkdCApICk7XG5cbn1cblxuLy8gaHR0cHM6Ly93d3cuZGVzbW9zLmNvbS9jYWxjdWxhdG9yL3Zjc2pueXo3eDRcbmZ1bmN0aW9uIHBpbmdwb25nKCB4LCBsZW5ndGggPSAxICkge1xuXG5cdHJldHVybiBsZW5ndGggLSBNYXRoLmFicyggZXVjbGlkZWFuTW9kdWxvKCB4LCBsZW5ndGggKiAyICkgLSBsZW5ndGggKTtcblxufVxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcbmZ1bmN0aW9uIHNtb290aHN0ZXAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0aWYgKCB4ID49IG1heCApIHJldHVybiAxO1xuXG5cdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0cmV0dXJuIHggKiB4ICogKCAzIC0gMiAqIHggKTtcblxufVxuXG5mdW5jdGlvbiBzbW9vdGhlcnN0ZXAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0aWYgKCB4ID49IG1heCApIHJldHVybiAxO1xuXG5cdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0cmV0dXJuIHggKiB4ICogeCAqICggeCAqICggeCAqIDYgLSAxNSApICsgMTAgKTtcblxufVxuXG4vLyBSYW5kb20gaW50ZWdlciBmcm9tIDxsb3csIGhpZ2g+IGludGVydmFsXG5mdW5jdGlvbiByYW5kSW50KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxufVxuXG4vLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEZsb2F0KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKTtcblxufVxuXG4vLyBSYW5kb20gZmxvYXQgZnJvbSA8LXJhbmdlLzIsIHJhbmdlLzI+IGludGVydmFsXG5mdW5jdGlvbiByYW5kRmxvYXRTcHJlYWQoIHJhbmdlICkge1xuXG5cdHJldHVybiByYW5nZSAqICggMC41IC0gTWF0aC5yYW5kb20oKSApO1xuXG59XG5cbi8vIERldGVybWluaXN0aWMgcHNldWRvLXJhbmRvbSBmbG9hdCBpbiB0aGUgaW50ZXJ2YWwgWyAwLCAxIF1cbmZ1bmN0aW9uIHNlZWRlZFJhbmRvbSggcyApIHtcblxuXHRpZiAoIHMgIT09IHVuZGVmaW5lZCApIF9zZWVkID0gcyAlIDIxNDc0ODM2NDc7XG5cblx0Ly8gUGFyay1NaWxsZXIgYWxnb3JpdGhtXG5cblx0X3NlZWQgPSBfc2VlZCAqIDE2ODA3ICUgMjE0NzQ4MzY0NztcblxuXHRyZXR1cm4gKCBfc2VlZCAtIDEgKSAvIDIxNDc0ODM2NDY7XG5cbn1cblxuZnVuY3Rpb24gZGVnVG9SYWQoIGRlZ3JlZXMgKSB7XG5cblx0cmV0dXJuIGRlZ3JlZXMgKiBERUcyUkFEO1xuXG59XG5cbmZ1bmN0aW9uIHJhZFRvRGVnKCByYWRpYW5zICkge1xuXG5cdHJldHVybiByYWRpYW5zICogUkFEMkRFRztcblxufVxuXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG59XG5cbmZ1bmN0aW9uIGNlaWxQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuZnVuY3Rpb24gZmxvb3JQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoIHEsIGEsIGIsIGMsIG9yZGVyICkge1xuXG5cdC8vIEludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzIC0gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlc1xuXG5cdC8vIHJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5ICdvcmRlcidcblx0Ly8gcm90YXRpb24gYnkgYW5nbGUgJ2EnIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgJ2InLCB0aGVuIGJ5IGFuZ2xlICdjJ1xuXHQvLyBhbmdsZXMgYXJlIGluIHJhZGlhbnNcblxuXHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0Y29uc3QgYzIgPSBjb3MoIGIgLyAyICk7XG5cdGNvbnN0IHMyID0gc2luKCBiIC8gMiApO1xuXG5cdGNvbnN0IGMxMyA9IGNvcyggKCBhICsgYyApIC8gMiApO1xuXHRjb25zdCBzMTMgPSBzaW4oICggYSArIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjMV8zID0gY29zKCAoIGEgLSBjICkgLyAyICk7XG5cdGNvbnN0IHMxXzMgPSBzaW4oICggYSAtIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjM18xID0gY29zKCAoIGMgLSBhICkgLyAyICk7XG5cdGNvbnN0IHMzXzEgPSBzaW4oICggYyAtIGEgKSAvIDIgKTtcblxuXHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdGNhc2UgJ1hZWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWlknOlxuXHRcdFx0cS5zZXQoIHMyICogczFfMywgYzIgKiBzMTMsIHMyICogYzFfMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWlhaJzpcblx0XHRcdHEuc2V0KCBzMiAqIGMxXzMsIHMyICogczFfMywgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1haWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWFknOlxuXHRcdFx0cS5zZXQoIHMyICogYzNfMSwgYzIgKiBzMTMsIHMyICogczNfMSwgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWllaJzpcblx0XHRcdHEuc2V0KCBzMiAqIHMzXzEsIHMyICogYzNfMSwgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoVXRpbHM6IC5zZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyKCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0fVxuXG59XG5cbnZhciBNYXRoVXRpbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0REVHMlJBRDogREVHMlJBRCxcblx0UkFEMkRFRzogUkFEMkRFRyxcblx0Z2VuZXJhdGVVVUlEOiBnZW5lcmF0ZVVVSUQsXG5cdGNsYW1wOiBjbGFtcCxcblx0ZXVjbGlkZWFuTW9kdWxvOiBldWNsaWRlYW5Nb2R1bG8sXG5cdG1hcExpbmVhcjogbWFwTGluZWFyLFxuXHRpbnZlcnNlTGVycDogaW52ZXJzZUxlcnAsXG5cdGxlcnA6IGxlcnAsXG5cdGRhbXA6IGRhbXAsXG5cdHBpbmdwb25nOiBwaW5ncG9uZyxcblx0c21vb3Roc3RlcDogc21vb3Roc3RlcCxcblx0c21vb3RoZXJzdGVwOiBzbW9vdGhlcnN0ZXAsXG5cdHJhbmRJbnQ6IHJhbmRJbnQsXG5cdHJhbmRGbG9hdDogcmFuZEZsb2F0LFxuXHRyYW5kRmxvYXRTcHJlYWQ6IHJhbmRGbG9hdFNwcmVhZCxcblx0c2VlZGVkUmFuZG9tOiBzZWVkZWRSYW5kb20sXG5cdGRlZ1RvUmFkOiBkZWdUb1JhZCxcblx0cmFkVG9EZWc6IHJhZFRvRGVnLFxuXHRpc1Bvd2VyT2ZUd286IGlzUG93ZXJPZlR3byxcblx0Y2VpbFBvd2VyT2ZUd286IGNlaWxQb3dlck9mVHdvLFxuXHRmbG9vclBvd2VyT2ZUd286IGZsb29yUG93ZXJPZlR3byxcblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcjogc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlclxufSk7XG5cbmNsYXNzIFZlY3RvcjIge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cblx0fVxuXG5cdGdldCB3aWR0aCgpIHtcblxuXHRcdHJldHVybiB0aGlzLng7XG5cblx0fVxuXG5cdHNldCB3aWR0aCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnggPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IGhlaWdodCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnk7XG5cblx0fVxuXG5cdHNldCBoZWlnaHQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy55ID0gdmFsdWU7XG5cblx0fVxuXG5cdHNldCggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGVkVmVjdG9yKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXZpZGUoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlU2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fVxuXG5cdGZsb29yKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2VpbCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kVG9aZXJvKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9XG5cblx0Y3Jvc3MoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54O1xuXG5cdH1cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRhbmdsZSgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoIC0gdGhpcy55LCAtIHRoaXMueCApICsgTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcblxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueTtcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG5cblx0fVxuXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7XG5cdFx0dGhpcy55ID0gdjEueSArICggdjIueSAtIHYxLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdGF0ZUFyb3VuZCggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKSwgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCAtIGNlbnRlci54O1xuXHRcdGNvbnN0IHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblxuXHR9XG5cbn1cblxuVmVjdG9yMi5wcm90b3R5cGUuaXNWZWN0b3IyID0gdHJ1ZTtcblxuY2xhc3MgTWF0cml4MyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0XHQxLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdF07XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCggbjExLCBuMTIsIG4xMywgbjIxLCBuMjIsIG4yMywgbjMxLCBuMzIsIG4zMyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7XG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcblx0XHR0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07XG5cdFx0dGVbIDMgXSA9IG1lWyAzIF07IHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07IHRlWyA4IF0gPSBtZVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4dHJhY3RCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXg0KCBtICkge1xuXG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyA0IF0sIG1lWyA4IF0sXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDYgXSwgbWVbIDEwIF1cblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgMyBdLCBhMTMgPSBhZVsgNiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0Y29uc3QgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTtcblxuXHRcdGNvbnN0IGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyAzIF0sIGIxMyA9IGJlWyA2IF07XG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuXHRcdHRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuXHRcdHRlWyA0IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG5cdFx0dGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG5cdFx0dGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSAqPSBzOyB0ZVsgMyBdICo9IHM7IHRlWyA2IF0gKj0gcztcblx0XHR0ZVsgMSBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDcgXSAqPSBzO1xuXHRcdHRlWyAyIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOCBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhID0gdGVbIDAgXSwgYiA9IHRlWyAxIF0sIGMgPSB0ZVsgMiBdLFxuXHRcdFx0ZCA9IHRlWyAzIF0sIGUgPSB0ZVsgNCBdLCBmID0gdGVbIDUgXSxcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYSAqIGUgKiBpIC0gYSAqIGYgKiBoIC0gYiAqIGQgKiBpICsgYiAqIGYgKiBnICsgYyAqIGQgKiBoIC0gYyAqIGUgKiBnO1xuXG5cdH1cblxuXHRpbnZlcnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IHRlWyAwIF0sIG4yMSA9IHRlWyAxIF0sIG4zMSA9IHRlWyAyIF0sXG5cdFx0XHRuMTIgPSB0ZVsgMyBdLCBuMjIgPSB0ZVsgNCBdLCBuMzIgPSB0ZVsgNSBdLFxuXHRcdFx0bjEzID0gdGVbIDYgXSwgbjIzID0gdGVbIDcgXSwgbjMzID0gdGVbIDggXSxcblxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxuXHRcdFx0dDEzID0gbjIzICogbjEyIC0gbjIyICogbjEzLFxuXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc3Bvc2UoKSB7XG5cblx0XHRsZXQgdG1wO1xuXHRcdGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dG1wID0gbVsgMSBdOyBtWyAxIF0gPSBtWyAzIF07IG1bIDMgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyAyIF07IG1bIDIgXSA9IG1bIDYgXTsgbVsgNiBdID0gdG1wO1xuXHRcdHRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Tm9ybWFsTWF0cml4KCBtYXRyaXg0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQoIG1hdHJpeDQgKS5pbnZlcnQoKS50cmFuc3Bvc2UoKTtcblxuXHR9XG5cblx0dHJhbnNwb3NlSW50b0FycmF5KCByICkge1xuXG5cdFx0Y29uc3QgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRyWyAwIF0gPSBtWyAwIF07XG5cdFx0clsgMSBdID0gbVsgMyBdO1xuXHRcdHJbIDIgXSA9IG1bIDYgXTtcblx0XHRyWyAzIF0gPSBtWyAxIF07XG5cdFx0clsgNCBdID0gbVsgNCBdO1xuXHRcdHJbIDUgXSA9IG1bIDcgXTtcblx0XHRyWyA2IF0gPSBtWyAyIF07XG5cdFx0clsgNyBdID0gbVsgNSBdO1xuXHRcdHJbIDggXSA9IG1bIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRVdlRyYW5zZm9ybSggdHgsIHR5LCBzeCwgc3ksIHJvdGF0aW9uLCBjeCwgY3kgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCByb3RhdGlvbiApO1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHRzeCAqIGMsIHN4ICogcywgLSBzeCAqICggYyAqIGN4ICsgcyAqIGN5ICkgKyBjeCArIHR4LFxuXHRcdFx0LSBzeSAqIHMsIHN5ICogYywgLSBzeSAqICggLSBzICogY3ggKyBjICogY3kgKSArIGN5ICsgdHksXG5cdFx0XHQwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzY2FsZSggc3gsIHN5ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSAqPSBzeDsgdGVbIDMgXSAqPSBzeDsgdGVbIDYgXSAqPSBzeDtcblx0XHR0ZVsgMSBdICo9IHN5OyB0ZVsgNCBdICo9IHN5OyB0ZVsgNyBdICo9IHN5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdGF0ZSggdGhldGEgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgYTExID0gdGVbIDAgXSwgYTEyID0gdGVbIDMgXSwgYTEzID0gdGVbIDYgXTtcblx0XHRjb25zdCBhMjEgPSB0ZVsgMSBdLCBhMjIgPSB0ZVsgNCBdLCBhMjMgPSB0ZVsgNyBdO1xuXG5cdFx0dGVbIDAgXSA9IGMgKiBhMTEgKyBzICogYTIxO1xuXHRcdHRlWyAzIF0gPSBjICogYTEyICsgcyAqIGEyMjtcblx0XHR0ZVsgNiBdID0gYyAqIGExMyArIHMgKiBhMjM7XG5cblx0XHR0ZVsgMSBdID0gLSBzICogYTExICsgYyAqIGEyMTtcblx0XHR0ZVsgNCBdID0gLSBzICogYTEyICsgYyAqIGEyMjtcblx0XHR0ZVsgNyBdID0gLSBzICogYTEzICsgYyAqIGEyMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIHR4LCB0eSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKz0gdHggKiB0ZVsgMiBdOyB0ZVsgMyBdICs9IHR4ICogdGVbIDUgXTsgdGVbIDYgXSArPSB0eCAqIHRlWyA4IF07XG5cdFx0dGVbIDEgXSArPSB0eSAqIHRlWyAyIF07IHRlWyA0IF0gKz0gdHkgKiB0ZVsgNSBdOyB0ZVsgNyBdICs9IHR5ICogdGVbIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbk1hdHJpeDMucHJvdG90eXBlLmlzTWF0cml4MyA9IHRydWU7XG5cbmZ1bmN0aW9uIGFycmF5TmVlZHNVaW50MzIoIGFycmF5ICkge1xuXG5cdC8vIGFzc3VtZXMgbGFyZ2VyIHZhbHVlcyB1c3VhbGx5IG9uIGxhc3RcblxuXHRmb3IgKCBsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgLS0gaSApIHtcblxuXHRcdGlmICggYXJyYXlbIGkgXSA+IDY1NTM1ICkgcmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG5jb25zdCBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHRVaW50OENsYW1wZWRBcnJheTogVWludDhDbGFtcGVkQXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbmZ1bmN0aW9uIGdldFR5cGVkQXJyYXkoIHR5cGUsIGJ1ZmZlciApIHtcblxuXHRyZXR1cm4gbmV3IFRZUEVEX0FSUkFZU1sgdHlwZSBdKCBidWZmZXIgKTtcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMoIG5hbWUgKSB7XG5cblx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCBuYW1lICk7XG5cbn1cblxuY29uc3QgX2NvbG9yS2V5d29yZHMgPSB7ICdhbGljZWJsdWUnOiAweEYwRjhGRiwgJ2FudGlxdWV3aGl0ZSc6IDB4RkFFQkQ3LCAnYXF1YSc6IDB4MDBGRkZGLCAnYXF1YW1hcmluZSc6IDB4N0ZGRkQ0LCAnYXp1cmUnOiAweEYwRkZGRixcblx0J2JlaWdlJzogMHhGNUY1REMsICdiaXNxdWUnOiAweEZGRTRDNCwgJ2JsYWNrJzogMHgwMDAwMDAsICdibGFuY2hlZGFsbW9uZCc6IDB4RkZFQkNELCAnYmx1ZSc6IDB4MDAwMEZGLCAnYmx1ZXZpb2xldCc6IDB4OEEyQkUyLFxuXHQnYnJvd24nOiAweEE1MkEyQSwgJ2J1cmx5d29vZCc6IDB4REVCODg3LCAnY2FkZXRibHVlJzogMHg1RjlFQTAsICdjaGFydHJldXNlJzogMHg3RkZGMDAsICdjaG9jb2xhdGUnOiAweEQyNjkxRSwgJ2NvcmFsJzogMHhGRjdGNTAsXG5cdCdjb3JuZmxvd2VyYmx1ZSc6IDB4NjQ5NUVELCAnY29ybnNpbGsnOiAweEZGRjhEQywgJ2NyaW1zb24nOiAweERDMTQzQywgJ2N5YW4nOiAweDAwRkZGRiwgJ2RhcmtibHVlJzogMHgwMDAwOEIsICdkYXJrY3lhbic6IDB4MDA4QjhCLFxuXHQnZGFya2dvbGRlbnJvZCc6IDB4Qjg4NjBCLCAnZGFya2dyYXknOiAweEE5QTlBOSwgJ2RhcmtncmVlbic6IDB4MDA2NDAwLCAnZGFya2dyZXknOiAweEE5QTlBOSwgJ2RhcmtraGFraSc6IDB4QkRCNzZCLCAnZGFya21hZ2VudGEnOiAweDhCMDA4Qixcblx0J2RhcmtvbGl2ZWdyZWVuJzogMHg1NTZCMkYsICdkYXJrb3JhbmdlJzogMHhGRjhDMDAsICdkYXJrb3JjaGlkJzogMHg5OTMyQ0MsICdkYXJrcmVkJzogMHg4QjAwMDAsICdkYXJrc2FsbW9uJzogMHhFOTk2N0EsICdkYXJrc2VhZ3JlZW4nOiAweDhGQkM4Rixcblx0J2RhcmtzbGF0ZWJsdWUnOiAweDQ4M0Q4QiwgJ2RhcmtzbGF0ZWdyYXknOiAweDJGNEY0RiwgJ2RhcmtzbGF0ZWdyZXknOiAweDJGNEY0RiwgJ2Rhcmt0dXJxdW9pc2UnOiAweDAwQ0VEMSwgJ2Rhcmt2aW9sZXQnOiAweDk0MDBEMyxcblx0J2RlZXBwaW5rJzogMHhGRjE0OTMsICdkZWVwc2t5Ymx1ZSc6IDB4MDBCRkZGLCAnZGltZ3JheSc6IDB4Njk2OTY5LCAnZGltZ3JleSc6IDB4Njk2OTY5LCAnZG9kZ2VyYmx1ZSc6IDB4MUU5MEZGLCAnZmlyZWJyaWNrJzogMHhCMjIyMjIsXG5cdCdmbG9yYWx3aGl0ZSc6IDB4RkZGQUYwLCAnZm9yZXN0Z3JlZW4nOiAweDIyOEIyMiwgJ2Z1Y2hzaWEnOiAweEZGMDBGRiwgJ2dhaW5zYm9ybyc6IDB4RENEQ0RDLCAnZ2hvc3R3aGl0ZSc6IDB4RjhGOEZGLCAnZ29sZCc6IDB4RkZENzAwLFxuXHQnZ29sZGVucm9kJzogMHhEQUE1MjAsICdncmF5JzogMHg4MDgwODAsICdncmVlbic6IDB4MDA4MDAwLCAnZ3JlZW55ZWxsb3cnOiAweEFERkYyRiwgJ2dyZXknOiAweDgwODA4MCwgJ2hvbmV5ZGV3JzogMHhGMEZGRjAsICdob3RwaW5rJzogMHhGRjY5QjQsXG5cdCdpbmRpYW5yZWQnOiAweENENUM1QywgJ2luZGlnbyc6IDB4NEIwMDgyLCAnaXZvcnknOiAweEZGRkZGMCwgJ2toYWtpJzogMHhGMEU2OEMsICdsYXZlbmRlcic6IDB4RTZFNkZBLCAnbGF2ZW5kZXJibHVzaCc6IDB4RkZGMEY1LCAnbGF3bmdyZWVuJzogMHg3Q0ZDMDAsXG5cdCdsZW1vbmNoaWZmb24nOiAweEZGRkFDRCwgJ2xpZ2h0Ymx1ZSc6IDB4QUREOEU2LCAnbGlnaHRjb3JhbCc6IDB4RjA4MDgwLCAnbGlnaHRjeWFuJzogMHhFMEZGRkYsICdsaWdodGdvbGRlbnJvZHllbGxvdyc6IDB4RkFGQUQyLCAnbGlnaHRncmF5JzogMHhEM0QzRDMsXG5cdCdsaWdodGdyZWVuJzogMHg5MEVFOTAsICdsaWdodGdyZXknOiAweEQzRDNEMywgJ2xpZ2h0cGluayc6IDB4RkZCNkMxLCAnbGlnaHRzYWxtb24nOiAweEZGQTA3QSwgJ2xpZ2h0c2VhZ3JlZW4nOiAweDIwQjJBQSwgJ2xpZ2h0c2t5Ymx1ZSc6IDB4ODdDRUZBLFxuXHQnbGlnaHRzbGF0ZWdyYXknOiAweDc3ODg5OSwgJ2xpZ2h0c2xhdGVncmV5JzogMHg3Nzg4OTksICdsaWdodHN0ZWVsYmx1ZSc6IDB4QjBDNERFLCAnbGlnaHR5ZWxsb3cnOiAweEZGRkZFMCwgJ2xpbWUnOiAweDAwRkYwMCwgJ2xpbWVncmVlbic6IDB4MzJDRDMyLFxuXHQnbGluZW4nOiAweEZBRjBFNiwgJ21hZ2VudGEnOiAweEZGMDBGRiwgJ21hcm9vbic6IDB4ODAwMDAwLCAnbWVkaXVtYXF1YW1hcmluZSc6IDB4NjZDREFBLCAnbWVkaXVtYmx1ZSc6IDB4MDAwMENELCAnbWVkaXVtb3JjaGlkJzogMHhCQTU1RDMsXG5cdCdtZWRpdW1wdXJwbGUnOiAweDkzNzBEQiwgJ21lZGl1bXNlYWdyZWVuJzogMHgzQ0IzNzEsICdtZWRpdW1zbGF0ZWJsdWUnOiAweDdCNjhFRSwgJ21lZGl1bXNwcmluZ2dyZWVuJzogMHgwMEZBOUEsICdtZWRpdW10dXJxdW9pc2UnOiAweDQ4RDFDQyxcblx0J21lZGl1bXZpb2xldHJlZCc6IDB4QzcxNTg1LCAnbWlkbmlnaHRibHVlJzogMHgxOTE5NzAsICdtaW50Y3JlYW0nOiAweEY1RkZGQSwgJ21pc3R5cm9zZSc6IDB4RkZFNEUxLCAnbW9jY2FzaW4nOiAweEZGRTRCNSwgJ25hdmFqb3doaXRlJzogMHhGRkRFQUQsXG5cdCduYXZ5JzogMHgwMDAwODAsICdvbGRsYWNlJzogMHhGREY1RTYsICdvbGl2ZSc6IDB4ODA4MDAwLCAnb2xpdmVkcmFiJzogMHg2QjhFMjMsICdvcmFuZ2UnOiAweEZGQTUwMCwgJ29yYW5nZXJlZCc6IDB4RkY0NTAwLCAnb3JjaGlkJzogMHhEQTcwRDYsXG5cdCdwYWxlZ29sZGVucm9kJzogMHhFRUU4QUEsICdwYWxlZ3JlZW4nOiAweDk4RkI5OCwgJ3BhbGV0dXJxdW9pc2UnOiAweEFGRUVFRSwgJ3BhbGV2aW9sZXRyZWQnOiAweERCNzA5MywgJ3BhcGF5YXdoaXAnOiAweEZGRUZENSwgJ3BlYWNocHVmZic6IDB4RkZEQUI5LFxuXHQncGVydSc6IDB4Q0Q4NTNGLCAncGluayc6IDB4RkZDMENCLCAncGx1bSc6IDB4RERBMERELCAncG93ZGVyYmx1ZSc6IDB4QjBFMEU2LCAncHVycGxlJzogMHg4MDAwODAsICdyZWJlY2NhcHVycGxlJzogMHg2NjMzOTksICdyZWQnOiAweEZGMDAwMCwgJ3Jvc3licm93bic6IDB4QkM4RjhGLFxuXHQncm95YWxibHVlJzogMHg0MTY5RTEsICdzYWRkbGVicm93bic6IDB4OEI0NTEzLCAnc2FsbW9uJzogMHhGQTgwNzIsICdzYW5keWJyb3duJzogMHhGNEE0NjAsICdzZWFncmVlbic6IDB4MkU4QjU3LCAnc2Vhc2hlbGwnOiAweEZGRjVFRSxcblx0J3NpZW5uYSc6IDB4QTA1MjJELCAnc2lsdmVyJzogMHhDMEMwQzAsICdza3libHVlJzogMHg4N0NFRUIsICdzbGF0ZWJsdWUnOiAweDZBNUFDRCwgJ3NsYXRlZ3JheSc6IDB4NzA4MDkwLCAnc2xhdGVncmV5JzogMHg3MDgwOTAsICdzbm93JzogMHhGRkZBRkEsXG5cdCdzcHJpbmdncmVlbic6IDB4MDBGRjdGLCAnc3RlZWxibHVlJzogMHg0NjgyQjQsICd0YW4nOiAweEQyQjQ4QywgJ3RlYWwnOiAweDAwODA4MCwgJ3RoaXN0bGUnOiAweEQ4QkZEOCwgJ3RvbWF0byc6IDB4RkY2MzQ3LCAndHVycXVvaXNlJzogMHg0MEUwRDAsXG5cdCd2aW9sZXQnOiAweEVFODJFRSwgJ3doZWF0JzogMHhGNURFQjMsICd3aGl0ZSc6IDB4RkZGRkZGLCAnd2hpdGVzbW9rZSc6IDB4RjVGNUY1LCAneWVsbG93JzogMHhGRkZGMDAsICd5ZWxsb3dncmVlbic6IDB4OUFDRDMyIH07XG5cbmNvbnN0IF9oc2xBID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5jb25zdCBfaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5mdW5jdGlvbiBodWUycmdiKCBwLCBxLCB0ICkge1xuXG5cdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdGlmICggdCA+IDEgKSB0IC09IDE7XG5cdGlmICggdCA8IDEgLyA2ICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogdDtcblx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0aWYgKCB0IDwgMiAvIDMgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiAoIDIgLyAzIC0gdCApO1xuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiBTUkdCVG9MaW5lYXIoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDQwNDUgKSA/IGMgKiAwLjA3NzM5OTM4MDggOiBNYXRoLnBvdyggYyAqIDAuOTQ3ODY3Mjk4NiArIDAuMDUyMTMyNzAxNCwgMi40ICk7XG5cbn1cblxuZnVuY3Rpb24gTGluZWFyVG9TUkdCKCBjICkge1xuXG5cdHJldHVybiAoIGMgPCAwLjAwMzEzMDggKSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKCBNYXRoLnBvdyggYywgMC40MTY2NiApICkgLSAwLjA1NTtcblxufVxuXG5jbGFzcyBDb2xvciB7XG5cblx0Y29uc3RydWN0b3IoIHIsIGcsIGIgKSB7XG5cblx0XHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIHIgaXMgVEhSRUUuQ29sb3IsIGhleCBvciBzdHJpbmdcblx0XHRcdHJldHVybiB0aGlzLnNldCggciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuc2V0UkdCKCByLCBnLCBiICk7XG5cblx0fVxuXG5cdHNldCggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0dGhpcy5zZXRTdHlsZSggdmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMuciA9IHNjYWxhcjtcblx0XHR0aGlzLmcgPSBzY2FsYXI7XG5cdFx0dGhpcy5iID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEhleCggaGV4ICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJHQiggciwgZywgYiApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEhTTCggaCwgcywgbCApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cdFx0aCA9IGV1Y2xpZGVhbk1vZHVsbyggaCwgMSApO1xuXHRcdHMgPSBjbGFtcCggcywgMCwgMSApO1xuXHRcdGwgPSBjbGFtcCggbCwgMCwgMSApO1xuXG5cdFx0aWYgKCBzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcCA9IGwgPD0gMC41ID8gbCAqICggMSArIHMgKSA6IGwgKyBzIC0gKCBsICogcyApO1xuXHRcdFx0Y29uc3QgcSA9ICggMiAqIGwgKSAtIHA7XG5cblx0XHRcdHRoaXMuciA9IGh1ZTJyZ2IoIHEsIHAsIGggKyAxIC8gMyApO1xuXHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0dGhpcy5iID0gaHVlMnJnYiggcSwgcCwgaCAtIDEgLyAzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U3R5bGUoIHN0eWxlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0bGV0IG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKChbXlxcKV0qKVxcKS8uZXhlYyggc3R5bGUgKSApIHtcblxuXHRcdFx0Ly8gcmdiIC8gaHNsXG5cblx0XHRcdGxldCBjb2xvcjtcblx0XHRcdGNvbnN0IG5hbWUgPSBtWyAxIF07XG5cdFx0XHRjb25zdCBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSlcblx0XHRcdFx0XHRcdHRoaXMuciA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAyNTU7XG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5iID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAzIF0sIDEwICkgKSAvIDI1NTtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL15cXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHJnYigxMDAlLDAlLDAlKSByZ2JhKDEwMCUsMCUsMCUsMC41KVxuXHRcdFx0XHRcdFx0dGhpcy5yID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAxIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuZyA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApICkgLyAxMDA7XG5cdFx0XHRcdFx0XHR0aGlzLmIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMTAwO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2hzbCc6XG5cdFx0XHRcdGNhc2UgJ2hzbGEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQqXFwuP1xcZCspXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXG5cdFx0XHRcdFx0XHRjb25zdCBoID0gcGFyc2VGbG9hdCggY29sb3JbIDEgXSApIC8gMzYwO1xuXHRcdFx0XHRcdFx0Y29uc3QgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgbCA9IHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApIC8gMTAwO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDQgXSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtID0gL15cXCMoW0EtRmEtZlxcZF0rKSQvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIGhleCBjb2xvclxuXG5cdFx0XHRjb25zdCBoZXggPSBtWyAxIF07XG5cdFx0XHRjb25zdCBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHtcblxuXHRcdFx0XHQvLyAjZmYwMDAwXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAxICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAyICkgKyBoZXguY2hhckF0KCAzICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0Q29sb3JOYW1lKCBzdHlsZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbG9yTmFtZSggc3R5bGUgKSB7XG5cblx0XHQvLyBjb2xvciBrZXl3b3Jkc1xuXHRcdGNvbnN0IGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyByZWRcblx0XHRcdHRoaXMuc2V0SGV4KCBoZXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHVua25vd24gY29sb3Jcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yICcgKyBzdHlsZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fVxuXG5cdGNvcHkoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVNSR0JUb0xpbmVhciggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5TGluZWFyVG9TUkdCKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXIoKSB7XG5cblx0XHR0aGlzLmNvcHlTUkdCVG9MaW5lYXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb252ZXJ0TGluZWFyVG9TUkdCKCkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0SGV4KCkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5yICogMjU1ICkgPDwgMTYgXiAoIHRoaXMuZyAqIDI1NSApIDw8IDggXiAoIHRoaXMuYiAqIDI1NSApIDw8IDA7XG5cblx0fVxuXG5cdGdldEhleFN0cmluZygpIHtcblxuXHRcdHJldHVybiAoICcwMDAwMDAnICsgdGhpcy5nZXRIZXgoKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtIDYgKTtcblxuXHR9XG5cblx0Z2V0SFNMKCB0YXJnZXQgKSB7XG5cblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxuXG5cdFx0Y29uc3QgciA9IHRoaXMuciwgZyA9IHRoaXMuZywgYiA9IHRoaXMuYjtcblxuXHRcdGNvbnN0IG1heCA9IE1hdGgubWF4KCByLCBnLCBiICk7XG5cdFx0Y29uc3QgbWluID0gTWF0aC5taW4oIHIsIGcsIGIgKTtcblxuXHRcdGxldCBodWUsIHNhdHVyYXRpb247XG5cdFx0Y29uc3QgbGlnaHRuZXNzID0gKCBtaW4gKyBtYXggKSAvIDIuMDtcblxuXHRcdGlmICggbWluID09PSBtYXggKSB7XG5cblx0XHRcdGh1ZSA9IDA7XG5cdFx0XHRzYXR1cmF0aW9uID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGRlbHRhID0gbWF4IC0gbWluO1xuXG5cdFx0XHRzYXR1cmF0aW9uID0gbGlnaHRuZXNzIDw9IDAuNSA/IGRlbHRhIC8gKCBtYXggKyBtaW4gKSA6IGRlbHRhIC8gKCAyIC0gbWF4IC0gbWluICk7XG5cblx0XHRcdHN3aXRjaCAoIG1heCApIHtcblxuXHRcdFx0XHRjYXNlIHI6IGh1ZSA9ICggZyAtIGIgKSAvIGRlbHRhICsgKCBnIDwgYiA/IDYgOiAwICk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGc6IGh1ZSA9ICggYiAtIHIgKSAvIGRlbHRhICsgMjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgYjogaHVlID0gKCByIC0gZyApIC8gZGVsdGEgKyA0OyBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRodWUgLz0gNjtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5oID0gaHVlO1xuXHRcdHRhcmdldC5zID0gc2F0dXJhdGlvbjtcblx0XHR0YXJnZXQubCA9IGxpZ2h0bmVzcztcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldFN0eWxlKCkge1xuXG5cdFx0cmV0dXJuICdyZ2IoJyArICggKCB0aGlzLnIgKiAyNTUgKSB8IDAgKSArICcsJyArICggKCB0aGlzLmcgKiAyNTUgKSB8IDAgKSArICcsJyArICggKCB0aGlzLmIgKiAyNTUgKSB8IDAgKSArICcpJztcblxuXHR9XG5cblx0b2Zmc2V0SFNMKCBoLCBzLCBsICkge1xuXG5cdFx0dGhpcy5nZXRIU0woIF9oc2xBICk7XG5cblx0XHRfaHNsQS5oICs9IGg7IF9oc2xBLnMgKz0gczsgX2hzbEEubCArPSBsO1xuXG5cdFx0dGhpcy5zZXRIU0woIF9oc2xBLmgsIF9oc2xBLnMsIF9oc2xBLmwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGQoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICs9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTWF0aC5tYXgoIDAsIHRoaXMuYiAtIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKj0gY29sb3Iucjtcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdHRoaXMuciAqPSBzO1xuXHRcdHRoaXMuZyAqPSBzO1xuXHRcdHRoaXMuYiAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyArPSAoIGNvbG9yLmcgLSB0aGlzLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBDb2xvcnMoIGNvbG9yMSwgY29sb3IyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgKCBjb2xvcjIuciAtIGNvbG9yMS5yICkgKiBhbHBoYTtcblx0XHR0aGlzLmcgPSBjb2xvcjEuZyArICggY29sb3IyLmcgLSBjb2xvcjEuZyApICogYWxwaGE7XG5cdFx0dGhpcy5iID0gY29sb3IxLmIgKyAoIGNvbG9yMi5iIC0gY29sb3IxLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnBIU0woIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xuXHRcdGNvbG9yLmdldEhTTCggX2hzbEIgKTtcblxuXHRcdGNvbnN0IGggPSBsZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApO1xuXHRcdGNvbnN0IHMgPSBsZXJwKCBfaHNsQS5zLCBfaHNsQi5zLCBhbHBoYSApO1xuXHRcdGNvbnN0IGwgPSBsZXJwKCBfaHNsQS5sLCBfaHNsQi5sLCBhbHBoYSApO1xuXG5cdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIGMgKSB7XG5cblx0XHRyZXR1cm4gKCBjLnIgPT09IHRoaXMuciApICYmICggYy5nID09PSB0aGlzLmcgKSAmJiAoIGMuYiA9PT0gdGhpcy5iICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5nID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLnI7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuZztcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5iO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5yID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy5nID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy5iID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5ub3JtYWxpemVkID09PSB0cnVlICkge1xuXG5cdFx0XHQvLyBhc3N1bWluZyBVaW50OEFycmF5XG5cblx0XHRcdHRoaXMuciAvPSAyNTU7XG5cdFx0XHR0aGlzLmcgLz0gMjU1O1xuXHRcdFx0dGhpcy5iIC89IDI1NTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRIZXgoKTtcblxuXHR9XG5cbn1cblxuQ29sb3IuTkFNRVMgPSBfY29sb3JLZXl3b3JkcztcblxuQ29sb3IucHJvdG90eXBlLmlzQ29sb3IgPSB0cnVlO1xuQ29sb3IucHJvdG90eXBlLnIgPSAxO1xuQ29sb3IucHJvdG90eXBlLmcgPSAxO1xuQ29sb3IucHJvdG90eXBlLmIgPSAxO1xuXG5sZXQgX2NhbnZhcztcblxuY2xhc3MgSW1hZ2VVdGlscyB7XG5cblx0c3RhdGljIGdldERhdGFVUkwoIGltYWdlICkge1xuXG5cdFx0aWYgKCAvXmRhdGE6L2kudGVzdCggaW1hZ2Uuc3JjICkgKSB7XG5cblx0XHRcdHJldHVybiBpbWFnZS5zcmM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCA9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGxldCBjYW52YXM7XG5cblx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB7XG5cblx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRfY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0Y29uc3QgY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXG5cdFx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkge1xuXG5cdFx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZSwgMCwgMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbnZhcyA9IF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNhbnZhcy53aWR0aCA+IDIwNDggfHwgY2FudmFzLmhlaWdodCA+IDIwNDggKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMuZ2V0RGF0YVVSTDogSW1hZ2UgY29udmVydGVkIHRvIGpwZyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucycsIGltYWdlICk7XG5cblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvanBlZycsIDAuNiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoICdpbWFnZS9wbmcnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBzUkdCVG9MaW5lYXIoIGltYWdlICkge1xuXG5cdFx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdFx0KCB0eXBlb2YgSW1hZ2VCaXRtYXAgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXAgKSApIHtcblxuXHRcdFx0Y29uc3QgY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXG5cdFx0XHRjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0XHRjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGRhdGFbIGkgXSA9IFNSR0JUb0xpbmVhciggZGF0YVsgaSBdIC8gMjU1ICkgKiAyNTU7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoIGltYWdlRGF0YSwgMCwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzO1xuXG5cdFx0fSBlbHNlIGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0Y29uc3QgZGF0YSA9IGltYWdlLmRhdGEuc2xpY2UoIDAgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgKSB7XG5cblx0XHRcdFx0XHRkYXRhWyBpIF0gPSBNYXRoLmZsb29yKCBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSAvIDI1NSApICogMjU1ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGFzc3VtaW5nIGZsb2F0XG5cblx0XHRcdFx0XHRkYXRhWyBpIF0gPSBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5zUkdCVG9MaW5lYXIoKTogVW5zdXBwb3J0ZWQgaW1hZ2UgdHlwZS4gTm8gY29sb3Igc3BhY2UgY29udmVyc2lvbiBhcHBsaWVkLicgKTtcblx0XHRcdHJldHVybiBpbWFnZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY2xhc3MgU291cmNlIHtcblxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwgKSB7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdH1cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0YS5pbWFnZXNbIHRoaXMudXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0dXJsOiAnJ1xuXHRcdH07XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuXG5cdFx0aWYgKCBkYXRhICE9PSBudWxsICkge1xuXG5cdFx0XHRsZXQgdXJsO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblxuXHRcdFx0XHQvLyBjdWJlIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFbIGkgXS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXS5pbWFnZSApICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXSApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBzZXJpYWxpemVJbWFnZSggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dHB1dC51cmwgPSB1cmw7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhLmltYWdlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgfHxcblx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xuXG5cdFx0Ly8gZGVmYXVsdCBpbWFnZXNcblxuXHRcdHJldHVybiBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0Ly8gaW1hZ2VzIG9mIERhdGFUZXh0dXJlXG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbWFnZS5kYXRhICksXG5cdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHQsXG5cdFx0XHRcdHR5cGU6IGltYWdlLmRhdGEuY29uc3RydWN0b3IubmFtZVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRleHR1cmU6IFVuYWJsZSB0byBzZXJpYWxpemUgVGV4dHVyZS4nICk7XG5cdFx0XHRyZXR1cm4ge307XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblNvdXJjZS5wcm90b3R5cGUuaXNTb3VyY2UgPSB0cnVlO1xuXG5sZXQgdGV4dHVyZUlkID0gMDtcblxuY2xhc3MgVGV4dHVyZSBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoIGltYWdlID0gVGV4dHVyZS5ERUZBVUxUX0lNQUdFLCBtYXBwaW5nID0gVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcsIHdyYXBTID0gQ2xhbXBUb0VkZ2VXcmFwcGluZywgd3JhcFQgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCBtYWdGaWx0ZXIgPSBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgZm9ybWF0ID0gUkdCQUZvcm1hdCwgdHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGUsIGFuaXNvdHJvcHkgPSAxLCBlbmNvZGluZyA9IExpbmVhckVuY29kaW5nICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogdGV4dHVyZUlkICsrIH0gKTtcblxuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHR0aGlzLnNvdXJjZSA9IG5ldyBTb3VyY2UoIGltYWdlICk7XG5cdFx0dGhpcy5taXBtYXBzID0gW107XG5cblx0XHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nO1xuXG5cdFx0dGhpcy53cmFwUyA9IHdyYXBTO1xuXHRcdHRoaXMud3JhcFQgPSB3cmFwVDtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyO1xuXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weTtcblxuXHRcdHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBudWxsO1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cblx0XHR0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XG5cdFx0dGhpcy5yZXBlYXQgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXHRcdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0XHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSB0cnVlO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuXHRcdHRoaXMuZmxpcFkgPSB0cnVlO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gNDtcdC8vIHZhbGlkIHZhbHVlczogMSwgMiwgNCwgOCAoc2VlIGh0dHA6Ly93d3cua2hyb25vcy5vcmcvb3BlbmdsZXMvc2RrL2RvY3MvbWFuL3hodG1sL2dsUGl4ZWxTdG9yZWkueG1sKVxuXG5cdFx0Ly8gVmFsdWVzIG9mIGVuY29kaW5nICE9PSBUSFJFRS5MaW5lYXJFbmNvZGluZyBvbmx5IHN1cHBvcnRlZCBvbiBtYXAsIGVudk1hcCBhbmQgZW1pc3NpdmVNYXAuXG5cdFx0Ly9cblx0XHQvLyBBbHNvIGNoYW5naW5nIHRoZSBlbmNvZGluZyBhZnRlciBhbHJlYWR5IHVzZWQgYnkgYSBNYXRlcmlhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IG1ha2UgdGhlIE1hdGVyaWFsXG5cdFx0Ly8gdXBkYXRlLiBZb3UgbmVlZCB0byBleHBsaWNpdGx5IGNhbGwgTWF0ZXJpYWwubmVlZHNVcGRhdGUgdG8gdHJpZ2dlciBpdCB0byByZWNvbXBpbGUuXG5cdFx0dGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblx0XHR0aGlzLm9uVXBkYXRlID0gbnVsbDtcblxuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gZmFsc2U7IC8vIGluZGljYXRlcyB3aGV0aGVyIGEgdGV4dHVyZSBiZWxvbmdzIHRvIGEgcmVuZGVyIHRhcmdldCBvciBub3Rcblx0XHR0aGlzLm5lZWRzUE1SRU1VcGRhdGUgPSBmYWxzZTsgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyB0ZXh0dXJlIHNob3VsZCBiZSBwcm9jZXNzZWQgYnkgUE1SRU1HZW5lcmF0b3Igb3Igbm90IChvbmx5IHJlbGV2YW50IGZvciByZW5kZXIgdGFyZ2V0IHRleHR1cmVzKVxuXG5cdH1cblxuXHRnZXQgaW1hZ2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zb3VyY2UuZGF0YTtcblxuXHR9XG5cblx0c2V0IGltYWdlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuc291cmNlLmRhdGEgPSB2YWx1ZTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4KCkge1xuXG5cdFx0dGhpcy5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnksIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnksIHRoaXMucm90YXRpb24sIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2Uuc291cmNlO1xuXHRcdHRoaXMubWlwbWFwcyA9IHNvdXJjZS5taXBtYXBzLnNsaWNlKCAwICk7XG5cblx0XHR0aGlzLm1hcHBpbmcgPSBzb3VyY2UubWFwcGluZztcblxuXHRcdHRoaXMud3JhcFMgPSBzb3VyY2Uud3JhcFM7XG5cdFx0dGhpcy53cmFwVCA9IHNvdXJjZS53cmFwVDtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gc291cmNlLm1hZ0ZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IHNvdXJjZS5taW5GaWx0ZXI7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcblxuXHRcdHRoaXMuZm9ybWF0ID0gc291cmNlLmZvcm1hdDtcblx0XHR0aGlzLmludGVybmFsRm9ybWF0ID0gc291cmNlLmludGVybmFsRm9ybWF0O1xuXHRcdHRoaXMudHlwZSA9IHNvdXJjZS50eXBlO1xuXG5cdFx0dGhpcy5vZmZzZXQuY29weSggc291cmNlLm9mZnNldCApO1xuXHRcdHRoaXMucmVwZWF0LmNvcHkoIHNvdXJjZS5yZXBlYXQgKTtcblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XG5cdFx0dGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gc291cmNlLmdlbmVyYXRlTWlwbWFwcztcblx0XHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbHlBbHBoYTtcblx0XHR0aGlzLmZsaXBZID0gc291cmNlLmZsaXBZO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gc291cmNlLnVucGFja0FsaWdubWVudDtcblx0XHR0aGlzLmVuY29kaW5nID0gc291cmNlLmVuY29kaW5nO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG91dHB1dCA9IHtcblxuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnVGV4dHVyZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1RleHR1cmUudG9KU09OJ1xuXHRcdFx0fSxcblxuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXG5cdFx0XHRpbWFnZTogdGhpcy5zb3VyY2UudG9KU09OKCBtZXRhICkudXVpZCxcblxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxuXG5cdFx0XHRyZXBlYXQ6IFsgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSBdLFxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcblx0XHRcdGNlbnRlcjogWyB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55IF0sXG5cdFx0XHRyb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcblxuXHRcdFx0d3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sXG5cblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRlbmNvZGluZzogdGhpcy5lbmNvZGluZyxcblxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXG5cdFx0XHRhbmlzb3Ryb3B5OiB0aGlzLmFuaXNvdHJvcHksXG5cblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZLFxuXG5cdFx0XHRwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsXG5cdFx0XHR1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50XG5cblx0XHR9O1xuXG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgb3V0cHV0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdID0gb3V0cHV0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1VdiggdXYgKSB7XG5cblx0XHRpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgcmV0dXJuIHV2O1xuXG5cdFx0dXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0aWYgKCB1di54IDwgMCB8fCB1di54ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwUyApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueCApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gTWF0aC5jZWlsKCB1di54ICkgLSB1di54O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB1di55IDwgMCB8fCB1di55ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwVCApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueSApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gTWF0aC5jZWlsKCB1di55ICkgLSB1di55O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZsaXBZICkge1xuXG5cdFx0XHR1di55ID0gMSAtIHV2Lnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXY7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cdFx0XHR0aGlzLnNvdXJjZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblRleHR1cmUuREVGQVVMVF9JTUFHRSA9IG51bGw7XG5UZXh0dXJlLkRFRkFVTFRfTUFQUElORyA9IFVWTWFwcGluZztcblxuVGV4dHVyZS5wcm90b3R5cGUuaXNUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgVmVjdG9yNCB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy53ID0gdztcblxuXHR9XG5cblx0Z2V0IHdpZHRoKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuejtcblxuXHR9XG5cblx0c2V0IHdpZHRoKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMueiA9IHZhbHVlO1xuXG5cdH1cblxuXHRnZXQgaGVpZ2h0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudztcblxuXHR9XG5cblx0c2V0IGhlaWdodCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLncgPSB2YWx1ZTtcblxuXHR9XG5cblx0c2V0KCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy53ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXHRcdHRoaXMudyA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRaKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRXKCB3ICkge1xuXG5cdFx0dGhpcy53ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRjYXNlIDM6IHJldHVybiB0aGlzLnc7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53ICk7XG5cblx0fVxuXG5cdGNvcHkoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblx0XHR0aGlzLncgPSAoIHYudyAhPT0gdW5kZWZpbmVkICkgPyB2LncgOiAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuYWRkKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuYWRkVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cdFx0dGhpcy53ICs9IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblx0XHR0aGlzLncgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cdFx0dGhpcy53ID0gYS53ICsgYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFZlY3RvciggdiwgcyApIHtcblxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xuXHRcdHRoaXMueSArPSB2LnkgKiBzO1xuXHRcdHRoaXMueiArPSB2LnogKiBzO1xuXHRcdHRoaXMudyArPSB2LncgKiBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YiggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXHRcdHRoaXMueiAtPSB2Lno7XG5cdFx0dGhpcy53IC09IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblx0XHR0aGlzLncgLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cdFx0dGhpcy53ID0gYS53IC0gYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cdFx0dGhpcy53ICo9IHYudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cdFx0dGhpcy53ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSAqIHc7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKiB3O1xuXHRcdHRoaXMudyA9IGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXZpZGVTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fVxuXG5cdHNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gcSBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMudyA9IDIgKiBNYXRoLmFjb3MoIHEudyApO1xuXG5cdFx0Y29uc3QgcyA9IE1hdGguc3FydCggMSAtIHEudyAqIHEudyApO1xuXG5cdFx0aWYgKCBzIDwgMC4wMDAxICkge1xuXG5cdFx0XHR0aGlzLnggPSAxO1xuXHRcdFx0dGhpcy55ID0gMDtcblx0XHRcdHRoaXMueiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnggPSBxLnggLyBzO1xuXHRcdFx0dGhpcy55ID0gcS55IC8gcztcblx0XHRcdHRoaXMueiA9IHEueiAvIHM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4KCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0bGV0IGFuZ2xlLCB4LCB5LCB6OyAvLyB2YXJpYWJsZXMgZm9yIHJlc3VsdFxuXHRcdGNvbnN0IGVwc2lsb24gPSAwLjAxLFx0XHQvLyBtYXJnaW4gdG8gYWxsb3cgZm9yIHJvdW5kaW5nIGVycm9yc1xuXHRcdFx0ZXBzaWxvbjIgPSAwLjEsXHRcdC8vIG1hcmdpbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDAgYW5kIDE4MCBkZWdyZWVzXG5cblx0XHRcdHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdGlmICggKCBNYXRoLmFicyggbTEyIC0gbTIxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0xMyAtIG0zMSApIDwgZXBzaWxvbiApICYmXG5cdFx0ICAgICAoIE1hdGguYWJzKCBtMjMgLSBtMzIgKSA8IGVwc2lsb24gKSApIHtcblxuXHRcdFx0Ly8gc2luZ3VsYXJpdHkgZm91bmRcblx0XHRcdC8vIGZpcnN0IGNoZWNrIGZvciBpZGVudGl0eSBtYXRyaXggd2hpY2ggbXVzdCBoYXZlICsxIGZvciBhbGwgdGVybXNcblx0XHRcdC8vIGluIGxlYWRpbmcgZGlhZ29uYWwgYW5kIHplcm8gaW4gb3RoZXIgdGVybXNcblxuXHRcdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgKyBtMjEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTEzICsgbTMxICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0yMyArIG0zMiApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTEgKyBtMjIgKyBtMzMgLSAzICkgPCBlcHNpbG9uMiApICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgc2luZ3VsYXJpdHkgaXMgaWRlbnRpdHkgbWF0cml4IHNvIGFuZ2xlID0gMFxuXG5cdFx0XHRcdHRoaXMuc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7IC8vIHplcm8gYW5nbGUsIGFyYml0cmFyeSBheGlzXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRoaXMgc2luZ3VsYXJpdHkgaXMgYW5nbGUgPSAxODBcblxuXHRcdFx0YW5nbGUgPSBNYXRoLlBJO1xuXG5cdFx0XHRjb25zdCB4eCA9ICggbTExICsgMSApIC8gMjtcblx0XHRcdGNvbnN0IHl5ID0gKCBtMjIgKyAxICkgLyAyO1xuXHRcdFx0Y29uc3QgenogPSAoIG0zMyArIDEgKSAvIDI7XG5cdFx0XHRjb25zdCB4eSA9ICggbTEyICsgbTIxICkgLyA0O1xuXHRcdFx0Y29uc3QgeHogPSAoIG0xMyArIG0zMSApIC8gNDtcblx0XHRcdGNvbnN0IHl6ID0gKCBtMjMgKyBtMzIgKSAvIDQ7XG5cblx0XHRcdGlmICggKCB4eCA+IHl5ICkgJiYgKCB4eCA+IHp6ICkgKSB7XG5cblx0XHRcdFx0Ly8gbTExIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm1cblxuXHRcdFx0XHRpZiAoIHh4IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHggPSBNYXRoLnNxcnQoIHh4ICk7XG5cdFx0XHRcdFx0eSA9IHh5IC8geDtcblx0XHRcdFx0XHR6ID0geHogLyB4O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggeXkgPiB6eiApIHtcblxuXHRcdFx0XHQvLyBtMjIgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeXkgPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eSA9IE1hdGguc3FydCggeXkgKTtcblx0XHRcdFx0XHR4ID0geHkgLyB5O1xuXHRcdFx0XHRcdHogPSB5eiAvIHk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG0zMyBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtIHNvIGJhc2UgcmVzdWx0IG9uIHRoaXNcblxuXHRcdFx0XHRpZiAoIHp6IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eiA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHogPSBNYXRoLnNxcnQoIHp6ICk7XG5cdFx0XHRcdFx0eCA9IHh6IC8gejtcblx0XHRcdFx0XHR5ID0geXogLyB6O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldCggeCwgeSwgeiwgYW5nbGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7IC8vIHJldHVybiAxODAgZGVnIHJvdGF0aW9uXG5cblx0XHR9XG5cblx0XHQvLyBhcyB3ZSBoYXZlIHJlYWNoZWQgaGVyZSB0aGVyZSBhcmUgbm8gc2luZ3VsYXJpdGllcyBzbyB3ZSBjYW4gaGFuZGxlIG5vcm1hbGx5XG5cblx0XHRsZXQgcyA9IE1hdGguc3FydCggKCBtMzIgLSBtMjMgKSAqICggbTMyIC0gbTIzICkgK1xuXHRcdFx0KCBtMTMgLSBtMzEgKSAqICggbTEzIC0gbTMxICkgK1xuXHRcdFx0KCBtMjEgLSBtMTIgKSAqICggbTIxIC0gbTEyICkgKTsgLy8gdXNlZCB0byBub3JtYWxpemVcblxuXHRcdGlmICggTWF0aC5hYnMoIHMgKSA8IDAuMDAxICkgcyA9IDE7XG5cblx0XHQvLyBwcmV2ZW50IGRpdmlkZSBieSB6ZXJvLCBzaG91bGQgbm90IGhhcHBlbiBpZiBtYXRyaXggaXMgb3J0aG9nb25hbCBhbmQgc2hvdWxkIGJlXG5cdFx0Ly8gY2F1Z2h0IGJ5IHNpbmd1bGFyaXR5IHRlc3QgYWJvdmUsIGJ1dCBJJ3ZlIGxlZnQgaXQgaW4ganVzdCBpbiBjYXNlXG5cblx0XHR0aGlzLnggPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHR0aGlzLnkgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHR0aGlzLnogPSAoIG0yMSAtIG0xMiApIC8gcztcblx0XHR0aGlzLncgPSBNYXRoLmFjb3MoICggbTExICsgbTIyICsgbTMzIC0gMSApIC8gMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1pbiggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWluKCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1heCggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggbWluLncsIE1hdGgubWluKCBtYXgudywgdGhpcy53ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy56ICkgKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLncgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9XG5cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmZsb29yKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5jZWlsKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgucm91bmQoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGgucm91bmQoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kVG9aZXJvKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gKCB0aGlzLnogPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueiApIDogTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gKCB0aGlzLncgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMudyApIDogTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cdFx0dGhpcy53ID0gLSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYueiArIHRoaXMudyAqIHYudztcblxuXHR9XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncgKTtcblxuXHR9XG5cblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTtcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9XG5cblx0c2V0TGVuZ3RoKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fVxuXG5cdGxlcnAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cdFx0dGhpcy53ICs9ICggdi53IC0gdGhpcy53ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XG5cdFx0dGhpcy56ID0gdjEueiArICggdjIueiAtIHYxLnogKSAqIGFscGhhO1xuXHRcdHRoaXMudyA9IHYxLncgKyAoIHYyLncgLSB2MS53ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSAmJiAoIHYudyA9PT0gdGhpcy53ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy53ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy53ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy53ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cdFx0eWllbGQgdGhpcy56O1xuXHRcdHlpZWxkIHRoaXMudztcblxuXHR9XG5cbn1cblxuVmVjdG9yNC5wcm90b3R5cGUuaXNWZWN0b3I0ID0gdHJ1ZTtcblxuLypcbiBJbiBvcHRpb25zLCB3ZSBjYW4gc3BlY2lmeTpcbiAqIFRleHR1cmUgcGFyYW1ldGVycyBmb3IgYW4gYXV0by1nZW5lcmF0ZWQgdGFyZ2V0IHRleHR1cmVcbiAqIGRlcHRoQnVmZmVyL3N0ZW5jaWxCdWZmZXI6IEJvb2xlYW5zIHRvIGluZGljYXRlIGlmIHdlIHNob3VsZCBnZW5lcmF0ZSB0aGVzZSBidWZmZXJzXG4qL1xuY2xhc3MgV2ViR0xSZW5kZXJUYXJnZXQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMuZGVwdGggPSAxO1xuXG5cdFx0dGhpcy5zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblx0XHR0aGlzLnNjaXNzb3JUZXN0ID0gZmFsc2U7XG5cblx0XHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdGNvbnN0IGltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBkZXB0aDogMSB9O1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoIGltYWdlLCBvcHRpb25zLm1hcHBpbmcsIG9wdGlvbnMud3JhcFMsIG9wdGlvbnMud3JhcFQsIG9wdGlvbnMubWFnRmlsdGVyLCBvcHRpb25zLm1pbkZpbHRlciwgb3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMudHlwZSwgb3B0aW9ucy5hbmlzb3Ryb3B5LCBvcHRpb25zLmVuY29kaW5nICk7XG5cdFx0dGhpcy50ZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2U7XG5cdFx0dGhpcy50ZXh0dXJlLmludGVybmFsRm9ybWF0ID0gb3B0aW9ucy5pbnRlcm5hbEZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5pbnRlcm5hbEZvcm1hdCA6IG51bGw7XG5cdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBvcHRpb25zLmRlcHRoQnVmZmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoQnVmZmVyIDogdHJ1ZTtcblx0XHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciA6IGZhbHNlO1xuXG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBvcHRpb25zLmRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aFRleHR1cmUgOiBudWxsO1xuXG5cdFx0dGhpcy5zYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnNhbXBsZXMgOiAwO1xuXG5cdH1cblxuXHRzZXRTaXplKCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCA9IDEgKSB7XG5cblx0XHRpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgfHwgdGhpcy5kZXB0aCAhPT0gZGVwdGggKSB7XG5cblx0XHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0XHR0aGlzLnRleHR1cmUuaW1hZ2Uud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMudGV4dHVyZS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR0aGlzLnRleHR1cmUuaW1hZ2UuZGVwdGggPSBkZXB0aDtcblxuXHRcdFx0dGhpcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXdwb3J0LnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHRoaXMuc2Npc3Nvci5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXHRcdHRoaXMuZGVwdGggPSBzb3VyY2UuZGVwdGg7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gc291cmNlLnRleHR1cmUuY2xvbmUoKTtcblxuXHRcdC8vIGVuc3VyZSBpbWFnZSBvYmplY3QgaXMgbm90IHNoYXJlZCwgc2VlICMyMDMyOFxuXG5cdFx0dGhpcy50ZXh0dXJlLmltYWdlID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS50ZXh0dXJlLmltYWdlICk7XG5cblx0XHR0aGlzLmRlcHRoQnVmZmVyID0gc291cmNlLmRlcHRoQnVmZmVyO1xuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5zdGVuY2lsQnVmZmVyO1xuXG5cdFx0aWYgKCBzb3VyY2UuZGVwdGhUZXh0dXJlICE9PSBudWxsICkgdGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlLmNsb25lKCk7XG5cblx0XHR0aGlzLnNhbXBsZXMgPSBzb3VyY2Uuc2FtcGxlcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59XG5cbldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5pc1dlYkdMUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuY2xhc3MgRGF0YUFycmF5VGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCwgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEgKSB7XG5cblx0XHRzdXBlciggbnVsbCApO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggfTtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR9XG5cbn1cblxuRGF0YUFycmF5VGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhQXJyYXlUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0xBcnJheVJlbmRlclRhcmdldCBleHRlbmRzIFdlYkdMUmVuZGVyVGFyZ2V0IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgZGVwdGggKSB7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IERhdGFBcnJheVRleHR1cmUoIG51bGwsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuV2ViR0xBcnJheVJlbmRlclRhcmdldC5wcm90b3R5cGUuaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuY2xhc3MgRGF0YTNEVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCwgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEgKSB7XG5cblx0XHQvLyBXZSdyZSBnb2luZyB0byBhZGQgLnNldFhYWCgpIG1ldGhvZHMgZm9yIHNldHRpbmcgcHJvcGVydGllcyBsYXRlci5cblx0XHQvLyBVc2VycyBjYW4gc3RpbGwgc2V0IGluIERhdGFUZXh0dXJlM0QgZGlyZWN0bHkuXG5cdFx0Ly9cblx0XHQvL1x0Y29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZTNEKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXHRcdC8vIFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gMTY7XG5cdFx0Ly9cblx0XHQvLyBTZWUgIzE0ODM5XG5cblx0XHRzdXBlciggbnVsbCApO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggfTtcblxuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblx0XHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR9XG5cbn1cblxuRGF0YTNEVGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhM0RUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0wzRFJlbmRlclRhcmdldCBleHRlbmRzIFdlYkdMUmVuZGVyVGFyZ2V0IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgZGVwdGggKSB7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IERhdGEzRFRleHR1cmUoIG51bGwsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuV2ViR0wzRFJlbmRlclRhcmdldC5wcm90b3R5cGUuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgZXh0ZW5kcyBXZWJHTFJlbmRlclRhcmdldCB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIGNvdW50LCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcblxuXHRcdHRoaXMudGV4dHVyZSA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudGV4dHVyZVsgaSBdID0gdGV4dHVyZS5jbG9uZSgpO1xuXHRcdFx0dGhpcy50ZXh0dXJlWyBpIF0uaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0U2l6ZSggd2lkdGgsIGhlaWdodCwgZGVwdGggPSAxICkge1xuXG5cdFx0aWYgKCB0aGlzLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gaGVpZ2h0IHx8IHRoaXMuZGVwdGggIT09IGRlcHRoICkge1xuXG5cdFx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMudGV4dHVyZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLnRleHR1cmVbIGkgXS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHR0aGlzLnRleHR1cmVbIGkgXS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRcdHRoaXMudGV4dHVyZVsgaSBdLmltYWdlLmRlcHRoID0gZGVwdGg7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXdwb3J0LnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHRoaXMuc2Npc3Nvci5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXHRcdHRoaXMuZGVwdGggPSBzb3VyY2UuZGVwdGg7XG5cblx0XHR0aGlzLnZpZXdwb3J0LnNldCggMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKTtcblx0XHR0aGlzLnNjaXNzb3Iuc2V0KCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCApO1xuXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjtcblx0XHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBzb3VyY2Uuc3RlbmNpbEJ1ZmZlcjtcblx0XHR0aGlzLmRlcHRoVGV4dHVyZSA9IHNvdXJjZS5kZXB0aFRleHR1cmU7XG5cblx0XHR0aGlzLnRleHR1cmUubGVuZ3RoID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBzb3VyY2UudGV4dHVyZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlWyBpIF0gPSBzb3VyY2UudGV4dHVyZVsgaSBdLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMucHJvdG90eXBlLmlzV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgPSB0cnVlO1xuXG5jbGFzcyBRdWF0ZXJuaW9uIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHR9XG5cblx0c3RhdGljIHNsZXJwKCBxYSwgcWIsIHFtLCB0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogU3RhdGljIC5zbGVycCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBxbS5zbGVycFF1YXRlcm5pb25zKCBxYSwgcWIsIHQgKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gcW0uc2xlcnBRdWF0ZXJuaW9ucyggcWEsIHFiLCB0ICk7XG5cblx0fVxuXG5cdHN0YXRpYyBzbGVycEZsYXQoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkge1xuXG5cdFx0Ly8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvblxuXG5cdFx0bGV0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDAgXSxcblx0XHRcdHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXSxcblx0XHRcdHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSxcblx0XHRcdHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXTtcblxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDAgXSxcblx0XHRcdHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXSxcblx0XHRcdHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXSxcblx0XHRcdHcxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDMgXTtcblxuXHRcdGlmICggdCA9PT0gMCApIHtcblxuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAwIF0gPSB4MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdCA9PT0gMSApIHtcblxuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAwIF0gPSB4MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHoxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdzAgIT09IHcxIHx8IHgwICE9PSB4MSB8fCB5MCAhPT0geTEgfHwgejAgIT09IHoxICkge1xuXG5cdFx0XHRsZXQgcyA9IDEgLSB0O1xuXHRcdFx0Y29uc3QgY29zID0geDAgKiB4MSArIHkwICogeTEgKyB6MCAqIHoxICsgdzAgKiB3MSxcblx0XHRcdFx0ZGlyID0gKCBjb3MgPj0gMCA/IDEgOiAtIDEgKSxcblx0XHRcdFx0c3FyU2luID0gMSAtIGNvcyAqIGNvcztcblxuXHRcdFx0Ly8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczpcblx0XHRcdGlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zcXJ0KCBzcXJTaW4gKSxcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xuXG5cdFx0XHRcdHMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luO1xuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0RGlyID0gdCAqIGRpcjtcblxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XG5cdFx0XHR5MCA9IHkwICogcyArIHkxICogdERpcjtcblx0XHRcdHowID0gejAgKiBzICsgejEgKiB0RGlyO1xuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XG5cblx0XHRcdC8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDpcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgZiA9IDEgLyBNYXRoLnNxcnQoIHgwICogeDAgKyB5MCAqIHkwICsgejAgKiB6MCArIHcwICogdzAgKTtcblxuXHRcdFx0XHR4MCAqPSBmO1xuXHRcdFx0XHR5MCAqPSBmO1xuXHRcdFx0XHR6MCAqPSBmO1xuXHRcdFx0XHR3MCAqPSBmO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cblx0fVxuXG5cdHN0YXRpYyBtdWx0aXBseVF1YXRlcm5pb25zRmxhdCggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEgKSB7XG5cblx0XHRjb25zdCB4MCA9IHNyYzBbIHNyY09mZnNldDAgXTtcblx0XHRjb25zdCB5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF07XG5cdFx0Y29uc3QgejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdO1xuXHRcdGNvbnN0IHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXTtcblxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSBdO1xuXHRcdGNvbnN0IHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXTtcblx0XHRjb25zdCB6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF07XG5cdFx0Y29uc3QgdzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0ZHN0WyBkc3RPZmZzZXQgXSA9IHgwICogdzEgKyB3MCAqIHgxICsgeTAgKiB6MSAtIHowICogeTE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MCAqIHcxICsgdzAgKiB5MSArIHowICogeDEgLSB4MCAqIHoxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejAgKiB3MSArIHcwICogejEgKyB4MCAqIHkxIC0geTAgKiB4MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwICogdzEgLSB4MCAqIHgxIC0geTAgKiB5MSAtIHowICogejE7XG5cblx0XHRyZXR1cm4gZHN0O1xuXG5cdH1cblxuXHRnZXQgeCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94O1xuXG5cdH1cblxuXHRzZXQgeCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl95O1xuXG5cdH1cblxuXHRzZXQgeSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl95ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeigpIHtcblxuXHRcdHJldHVybiB0aGlzLl96O1xuXG5cdH1cblxuXHRzZXQgeiggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl96ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgdygpIHtcblxuXHRcdHJldHVybiB0aGlzLl93O1xuXG5cdH1cblxuXHRzZXQgdyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl93ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyApO1xuXG5cdH1cblxuXHRjb3B5KCBxdWF0ZXJuaW9uICkge1xuXG5cdFx0dGhpcy5feCA9IHF1YXRlcm5pb24ueDtcblx0XHR0aGlzLl95ID0gcXVhdGVybmlvbi55O1xuXHRcdHRoaXMuX3ogPSBxdWF0ZXJuaW9uLno7XG5cdFx0dGhpcy5fdyA9IHF1YXRlcm5pb24udztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tRXVsZXIoIGV1bGVyLCB1cGRhdGUgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHggPSBldWxlci5feCwgeSA9IGV1bGVyLl95LCB6ID0gZXVsZXIuX3osIG9yZGVyID0gZXVsZXIuX29yZGVyO1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuXHRcdC8vIFx0MjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxuXG5cdFx0Y29uc3QgY29zID0gTWF0aC5jb3M7XG5cdFx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0XHRjb25zdCBjMSA9IGNvcyggeCAvIDIgKTtcblx0XHRjb25zdCBjMiA9IGNvcyggeSAvIDIgKTtcblx0XHRjb25zdCBjMyA9IGNvcyggeiAvIDIgKTtcblxuXHRcdGNvbnN0IHMxID0gc2luKCB4IC8gMiApO1xuXHRcdGNvbnN0IHMyID0gc2luKCB5IC8gMiApO1xuXHRcdGNvbnN0IHMzID0gc2luKCB6IC8gMiApO1xuXG5cdFx0c3dpdGNoICggb3JkZXIgKSB7XG5cblx0XHRcdGNhc2UgJ1hZWic6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWFonOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWlhZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pZWCc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWlgnOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWFpZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9hbmdsZVRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHRjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0Y29uc3QgdGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdLFxuXG5cdFx0XHR0cmFjZSA9IG0xMSArIG0yMiArIG0zMztcblxuXHRcdGlmICggdHJhY2UgPiAwICkge1xuXG5cdFx0XHRjb25zdCBzID0gMC41IC8gTWF0aC5zcXJ0KCB0cmFjZSArIDEuMCApO1xuXG5cdFx0XHR0aGlzLl93ID0gMC4yNSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMzIgLSBtMjMgKSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTMgLSBtMzEgKSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjEgLSBtMTIgKSAqIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMTEgPiBtMjIgJiYgbTExID4gbTMzICkge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMTEgLSBtMjIgLSBtMzMgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTMyIC0gbTIzICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9IDAuMjUgKiBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTEyICsgbTIxICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTEzICsgbTMxICkgLyBzO1xuXG5cdFx0fSBlbHNlIGlmICggbTIyID4gbTMzICkge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMjIgLSBtMTEgLSBtMzMgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTEzIC0gbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEyICsgbTIxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9IDAuMjUgKiBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTIzICsgbTMyICkgLyBzO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTMzIC0gbTExIC0gbTIyICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0yMSAtIG0xMiApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0xMyArIG0zMSApIC8gcztcblx0XHRcdHRoaXMuX3kgPSAoIG0yMyArIG0zMiApIC8gcztcblx0XHRcdHRoaXMuX3ogPSAwLjI1ICogcztcblxuXHRcdH1cblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tVW5pdFZlY3RvcnMoIHZGcm9tLCB2VG8gKSB7XG5cblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcblxuXHRcdGxldCByID0gdkZyb20uZG90KCB2VG8gKSArIDE7XG5cblx0XHRpZiAoIHIgPCBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0Ly8gdkZyb20gYW5kIHZUbyBwb2ludCBpbiBvcHBvc2l0ZSBkaXJlY3Rpb25zXG5cblx0XHRcdHIgPSAwO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB2RnJvbS54ICkgPiBNYXRoLmFicyggdkZyb20ueiApICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAtIHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3kgPSB2RnJvbS54O1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblx0XHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdHRoaXMuX3kgPSAtIHZGcm9tLno7XG5cdFx0XHRcdHRoaXMuX3ogPSB2RnJvbS55O1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7IC8vIGlubGluZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kgb24gVmVjdG9yM1xuXG5cdFx0XHR0aGlzLl94ID0gdkZyb20ueSAqIHZUby56IC0gdkZyb20ueiAqIHZUby55O1xuXHRcdFx0dGhpcy5feSA9IHZGcm9tLnogKiB2VG8ueCAtIHZGcm9tLnggKiB2VG8uejtcblx0XHRcdHRoaXMuX3ogPSB2RnJvbS54ICogdlRvLnkgLSB2RnJvbS55ICogdlRvLng7XG5cdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRhbmdsZVRvKCBxICkge1xuXG5cdFx0cmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBjbGFtcCggdGhpcy5kb3QoIHEgKSwgLSAxLCAxICkgKSApO1xuXG5cdH1cblxuXHRyb3RhdGVUb3dhcmRzKCBxLCBzdGVwICkge1xuXG5cdFx0Y29uc3QgYW5nbGUgPSB0aGlzLmFuZ2xlVG8oIHEgKTtcblxuXHRcdGlmICggYW5nbGUgPT09IDAgKSByZXR1cm4gdGhpcztcblxuXHRcdGNvbnN0IHQgPSBNYXRoLm1pbiggMSwgc3RlcCAvIGFuZ2xlICk7XG5cblx0XHR0aGlzLnNsZXJwKCBxLCB0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aWRlbnRpdHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDEgKTtcblxuXHR9XG5cblx0aW52ZXJ0KCkge1xuXG5cdFx0Ly8gcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xuXG5cdH1cblxuXHRjb25qdWdhdGUoKSB7XG5cblx0XHR0aGlzLl94ICo9IC0gMTtcblx0XHR0aGlzLl95ICo9IC0gMTtcblx0XHR0aGlzLl96ICo9IC0gMTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7XG5cblx0fVxuXG5cdGxlbmd0aFNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdyApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRsZXQgbCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRpZiAoIGwgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0dGhpcy5feSA9IDA7XG5cdFx0XHR0aGlzLl96ID0gMDtcblx0XHRcdHRoaXMuX3cgPSAxO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bCA9IDEgLyBsO1xuXG5cdFx0XHR0aGlzLl94ID0gdGhpcy5feCAqIGw7XG5cdFx0XHR0aGlzLl95ID0gdGhpcy5feSAqIGw7XG5cdFx0XHR0aGlzLl96ID0gdGhpcy5feiAqIGw7XG5cdFx0XHR0aGlzLl93ID0gdGhpcy5fdyAqIGw7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHEsIHAgKSB7XG5cblx0XHRpZiAoIHAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuXG5cdH1cblxuXHRwcmVtdWx0aXBseSggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHRoaXMgKTtcblxuXHR9XG5cblx0bXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIHtcblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9jb2RlL2luZGV4Lmh0bVxuXG5cdFx0Y29uc3QgcWF4ID0gYS5feCwgcWF5ID0gYS5feSwgcWF6ID0gYS5feiwgcWF3ID0gYS5fdztcblx0XHRjb25zdCBxYnggPSBiLl94LCBxYnkgPSBiLl95LCBxYnogPSBiLl96LCBxYncgPSBiLl93O1xuXG5cdFx0dGhpcy5feCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTtcblx0XHR0aGlzLl95ID0gcWF5ICogcWJ3ICsgcWF3ICogcWJ5ICsgcWF6ICogcWJ4IC0gcWF4ICogcWJ6O1xuXHRcdHRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XG5cdFx0dGhpcy5fdyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzbGVycCggcWIsIHQgKSB7XG5cblx0XHRpZiAoIHQgPT09IDAgKSByZXR1cm4gdGhpcztcblx0XHRpZiAoIHQgPT09IDEgKSByZXR1cm4gdGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMuX3gsIHkgPSB0aGlzLl95LCB6ID0gdGhpcy5feiwgdyA9IHRoaXMuX3c7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwL1xuXG5cdFx0bGV0IGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejtcblxuXHRcdGlmICggY29zSGFsZlRoZXRhIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fdyA9IC0gcWIuX3c7XG5cdFx0XHR0aGlzLl94ID0gLSBxYi5feDtcblx0XHRcdHRoaXMuX3kgPSAtIHFiLl95O1xuXHRcdFx0dGhpcy5feiA9IC0gcWIuX3o7XG5cblx0XHRcdGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdztcblx0XHRcdHRoaXMuX3ggPSB4O1xuXHRcdFx0dGhpcy5feSA9IHk7XG5cdFx0XHR0aGlzLl96ID0gejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7XG5cblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0Y29uc3QgcyA9IDEgLSB0O1xuXHRcdFx0dGhpcy5fdyA9IHMgKiB3ICsgdCAqIHRoaXMuX3c7XG5cdFx0XHR0aGlzLl94ID0gcyAqIHggKyB0ICogdGhpcy5feDtcblx0XHRcdHRoaXMuX3kgPSBzICogeSArIHQgKiB0aGlzLl95O1xuXHRcdFx0dGhpcy5feiA9IHMgKiB6ICsgdCAqIHRoaXMuX3o7XG5cblx0XHRcdHRoaXMubm9ybWFsaXplKCk7XG5cdFx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KCBzcXJTaW5IYWxmVGhldGEgKTtcblx0XHRjb25zdCBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuXHRcdGNvbnN0IHJhdGlvQSA9IE1hdGguc2luKCAoIDEgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YSxcblx0XHRcdHJhdGlvQiA9IE1hdGguc2luKCB0ICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGE7XG5cblx0XHR0aGlzLl93ID0gKCB3ICogcmF0aW9BICsgdGhpcy5fdyAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ggPSAoIHggKiByYXRpb0EgKyB0aGlzLl94ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feSA9ICggeSAqIHJhdGlvQSArIHRoaXMuX3kgKiByYXRpb0IgKTtcblx0XHR0aGlzLl96ID0gKCB6ICogcmF0aW9BICsgdGhpcy5feiAqIHJhdGlvQiApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7XG5cblx0fVxuXG5cdHJhbmRvbSgpIHtcblxuXHRcdC8vIERlcml2ZWQgZnJvbSBodHRwOi8vcGxhbm5pbmcuY3MudWl1Yy5lZHUvbm9kZTE5OC5odG1sXG5cdFx0Ly8gTm90ZSwgdGhpcyBzb3VyY2UgdXNlcyB3LCB4LCB5LCB6IG9yZGVyaW5nLFxuXHRcdC8vIHNvIHdlIHN3YXAgdGhlIG9yZGVyIGJlbG93LlxuXG5cdFx0Y29uc3QgdTEgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdGNvbnN0IHNxcnQxdTEgPSBNYXRoLnNxcnQoIDEgLSB1MSApO1xuXHRcdGNvbnN0IHNxcnR1MSA9IE1hdGguc3FydCggdTEgKTtcblxuXHRcdGNvbnN0IHUyID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0Y29uc3QgdTMgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoXG5cdFx0XHRzcXJ0MXUxICogTWF0aC5jb3MoIHUyICksXG5cdFx0XHRzcXJ0dTEgKiBNYXRoLnNpbiggdTMgKSxcblx0XHRcdHNxcnR1MSAqIE1hdGguY29zKCB1MyApLFxuXHRcdFx0c3FydDF1MSAqIE1hdGguc2luKCB1MiApLFxuXHRcdCk7XG5cblx0fVxuXG5cdGVxdWFscyggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuX3ggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy5fdyA9IGFycmF5WyBvZmZzZXQgKyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX3c7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLl94ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy5feSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMuX3ogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLl93ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X29uQ2hhbmdlKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRfb25DaGFuZ2VDYWxsYmFjaygpIHt9XG5cbn1cblxuUXVhdGVybmlvbi5wcm90b3R5cGUuaXNRdWF0ZXJuaW9uID0gdHJ1ZTtcblxuY2xhc3MgVmVjdG9yMyB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHR9XG5cblx0c2V0KCB4LCB5LCB6ICkge1xuXG5cdFx0aWYgKCB6ID09PSB1bmRlZmluZWQgKSB6ID0gdGhpcy56OyAvLyBzcHJpdGUuc2NhbGUuc2V0KHgseSlcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WiggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7XG5cblx0fVxuXG5cdGNvcHkoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGQoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsZWRWZWN0b3IoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWIoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5VmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5VmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAqIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKiBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICogYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5RXVsZXIoIGV1bGVyICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5RXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24kNC5zZXRGcm9tRXVsZXIoIGV1bGVyICkgKTtcblxuXHR9XG5cblx0YXBwbHlBeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQ0LnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXgzKCBtICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHRjb25zdCB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IHF4ID0gcS54LCBxeSA9IHEueSwgcXogPSBxLnosIHF3ID0gcS53O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcblxuXHRcdGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuXHRcdGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuXHRcdGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuXHRcdGNvbnN0IGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG5cdFx0dGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwcm9qZWN0KCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fVxuXG5cdHVucHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGRpdmlkZSggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9XG5cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG5cblx0fVxuXG5cdC8vIFRPRE8gbGVuZ3RoU3F1YXJlZD9cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XG5cdFx0dGhpcy56ID0gdjEueiArICggdjIueiAtIHYxLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNyb3NzKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHRoaXMsIHYgKTtcblxuXHR9XG5cblx0Y3Jvc3NWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejtcblx0XHRjb25zdCBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xuXG5cdFx0dGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG5cdFx0dGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cHJvamVjdE9uVmVjdG9yKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSB2Lmxlbmd0aFNxKCk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRjb25zdCBzY2FsYXIgPSB2LmRvdCggdGhpcyApIC8gZGVub21pbmF0b3I7XG5cblx0XHRyZXR1cm4gdGhpcy5jb3B5KCB2ICkubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApO1xuXG5cdH1cblxuXHRwcm9qZWN0T25QbGFuZSggcGxhbmVOb3JtYWwgKSB7XG5cblx0XHRfdmVjdG9yJGMuY29weSggdGhpcyApLnByb2plY3RPblZlY3RvciggcGxhbmVOb3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3RvciRjICk7XG5cblx0fVxuXG5cdHJlZmxlY3QoIG5vcm1hbCApIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3RvciRjLmNvcHkoIG5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAyICogdGhpcy5kb3QoIG5vcm1hbCApICkgKTtcblxuXHR9XG5cblx0YW5nbGVUbyggdiApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gTWF0aC5zcXJ0KCB0aGlzLmxlbmd0aFNxKCkgKiB2Lmxlbmd0aFNxKCkgKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gTWF0aC5QSSAvIDI7XG5cblx0XHRjb25zdCB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdC8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG5cblx0XHRyZXR1cm4gTWF0aC5hY29zKCBjbGFtcCggdGhldGEsIC0gMSwgMSApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xuXG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejtcblxuXHR9XG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICkgKyBNYXRoLmFicyggdGhpcy56IC0gdi56ICk7XG5cblx0fVxuXG5cdHNldEZyb21TcGhlcmljYWwoIHMgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCBzLnJhZGl1cywgcy5waGksIHMudGhldGEgKTtcblxuXHR9XG5cblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkcyggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0Y29uc3Qgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHBoaSApICogcmFkaXVzO1xuXG5cdFx0dGhpcy54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21DeWxpbmRyaWNhbCggYyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggYy5yYWRpdXMsIGMudGhldGEsIGMueSApO1xuXG5cdH1cblxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnggPSByYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApIHtcblxuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMTIgXTtcblx0XHR0aGlzLnkgPSBlWyAxMyBdO1xuXHRcdHRoaXMueiA9IGVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeFNjYWxlKCBtICkge1xuXG5cdFx0Y29uc3Qgc3ggPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0aGlzLnggPSBzeDtcblx0XHR0aGlzLnkgPSBzeTtcblx0XHR0aGlzLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4Q29sdW1uKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiA0ICk7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXgzQ29sdW1uKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiAzICk7XG5cblx0fVxuXG5cdHNldEZyb21FdWxlciggZSApIHtcblxuXHRcdHRoaXMueCA9IGUuX3g7XG5cdFx0dGhpcy55ID0gZS5feTtcblx0XHR0aGlzLnogPSBlLl96O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tRGlyZWN0aW9uKCkge1xuXG5cdFx0Ly8gRGVyaXZlZCBmcm9tIGh0dHBzOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NwaGVyZVBvaW50UGlja2luZy5odG1sXG5cblx0XHRjb25zdCB1ID0gKCBNYXRoLnJhbmRvbSgpIC0gMC41ICkgKiAyO1xuXHRcdGNvbnN0IHQgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XG5cdFx0Y29uc3QgZiA9IE1hdGguc3FydCggMSAtIHUgKiogMiApO1xuXG5cdFx0dGhpcy54ID0gZiAqIE1hdGguY29zKCB0ICk7XG5cdFx0dGhpcy55ID0gZiAqIE1hdGguc2luKCB0ICk7XG5cdFx0dGhpcy56ID0gdTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cdFx0eWllbGQgdGhpcy56O1xuXG5cdH1cblxufVxuXG5WZWN0b3IzLnByb3RvdHlwZS5pc1ZlY3RvcjMgPSB0cnVlO1xuXG5jb25zdCBfdmVjdG9yJGMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiQ0ID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuXG5jbGFzcyBCb3gzIHtcblxuXHRjb25zdHJ1Y3RvciggbWluID0gbmV3IFZlY3RvcjMoICsgSW5maW5pdHksICsgSW5maW5pdHksICsgSW5maW5pdHkgKSwgbWF4ID0gbmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSApIHtcblxuXHRcdHRoaXMubWluID0gbWluO1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXG5cdH1cblxuXHRzZXQoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUFycmF5KCBhcnJheSApIHtcblxuXHRcdGxldCBtaW5YID0gKyBJbmZpbml0eTtcblx0XHRsZXQgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0bGV0IG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0bGV0IG1heFggPSAtIEluZmluaXR5O1xuXHRcdGxldCBtYXhZID0gLSBJbmZpbml0eTtcblx0XHRsZXQgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBhcnJheVsgaSBdO1xuXHRcdFx0Y29uc3QgeSA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0Y29uc3QgeiA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGxldCBtaW5YID0gKyBJbmZpbml0eTtcblx0XHRsZXQgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0bGV0IG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0bGV0IG1heFggPSAtIEluZmluaXR5O1xuXHRcdGxldCBtYXhZID0gLSBJbmZpbml0eTtcblx0XHRsZXQgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB4ID0gYXR0cmlidXRlLmdldFgoIGkgKTtcblx0XHRcdGNvbnN0IHkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0Y29uc3QgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVBvaW50cyggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xuXG5cdFx0Y29uc3QgaGFsZlNpemUgPSBfdmVjdG9yJGIuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdHRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTtcblx0XHR0aGlzLm1heC5jb3B5KCBjZW50ZXIgKS5hZGQoIGhhbGZTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU9iamVjdCggb2JqZWN0LCBwcmVjaXNlID0gZmFsc2UgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kQnlPYmplY3QoIG9iamVjdCwgcHJlY2lzZSApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlRW1wdHkoKSB7XG5cblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9IHRoaXMubWluLnogPSArIEluZmluaXR5O1xuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gdGhpcy5tYXgueiA9IC0gSW5maW5pdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aXNFbXB0eSgpIHtcblxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXG5cblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKSB8fCAoIHRoaXMubWF4LnogPCB0aGlzLm1pbi56ICk7XG5cblx0fVxuXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9XG5cblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH1cblxuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXhwYW5kQnlPYmplY3QoIG9iamVjdCwgcHJlY2lzZSA9IGZhbHNlICkge1xuXG5cdFx0Ly8gQ29tcHV0ZXMgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggb2YgYW4gb2JqZWN0IChpbmNsdWRpbmcgaXRzIGNoaWxkcmVuKSxcblx0XHQvLyBhY2NvdW50aW5nIGZvciBib3RoIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsIHdvcmxkIHRyYW5zZm9ybXNcblxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBwcmVjaXNlICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMgIT0gdW5kZWZpbmVkICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvc2l0aW9uLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdF92ZWN0b3IkYi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yJGIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfYm94JDMuY29weSggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKTtcblx0XHRcdFx0X2JveCQzLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dGhpcy51bmlvbiggX2JveCQzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeU9iamVjdCggY2hpbGRyZW5bIGkgXSwgcHJlY2lzZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSB8fFxuXHRcdFx0cG9pbnQueiA8IHRoaXMubWluLnogfHwgcG9pbnQueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fVxuXG5cdGNvbnRhaW5zQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55ICYmXG5cdFx0XHR0aGlzLm1pbi56IDw9IGJveC5taW4ueiAmJiBib3gubWF4LnogPD0gdGhpcy5tYXguejtcblxuXHR9XG5cblx0Z2V0UGFyYW1ldGVyKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55ICksXG5cdFx0XHQoIHBvaW50LnogLSB0aGlzLm1pbi56ICkgLyAoIHRoaXMubWF4LnogLSB0aGlzLm1pbi56IClcblx0XHQpO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA2IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9ucy5cblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdGJveC5tYXgueiA8IHRoaXMubWluLnogfHwgYm94Lm1pbi56ID4gdGhpcy5tYXgueiA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkge1xuXG5cdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHR0aGlzLmNsYW1wUG9pbnQoIHNwaGVyZS5jZW50ZXIsIF92ZWN0b3IkYiApO1xuXG5cdFx0Ly8gSWYgdGhhdCBwb2ludCBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgdGhlIEFBQkIgYW5kIHNwaGVyZSBpbnRlcnNlY3QuXG5cdFx0cmV0dXJuIF92ZWN0b3IkYi5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdC8vIFdlIGNvbXB1dGUgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZG90IHByb2R1Y3QgdmFsdWVzLiBJZiB0aG9zZSB2YWx1ZXNcblx0XHQvLyBhcmUgb24gdGhlIHNhbWUgc2lkZSAoYmFjayBvciBmcm9udCkgb2YgdGhlIHBsYW5lLCB0aGVuIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cblxuXHRcdGxldCBtaW4sIG1heDtcblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnggPiAwICkge1xuXG5cdFx0XHRtaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLng7XG5cdFx0XHRtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XG5cdFx0XHRtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLng7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBsYW5lLm5vcm1hbC55ID4gMCApIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnogPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICggbWluIDw9IC0gcGxhbmUuY29uc3RhbnQgJiYgbWF4ID49IC0gcGxhbmUuY29uc3RhbnQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1RyaWFuZ2xlKCB0cmlhbmdsZSApIHtcblxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbXB1dGUgYm94IGNlbnRlciBhbmQgZXh0ZW50c1xuXHRcdHRoaXMuZ2V0Q2VudGVyKCBfY2VudGVyICk7XG5cdFx0X2V4dGVudHMuc3ViVmVjdG9ycyggdGhpcy5tYXgsIF9jZW50ZXIgKTtcblxuXHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxuXHRcdF92MCQyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmEsIF9jZW50ZXIgKTtcblx0XHRfdjEkNy5zdWJWZWN0b3JzKCB0cmlhbmdsZS5iLCBfY2VudGVyICk7XG5cdFx0X3YyJDMuc3ViVmVjdG9ycyggdHJpYW5nbGUuYywgX2NlbnRlciApO1xuXG5cdFx0Ly8gY29tcHV0ZSBlZGdlIHZlY3RvcnMgZm9yIHRyaWFuZ2xlXG5cdFx0X2YwLnN1YlZlY3RvcnMoIF92MSQ3LCBfdjAkMiApO1xuXHRcdF9mMS5zdWJWZWN0b3JzKCBfdjIkMywgX3YxJDcgKTtcblx0XHRfZjIuc3ViVmVjdG9ycyggX3YwJDIsIF92MiQzICk7XG5cblx0XHQvLyB0ZXN0IGFnYWluc3QgYXhlcyB0aGF0IGFyZSBnaXZlbiBieSBjcm9zcyBwcm9kdWN0IGNvbWJpbmF0aW9ucyBvZiB0aGUgZWRnZXMgb2YgdGhlIHRyaWFuZ2xlIGFuZCB0aGUgZWRnZXMgb2YgdGhlIGFhYmJcblx0XHQvLyBtYWtlIGFuIGF4aXMgdGVzdGluZyBvZiBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSBhYWJiIGFnYWluc3QgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgdHJpYW5nbGUgPSA5IGF4aXMgb2Ygc2VwYXJhdGlvblxuXHRcdC8vIGF4aXNfaWogPSB1X2kgeCBmX2ogKHUwLCB1MSwgdTIgPSBmYWNlIG5vcm1hbHMgb2YgYWFiYiA9IHgseSx6IGF4ZXMgdmVjdG9ycyBzaW5jZSBhYWJiIGlzIGF4aXMgYWxpZ25lZClcblx0XHRsZXQgYXhlcyA9IFtcblx0XHRcdDAsIC0gX2YwLnosIF9mMC55LCAwLCAtIF9mMS56LCBfZjEueSwgMCwgLSBfZjIueiwgX2YyLnksXG5cdFx0XHRfZjAueiwgMCwgLSBfZjAueCwgX2YxLnosIDAsIC0gX2YxLngsIF9mMi56LCAwLCAtIF9mMi54LFxuXHRcdFx0LSBfZjAueSwgX2YwLngsIDAsIC0gX2YxLnksIF9mMS54LCAwLCAtIF9mMi55LCBfZjIueCwgMFxuXHRcdF07XG5cdFx0aWYgKCAhIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCQyLCBfdjEkNywgX3YyJDMsIF9leHRlbnRzICkgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYlxuXHRcdGF4ZXMgPSBbIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEgXTtcblx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcywgX3YwJDIsIF92MSQ3LCBfdjIkMywgX2V4dGVudHMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmluYWxseSB0ZXN0aW5nIHRoZSBmYWNlIG5vcm1hbCBvZiB0aGUgdHJpYW5nbGVcblx0XHQvLyB1c2UgYWxyZWFkeSBleGlzdGluZyB0cmlhbmdsZSBlZGdlIHZlY3RvcnMgaGVyZVxuXHRcdF90cmlhbmdsZU5vcm1hbC5jcm9zc1ZlY3RvcnMoIF9mMCwgX2YxICk7XG5cdFx0YXhlcyA9IFsgX3RyaWFuZ2xlTm9ybWFsLngsIF90cmlhbmdsZU5vcm1hbC55LCBfdHJpYW5nbGVOb3JtYWwueiBdO1xuXG5cdFx0cmV0dXJuIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCQyLCBfdjEkNywgX3YyJDMsIF9leHRlbnRzICk7XG5cblx0fVxuXG5cdGNsYW1wUG9pbnQoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0Y29uc3QgY2xhbXBlZFBvaW50ID0gX3ZlY3RvciRiLmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIoIHBvaW50ICkubGVuZ3RoKCk7XG5cblx0fVxuXG5cdGdldEJvdW5kaW5nU3BoZXJlKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xuXG5cdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggX3ZlY3RvciRiICkubGVuZ3RoKCkgKiAwLjU7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHRpbnRlcnNlY3QoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdC8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSByZXR1cm4gdGhpcztcblxuXHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XG5cdFx0X3BvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMFxuXHRcdF9wb2ludHNbIDEgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMDFcblx0XHRfcG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXG5cdFx0X3BvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMVxuXHRcdF9wb2ludHNbIDQgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDBcblx0XHRfcG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXG5cdFx0X3BvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMFxuXHRcdF9wb2ludHNbIDcgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMTFcblxuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyggX3BvaW50cyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyYW5zbGF0ZSggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xuXG5cdH1cblxufVxuXG5Cb3gzLnByb3RvdHlwZS5pc0JveDMgPSB0cnVlO1xuXG5jb25zdCBfcG9pbnRzID0gW1xuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKVxuXTtcblxuY29uc3QgX3ZlY3RvciRiID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfYm94JDMgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5cbi8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXG5cbmNvbnN0IF92MCQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YxJDcgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLy8gdHJpYW5nbGUgZWRnZSB2ZWN0b3JzXG5cbmNvbnN0IF9mMCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9mMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9mMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2NlbnRlciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9leHRlbnRzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RyaWFuZ2xlTm9ybWFsID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3Rlc3RBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBzYXRGb3JBeGVzKCBheGVzLCB2MCwgdjEsIHYyLCBleHRlbnRzICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgaiA9IGF4ZXMubGVuZ3RoIC0gMzsgaSA8PSBqOyBpICs9IDMgKSB7XG5cblx0XHRfdGVzdEF4aXMuZnJvbUFycmF5KCBheGVzLCBpICk7XG5cdFx0Ly8gcHJvamVjdCB0aGUgYWFiYiBvbnRvIHRoZSBzZXBlcmF0aW5nIGF4aXNcblx0XHRjb25zdCByID0gZXh0ZW50cy54ICogTWF0aC5hYnMoIF90ZXN0QXhpcy54ICkgKyBleHRlbnRzLnkgKiBNYXRoLmFicyggX3Rlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCBfdGVzdEF4aXMueiApO1xuXHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdGNvbnN0IHAwID0gdjAuZG90KCBfdGVzdEF4aXMgKTtcblx0XHRjb25zdCBwMSA9IHYxLmRvdCggX3Rlc3RBeGlzICk7XG5cdFx0Y29uc3QgcDIgPSB2Mi5kb3QoIF90ZXN0QXhpcyApO1xuXHRcdC8vIGFjdHVhbCB0ZXN0LCBiYXNpY2FsbHkgc2VlIGlmIGVpdGhlciBvZiB0aGUgbW9zdCBleHRyZW1lIG9mIHRoZSB0cmlhbmdsZSBwb2ludHMgaW50ZXJzZWN0cyByXG5cdFx0aWYgKCBNYXRoLm1heCggLSBNYXRoLm1heCggcDAsIHAxLCBwMiApLCBNYXRoLm1pbiggcDAsIHAxLCBwMiApICkgPiByICkge1xuXG5cdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXG5cdFx0XHQvLyB0aGUgYXhpcyBpcyBzZXBlcmF0aW5nIGFuZCB3ZSBjYW4gZXhpdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5jb25zdCBfYm94JDIgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfdjEkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90b0ZhcnRoZXN0UG9pbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdG9Qb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgU3BoZXJlIHtcblxuXHRjb25zdHJ1Y3RvciggY2VudGVyID0gbmV3IFZlY3RvcjMoKSwgcmFkaXVzID0gLSAxICkge1xuXG5cdFx0dGhpcy5jZW50ZXIgPSBjZW50ZXI7XG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0fVxuXG5cdHNldCggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMsIG9wdGlvbmFsQ2VudGVyICkge1xuXG5cdFx0Y29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNlbnRlci5jb3B5KCBvcHRpb25hbENlbnRlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2JveCQyLnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHRsZXQgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnRzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc3BoZXJlICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuY29weSggc3BoZXJlLmNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gc3BoZXJlLnJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpc0VtcHR5KCkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5yYWRpdXMgPCAwICk7XG5cblx0fVxuXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdHRoaXMucmFkaXVzID0gLSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiAoIHBvaW50LmRpc3RhbmNlVG8oIHRoaXMuY2VudGVyICkgLSB0aGlzLnJhZGl1cyApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zdCByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHJhZGl1c1N1bSAqIHJhZGl1c1N1bSApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNTcGhlcmUoIHRoaXMgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLmNlbnRlciApICkgPD0gdGhpcy5yYWRpdXM7XG5cblx0fVxuXG5cdGNsYW1wUG9pbnQoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBkZWx0YUxlbmd0aFNxID0gdGhpcy5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHR0YXJnZXQuY29weSggcG9pbnQgKTtcblxuXHRcdGlmICggZGVsdGFMZW5ndGhTcSA+ICggdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cyApICkge1xuXG5cdFx0XHR0YXJnZXQuc3ViKCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0dGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCB0aGlzLnJhZGl1cyApLmFkZCggdGhpcy5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldEJvdW5kaW5nQm94KCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xuXG5cdFx0XHQvLyBFbXB0eSBzcGhlcmUgcHJvZHVjZXMgZW1wdHkgYm91bmRpbmcgYm94XG5cdFx0XHR0YXJnZXQubWFrZUVtcHR5KCk7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LnNldCggdGhpcy5jZW50ZXIsIHRoaXMuY2VudGVyICk7XG5cdFx0dGFyZ2V0LmV4cGFuZEJ5U2NhbGFyKCB0aGlzLnJhZGl1cyApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXHRcdHRoaXMucmFkaXVzID0gdGhpcy5yYWRpdXMgKiBtYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXhwYW5kQnlQb2ludCggcG9pbnQgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWovTWF0aEdlb0xpYi9ibG9iLzI5NDBiOTliOTljZmU1NzVkZDQ1MTAzZWYyMGY0MDE5ZGVlMTViNTQvc3JjL0dlb21ldHJ5L1NwaGVyZS5jcHAjTDY0OS1MNjcxXG5cblx0XHRfdG9Qb2ludC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5jZW50ZXIgKTtcblxuXHRcdGNvbnN0IGxlbmd0aFNxID0gX3RvUG9pbnQubGVuZ3RoU3EoKTtcblxuXHRcdGlmICggbGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHtcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KCBsZW5ndGhTcSApO1xuXHRcdFx0Y29uc3QgbWlzc2luZ1JhZGl1c0hhbGYgPSAoIGxlbmd0aCAtIHRoaXMucmFkaXVzICkgKiAwLjU7XG5cblx0XHRcdC8vIE51ZGdlIHRoaXMgc3BoZXJlIHRvd2FyZHMgdGhlIHRhcmdldCBwb2ludC4gQWRkIGhhbGYgdGhlIG1pc3NpbmcgZGlzdGFuY2UgdG8gcmFkaXVzLFxuXHRcdFx0Ly8gYW5kIHRoZSBvdGhlciBoYWxmIHRvIHBvc2l0aW9uLiBUaGlzIGdpdmVzIGEgdGlnaHRlciBlbmNsb3N1cmUsIGluc3RlYWQgb2YgaWZcblx0XHRcdC8vIHRoZSB3aG9sZSBtaXNzaW5nIGRpc3RhbmNlIHdlcmUganVzdCBhZGRlZCB0byByYWRpdXMuXG5cblx0XHRcdHRoaXMuY2VudGVyLmFkZCggX3RvUG9pbnQubXVsdGlwbHlTY2FsYXIoIG1pc3NpbmdSYWRpdXNIYWxmIC8gbGVuZ3RoICkgKTtcblx0XHRcdHRoaXMucmFkaXVzICs9IG1pc3NpbmdSYWRpdXNIYWxmO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBzcGhlcmUgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWovTWF0aEdlb0xpYi9ibG9iLzI5NDBiOTliOTljZmU1NzVkZDQ1MTAzZWYyMGY0MDE5ZGVlMTViNTQvc3JjL0dlb21ldHJ5L1NwaGVyZS5jcHAjTDc1OS1MNzY5XG5cblx0XHQvLyBUbyBlbmNsb3NlIGFub3RoZXIgc3BoZXJlIGludG8gdGhpcyBzcGhlcmUsIHdlIG9ubHkgbmVlZCB0byBlbmNsb3NlIHR3byBwb2ludHM6XG5cdFx0Ly8gMSkgRW5jbG9zZSB0aGUgZmFydGhlc3QgcG9pbnQgb24gdGhlIG90aGVyIHNwaGVyZSBpbnRvIHRoaXMgc3BoZXJlLlxuXHRcdC8vIDIpIEVuY2xvc2UgdGhlIG9wcG9zaXRlIHBvaW50IG9mIHRoZSBmYXJ0aGVzdCBwb2ludCBpbnRvIHRoaXMgc3BoZXJlLlxuXG5cdFx0IGlmICggdGhpcy5jZW50ZXIuZXF1YWxzKCBzcGhlcmUuY2VudGVyICkgPT09IHRydWUgKSB7XG5cblx0XHRcdCBfdG9GYXJ0aGVzdFBvaW50LnNldCggMCwgMCwgMSApLm11bHRpcGx5U2NhbGFyKCBzcGhlcmUucmFkaXVzICk7XG5cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90b0ZhcnRoZXN0UG9pbnQuc3ViVmVjdG9ycyggc3BoZXJlLmNlbnRlciwgdGhpcy5jZW50ZXIgKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggc3BoZXJlLnJhZGl1cyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdjEkNi5jb3B5KCBzcGhlcmUuY2VudGVyICkuYWRkKCBfdG9GYXJ0aGVzdFBvaW50ICkgKTtcblx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MSQ2LmNvcHkoIHNwaGVyZS5jZW50ZXIgKS5zdWIoIF90b0ZhcnRoZXN0UG9pbnQgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZXF1YWxzKCB0aGlzLmNlbnRlciApICYmICggc3BoZXJlLnJhZGl1cyA9PT0gdGhpcy5yYWRpdXMgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkYSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9zZWdDZW50ZXIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc2VnRGlyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2RpZmYgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9lZGdlMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9lZGdlMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ub3JtYWwkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgUmF5IHtcblxuXHRjb25zdHJ1Y3Rvciggb3JpZ2luID0gbmV3IFZlY3RvcjMoKSwgZGlyZWN0aW9uID0gbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApICkge1xuXG5cdFx0dGhpcy5vcmlnaW4gPSBvcmlnaW47XG5cdFx0dGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cblx0fVxuXG5cdHNldCggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCBvcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCBkaXJlY3Rpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCByYXkgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCByYXkub3JpZ2luICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggcmF5LmRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGF0KCB0LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fVxuXG5cdGxvb2tBdCggdiApIHtcblxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHYgKS5zdWIoIHRoaXMub3JpZ2luICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVjYXN0KCB0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggdGhpcy5hdCggdCwgX3ZlY3RvciRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0dGFyZ2V0LnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0Y29uc3QgZGlyZWN0aW9uRGlzdGFuY2UgPSB0YXJnZXQuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IGRpcmVjdGlvbkRpc3RhbmNlID0gX3ZlY3RvciRhLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdC8vIHBvaW50IGJlaGluZCB0aGUgcmF5XG5cblx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0fVxuXG5cdFx0X3ZlY3RvciRhLmNvcHkoIHRoaXMuZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIGRpcmVjdGlvbkRpc3RhbmNlICkuYWRkKCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0cmV0dXJuIF92ZWN0b3IkYS5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wbWpvbmlhay9HZW9tZXRyaWNUb29scy9ibG9iL21hc3Rlci9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50Lmhcblx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXG5cdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XG5cblx0XHRfc2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xuXHRcdF9kaWZmLmNvcHkoIHRoaXMub3JpZ2luICkuc3ViKCBfc2VnQ2VudGVyICk7XG5cblx0XHRjb25zdCBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKCB2MSApICogMC41O1xuXHRcdGNvbnN0IGEwMSA9IC0gdGhpcy5kaXJlY3Rpb24uZG90KCBfc2VnRGlyICk7XG5cdFx0Y29uc3QgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgYjEgPSAtIF9kaWZmLmRvdCggX3NlZ0RpciApO1xuXHRcdGNvbnN0IGMgPSBfZGlmZi5sZW5ndGhTcSgpO1xuXHRcdGNvbnN0IGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7XG5cdFx0bGV0IHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xuXG5cdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHQvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuXG5cblx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcblx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcblxuXHRcdFx0aWYgKCBzMCA+PSAwICkge1xuXG5cdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDBcblx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0Y29uc3QgaW52RGV0ID0gMSAvIGRldDtcblx0XHRcdFx0XHRcdHMwICo9IGludkRldDtcblx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMVxuXG5cdFx0XHRcdFx0XHRzMSA9IHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiA1XG5cblx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHMxIDw9IC0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDRcblxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCAtIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gM1xuXG5cdFx0XHRcdFx0czAgPSAwO1xuXHRcdFx0XHRcdHMxID0gTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gMlxuXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLlxuXG5cdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XG5cdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblJheS5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBzMCApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdGlmICggb3B0aW9uYWxQb2ludE9uU2VnbWVudCApIHtcblxuXHRcdFx0b3B0aW9uYWxQb2ludE9uU2VnbWVudC5jb3B5KCBfc2VnRGlyICkubXVsdGlwbHlTY2FsYXIoIHMxICkuYWRkKCBfc2VnQ2VudGVyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3FyRGlzdDtcblxuXHR9XG5cblx0aW50ZXJzZWN0U3BoZXJlKCBzcGhlcmUsIHRhcmdldCApIHtcblxuXHRcdF92ZWN0b3IkYS5zdWJWZWN0b3JzKCBzcGhlcmUuY2VudGVyLCB0aGlzLm9yaWdpbiApO1xuXHRcdGNvbnN0IHRjYSA9IF92ZWN0b3IkYS5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgZDIgPSBfdmVjdG9yJGEuZG90KCBfdmVjdG9yJGEgKSAtIHRjYSAqIHRjYTtcblx0XHRjb25zdCByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRpZiAoIGQyID4gcmFkaXVzMiApIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgdGhjID0gTWF0aC5zcXJ0KCByYWRpdXMyIC0gZDIgKTtcblxuXHRcdC8vIHQwID0gZmlyc3QgaW50ZXJzZWN0IHBvaW50IC0gZW50cmFuY2Ugb24gZnJvbnQgb2Ygc3BoZXJlXG5cdFx0Y29uc3QgdDAgPSB0Y2EgLSB0aGM7XG5cblx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXG5cdFx0Y29uc3QgdDEgPSB0Y2EgKyB0aGM7XG5cblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiBib3RoIHQwIGFuZCB0MSBhcmUgYmVoaW5kIHRoZSByYXkgLSBpZiBzbywgcmV0dXJuIG51bGxcblx0XHRpZiAoIHQwIDwgMCAmJiB0MSA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIHRlc3QgdG8gc2VlIGlmIHQwIGlzIGJlaGluZCB0aGUgcmF5OlxuXHRcdC8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSxcblx0XHQvLyBpbiBvcmRlciB0byBhbHdheXMgcmV0dXJuIGFuIGludGVyc2VjdCBwb2ludCB0aGF0IGlzIGluIGZyb250IG9mIHRoZSByYXkuXG5cdFx0aWYgKCB0MCA8IDAgKSByZXR1cm4gdGhpcy5hdCggdDEsIHRhcmdldCApO1xuXG5cdFx0Ly8gZWxzZSB0MCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LCBzbyByZXR1cm4gdGhlIGZpcnN0IGNvbGxpc2lvbiBwb2ludCBzY2FsZWQgYnkgdDBcblx0XHRyZXR1cm4gdGhpcy5hdCggdDAsIHRhcmdldCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVNxVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWRcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ID0gLSAoIHRoaXMub3JpZ2luLmRvdCggcGxhbmUubm9ybWFsICkgKyBwbGFuZS5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxuXG5cdFx0cmV0dXJuIHQgPj0gMCA/IHQgOiBudWxsO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RQbGFuZSggcGxhbmUsIHRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmRpc3RhbmNlVG9QbGFuZSggcGxhbmUgKTtcblxuXHRcdGlmICggdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5hdCggdCwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7XG5cblx0XHQvLyBjaGVjayBpZiB0aGUgcmF5IGxpZXMgb24gdGhlIHBsYW5lIGZpcnN0XG5cblx0XHRjb25zdCBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdGlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGludGVyc2VjdEJveCggYm94LCB0YXJnZXQgKSB7XG5cblx0XHRsZXQgdG1pbiwgdG1heCwgdHltaW4sIHR5bWF4LCB0em1pbiwgdHptYXg7XG5cblx0XHRjb25zdCBpbnZkaXJ4ID0gMSAvIHRoaXMuZGlyZWN0aW9uLngsXG5cdFx0XHRpbnZkaXJ5ID0gMSAvIHRoaXMuZGlyZWN0aW9uLnksXG5cdFx0XHRpbnZkaXJ6ID0gMSAvIHRoaXMuZGlyZWN0aW9uLno7XG5cblx0XHRjb25zdCBvcmlnaW4gPSB0aGlzLm9yaWdpbjtcblxuXHRcdGlmICggaW52ZGlyeCA+PSAwICkge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dG1pbiA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cdFx0XHR0bWF4ID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblxuXHRcdH1cblxuXHRcdGlmICggaW52ZGlyeSA+PSAwICkge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9XG5cblx0XHRpZiAoICggdG1pbiA+IHR5bWF4ICkgfHwgKCB0eW1pbiA+IHRtYXggKSApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gVGhlc2UgbGluZXMgYWxzbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdG1pbiBvciB0bWF4IGlzIE5hTlxuXHRcdC8vIChyZXN1bHQgb2YgMCAqIEluZmluaXR5KS4geCAhPT0geCByZXR1cm5zIHRydWUgaWYgeCBpcyBOYU5cblxuXHRcdGlmICggdHltaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHltaW47XG5cblx0XHRpZiAoIHR5bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR5bWF4O1xuXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHRpZiAoIHR6bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgdG1pbiA9IHR6bWluO1xuXG5cdFx0aWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHRtYXggPSB0em1heDtcblxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcblxuXHRcdGlmICggdG1heCA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLmF0KCB0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdEJveCggYm94LCBfdmVjdG9yJGEgKSAhPT0gbnVsbDtcblxuXHR9XG5cblx0aW50ZXJzZWN0VHJpYW5nbGUoIGEsIGIsIGMsIGJhY2tmYWNlQ3VsbGluZywgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gQ29tcHV0ZSB0aGUgb2Zmc2V0IG9yaWdpbiwgZWRnZXMsIGFuZCBub3JtYWwuXG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wbWpvbmlhay9HZW9tZXRyaWNUb29scy9ibG9iL21hc3Rlci9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZUludHJSYXkzVHJpYW5nbGUzLmhcblxuXHRcdF9lZGdlMS5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X2VkZ2UyLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRfbm9ybWFsJDEuY3Jvc3NWZWN0b3JzKCBfZWRnZTEsIF9lZGdlMiApO1xuXG5cdFx0Ly8gU29sdmUgUSArIHQqRCA9IGIxKkUxICsgYjIqRTIgKFEgPSBrRGlmZiwgRCA9IHJheSBkaXJlY3Rpb24sXG5cdFx0Ly8gRTEgPSBrRWRnZTEsIEUyID0ga0VkZ2UyLCBOID0gQ3Jvc3MoRTEsRTIpKSBieVxuXHRcdC8vICAgfERvdChELE4pfCpiMSA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKFEsRTIpKVxuXHRcdC8vICAgfERvdChELE4pfCpiMiA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKEUxLFEpKVxuXHRcdC8vICAgfERvdChELE4pfCp0ID0gLXNpZ24oRG90KEQsTikpKkRvdChRLE4pXG5cdFx0bGV0IERkTiA9IHRoaXMuZGlyZWN0aW9uLmRvdCggX25vcm1hbCQxICk7XG5cdFx0bGV0IHNpZ247XG5cblx0XHRpZiAoIERkTiA+IDAgKSB7XG5cblx0XHRcdGlmICggYmFja2ZhY2VDdWxsaW5nICkgcmV0dXJuIG51bGw7XG5cdFx0XHRzaWduID0gMTtcblxuXHRcdH0gZWxzZSBpZiAoIERkTiA8IDAgKSB7XG5cblx0XHRcdHNpZ24gPSAtIDE7XG5cdFx0XHREZE4gPSAtIERkTjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0X2RpZmYuc3ViVmVjdG9ycyggdGhpcy5vcmlnaW4sIGEgKTtcblx0XHRjb25zdCBEZFF4RTIgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTIuY3Jvc3NWZWN0b3JzKCBfZGlmZiwgX2VkZ2UyICkgKTtcblxuXHRcdC8vIGIxIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0aWYgKCBEZFF4RTIgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IERkRTF4USA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIF9lZGdlMS5jcm9zcyggX2RpZmYgKSApO1xuXG5cdFx0Ly8gYjIgPCAwLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIERkRTF4USA8IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYjErYjIgPiAxLCBubyBpbnRlcnNlY3Rpb25cblx0XHRpZiAoIERkUXhFMiArIERkRTF4USA+IERkTiApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBMaW5lIGludGVyc2VjdHMgdHJpYW5nbGUsIGNoZWNrIGlmIHJheSBkb2VzLlxuXHRcdGNvbnN0IFFkTiA9IC0gc2lnbiAqIF9kaWZmLmRvdCggX25vcm1hbCQxICk7XG5cblx0XHQvLyB0IDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0aWYgKCBRZE4gPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdC8vIFJheSBpbnRlcnNlY3RzIHRyaWFuZ2xlLlxuXHRcdHJldHVybiB0aGlzLmF0KCBRZE4gLyBEZE4sIHRhcmdldCApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeDQgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoIG1hdHJpeDQgKTtcblx0XHR0aGlzLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeDQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIHJheSApIHtcblxuXHRcdHJldHVybiByYXkub3JpZ2luLmVxdWFscyggdGhpcy5vcmlnaW4gKSAmJiByYXkuZGlyZWN0aW9uLmVxdWFscyggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIE1hdHJpeDQge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0XTtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiB0aGUgY29uc3RydWN0b3Igbm8gbG9uZ2VyIHJlYWRzIGFyZ3VtZW50cy4gdXNlIC5zZXQoKSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0KCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcblx0XHR0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDtcblx0XHR0ZVsgMiBdID0gbjMxOyB0ZVsgNiBdID0gbjMyOyB0ZVsgMTAgXSA9IG4zMzsgdGVbIDE0IF0gPSBuMzQ7XG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9XG5cblx0Y29weSggbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdOyB0ZVsgMyBdID0gbWVbIDMgXTtcblx0XHR0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTtcblx0XHR0ZVsgOCBdID0gbWVbIDggXTsgdGVbIDkgXSA9IG1lWyA5IF07IHRlWyAxMCBdID0gbWVbIDEwIF07IHRlWyAxMSBdID0gbWVbIDExIF07XG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTsgdGVbIDEzIF0gPSBtZVsgMTMgXTsgdGVbIDE0IF0gPSBtZVsgMTQgXTsgdGVbIDE1IF0gPSBtZVsgMTUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5UG9zaXRpb24oIG0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07XG5cdFx0dGVbIDEzIF0gPSBtZVsgMTMgXTtcblx0XHR0ZVsgMTQgXSA9IG1lWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyAzIF0sIG1lWyA2IF0sIDAsXG5cdFx0XHRtZVsgMSBdLCBtZVsgNCBdLCBtZVsgNyBdLCAwLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDUgXSwgbWVbIDggXSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMCApO1xuXHRcdHlBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZUJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHR4QXhpcy54LCB5QXhpcy54LCB6QXhpcy54LCAwLFxuXHRcdFx0eEF4aXMueSwgeUF4aXMueSwgekF4aXMueSwgMCxcblx0XHRcdHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHRyYWN0Um90YXRpb24oIG0gKSB7XG5cblx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHRjb25zdCBzY2FsZVggPSAxIC8gX3YxJDUuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHNjYWxlWSA9IDEgLyBfdjEkNS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc2NhbGVaID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdICogc2NhbGVYO1xuXHRcdHRlWyAxIF0gPSBtZVsgMSBdICogc2NhbGVYO1xuXHRcdHRlWyAyIF0gPSBtZVsgMiBdICogc2NhbGVYO1xuXHRcdHRlWyAzIF0gPSAwO1xuXG5cdFx0dGVbIDQgXSA9IG1lWyA0IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDUgXSA9IG1lWyA1IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDYgXSA9IG1lWyA2IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjtcblx0XHR0ZVsgOSBdID0gbWVbIDkgXSAqIHNjYWxlWjtcblx0XHR0ZVsgMTAgXSA9IG1lWyAxMCBdICogc2NhbGVaO1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25Gcm9tRXVsZXIoIGV1bGVyICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLm1ha2VSb3RhdGlvbkZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCB4ID0gZXVsZXIueCwgeSA9IGV1bGVyLnksIHogPSBldWxlci56O1xuXHRcdGNvbnN0IGEgPSBNYXRoLmNvcyggeCApLCBiID0gTWF0aC5zaW4oIHggKTtcblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHkgKSwgZCA9IE1hdGguc2luKCB5ICk7XG5cdFx0Y29uc3QgZSA9IE1hdGguY29zKCB6ICksIGYgPSBNYXRoLnNpbiggeiApO1xuXG5cdFx0aWYgKCBldWxlci5vcmRlciA9PT0gJ1hZWicgKSB7XG5cblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhZiArIGJlICogZDtcblx0XHRcdHRlWyA1IF0gPSBhZSAtIGJmICogZDtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmYgLSBhZSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYmUgKyBhZiAqIGQ7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHRjb25zdCBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gY2UgKyBkZiAqIGI7XG5cdFx0XHR0ZVsgNCBdID0gZGUgKiBiIC0gY2Y7XG5cdFx0XHR0ZVsgOCBdID0gYSAqIGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhICogZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGI7XG5cblx0XHRcdHRlWyAyIF0gPSBjZiAqIGIgLSBkZTtcblx0XHRcdHRlWyA2IF0gPSBkZiArIGNlICogYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pYWScgKSB7XG5cblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSAtIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSAtIGEgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGRlICsgY2YgKiBiO1xuXG5cdFx0XHR0ZVsgMSBdID0gY2YgKyBkZSAqIGI7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gZGYgLSBjZSAqIGI7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGEgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHRjb25zdCBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmUgKiBkIC0gYWY7XG5cdFx0XHR0ZVsgOCBdID0gYWUgKiBkICsgYmY7XG5cblx0XHRcdHRlWyAxIF0gPSBjICogZjtcblx0XHRcdHRlWyA1IF0gPSBiZiAqIGQgKyBhZTtcblx0XHRcdHRlWyA5IF0gPSBhZiAqIGQgLSBiZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZDtcblx0XHRcdHRlWyA2IF0gPSBiICogYztcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdGNvbnN0IGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZCAtIGFjICogZjtcblx0XHRcdHRlWyA4IF0gPSBiYyAqIGYgKyBhZDtcblxuXHRcdFx0dGVbIDEgXSA9IGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZCAqIGU7XG5cdFx0XHR0ZVsgNiBdID0gYWQgKiBmICsgYmM7XG5cdFx0XHR0ZVsgMTAgXSA9IGFjIC0gYmQgKiBmO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHRjb25zdCBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBmO1xuXHRcdFx0dGVbIDggXSA9IGQgKiBlO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWMgKiBmICsgYmQ7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gYWQgKiBmIC0gYmM7XG5cblx0XHRcdHRlWyAyIF0gPSBiYyAqIGYgLSBhZDtcblx0XHRcdHRlWyA2IF0gPSBiICogZTtcblx0XHRcdHRlWyAxMCBdID0gYmQgKiBmICsgYWM7XG5cblx0XHR9XG5cblx0XHQvLyBib3R0b20gcm93XG5cdFx0dGVbIDMgXSA9IDA7XG5cdFx0dGVbIDcgXSA9IDA7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0Ly8gbGFzdCBjb2x1bW5cblx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAxNCBdID0gMDtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb21wb3NlKCBfemVybywgcSwgX29uZSApO1xuXG5cdH1cblxuXHRsb29rQXQoIGV5ZSwgdGFyZ2V0LCB1cCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdF96LnN1YlZlY3RvcnMoIGV5ZSwgdGFyZ2V0ICk7XG5cblx0XHRpZiAoIF96Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuXG5cdFx0XHRfei56ID0gMTtcblxuXHRcdH1cblxuXHRcdF96Lm5vcm1hbGl6ZSgpO1xuXHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHRpZiAoIF94Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdC8vIHVwIGFuZCB6IGFyZSBwYXJhbGxlbFxuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB1cC56ICkgPT09IDEgKSB7XG5cblx0XHRcdFx0X3oueCArPSAwLjAwMDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3oueiArPSAwLjAwMDE7XG5cblx0XHRcdH1cblxuXHRcdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0XHRfeC5jcm9zc1ZlY3RvcnMoIHVwLCBfeiApO1xuXG5cdFx0fVxuXG5cdFx0X3gubm9ybWFsaXplKCk7XG5cdFx0X3kuY3Jvc3NWZWN0b3JzKCBfeiwgX3ggKTtcblxuXHRcdHRlWyAwIF0gPSBfeC54OyB0ZVsgNCBdID0gX3kueDsgdGVbIDggXSA9IF96Lng7XG5cdFx0dGVbIDEgXSA9IF94Lnk7IHRlWyA1IF0gPSBfeS55OyB0ZVsgOSBdID0gX3oueTtcblx0XHR0ZVsgMiBdID0gX3guejsgdGVbIDYgXSA9IF95Lno7IHRlWyAxMCBdID0gX3ouejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggbSwgbiApIHtcblxuXHRcdGlmICggbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseU1hdHJpY2VzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCBuICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcblx0XHRjb25zdCBhMjEgPSBhZVsgMSBdLCBhMjIgPSBhZVsgNSBdLCBhMjMgPSBhZVsgOSBdLCBhMjQgPSBhZVsgMTMgXTtcblx0XHRjb25zdCBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNiBdLCBhMzMgPSBhZVsgMTAgXSwgYTM0ID0gYWVbIDE0IF07XG5cdFx0Y29uc3QgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xuXG5cdFx0Y29uc3QgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDQgXSwgYjEzID0gYmVbIDggXSwgYjE0ID0gYmVbIDEyIF07XG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDUgXSwgYjIzID0gYmVbIDkgXSwgYjI0ID0gYmVbIDEzIF07XG5cdFx0Y29uc3QgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDYgXSwgYjMzID0gYmVbIDEwIF0sIGIzNCA9IGJlWyAxNCBdO1xuXHRcdGNvbnN0IGI0MSA9IGJlWyAzIF0sIGI0MiA9IGJlWyA3IF0sIGI0MyA9IGJlWyAxMSBdLCBiNDQgPSBiZVsgMTUgXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEgKyBhMTQgKiBiNDE7XG5cdFx0dGVbIDQgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMiArIGExNCAqIGI0Mjtcblx0XHR0ZVsgOCBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzICsgYTE0ICogYjQzO1xuXHRcdHRlWyAxMiBdID0gYTExICogYjE0ICsgYTEyICogYjI0ICsgYTEzICogYjM0ICsgYTE0ICogYjQ0O1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTtcblx0XHR0ZVsgNSBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyICsgYTI0ICogYjQyO1xuXHRcdHRlWyA5IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMgKyBhMjQgKiBiNDM7XG5cdFx0dGVbIDEzIF0gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxICsgYTM0ICogYjQxO1xuXHRcdHRlWyA2IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzIgKyBhMzQgKiBiNDI7XG5cdFx0dGVbIDEwIF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzMgKyBhMzQgKiBiNDM7XG5cdFx0dGVbIDE0IF0gPSBhMzEgKiBiMTQgKyBhMzIgKiBiMjQgKyBhMzMgKiBiMzQgKyBhMzQgKiBiNDQ7XG5cblx0XHR0ZVsgMyBdID0gYTQxICogYjExICsgYTQyICogYjIxICsgYTQzICogYjMxICsgYTQ0ICogYjQxO1xuXHRcdHRlWyA3IF0gPSBhNDEgKiBiMTIgKyBhNDIgKiBiMjIgKyBhNDMgKiBiMzIgKyBhNDQgKiBiNDI7XG5cdFx0dGVbIDExIF0gPSBhNDEgKiBiMTMgKyBhNDIgKiBiMjMgKyBhNDMgKiBiMzMgKyBhNDQgKiBiNDM7XG5cdFx0dGVbIDE1IF0gPSBhNDEgKiBiMTQgKyBhNDIgKiBiMjQgKyBhNDMgKiBiMzQgKyBhNDQgKiBiNDQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHMgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNiBdICo9IHM7IHRlWyAxMCBdICo9IHM7IHRlWyAxNCBdICo9IHM7XG5cdFx0dGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcblx0XHRjb25zdCBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTtcblx0XHRjb25zdCBuMzEgPSB0ZVsgMiBdLCBuMzIgPSB0ZVsgNiBdLCBuMzMgPSB0ZVsgMTAgXSwgbjM0ID0gdGVbIDE0IF07XG5cdFx0Y29uc3QgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHRoaXMgbW9yZSBlZmZpY2llbnRcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcblxuXHRcdHJldHVybiAoXG5cdFx0XHRuNDEgKiAoXG5cdFx0XHRcdCsgbjE0ICogbjIzICogbjMyXG5cdFx0XHRcdCAtIG4xMyAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcblx0XHRcdCkgK1xuXHRcdFx0bjQyICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxuXHRcdFx0XHQgLSBuMTEgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjE0ICogbjIxICogbjMzXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTMgKiBuMjQgKiBuMzFcblx0XHRcdFx0IC0gbjE0ICogbjIzICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40MyAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xNCAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgKyBuMTIgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMiAqIG4yNCAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDQgKiAoXG5cdFx0XHRcdC0gbjEzICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMSAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIxICogbjMyXG5cdFx0XHRcdCAtIG4xMiAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcblx0XHRcdClcblxuXHRcdCk7XG5cblx0fVxuXG5cdHRyYW5zcG9zZSgpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRsZXQgdG1wO1xuXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDYgXTsgdGVbIDYgXSA9IHRlWyA5IF07IHRlWyA5IF0gPSB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFBvc2l0aW9uKCB4LCB5LCB6ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4Lng7XG5cdFx0XHR0ZVsgMTMgXSA9IHgueTtcblx0XHRcdHRlWyAxNCBdID0geC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4O1xuXHRcdFx0dGVbIDEzIF0gPSB5O1xuXHRcdFx0dGVbIDE0IF0gPSB6O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGludmVydCgpIHtcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSwgbjQxID0gdGVbIDMgXSxcblx0XHRcdG4xMiA9IHRlWyA0IF0sIG4yMiA9IHRlWyA1IF0sIG4zMiA9IHRlWyA2IF0sIG40MiA9IHRlWyA3IF0sXG5cdFx0XHRuMTMgPSB0ZVsgOCBdLCBuMjMgPSB0ZVsgOSBdLCBuMzMgPSB0ZVsgMTAgXSwgbjQzID0gdGVbIDExIF0sXG5cdFx0XHRuMTQgPSB0ZVsgMTIgXSwgbjI0ID0gdGVbIDEzIF0sIG4zNCA9IHRlWyAxNCBdLCBuNDQgPSB0ZVsgMTUgXSxcblxuXHRcdFx0dDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LFxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxuXHRcdFx0dDEzID0gbjEzICogbjI0ICogbjQyIC0gbjE0ICogbjIzICogbjQyICsgbjE0ICogbjIyICogbjQzIC0gbjEyICogbjI0ICogbjQzIC0gbjEzICogbjIyICogbjQ0ICsgbjEyICogbjIzICogbjQ0LFxuXHRcdFx0dDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0O1xuXG5cdFx0Y29uc3QgZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzICsgbjQxICogdDE0O1xuXG5cdFx0aWYgKCBkZXQgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgKTtcblxuXHRcdGNvbnN0IGRldEludiA9IDEgLyBkZXQ7XG5cblx0XHR0ZVsgMCBdID0gdDExICogZGV0SW52O1xuXHRcdHRlWyAxIF0gPSAoIG4yNCAqIG4zMyAqIG40MSAtIG4yMyAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMSAqIG40MyArIG4yMSAqIG4zNCAqIG40MyArIG4yMyAqIG4zMSAqIG40NCAtIG4yMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAyIF0gPSAoIG4yMiAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMiAqIG40MSArIG4yNCAqIG4zMSAqIG40MiAtIG4yMSAqIG4zNCAqIG40MiAtIG4yMiAqIG4zMSAqIG40NCArIG4yMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAzIF0gPSAoIG4yMyAqIG4zMiAqIG40MSAtIG4yMiAqIG4zMyAqIG40MSAtIG4yMyAqIG4zMSAqIG40MiArIG4yMSAqIG4zMyAqIG40MiArIG4yMiAqIG4zMSAqIG40MyAtIG4yMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDQgXSA9IHQxMiAqIGRldEludjtcblx0XHR0ZVsgNSBdID0gKCBuMTMgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzMgKiBuNDEgKyBuMTQgKiBuMzEgKiBuNDMgLSBuMTEgKiBuMzQgKiBuNDMgLSBuMTMgKiBuMzEgKiBuNDQgKyBuMTEgKiBuMzMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgNiBdID0gKCBuMTQgKiBuMzIgKiBuNDEgLSBuMTIgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzEgKiBuNDIgKyBuMTEgKiBuMzQgKiBuNDIgKyBuMTIgKiBuMzEgKiBuNDQgLSBuMTEgKiBuMzIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMTIgKiBuMzMgKiBuNDEgLSBuMTMgKiBuMzIgKiBuNDEgKyBuMTMgKiBuMzEgKiBuNDIgLSBuMTEgKiBuMzMgKiBuNDIgLSBuMTIgKiBuMzEgKiBuNDMgKyBuMTEgKiBuMzIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyA4IF0gPSB0MTMgKiBkZXRJbnY7XG5cdFx0dGVbIDkgXSA9ICggbjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDEwIF0gPSAoIG4xMiAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMiAqIG40MSArIG4xNCAqIG4yMSAqIG40MiAtIG4xMSAqIG4yNCAqIG40MiAtIG4xMiAqIG4yMSAqIG40NCArIG4xMSAqIG4yMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAxMSBdID0gKCBuMTMgKiBuMjIgKiBuNDEgLSBuMTIgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjEgKiBuNDIgKyBuMTEgKiBuMjMgKiBuNDIgKyBuMTIgKiBuMjEgKiBuNDMgLSBuMTEgKiBuMjIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyAxMiBdID0gdDE0ICogZGV0SW52O1xuXHRcdHRlWyAxMyBdID0gKCBuMTMgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjMgKiBuMzEgKyBuMTQgKiBuMjEgKiBuMzMgLSBuMTEgKiBuMjQgKiBuMzMgLSBuMTMgKiBuMjEgKiBuMzQgKyBuMTEgKiBuMjMgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTQgXSA9ICggbjE0ICogbjIyICogbjMxIC0gbjEyICogbjI0ICogbjMxIC0gbjE0ICogbjIxICogbjMyICsgbjExICogbjI0ICogbjMyICsgbjEyICogbjIxICogbjM0IC0gbjExICogbjIyICogbjM0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDE1IF0gPSAoIG4xMiAqIG4yMyAqIG4zMSAtIG4xMyAqIG4yMiAqIG4zMSArIG4xMyAqIG4yMSAqIG4zMiAtIG4xMSAqIG4yMyAqIG4zMiAtIG4xMiAqIG4yMSAqIG4zMyArIG4xMSAqIG4yMiAqIG4zMyApICogZGV0SW52O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNjYWxlKCB2ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHggPSB2LngsIHkgPSB2LnksIHogPSB2Lno7XG5cblx0XHR0ZVsgMCBdICo9IHg7IHRlWyA0IF0gKj0geTsgdGVbIDggXSAqPSB6O1xuXHRcdHRlWyAxIF0gKj0geDsgdGVbIDUgXSAqPSB5OyB0ZVsgOSBdICo9IHo7XG5cdFx0dGVbIDIgXSAqPSB4OyB0ZVsgNiBdICo9IHk7IHRlWyAxMCBdICo9IHo7XG5cdFx0dGVbIDMgXSAqPSB4OyB0ZVsgNyBdICo9IHk7IHRlWyAxMSBdICo9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0TWF4U2NhbGVPbkF4aXMoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHRjb25zdCBzY2FsZVlTcSA9IHRlWyA0IF0gKiB0ZVsgNCBdICsgdGVbIDUgXSAqIHRlWyA1IF0gKyB0ZVsgNiBdICogdGVbIDYgXTtcblx0XHRjb25zdCBzY2FsZVpTcSA9IHRlWyA4IF0gKiB0ZVsgOCBdICsgdGVbIDkgXSAqIHRlWyA5IF0gKyB0ZVsgMTAgXSAqIHRlWyAxMCBdO1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggTWF0aC5tYXgoIHNjYWxlWFNxLCBzY2FsZVlTcSwgc2NhbGVaU3EgKSApO1xuXG5cdH1cblxuXHRtYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgeCxcblx0XHRcdDAsIDEsIDAsIHksXG5cdFx0XHQwLCAwLCAxLCB6LFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25YKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25ZKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdCBjLCAwLCBzLCAwLFxuXHRcdFx0IDAsIDEsIDAsIDAsXG5cdFx0XHQtIHMsIDAsIGMsIDAsXG5cdFx0XHQgMCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25aKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdGMsIC0gcywgMCwgMCxcblx0XHRcdHMsIGMsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25BeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIEJhc2VkIG9uIGh0dHA6Ly93d3cuZ2FtZWRldi5uZXQvcmVmZXJlbmNlL2FydGljbGVzL2FydGljbGUxMTk5LmFzcFxuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblx0XHRjb25zdCB0ID0gMSAtIGM7XG5cdFx0Y29uc3QgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHRjb25zdCB0eCA9IHQgKiB4LCB0eSA9IHQgKiB5O1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHR4ICogeCArIGMsIHR4ICogeSAtIHMgKiB6LCB0eCAqIHogKyBzICogeSwgMCxcblx0XHRcdHR4ICogeSArIHMgKiB6LCB0eSAqIHkgKyBjLCB0eSAqIHogLSBzICogeCwgMCxcblx0XHRcdHR4ICogeiAtIHMgKiB5LCB0eSAqIHogKyBzICogeCwgdCAqIHogKiB6ICsgYywgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVNjYWxlKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHgsIDAsIDAsIDAsXG5cdFx0XHQwLCB5LCAwLCAwLFxuXHRcdFx0MCwgMCwgeiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVNoZWFyKCB4eSwgeHosIHl4LCB5eiwgengsIHp5ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIHl4LCB6eCwgMCxcblx0XHRcdHh5LCAxLCB6eSwgMCxcblx0XHRcdHh6LCB5eiwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7XG5cdFx0Y29uc3QgeDIgPSB4ICsgeCxcdHkyID0geSArIHksIHoyID0geiArIHo7XG5cdFx0Y29uc3QgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHRjb25zdCB5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyO1xuXHRcdGNvbnN0IHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7XG5cblx0XHRjb25zdCBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdFx0dGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0XHR0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHRcdHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdFx0dGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0XHR0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdFx0dGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRsZXQgc3ggPSBfdjEkNS5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IF92MSQ1LnNldCggdGVbIDQgXSwgdGVbIDUgXSwgdGVbIDYgXSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gX3YxJDUuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpO1xuXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcblx0XHRjb25zdCBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XG5cdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0cG9zaXRpb24ueCA9IHRlWyAxMiBdO1xuXHRcdHBvc2l0aW9uLnkgPSB0ZVsgMTMgXTtcblx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHQvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuXHRcdF9tMSQyLmNvcHkoIHRoaXMgKTtcblxuXHRcdGNvbnN0IGludlNYID0gMSAvIHN4O1xuXHRcdGNvbnN0IGludlNZID0gMSAvIHN5O1xuXHRcdGNvbnN0IGludlNaID0gMSAvIHN6O1xuXG5cdFx0X20xJDIuZWxlbWVudHNbIDAgXSAqPSBpbnZTWDtcblx0XHRfbTEkMi5lbGVtZW50c1sgMSBdICo9IGludlNYO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyAyIF0gKj0gaW52U1g7XG5cblx0XHRfbTEkMi5lbGVtZW50c1sgNCBdICo9IGludlNZO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyA1IF0gKj0gaW52U1k7XG5cdFx0X20xJDIuZWxlbWVudHNbIDYgXSAqPSBpbnZTWTtcblxuXHRcdF9tMSQyLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7XG5cdFx0X20xJDIuZWxlbWVudHNbIDkgXSAqPSBpbnZTWjtcblx0XHRfbTEkMi5lbGVtZW50c1sgMTAgXSAqPSBpbnZTWjtcblxuXHRcdHF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEkMiApO1xuXG5cdFx0c2NhbGUueCA9IHN4O1xuXHRcdHNjYWxlLnkgPSBzeTtcblx0XHRzY2FsZS56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRcdGlmICggZmFyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUGVyc3BlY3RpdmUoKSBoYXMgYmVlbiByZWRlZmluZWQgYW5kIGhhcyBhIG5ldyBzaWduYXR1cmUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcy4nICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHRjb25zdCB5ID0gMiAqIG5lYXIgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0Y29uc3QgYSA9ICggcmlnaHQgKyBsZWZ0ICkgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHRjb25zdCBjID0gLSAoIGZhciArIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXHRcdGNvbnN0IGQgPSAtIDIgKiBmYXIgKiBuZWFyIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHR0ZVsgMCBdID0geDtcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IGE7XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEgXSA9IDA7XHR0ZVsgNSBdID0geTtcdHRlWyA5IF0gPSBiO1x0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAyIF0gPSAwO1x0dGVbIDYgXSA9IDA7XHR0ZVsgMTAgXSA9IGM7XHR0ZVsgMTQgXSA9IGQ7XG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gLSAxO1x0dGVbIDE1IF0gPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHcgPSAxLjAgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IGggPSAxLjAgLyAoIHRvcCAtIGJvdHRvbSApO1xuXHRcdGNvbnN0IHAgPSAxLjAgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdGNvbnN0IHggPSAoIHJpZ2h0ICsgbGVmdCApICogdztcblx0XHRjb25zdCB5ID0gKCB0b3AgKyBib3R0b20gKSAqIGg7XG5cdFx0Y29uc3QgeiA9ICggZmFyICsgbmVhciApICogcDtcblxuXHRcdHRlWyAwIF0gPSAyICogdztcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IDA7XHR0ZVsgMTIgXSA9IC0geDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSAyICogaDtcdHRlWyA5IF0gPSAwO1x0dGVbIDEzIF0gPSAtIHk7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gLSAyICogcDtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IDA7XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBtYXRyaXggKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtYXRyaXguZWxlbWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0ZVsgaSBdICE9PSBtZVsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDkgXSA9IHRlWyA5IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEwIF0gPSB0ZVsgMTAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTEgXSA9IHRlWyAxMSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDEyIF0gPSB0ZVsgMTIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTMgXSA9IHRlWyAxMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNCBdID0gdGVbIDE0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE1IF0gPSB0ZVsgMTUgXTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cbn1cblxuTWF0cml4NC5wcm90b3R5cGUuaXNNYXRyaXg0ID0gdHJ1ZTtcblxuY29uc3QgX3YxJDUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbTEkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF96ZXJvID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuY29uc3QgX29uZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcbmNvbnN0IF94ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3kgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX21hdHJpeCQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3F1YXRlcm5pb24kMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcblxuY2xhc3MgRXVsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwLCBvcmRlciA9IEV1bGVyLkRlZmF1bHRPcmRlciApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX29yZGVyID0gb3JkZXI7XG5cblx0fVxuXG5cdGdldCB4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0fVxuXG5cdHNldCB4KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3k7XG5cblx0fVxuXG5cdHNldCB5KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB6KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0fVxuXG5cdHNldCB6KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCBvcmRlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblxuXHR9XG5cblx0c2V0IG9yZGVyKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHosIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl9vcmRlciApO1xuXG5cdH1cblxuXHRjb3B5KCBldWxlciApIHtcblxuXHRcdHRoaXMuX3ggPSBldWxlci5feDtcblx0XHR0aGlzLl95ID0gZXVsZXIuX3k7XG5cdFx0dGhpcy5feiA9IGV1bGVyLl96O1xuXHRcdHRoaXMuX29yZGVyID0gZXVsZXIuX29yZGVyO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSwgb3JkZXIgPSB0aGlzLl9vcmRlciwgdXBkYXRlID0gdHJ1ZSApIHtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRjb25zdCB0ZSA9IG0uZWxlbWVudHM7XG5cdFx0Y29uc3QgbTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXTtcblx0XHRjb25zdCBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdO1xuXHRcdGNvbnN0IG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0c3dpdGNoICggb3JkZXIgKSB7XG5cblx0XHRcdGNhc2UgJ1hZWic6XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWFonOlxuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0yMywgLSAxLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMjMgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0yMiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWlhZJzpcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCBjbGFtcCggbTMyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0zMiApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMzMgKTtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pZWCc6XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWlgnOlxuXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIGNsYW1wKCBtMjEsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTIxICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApO1xuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWFpZJzpcblxuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMTIsIC0gMSwgMSApICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggbTEyICkgPCAwLjk5OTk5OTkgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0XHR0aGlzLl95ID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX29yZGVyID0gb3JkZXI7XG5cblx0XHRpZiAoIHVwZGF0ZSA9PT0gdHJ1ZSApIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUXVhdGVybmlvbiggcSwgb3JkZXIsIHVwZGF0ZSApIHtcblxuXHRcdF9tYXRyaXgkMS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbWF0cml4JDEsIG9yZGVyLCB1cGRhdGUgKTtcblxuXHR9XG5cblx0c2V0RnJvbVZlY3RvcjMoIHYsIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyICk7XG5cblx0fVxuXG5cdHJlb3JkZXIoIG5ld09yZGVyICkge1xuXG5cdFx0Ly8gV0FSTklORzogdGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uIC1iaG91c3RvblxuXG5cdFx0X3F1YXRlcm5pb24kMy5zZXRGcm9tRXVsZXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQzLCBuZXdPcmRlciApO1xuXG5cdH1cblxuXHRlcXVhbHMoIGV1bGVyICkge1xuXG5cdFx0cmV0dXJuICggZXVsZXIuX3ggPT09IHRoaXMuX3ggKSAmJiAoIGV1bGVyLl95ID09PSB0aGlzLl95ICkgJiYgKCBldWxlci5feiA9PT0gdGhpcy5feiApICYmICggZXVsZXIuX29yZGVyID09PSB0aGlzLl9vcmRlciApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyAwIF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyAyIF07XG5cdFx0aWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrKCkge31cblxufVxuXG5FdWxlci5wcm90b3R5cGUuaXNFdWxlciA9IHRydWU7XG5cbkV1bGVyLkRlZmF1bHRPcmRlciA9ICdYWVonO1xuRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbICdYWVonLCAnWVpYJywgJ1pYWScsICdYWlknLCAnWVhaJywgJ1pZWCcgXTtcblxuY2xhc3MgTGF5ZXJzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMubWFzayA9IDEgfCAwO1xuXG5cdH1cblxuXHRzZXQoIGNoYW5uZWwgKSB7XG5cblx0XHR0aGlzLm1hc2sgPSAoIDEgPDwgY2hhbm5lbCB8IDAgKSA+Pj4gMDtcblxuXHR9XG5cblx0ZW5hYmxlKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fVxuXG5cdGVuYWJsZUFsbCgpIHtcblxuXHRcdHRoaXMubWFzayA9IDB4ZmZmZmZmZmYgfCAwO1xuXG5cdH1cblxuXHR0b2dnbGUoIGNoYW5uZWwgKSB7XG5cblx0XHR0aGlzLm1hc2sgXj0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9XG5cblx0ZGlzYWJsZSggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayAmPSB+ICggMSA8PCBjaGFubmVsIHwgMCApO1xuXG5cdH1cblxuXHRkaXNhYmxlQWxsKCkge1xuXG5cdFx0dGhpcy5tYXNrID0gMDtcblxuXHR9XG5cblx0dGVzdCggbGF5ZXJzICkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXNrICYgbGF5ZXJzLm1hc2sgKSAhPT0gMDtcblxuXHR9XG5cblx0aXNFbmFibGVkKCBjaGFubmVsICkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXNrICYgKCAxIDw8IGNoYW5uZWwgfCAwICkgKSAhPT0gMDtcblxuXHR9XG5cbn1cblxubGV0IF9vYmplY3QzRElkID0gMDtcblxuY29uc3QgX3YxJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcTEgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfbTEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF90YXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9wb3NpdGlvbiQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3NjYWxlJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiQyID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuXG5jb25zdCBfeEF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7XG5jb25zdCBfeUF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5jb25zdCBfekF4aXMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cbmNvbnN0IF9hZGRlZEV2ZW50ID0geyB0eXBlOiAnYWRkZWQnIH07XG5jb25zdCBfcmVtb3ZlZEV2ZW50ID0geyB0eXBlOiAncmVtb3ZlZCcgfTtcblxuY2xhc3MgT2JqZWN0M0QgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX29iamVjdDNESWQgKysgfSApO1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblx0XHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcblxuXHRcdHRoaXMudXAgPSBPYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCByb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXHRcdGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHRcdGNvbnN0IHNjYWxlID0gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcblxuXHRcdGZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7XG5cblx0XHRcdHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCByb3RhdGlvbiwgZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHtcblxuXHRcdFx0cm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24sIHVuZGVmaW5lZCwgZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdHJvdGF0aW9uLl9vbkNoYW5nZSggb25Sb3RhdGlvbkNoYW5nZSApO1xuXHRcdHF1YXRlcm5pb24uX29uQ2hhbmdlKCBvblF1YXRlcm5pb25DaGFuZ2UgKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0XHRwb3NpdGlvbjoge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBwb3NpdGlvblxuXHRcdFx0fSxcblx0XHRcdHJvdGF0aW9uOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJvdGF0aW9uXG5cdFx0XHR9LFxuXHRcdFx0cXVhdGVybmlvbjoge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBxdWF0ZXJuaW9uXG5cdFx0XHR9LFxuXHRcdFx0c2NhbGU6IHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogc2NhbGVcblx0XHRcdH0sXG5cdFx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcblx0XHRcdFx0dmFsdWU6IG5ldyBNYXRyaXg0KClcblx0XHRcdH0sXG5cdFx0XHRub3JtYWxNYXRyaXg6IHtcblx0XHRcdFx0dmFsdWU6IG5ldyBNYXRyaXgzKClcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMubGF5ZXJzID0gbmV3IExheWVycygpO1xuXHRcdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cblx0XHR0aGlzLmNhc3RTaGFkb3cgPSBmYWxzZTtcblx0XHR0aGlzLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XG5cdFx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XG5cblx0XHR0aGlzLmFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHR9XG5cblx0b25CZWZvcmVSZW5kZXIoIC8qIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICovICkge31cblxuXHRvbkFmdGVyUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLm1hdHJpeC5wcmVtdWx0aXBseSggbWF0cml4ICk7XG5cblx0XHR0aGlzLm1hdHJpeC5kZWNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApO1xuXG5cdH1cblxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIHEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSApO1xuXG5cdH1cblxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBxIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMucXVhdGVybmlvbi5jb3B5KCBxICk7XG5cblx0fVxuXG5cdHJvdGF0ZU9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gb2JqZWN0IHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdF9xMS5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApO1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLm11bHRpcGx5KCBfcTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gd29ybGQgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXHRcdC8vIG1ldGhvZCBhc3N1bWVzIG5vIHJvdGF0ZWQgcGFyZW50XG5cblx0XHRfcTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggX3ExICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF94QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0cm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF95QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0cm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIF96QXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0dHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0X3YxJDQuY29weSggYXhpcyApLmFwcGx5UXVhdGVybmlvbiggdGhpcy5xdWF0ZXJuaW9uICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmFkZCggX3YxJDQubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGVYKCBkaXN0YW5jZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3hBeGlzLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHR0cmFuc2xhdGVZKCBkaXN0YW5jZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3lBeGlzLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHR0cmFuc2xhdGVaKCBkaXN0YW5jZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3pBeGlzLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHRsb2NhbFRvV29ybGQoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdHdvcmxkVG9Mb2NhbCggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIF9tMSQxLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKSApO1xuXG5cdH1cblxuXHRsb29rQXQoIHgsIHksIHogKSB7XG5cblx0XHQvLyBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIHBhcmVudChzKVxuXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0X3RhcmdldC5jb3B5KCB4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfdGFyZ2V0LnNldCggeCwgeSwgeiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0X3Bvc2l0aW9uJDMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0ICkge1xuXG5cdFx0XHRfbTEkMS5sb29rQXQoIF9wb3NpdGlvbiQzLCBfdGFyZ2V0LCB0aGlzLnVwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfbTEkMS5sb29rQXQoIF90YXJnZXQsIF9wb3NpdGlvbiQzLCB0aGlzLnVwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEkMSApO1xuXG5cdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdF9tMSQxLmV4dHJhY3RSb3RhdGlvbiggcGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRfcTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEkMSApO1xuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBfcTEuaW52ZXJ0KCkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0YWRkKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYWRkKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QgPT09IHRoaXMgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBjYW5cXCd0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLicsIG9iamVjdCApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QucGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG9iamVjdC5wYXJlbnQucmVtb3ZlKCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvYmplY3QucGFyZW50ID0gdGhpcztcblx0XHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfYWRkZWRFdmVudCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC4nLCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyZW1vdmUoIG9iamVjdCApIHtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5yZW1vdmUoIGFyZ3VtZW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZiggb2JqZWN0ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5jaGlsZHJlbi5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KCBfcmVtb3ZlZEV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVtb3ZlRnJvbVBhcmVudCgpIHtcblxuXHRcdGNvbnN0IHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHBhcmVudC5yZW1vdmUoIHRoaXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGVhcigpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSB0aGlzLmNoaWxkcmVuWyBpIF07XG5cblx0XHRcdG9iamVjdC5wYXJlbnQgPSBudWxsO1xuXG5cdFx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggX3JlbW92ZWRFdmVudCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jaGlsZHJlbi5sZW5ndGggPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblxuXHR9XG5cblx0YXR0YWNoKCBvYmplY3QgKSB7XG5cblx0XHQvLyBhZGRzIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMsIHdoaWxlIG1haW50YWluaW5nIHRoZSBvYmplY3QncyB3b3JsZCB0cmFuc2Zvcm1cblxuXHRcdC8vIE5vdGU6IFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgc2NlbmUgZ3JhcGhzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBub2RlcyhzKVxuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdF9tMSQxLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0X20xJDEubXVsdGlwbHkoIG9iamVjdC5wYXJlbnQubWF0cml4V29ybGQgKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC5hcHBseU1hdHJpeDQoIF9tMSQxICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0T2JqZWN0QnlJZCggaWQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnaWQnLCBpZCApO1xuXG5cdH1cblxuXHRnZXRPYmplY3RCeU5hbWUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnbmFtZScsIG5hbWUgKTtcblxuXHR9XG5cblx0Z2V0T2JqZWN0QnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXNbIG5hbWUgXSA9PT0gdmFsdWUgKSByZXR1cm4gdGhpcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRjb25zdCBvYmplY3QgPSBjaGlsZC5nZXRPYmplY3RCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBvYmplY3Q7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdGdldFdvcmxkUG9zaXRpb24oIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHRnZXRXb3JsZFF1YXRlcm5pb24oIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uJDMsIHRhcmdldCwgX3NjYWxlJDIgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdGdldFdvcmxkU2NhbGUoIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uJDMsIF9xdWF0ZXJuaW9uJDIsIHRhcmdldCApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0Z2V0V29ybGREaXJlY3Rpb24oIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRjb25zdCBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50cztcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCBlWyA4IF0sIGVbIDkgXSwgZVsgMTAgXSApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRyYXljYXN0KCAvKiByYXljYXN0ZXIsIGludGVyc2VjdHMgKi8gKSB7fVxuXG5cdHRyYXZlcnNlKCBjYWxsYmFjayApIHtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR0cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udHJhdmVyc2VWaXNpYmxlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR0cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKSB7XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRjYWxsYmFjayggcGFyZW50ICk7XG5cblx0XHRcdHBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dXBkYXRlTWF0cml4KCkge1xuXG5cdFx0dGhpcy5tYXRyaXguY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSB8fCBmb3JjZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVXb3JsZE1hdHJpeCggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggdXBkYXRlUGFyZW50cyA9PT0gdHJ1ZSAmJiBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cblxuXHRcdGlmICggdXBkYXRlQ2hpbGRyZW4gPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxuXHRcdGNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge307XG5cblx0XHQvLyBtZXRhIGlzIGEgaGFzaCB1c2VkIHRvIGNvbGxlY3QgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLlxuXHRcdC8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0XG5cdFx0Ly8gYmVpbmcgc2VyaWFsaXplZC5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBtZXRhIG9ialxuXHRcdFx0bWV0YSA9IHtcblx0XHRcdFx0Z2VvbWV0cmllczoge30sXG5cdFx0XHRcdG1hdGVyaWFsczoge30sXG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fSxcblx0XHRcdFx0c2hhcGVzOiB7fSxcblx0XHRcdFx0c2tlbGV0b25zOiB7fSxcblx0XHRcdFx0YW5pbWF0aW9uczoge30sXG5cdFx0XHRcdG5vZGVzOiB7fVxuXHRcdFx0fTtcblxuXHRcdFx0b3V0cHV0Lm1ldGFkYXRhID0ge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdPYmplY3QnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdPYmplY3QzRC50b0pTT04nXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RhbmRhcmQgT2JqZWN0M0Qgc2VyaWFsaXphdGlvblxuXG5cdFx0Y29uc3Qgb2JqZWN0ID0ge307XG5cblx0XHRvYmplY3QudXVpZCA9IHRoaXMudXVpZDtcblx0XHRvYmplY3QudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIG9iamVjdC5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggdGhpcy5jYXN0U2hhZG93ID09PSB0cnVlICkgb2JqZWN0LmNhc3RTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5yZWNlaXZlU2hhZG93ID09PSB0cnVlICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIG9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLmZydXN0dW1DdWxsZWQgPT09IGZhbHNlICkgb2JqZWN0LmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMucmVuZGVyT3JkZXIgIT09IDAgKSBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyO1xuXHRcdGlmICggSlNPTi5zdHJpbmdpZnkoIHRoaXMudXNlckRhdGEgKSAhPT0gJ3t9JyApIG9iamVjdC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRvYmplY3QubGF5ZXJzID0gdGhpcy5sYXllcnMubWFzaztcblx0XHRvYmplY3QubWF0cml4ID0gdGhpcy5tYXRyaXgudG9BcnJheSgpO1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IGZhbHNlICkgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdC8vIG9iamVjdCBzcGVjaWZpYyBwcm9wZXJ0aWVzXG5cblx0XHRpZiAoIHRoaXMuaXNJbnN0YW5jZWRNZXNoICkge1xuXG5cdFx0XHRvYmplY3QudHlwZSA9ICdJbnN0YW5jZWRNZXNoJztcblx0XHRcdG9iamVjdC5jb3VudCA9IHRoaXMuY291bnQ7XG5cdFx0XHRvYmplY3QuaW5zdGFuY2VNYXRyaXggPSB0aGlzLmluc3RhbmNlTWF0cml4LnRvSlNPTigpO1xuXHRcdFx0aWYgKCB0aGlzLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBvYmplY3QuaW5zdGFuY2VDb2xvciA9IHRoaXMuaW5zdGFuY2VDb2xvci50b0pTT04oKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoIGxpYnJhcnksIGVsZW1lbnQgKSB7XG5cblx0XHRcdGlmICggbGlicmFyeVsgZWxlbWVudC51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9IGVsZW1lbnQudG9KU09OKCBtZXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW1lbnQudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc1NjZW5lICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZCApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZC5pc0NvbG9yICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5iYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5lbnZpcm9ubWVudCAmJiB0aGlzLmVudmlyb25tZW50LmlzVGV4dHVyZSApIHtcblxuXHRcdFx0XHRvYmplY3QuZW52aXJvbm1lbnQgPSB0aGlzLmVudmlyb25tZW50LnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaXNNZXNoIHx8IHRoaXMuaXNMaW5lIHx8IHRoaXMuaXNQb2ludHMgKSB7XG5cblx0XHRcdG9iamVjdC5nZW9tZXRyeSA9IHNlcmlhbGl6ZSggbWV0YS5nZW9tZXRyaWVzLCB0aGlzLmdlb21ldHJ5ICk7XG5cblx0XHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLmdlb21ldHJ5LnBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhcGVzID0gcGFyYW1ldGVycy5zaGFwZXM7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRvYmplY3QuYmluZE1vZGUgPSB0aGlzLmJpbmRNb2RlO1xuXHRcdFx0b2JqZWN0LmJpbmRNYXRyaXggPSB0aGlzLmJpbmRNYXRyaXgudG9BcnJheSgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2tlbGV0b24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2tlbGV0b25zLCB0aGlzLnNrZWxldG9uICk7XG5cblx0XHRcdFx0b2JqZWN0LnNrZWxldG9uID0gdGhpcy5za2VsZXRvbi51dWlkO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB0aGlzLm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgdXVpZHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR1dWlkcy5wdXNoKCBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsWyBpIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSB1dWlkcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0b2JqZWN0LmNoaWxkcmVuID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG9iamVjdC5jaGlsZHJlbi5wdXNoKCB0aGlzLmNoaWxkcmVuWyBpIF0udG9KU09OKCBtZXRhICkub2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuYW5pbWF0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdG9iamVjdC5hbmltYXRpb25zLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5hbmltYXRpb25zLCBhbmltYXRpb24gKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cmllcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuZ2VvbWV0cmllcyApO1xuXHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTtcblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblx0XHRcdGNvbnN0IHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7XG5cdFx0XHRjb25zdCBza2VsZXRvbnMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnNrZWxldG9ucyApO1xuXHRcdFx0Y29uc3QgYW5pbWF0aW9ucyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuYW5pbWF0aW9ucyApO1xuXHRcdFx0Y29uc3Qgbm9kZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm5vZGVzICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXHRcdFx0aWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7XG5cdFx0XHRpZiAoIHNrZWxldG9ucy5sZW5ndGggPiAwICkgb3V0cHV0LnNrZWxldG9ucyA9IHNrZWxldG9ucztcblx0XHRcdGlmICggYW5pbWF0aW9ucy5sZW5ndGggPiAwICkgb3V0cHV0LmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xuXHRcdFx0aWYgKCBub2Rlcy5sZW5ndGggPiAwICkgb3V0cHV0Lm5vZGVzID0gbm9kZXM7XG5cblx0XHR9XG5cblx0XHRvdXRwdXQub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXG5cdFx0Ly8gcmVtb3ZlIG1ldGFkYXRhIG9uIGVhY2ggaXRlbVxuXHRcdC8vIGFuZCByZXR1cm4gYXMgYXJyYXlcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMudXAuY29weSggc291cmNlLnVwICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIHNvdXJjZS5wb3NpdGlvbiApO1xuXHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSBzb3VyY2Uucm90YXRpb24ub3JkZXI7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2hpbGQgPSBzb3VyY2UuY2hpbGRyZW5bIGkgXTtcblx0XHRcdFx0dGhpcy5hZGQoIGNoaWxkLmNsb25lKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbk9iamVjdDNELkRlZmF1bHRVcCA9IG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5PYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cbk9iamVjdDNELnByb3RvdHlwZS5pc09iamVjdDNEID0gdHJ1ZTtcblxuY29uc3QgX3YwJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjEkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YzJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF92YWIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmFjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZiYyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmJwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZjcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgVHJpYW5nbGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhID0gbmV3IFZlY3RvcjMoKSwgYiA9IG5ldyBWZWN0b3IzKCksIGMgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0dGhpcy5hID0gYTtcblx0XHR0aGlzLmIgPSBiO1xuXHRcdHRoaXMuYyA9IGM7XG5cblx0fVxuXG5cdHN0YXRpYyBnZXROb3JtYWwoIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0X3YwJDEuc3ViVmVjdG9ycyggYSwgYiApO1xuXHRcdHRhcmdldC5jcm9zcyggX3YwJDEgKTtcblxuXHRcdGNvbnN0IHRhcmdldExlbmd0aFNxID0gdGFyZ2V0Lmxlbmd0aFNxKCk7XG5cdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQubXVsdGlwbHlTY2FsYXIoIDEgLyBNYXRoLnNxcnQoIHRhcmdldExlbmd0aFNxICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0fVxuXG5cdC8vIHN0YXRpYy9pbnN0YW5jZSBtZXRob2QgdG8gY2FsY3VsYXRlIGJhcnljZW50cmljIGNvb3JkaW5hdGVzXG5cdC8vIGJhc2VkIG9uOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcG9pbnRpbnBvbHkvZGVmYXVsdC5odG1sXG5cdHN0YXRpYyBnZXRCYXJ5Y29vcmQoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRfdjAkMS5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdF92MiQyLnN1YlZlY3RvcnMoIHBvaW50LCBhICk7XG5cblx0XHRjb25zdCBkb3QwMCA9IF92MCQxLmRvdCggX3YwJDEgKTtcblx0XHRjb25zdCBkb3QwMSA9IF92MCQxLmRvdCggX3YxJDMgKTtcblx0XHRjb25zdCBkb3QwMiA9IF92MCQxLmRvdCggX3YyJDIgKTtcblx0XHRjb25zdCBkb3QxMSA9IF92MSQzLmRvdCggX3YxJDMgKTtcblx0XHRjb25zdCBkb3QxMiA9IF92MSQzLmRvdCggX3YyJDIgKTtcblxuXHRcdGNvbnN0IGRlbm9tID0gKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApO1xuXG5cdFx0Ly8gY29sbGluZWFyIG9yIHNpbmd1bGFyIHRyaWFuZ2xlXG5cdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYXJiaXRyYXJ5IGxvY2F0aW9uIG91dHNpZGUgb2YgdHJpYW5nbGU/XG5cdFx0XHQvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIHRoZSBiZXN0IGlkZWEsIG1heWJlIHNob3VsZCBiZSByZXR1cm5pbmcgdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaW52RGVub20gPSAxIC8gZGVub207XG5cdFx0Y29uc3QgdSA9ICggZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIgKSAqIGludkRlbm9tO1xuXHRcdGNvbnN0IHYgPSAoIGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyICkgKiBpbnZEZW5vbTtcblxuXHRcdC8vIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIG11c3QgYWx3YXlzIHN1bSB0byAxXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xuXG5cdH1cblxuXHRzdGF0aWMgY29udGFpbnNQb2ludCggcG9pbnQsIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIF92MyQxICk7XG5cblx0XHRyZXR1cm4gKCBfdjMkMS54ID49IDAgKSAmJiAoIF92MyQxLnkgPj0gMCApICYmICggKCBfdjMkMS54ICsgX3YzJDEueSApIDw9IDEgKTtcblxuXHR9XG5cblx0c3RhdGljIGdldFVWKCBwb2ludCwgcDEsIHAyLCBwMywgdXYxLCB1djIsIHV2MywgdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCBwMSwgcDIsIHAzLCBfdjMkMSApO1xuXG5cdFx0dGFyZ2V0LnNldCggMCwgMCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MSwgX3YzJDEueCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MiwgX3YzJDEueSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MywgX3YzJDEueiApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0c3RhdGljIGlzRnJvbnRGYWNpbmcoIGEsIGIsIGMsIGRpcmVjdGlvbiApIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIGMsIGIgKTtcblx0XHRfdjEkMy5zdWJWZWN0b3JzKCBhLCBiICk7XG5cblx0XHQvLyBzdHJpY3RseSBmcm9udCBmYWNpbmdcblx0XHRyZXR1cm4gKCBfdjAkMS5jcm9zcyggX3YxJDMgKS5kb3QoIGRpcmVjdGlvbiApIDwgMCApID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdH1cblxuXHRzZXQoIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmEuY29weSggYSApO1xuXHRcdHRoaXMuYi5jb3B5KCBiICk7XG5cdFx0dGhpcy5jLmNvcHkoIGMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzQW5kSW5kaWNlcyggcG9pbnRzLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApO1xuXHRcdHRoaXMuYi5jb3B5KCBwb2ludHNbIGkxIF0gKTtcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMoIGF0dHJpYnV0ZSwgaTAsIGkxLCBpMiApIHtcblxuXHRcdHRoaXMuYS5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkwICk7XG5cdFx0dGhpcy5iLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaTEgKTtcblx0XHR0aGlzLmMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCB0cmlhbmdsZSApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCB0cmlhbmdsZS5hICk7XG5cdFx0dGhpcy5iLmNvcHkoIHRyaWFuZ2xlLmIgKTtcblx0XHR0aGlzLmMuY29weSggdHJpYW5nbGUuYyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldEFyZWEoKSB7XG5cblx0XHRfdjAkMS5zdWJWZWN0b3JzKCB0aGlzLmMsIHRoaXMuYiApO1xuXHRcdF92MSQzLnN1YlZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICk7XG5cblx0XHRyZXR1cm4gX3YwJDEuY3Jvc3MoIF92MSQzICkubGVuZ3RoKCkgKiAwLjU7XG5cblx0fVxuXG5cdGdldE1pZHBvaW50KCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICkuYWRkKCB0aGlzLmMgKS5tdWx0aXBseVNjYWxhciggMSAvIDMgKTtcblxuXHR9XG5cblx0Z2V0Tm9ybWFsKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0Z2V0UGxhbmUoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fVxuXG5cdGdldEJhcnljb29yZCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0Z2V0VVYoIHBvaW50LCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0VVYoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9XG5cblx0aXNGcm9udEZhY2luZyggZGlyZWN0aW9uICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmlzRnJvbnRGYWNpbmcoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIGRpcmVjdGlvbiApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNUcmlhbmdsZSggdGhpcyApO1xuXG5cdH1cblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jO1xuXHRcdGxldCB2LCB3O1xuXG5cdFx0Ly8gYWxnb3JpdGhtIHRoYW5rcyB0byBSZWFsLVRpbWUgQ29sbGlzaW9uIERldGVjdGlvbiBieSBDaHJpc3RlciBFcmljc29uLFxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcblx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHQvLyBiYXNpY2FsbHksIHdlJ3JlIGRpc3Rpbmd1aXNoaW5nIHdoaWNoIG9mIHRoZSB2b3Jvbm9pIHJlZ2lvbnMgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxuXG5cdFx0X3ZhYi5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3ZhcC5zdWJWZWN0b3JzKCBwLCBhICk7XG5cdFx0Y29uc3QgZDEgPSBfdmFiLmRvdCggX3ZhcCApO1xuXHRcdGNvbnN0IGQyID0gX3ZhYy5kb3QoIF92YXAgKTtcblx0XHRpZiAoIGQxIDw9IDAgJiYgZDIgPD0gMCApIHtcblxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTtcblxuXHRcdH1cblxuXHRcdF92YnAuc3ViVmVjdG9ycyggcCwgYiApO1xuXHRcdGNvbnN0IGQzID0gX3ZhYi5kb3QoIF92YnAgKTtcblx0XHRjb25zdCBkNCA9IF92YWMuZG90KCBfdmJwICk7XG5cdFx0aWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEI7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMSwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjtcblx0XHRpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkge1xuXG5cdFx0XHR2ID0gZDEgLyAoIGQxIC0gZDMgKTtcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApO1xuXG5cdFx0fVxuXG5cdFx0X3ZjcC5zdWJWZWN0b3JzKCBwLCBjICk7XG5cdFx0Y29uc3QgZDUgPSBfdmFiLmRvdCggX3ZjcCApO1xuXHRcdGNvbnN0IGQ2ID0gX3ZhYy5kb3QoIF92Y3AgKTtcblx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XG5cblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAwLCAxKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBjICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YiA9IGQ1ICogZDIgLSBkMSAqIGQ2O1xuXHRcdGlmICggdmIgPD0gMCAmJiBkMiA+PSAwICYmIGQ2IDw9IDAgKSB7XG5cblx0XHRcdHcgPSBkMiAvICggZDIgLSBkNiApO1xuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUM7IGJhcnljZW50cmljIGNvb3JkcyAoMS13LCAwLCB3KVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdGlmICggdmEgPD0gMCAmJiAoIGQ0IC0gZDMgKSA+PSAwICYmICggZDUgLSBkNiApID49IDAgKSB7XG5cblx0XHRcdF92YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0dyA9ICggZDQgLSBkMyApIC8gKCAoIGQ0IC0gZDMgKSArICggZDUgLSBkNiApICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIF92YmMsIHcgKTsgLy8gZWRnZSByZWdpb24gb2YgQkNcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0Y29uc3QgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcblx0XHQvLyB1ID0gdmEgKiBkZW5vbVxuXHRcdHYgPSB2YiAqIGRlbm9tO1xuXHRcdHcgPSB2YyAqIGRlbm9tO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0fVxuXG5cdGVxdWFscyggdHJpYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdHJpYW5nbGUuYS5lcXVhbHMoIHRoaXMuYSApICYmIHRyaWFuZ2xlLmIuZXF1YWxzKCB0aGlzLmIgKSAmJiB0cmlhbmdsZS5jLmVxdWFscyggdGhpcy5jICk7XG5cblx0fVxuXG59XG5cbmxldCBtYXRlcmlhbElkID0gMDtcblxuY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMubmFtZSA9ICcnO1xuXHRcdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLmJsZW5kaW5nID0gTm9ybWFsQmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gRnJvbnRTaWRlO1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gZmFsc2U7XG5cblx0XHR0aGlzLm9wYWNpdHkgPSAxO1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuXHRcdHRoaXMuYmxlbmRTcmMgPSBTcmNBbHBoYUZhY3Rvcjtcblx0XHR0aGlzLmJsZW5kRHN0ID0gT25lTWludXNTcmNBbHBoYUZhY3Rvcjtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdHRoaXMuYmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBMZXNzRXF1YWxEZXB0aDtcblx0XHR0aGlzLmRlcHRoVGVzdCA9IHRydWU7XG5cdFx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMuc3RlbmNpbFdyaXRlTWFzayA9IDB4ZmY7XG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IEFsd2F5c1N0ZW5jaWxGdW5jO1xuXHRcdHRoaXMuc3RlbmNpbFJlZiA9IDA7XG5cdFx0dGhpcy5zdGVuY2lsRnVuY01hc2sgPSAweGZmO1xuXHRcdHRoaXMuc3RlbmNpbEZhaWwgPSBLZWVwU3RlbmNpbE9wO1xuXHRcdHRoaXMuc3RlbmNpbFpGYWlsID0gS2VlcFN0ZW5jaWxPcDtcblx0XHR0aGlzLnN0ZW5jaWxaUGFzcyA9IEtlZXBTdGVuY2lsT3A7XG5cdFx0dGhpcy5zdGVuY2lsV3JpdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBudWxsO1xuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IG51bGw7XG5cblx0XHR0aGlzLmNvbG9yV3JpdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gZmFsc2U7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gMDtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0XHR0aGlzLmRpdGhlcmluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5hbHBoYVRvQ292ZXJhZ2UgPSBmYWxzZTtcblx0XHR0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlO1xuXG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdHRoaXMudG9uZU1hcHBlZCA9IHRydWU7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdFx0dGhpcy5fYWxwaGFUZXN0ID0gMDtcblxuXHR9XG5cblx0Z2V0IGFscGhhVGVzdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9hbHBoYVRlc3Q7XG5cblx0fVxuXG5cdHNldCBhbHBoYVRlc3QoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9hbHBoYVRlc3QgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2FscGhhVGVzdCA9IHZhbHVlO1xuXG5cdH1cblxuXHRvbkJ1aWxkKCAvKiBzaGFkZXJvYmplY3QsIHJlbmRlcmVyICovICkge31cblxuXHRvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICovICkge31cblxuXHRvbkJlZm9yZUNvbXBpbGUoIC8qIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKi8gKSB7fVxuXG5cdGN1c3RvbVByb2dyYW1DYWNoZUtleSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpO1xuXG5cdH1cblxuXHRzZXRWYWx1ZXMoIHZhbHVlcyApIHtcblxuXHRcdGlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdmFsdWVzICkge1xuXG5cdFx0XHRjb25zdCBuZXdWYWx1ZSA9IHZhbHVlc1sga2V5IF07XG5cblx0XHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogXFwnJyArIGtleSArICdcXCcgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZvciBiYWNrd2FyZCBjb21wYXRhYmlsaXR5IGlmIHNoYWRpbmcgaXMgc2V0IGluIHRoZSBjb25zdHJ1Y3RvclxuXHRcdFx0aWYgKCBrZXkgPT09ICdzaGFkaW5nJyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnNoYWRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHRoZSBib29sZWFuIC5mbGF0U2hhZGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggbmV3VmFsdWUgPT09IEZsYXRTaGFkaW5nICkgPyB0cnVlIDogZmFsc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiBcXCcnICsga2V5ICsgJ1xcJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLicgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLnNldCggbmV3VmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzVmVjdG9yMyApICYmICggbmV3VmFsdWUgJiYgbmV3VmFsdWUuaXNWZWN0b3IzICkgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLmNvcHkoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpc1sga2V5IF0gPSBuZXdWYWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge31cblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLnNoZWVuICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbjtcblx0XHRpZiAoIHRoaXMuc2hlZW5Db2xvciAmJiB0aGlzLnNoZWVuQ29sb3IuaXNDb2xvciApIGRhdGEuc2hlZW5Db2xvciA9IHRoaXMuc2hlZW5Db2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hlZW5Sb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hlZW5Sb3VnaG5lc3MgPSB0aGlzLnNoZWVuUm91Z2huZXNzO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSBkYXRhLmVtaXNzaXZlID0gdGhpcy5lbWlzc2l2ZS5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgJiYgdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gMSApIGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhckludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zcGVjdWxhckludGVuc2l0eSA9IHRoaXMuc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyQ29sb3IgJiYgdGhpcy5zcGVjdWxhckNvbG9yLmlzQ29sb3IgKSBkYXRhLnNwZWN1bGFyQ29sb3IgPSB0aGlzLnNwZWN1bGFyQ29sb3IuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaGluaW5lc3MgPSB0aGlzLnNoaW5pbmVzcztcblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0ICE9PSB1bmRlZmluZWQgKSBkYXRhLmNsZWFyY29hdCA9IHRoaXMuY2xlYXJjb2F0O1xuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0Um91Z2huZXNzID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3M7XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0TWFwICYmIHRoaXMuY2xlYXJjb2F0TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRNYXAgPSB0aGlzLmNsZWFyY29hdE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCAmJiB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgJiYgdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmNsZWFyY29hdE5vcm1hbE1hcCA9IHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gdGhpcy5jbGVhcmNvYXROb3JtYWxTY2FsZS50b0FycmF5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWFwICYmIHRoaXMubWFwLmlzVGV4dHVyZSApIGRhdGEubWFwID0gdGhpcy5tYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubWF0Y2FwICYmIHRoaXMubWF0Y2FwLmlzVGV4dHVyZSApIGRhdGEubWF0Y2FwID0gdGhpcy5tYXRjYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUgKSBkYXRhLmFscGhhTWFwID0gdGhpcy5hbHBoYU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmxpZ2h0TWFwICYmIHRoaXMubGlnaHRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5saWdodE1hcEludGVuc2l0eSA9IHRoaXMubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYW9NYXAgJiYgdGhpcy5hb01hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYW9NYXAgPSB0aGlzLmFvTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmFvTWFwSW50ZW5zaXR5ID0gdGhpcy5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5idW1wTWFwICYmIHRoaXMuYnVtcE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYnVtcE1hcCA9IHRoaXMuYnVtcE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5idW1wU2NhbGUgPSB0aGlzLmJ1bXBTY2FsZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ub3JtYWxNYXAgJiYgdGhpcy5ub3JtYWxNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLm5vcm1hbE1hcCA9IHRoaXMubm9ybWFsTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLm5vcm1hbE1hcFR5cGUgPSB0aGlzLm5vcm1hbE1hcFR5cGU7XG5cdFx0XHRkYXRhLm5vcm1hbFNjYWxlID0gdGhpcy5ub3JtYWxTY2FsZS50b0FycmF5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZGlzcGxhY2VtZW50TWFwICYmIHRoaXMuZGlzcGxhY2VtZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRNYXAgPSB0aGlzLmRpc3BsYWNlbWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRTY2FsZSA9IHRoaXMuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudEJpYXMgPSB0aGlzLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMucm91Z2huZXNzTWFwICYmIHRoaXMucm91Z2huZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEucm91Z2huZXNzTWFwID0gdGhpcy5yb3VnaG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzTWFwICYmIHRoaXMubWV0YWxuZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEubWV0YWxuZXNzTWFwID0gdGhpcy5tZXRhbG5lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5lbWlzc2l2ZU1hcCAmJiB0aGlzLmVtaXNzaXZlTWFwLmlzVGV4dHVyZSApIGRhdGEuZW1pc3NpdmVNYXAgPSB0aGlzLmVtaXNzaXZlTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyTWFwICYmIHRoaXMuc3BlY3VsYXJNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhck1hcCA9IHRoaXMuc3BlY3VsYXJNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgJiYgdGhpcy5zcGVjdWxhckludGVuc2l0eU1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFySW50ZW5zaXR5TWFwID0gdGhpcy5zcGVjdWxhckludGVuc2l0eU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhckNvbG9yTWFwICYmIHRoaXMuc3BlY3VsYXJDb2xvck1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFyQ29sb3JNYXAgPSB0aGlzLnNwZWN1bGFyQ29sb3JNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5lbnZNYXAgJiYgdGhpcy5lbnZNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmVudk1hcCA9IHRoaXMuZW52TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRcdGlmICggdGhpcy5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLmVudk1hcEludGVuc2l0eSA9IHRoaXMuZW52TWFwSW50ZW5zaXR5O1xuXHRcdGlmICggdGhpcy5yZWZsZWN0aXZpdHkgIT09IHVuZGVmaW5lZCApIGRhdGEucmVmbGVjdGl2aXR5ID0gdGhpcy5yZWZsZWN0aXZpdHk7XG5cdFx0aWYgKCB0aGlzLnJlZnJhY3Rpb25SYXRpbyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdGlmICggdGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ncmFkaWVudE1hcCA9IHRoaXMuZ3JhZGllbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy50cmFuc21pc3Npb24gIT09IHVuZGVmaW5lZCApIGRhdGEudHJhbnNtaXNzaW9uID0gdGhpcy50cmFuc21pc3Npb247XG5cdFx0aWYgKCB0aGlzLnRyYW5zbWlzc2lvbk1hcCAmJiB0aGlzLnRyYW5zbWlzc2lvbk1hcC5pc1RleHR1cmUgKSBkYXRhLnRyYW5zbWlzc2lvbk1hcCA9IHRoaXMudHJhbnNtaXNzaW9uTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS50aGlja25lc3MgPSB0aGlzLnRoaWNrbmVzcztcblx0XHRpZiAoIHRoaXMudGhpY2tuZXNzTWFwICYmIHRoaXMudGhpY2tuZXNzTWFwLmlzVGV4dHVyZSApIGRhdGEudGhpY2tuZXNzTWFwID0gdGhpcy50aGlja25lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5hdHRlbnVhdGlvbkRpc3RhbmNlID0gdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uQ29sb3IgPSB0aGlzLmF0dGVudWF0aW9uQ29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplID0gdGhpcy5zaXplO1xuXHRcdGlmICggdGhpcy5zaGFkb3dTaWRlICE9PSBudWxsICkgZGF0YS5zaGFkb3dTaWRlID0gdGhpcy5zaGFkb3dTaWRlO1xuXHRcdGlmICggdGhpcy5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZUF0dGVudWF0aW9uID0gdGhpcy5zaXplQXR0ZW51YXRpb247XG5cblx0XHRpZiAoIHRoaXMuYmxlbmRpbmcgIT09IE5vcm1hbEJsZW5kaW5nICkgZGF0YS5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7XG5cdFx0aWYgKCB0aGlzLnNpZGUgIT09IEZyb250U2lkZSApIGRhdGEuc2lkZSA9IHRoaXMuc2lkZTtcblx0XHRpZiAoIHRoaXMudmVydGV4Q29sb3JzICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLm9wYWNpdHkgPCAxICkgZGF0YS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuXHRcdGlmICggdGhpcy50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIGRhdGEudHJhbnNwYXJlbnQgPSB0aGlzLnRyYW5zcGFyZW50O1xuXG5cdFx0ZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYztcblx0XHRkYXRhLmRlcHRoVGVzdCA9IHRoaXMuZGVwdGhUZXN0O1xuXHRcdGRhdGEuZGVwdGhXcml0ZSA9IHRoaXMuZGVwdGhXcml0ZTtcblx0XHRkYXRhLmNvbG9yV3JpdGUgPSB0aGlzLmNvbG9yV3JpdGU7XG5cblx0XHRkYXRhLnN0ZW5jaWxXcml0ZSA9IHRoaXMuc3RlbmNpbFdyaXRlO1xuXHRcdGRhdGEuc3RlbmNpbFdyaXRlTWFzayA9IHRoaXMuc3RlbmNpbFdyaXRlTWFzaztcblx0XHRkYXRhLnN0ZW5jaWxGdW5jID0gdGhpcy5zdGVuY2lsRnVuYztcblx0XHRkYXRhLnN0ZW5jaWxSZWYgPSB0aGlzLnN0ZW5jaWxSZWY7XG5cdFx0ZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDtcblx0XHRkYXRhLnN0ZW5jaWxaRmFpbCA9IHRoaXMuc3RlbmNpbFpGYWlsO1xuXHRcdGRhdGEuc3RlbmNpbFpQYXNzID0gdGhpcy5zdGVuY2lsWlBhc3M7XG5cblx0XHQvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpXG5cdFx0aWYgKCB0aGlzLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yb3RhdGlvbiAhPT0gMCApIGRhdGEucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uO1xuXG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXQgPT09IHRydWUgKSBkYXRhLnBvbHlnb25PZmZzZXQgPSB0cnVlO1xuXHRcdGlmICggdGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSAwICkgZGF0YS5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gdGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xuXHRcdGlmICggdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRVbml0cyA9IHRoaXMucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0aWYgKCB0aGlzLmxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICYmIHRoaXMubGluZXdpZHRoICE9PSAxICkgZGF0YS5saW5ld2lkdGggPSB0aGlzLmxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMuZGFzaFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZGFzaFNpemUgPSB0aGlzLmRhc2hTaXplO1xuXHRcdGlmICggdGhpcy5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBkYXRhLmdhcFNpemUgPSB0aGlzLmdhcFNpemU7XG5cdFx0aWYgKCB0aGlzLnNjYWxlICE9PSB1bmRlZmluZWQgKSBkYXRhLnNjYWxlID0gdGhpcy5zY2FsZTtcblxuXHRcdGlmICggdGhpcy5kaXRoZXJpbmcgPT09IHRydWUgKSBkYXRhLmRpdGhlcmluZyA9IHRydWU7XG5cblx0XHRpZiAoIHRoaXMuYWxwaGFUZXN0ID4gMCApIGRhdGEuYWxwaGFUZXN0ID0gdGhpcy5hbHBoYVRlc3Q7XG5cdFx0aWYgKCB0aGlzLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZSApIGRhdGEuYWxwaGFUb0NvdmVyYWdlID0gdGhpcy5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0aWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIGRhdGEucHJlbXVsdGlwbGllZEFscGhhID0gdGhpcy5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lID09PSB0cnVlICkgZGF0YS53aXJlZnJhbWUgPSB0aGlzLndpcmVmcmFtZTtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVjYXAgPSB0aGlzLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVqb2luICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdGhpcy5mbGF0U2hhZGluZztcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0aGlzLnRvbmVNYXBwZWQgPT09IGZhbHNlICkgZGF0YS50b25lTWFwcGVkID0gZmFsc2U7XG5cblx0XHRpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxuXG5cdFx0ZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdGNvbnN0IGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIGRhdGEudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBkYXRhLmltYWdlcyA9IGltYWdlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHR0aGlzLmJsZW5kaW5nID0gc291cmNlLmJsZW5kaW5nO1xuXHRcdHRoaXMuc2lkZSA9IHNvdXJjZS5zaWRlO1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gc291cmNlLnZlcnRleENvbG9ycztcblxuXHRcdHRoaXMub3BhY2l0eSA9IHNvdXJjZS5vcGFjaXR5O1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBzb3VyY2UudHJhbnNwYXJlbnQ7XG5cblx0XHR0aGlzLmJsZW5kU3JjID0gc291cmNlLmJsZW5kU3JjO1xuXHRcdHRoaXMuYmxlbmREc3QgPSBzb3VyY2UuYmxlbmREc3Q7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uID0gc291cmNlLmJsZW5kRXF1YXRpb247XG5cdFx0dGhpcy5ibGVuZFNyY0FscGhhID0gc291cmNlLmJsZW5kU3JjQWxwaGE7XG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gc291cmNlLmJsZW5kRHN0QWxwaGE7XG5cdFx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBzb3VyY2UuYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBzb3VyY2UuZGVwdGhGdW5jO1xuXHRcdHRoaXMuZGVwdGhUZXN0ID0gc291cmNlLmRlcHRoVGVzdDtcblx0XHR0aGlzLmRlcHRoV3JpdGUgPSBzb3VyY2UuZGVwdGhXcml0ZTtcblxuXHRcdHRoaXMuc3RlbmNpbFdyaXRlTWFzayA9IHNvdXJjZS5zdGVuY2lsV3JpdGVNYXNrO1xuXHRcdHRoaXMuc3RlbmNpbEZ1bmMgPSBzb3VyY2Uuc3RlbmNpbEZ1bmM7XG5cdFx0dGhpcy5zdGVuY2lsUmVmID0gc291cmNlLnN0ZW5jaWxSZWY7XG5cdFx0dGhpcy5zdGVuY2lsRnVuY01hc2sgPSBzb3VyY2Uuc3RlbmNpbEZ1bmNNYXNrO1xuXHRcdHRoaXMuc3RlbmNpbEZhaWwgPSBzb3VyY2Uuc3RlbmNpbEZhaWw7XG5cdFx0dGhpcy5zdGVuY2lsWkZhaWwgPSBzb3VyY2Uuc3RlbmNpbFpGYWlsO1xuXHRcdHRoaXMuc3RlbmNpbFpQYXNzID0gc291cmNlLnN0ZW5jaWxaUGFzcztcblx0XHR0aGlzLnN0ZW5jaWxXcml0ZSA9IHNvdXJjZS5zdGVuY2lsV3JpdGU7XG5cblx0XHRjb25zdCBzcmNQbGFuZXMgPSBzb3VyY2UuY2xpcHBpbmdQbGFuZXM7XG5cdFx0bGV0IGRzdFBsYW5lcyA9IG51bGw7XG5cblx0XHRpZiAoIHNyY1BsYW5lcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgbiA9IHNyY1BsYW5lcy5sZW5ndGg7XG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGRzdFBsYW5lc1sgaSBdID0gc3JjUGxhbmVzWyBpIF0uY2xvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcblx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBzb3VyY2UuY2xpcEludGVyc2VjdGlvbjtcblx0XHR0aGlzLmNsaXBTaGFkb3dzID0gc291cmNlLmNsaXBTaGFkb3dzO1xuXG5cdFx0dGhpcy5zaGFkb3dTaWRlID0gc291cmNlLnNoYWRvd1NpZGU7XG5cblx0XHR0aGlzLmNvbG9yV3JpdGUgPSBzb3VyY2UuY29sb3JXcml0ZTtcblxuXHRcdHRoaXMucHJlY2lzaW9uID0gc291cmNlLnByZWNpc2lvbjtcblxuXHRcdHRoaXMucG9seWdvbk9mZnNldCA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0O1xuXHRcdHRoaXMucG9seWdvbk9mZnNldEZhY3RvciA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xuXHRcdHRoaXMucG9seWdvbk9mZnNldFVuaXRzID0gc291cmNlLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdHRoaXMuZGl0aGVyaW5nID0gc291cmNlLmRpdGhlcmluZztcblxuXHRcdHRoaXMuYWxwaGFUZXN0ID0gc291cmNlLmFscGhhVGVzdDtcblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IHNvdXJjZS5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XG5cblx0XHR0aGlzLnRvbmVNYXBwZWQgPSBzb3VyY2UudG9uZU1hcHBlZDtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufVxuXG5NYXRlcmlhbC5wcm90b3R5cGUuaXNNYXRlcmlhbCA9IHRydWU7XG5cbk1hdGVyaWFsLmZyb21UeXBlID0gZnVuY3Rpb24gKCAvKnR5cGUqLyApIHtcblxuXHQvLyBUT0RPOiBCZWhhdmlvciBhZGRlZCBpbiBNYXRlcmlhbHMuanNcblxuXHRyZXR1cm4gbnVsbDtcblxufTtcblxuLyoqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgZGVwdGhUZXN0OiA8Ym9vbD4sXG4gKiAgZGVwdGhXcml0ZTogPGJvb2w+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKiB9XG4gKi9cblxuY2xhc3MgTWVzaEJhc2ljTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlXG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdFx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuY29uc3QgX3ZlY3RvciQ5ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZlY3RvcjIkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcblxuY2xhc3MgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBpdGVtU2l6ZSA6IDA7XG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxuXHRcdHRoaXMudXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7XG5cdFx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdH1cblxuXHRvblVwbG9hZENhbGxiYWNrKCkge31cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcblx0XHR0aGlzLml0ZW1TaXplID0gc291cmNlLml0ZW1TaXplO1xuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cdFx0dGhpcy5ub3JtYWxpemVkID0gc291cmNlLm5vcm1hbGl6ZWQ7XG5cblx0XHR0aGlzLnVzYWdlID0gc291cmNlLnVzYWdlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlBdCggaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLml0ZW1TaXplO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5hcnJheVsgaW5kZXgxICsgaSBdID0gYXR0cmlidXRlLmFycmF5WyBpbmRleDIgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weUFycmF5KCBhcnJheSApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCBhcnJheSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlDb2xvcnNBcnJheSggY29sb3JzICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLmFycmF5O1xuXHRcdGxldCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY29sb3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGxldCBjb2xvciA9IGNvbG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlDb2xvcnNBcnJheSgpOiBjb2xvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdGNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3Iucjtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmc7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5iO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlWZWN0b3Iyc0FycmF5KCB2ZWN0b3JzICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLmFycmF5O1xuXHRcdGxldCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRsZXQgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVZlY3RvcjNzQXJyYXkoIHZlY3RvcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMuYXJyYXk7XG5cdFx0bGV0IG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGxldCB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHlWZWN0b3I0c0FycmF5KCB2ZWN0b3JzICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLmFycmF5O1xuXHRcdGxldCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRsZXQgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yNHNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3Iuejtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci53O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMiApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3RvcjIkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cdFx0XHRcdF92ZWN0b3IyJDEuYXBwbHlNYXRyaXgzKCBtICk7XG5cblx0XHRcdFx0dGhpcy5zZXRYWSggaSwgX3ZlY3RvcjIkMS54LCBfdmVjdG9yMiQxLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3RvciQ5LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblx0XHRcdFx0X3ZlY3RvciQ5LmFwcGx5TWF0cml4MyggbSApO1xuXG5cdFx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ5LnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkOS55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDkueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDkuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ5LnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkOS55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDkueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDkuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ5LnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkOS55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDkueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDkudHJhbnNmb3JtRGlyZWN0aW9uKCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0KCB2YWx1ZSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WCggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF07XG5cblx0fVxuXG5cdHNldFgoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFkoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXTtcblxuXHR9XG5cblx0c2V0WSggaW5kZXgsIHkgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFooIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDIgXTtcblxuXHR9XG5cblx0c2V0WiggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFcoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXTtcblxuXHR9XG5cblx0c2V0VyggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WFlaVyggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG9uVXBsb2FkKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplICkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0aXRlbVNpemU6IHRoaXMuaXRlbVNpemUsXG5cdFx0XHR0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG5cdFx0XHRhcnJheTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIHRoaXMuYXJyYXkgKSxcblx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxuXHRcdH07XG5cblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCB0aGlzLnVzYWdlICE9PSBTdGF0aWNEcmF3VXNhZ2UgKSBkYXRhLnVzYWdlID0gdGhpcy51c2FnZTtcblx0XHRpZiAoIHRoaXMudXBkYXRlUmFuZ2Uub2Zmc2V0ICE9PSAwIHx8IHRoaXMudXBkYXRlUmFuZ2UuY291bnQgIT09IC0gMSApIGRhdGEudXBkYXRlUmFuZ2UgPSB0aGlzLnVwZGF0ZVJhbmdlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuaXNCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG4vL1xuXG5jbGFzcyBJbnQ4QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBJbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFVpbnQ4QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgSW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVWludDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgSW50MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IEludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG5GbG9hdDE2QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5jbGFzcyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBGbG9hdDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IEZsb2F0NjRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxubGV0IF9pZCQxID0gMDtcblxuY29uc3QgX20xID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX29iaiA9IC8qQF9fUFVSRV9fKi8gbmV3IE9iamVjdDNEKCk7XG5jb25zdCBfb2Zmc2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2JveCQxID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuY29uc3QgX2JveE1vcnBoVGFyZ2V0cyA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcbmNvbnN0IF92ZWN0b3IkOCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX2lkJDEgKysgfSApO1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblx0XHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5pbmRleCA9IG51bGw7XG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0ge307XG5cblx0XHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBmYWxzZTtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0XHR0aGlzLnVzZXJEYXRhID0ge307XG5cblx0fVxuXG5cdGdldEluZGV4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5kZXg7XG5cblx0fVxuXG5cdHNldEluZGV4KCBpbmRleCApIHtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggaW5kZXggKSApIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IG5ldyAoIGFycmF5TmVlZHNVaW50MzIoIGluZGV4ICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kZXgsIDEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuaW5kZXggPSBpbmRleDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRBdHRyaWJ1dGUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fVxuXG5cdHNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF0gPSBhdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGVsZXRlQXR0cmlidXRlKCBuYW1lICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGhhc0F0dHJpYnV0ZSggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHRhZGRHcm91cCggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ID0gMCApIHtcblxuXHRcdHRoaXMuZ3JvdXBzLnB1c2goIHtcblxuXHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0Y291bnQ6IGNvdW50LFxuXHRcdFx0bWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleFxuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRjbGVhckdyb3VwcygpIHtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0fVxuXG5cdHNldERyYXdSYW5nZSggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwb3NpdGlvbi5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHRub3JtYWwuYXBwbHlOb3JtYWxNYXRyaXgoIG5vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IHRoaXMuYXR0cmlidXRlcy50YW5nZW50O1xuXG5cdFx0aWYgKCB0YW5nZW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRhbmdlbnQudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKTtcblxuXHRcdFx0dGFuZ2VudC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCB4LCB5LCB6ICkge1xuXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XG5cblx0XHRfbTEubWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0X20xLm1ha2VTY2FsZSggeCwgeSwgeiApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxvb2tBdCggdmVjdG9yICkge1xuXG5cdFx0X29iai5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0X29iai51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfb2JqLm1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlbnRlcigpIHtcblxuXHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggX29mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0dGhpcy50cmFuc2xhdGUoIF9vZmZzZXQueCwgX29mZnNldC55LCBfb2Zmc2V0LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRwb3NpdGlvbi5wdXNoKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIDMgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAmJiBwb3NpdGlvbi5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIGJveC4gQWx0ZXJuYXRpdmVseSBzZXQgXCJtZXNoLmZydXN0dW1DdWxsZWRcIiB0byBcImZhbHNlXCIuJywgdGhpcyApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldChcblx0XHRcdFx0bmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSxcblx0XHRcdFx0bmV3IFZlY3RvcjMoICsgSW5maW5pdHksICsgSW5maW5pdHksICsgSW5maW5pdHkgKVxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdF9ib3gkMS5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDguYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5taW4sIF9ib3gkMS5taW4gKTtcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ4ICk7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1heCwgX2JveCQxLm1heCApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveCQxLm1pbiApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94JDEubWF4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueCApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi55ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnogKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpOiBDb21wdXRlZCBtaW4vbWF4IGhhdmUgTmFOIHZhbHVlcy4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIHBvc2l0aW9uICYmIHBvc2l0aW9uLmlzR0xCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogR0xCdWZmZXJBdHRyaWJ1dGUgcmVxdWlyZXMgYSBtYW51YWwgYm91bmRpbmcgc3BoZXJlLiBBbHRlcm5hdGl2ZWx5IHNldCBcIm1lc2guZnJ1c3R1bUN1bGxlZFwiIHRvIFwiZmFsc2VcIi4nLCB0aGlzICk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUuc2V0KCBuZXcgVmVjdG9yMygpLCBJbmZpbml0eSApO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2l0aW9uICkge1xuXG5cdFx0XHQvLyBmaXJzdCwgZmluZCB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBzcGhlcmVcblxuXHRcdFx0Y29uc3QgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cblx0XHRcdF9ib3gkMS5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiApO1xuXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxuXG5cdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb25bIGkgXTtcblx0XHRcdFx0XHRfYm94TW9ycGhUYXJnZXRzLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGRWZWN0b3JzKCBfYm94JDEubWluLCBfYm94TW9ycGhUYXJnZXRzLm1pbiApO1xuXHRcdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApO1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDguYWRkVmVjdG9ycyggX2JveCQxLm1heCwgX2JveE1vcnBoVGFyZ2V0cy5tYXggKTtcblx0XHRcdFx0XHRcdF9ib3gkMS5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9ib3gkMS5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1pbiApO1xuXHRcdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdF9ib3gkMS5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0XHQvLyBzZWNvbmQsIHRyeSB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHQvLyBib3VuZGluZ1NwaGVyZSBvZiB0aGUgYm91bmRpbmdCb3g6IHNxcnQoMykgc21hbGxlciBpbiB0aGUgYmVzdCBjYXNlXG5cblx0XHRcdGxldCBtYXhSYWRpdXNTcSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdF92ZWN0b3IkOC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaSApO1xuXG5cdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IkOCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IG1vcnBoQXR0cmlidXRlLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaiApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0XHRcdF9vZmZzZXQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGogKTtcblx0XHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmFkZCggX29mZnNldCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IkOCApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xuXG5cdFx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y29tcHV0ZVRhbmdlbnRzKCkge1xuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBiYXNlZCBvbiBodHRwOi8vd3d3LnRlcmF0aG9uLmNvbS9jb2RlL3RhbmdlbnQuaHRtbFxuXHRcdC8vIChwZXIgdmVydGV4IHRhbmdlbnRzKVxuXG5cdFx0aWYgKCBpbmRleCA9PT0gbnVsbCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQgfHxcblx0XHRcdCBhdHRyaWJ1dGVzLnV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGZhaWxlZC4gTWlzc2luZyByZXF1aXJlZCBhdHRyaWJ1dGVzIChpbmRleCwgcG9zaXRpb24sIG5vcm1hbCBvciB1diknICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbmRpY2VzID0gaW5kZXguYXJyYXk7XG5cdFx0Y29uc3QgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblx0XHRjb25zdCBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG5cdFx0Y29uc3QgdXZzID0gYXR0cmlidXRlcy51di5hcnJheTtcblxuXHRcdGNvbnN0IG5WZXJ0aWNlcyA9IHBvc2l0aW9ucy5sZW5ndGggLyAzO1xuXG5cdFx0aWYgKCB0aGlzLmhhc0F0dHJpYnV0ZSggJ3RhbmdlbnQnICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3RhbmdlbnQnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCA0ICogblZlcnRpY2VzICksIDQgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGFuZ2VudHMgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3RhbmdlbnQnICkuYXJyYXk7XG5cblx0XHRjb25zdCB0YW4xID0gW10sIHRhbjIgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG5WZXJ0aWNlczsgaSArKyApIHtcblxuXHRcdFx0dGFuMVsgaSBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHRhbjJbIGkgXSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2QSA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR2QiA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR2QyA9IG5ldyBWZWN0b3IzKCksXG5cblx0XHRcdHV2QSA9IG5ldyBWZWN0b3IyKCksXG5cdFx0XHR1dkIgPSBuZXcgVmVjdG9yMigpLFxuXHRcdFx0dXZDID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdFx0c2RpciA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHR0ZGlyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRyaWFuZ2xlKCBhLCBiLCBjICkge1xuXG5cdFx0XHR2QS5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYSAqIDMgKTtcblx0XHRcdHZCLmZyb21BcnJheSggcG9zaXRpb25zLCBiICogMyApO1xuXHRcdFx0dkMuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGMgKiAzICk7XG5cblx0XHRcdHV2QS5mcm9tQXJyYXkoIHV2cywgYSAqIDIgKTtcblx0XHRcdHV2Qi5mcm9tQXJyYXkoIHV2cywgYiAqIDIgKTtcblx0XHRcdHV2Qy5mcm9tQXJyYXkoIHV2cywgYyAqIDIgKTtcblxuXHRcdFx0dkIuc3ViKCB2QSApO1xuXHRcdFx0dkMuc3ViKCB2QSApO1xuXG5cdFx0XHR1dkIuc3ViKCB1dkEgKTtcblx0XHRcdHV2Qy5zdWIoIHV2QSApO1xuXG5cdFx0XHRjb25zdCByID0gMS4wIC8gKCB1dkIueCAqIHV2Qy55IC0gdXZDLnggKiB1dkIueSApO1xuXG5cdFx0XHQvLyBzaWxlbnRseSBpZ25vcmUgZGVnZW5lcmF0ZSB1diB0cmlhbmdsZXMgaGF2aW5nIGNvaW5jaWRlbnQgb3IgY29saW5lYXIgdmVydGljZXNcblxuXHRcdFx0aWYgKCAhIGlzRmluaXRlKCByICkgKSByZXR1cm47XG5cblx0XHRcdHNkaXIuY29weSggdkIgKS5tdWx0aXBseVNjYWxhciggdXZDLnkgKS5hZGRTY2FsZWRWZWN0b3IoIHZDLCAtIHV2Qi55ICkubXVsdGlwbHlTY2FsYXIoIHIgKTtcblx0XHRcdHRkaXIuY29weSggdkMgKS5tdWx0aXBseVNjYWxhciggdXZCLnggKS5hZGRTY2FsZWRWZWN0b3IoIHZCLCAtIHV2Qy54ICkubXVsdGlwbHlTY2FsYXIoIHIgKTtcblxuXHRcdFx0dGFuMVsgYSBdLmFkZCggc2RpciApO1xuXHRcdFx0dGFuMVsgYiBdLmFkZCggc2RpciApO1xuXHRcdFx0dGFuMVsgYyBdLmFkZCggc2RpciApO1xuXG5cdFx0XHR0YW4yWyBhIF0uYWRkKCB0ZGlyICk7XG5cdFx0XHR0YW4yWyBiIF0uYWRkKCB0ZGlyICk7XG5cdFx0XHR0YW4yWyBjIF0uYWRkKCB0ZGlyICk7XG5cblx0XHR9XG5cblx0XHRsZXQgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGdyb3VwcyA9IFsge1xuXHRcdFx0XHRzdGFydDogMCxcblx0XHRcdFx0Y291bnQ6IGluZGljZXMubGVuZ3RoXG5cdFx0XHR9IF07XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuXHRcdFx0Y29uc3QgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRoYW5kbGVUcmlhbmdsZShcblx0XHRcdFx0XHRpbmRpY2VzWyBqICsgMCBdLFxuXHRcdFx0XHRcdGluZGljZXNbIGogKyAxIF0sXG5cdFx0XHRcdFx0aW5kaWNlc1sgaiArIDIgXVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCB0bXAgPSBuZXcgVmVjdG9yMygpLCB0bXAyID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBuID0gbmV3IFZlY3RvcjMoKSwgbjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVmVydGV4KCB2ICkge1xuXG5cdFx0XHRuLmZyb21BcnJheSggbm9ybWFscywgdiAqIDMgKTtcblx0XHRcdG4yLmNvcHkoIG4gKTtcblxuXHRcdFx0Y29uc3QgdCA9IHRhbjFbIHYgXTtcblxuXHRcdFx0Ly8gR3JhbS1TY2htaWR0IG9ydGhvZ29uYWxpemVcblxuXHRcdFx0dG1wLmNvcHkoIHQgKTtcblx0XHRcdHRtcC5zdWIoIG4ubXVsdGlwbHlTY2FsYXIoIG4uZG90KCB0ICkgKSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgaGFuZGVkbmVzc1xuXG5cdFx0XHR0bXAyLmNyb3NzVmVjdG9ycyggbjIsIHQgKTtcblx0XHRcdGNvbnN0IHRlc3QgPSB0bXAyLmRvdCggdGFuMlsgdiBdICk7XG5cdFx0XHRjb25zdCB3ID0gKCB0ZXN0IDwgMC4wICkgPyAtIDEuMCA6IDEuMDtcblxuXHRcdFx0dGFuZ2VudHNbIHYgKiA0IF0gPSB0bXAueDtcblx0XHRcdHRhbmdlbnRzWyB2ICogNCArIDEgXSA9IHRtcC55O1xuXHRcdFx0dGFuZ2VudHNbIHYgKiA0ICsgMiBdID0gdG1wLno7XG5cdFx0XHR0YW5nZW50c1sgdiAqIDQgKyAzIF0gPSB3O1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdGNvbnN0IGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdGZvciAoIGxldCBqID0gc3RhcnQsIGpsID0gc3RhcnQgKyBjb3VudDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0aGFuZGxlVmVydGV4KCBpbmRpY2VzWyBqICsgMCBdICk7XG5cdFx0XHRcdGhhbmRsZVZlcnRleCggaW5kaWNlc1sgaiArIDEgXSApO1xuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGljZXNbIGogKyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb21wdXRlVmVydGV4Tm9ybWFscygpIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRpZiAoIHBvc2l0aW9uQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxldCBub3JtYWxBdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblxuXHRcdFx0aWYgKCBub3JtYWxBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCAqIDMgKSwgMyApO1xuXHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5vcm1hbEF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHJlc2V0IGV4aXN0aW5nIG5vcm1hbHMgdG8gemVyb1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBub3JtYWxBdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGksIDAsIDAsIDAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcEEgPSBuZXcgVmVjdG9yMygpLCBwQiA9IG5ldyBWZWN0b3IzKCksIHBDID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IG5BID0gbmV3IFZlY3RvcjMoKSwgbkIgPSBuZXcgVmVjdG9yMygpLCBuQyA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gaW5kZXhlZCBlbGVtZW50c1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2QSA9IGluZGV4LmdldFgoIGkgKyAwICk7XG5cdFx0XHRcdFx0Y29uc3QgdkIgPSBpbmRleC5nZXRYKCBpICsgMSApO1xuXHRcdFx0XHRcdGNvbnN0IHZDID0gaW5kZXguZ2V0WCggaSArIDIgKTtcblxuXHRcdFx0XHRcdHBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCB2QSApO1xuXHRcdFx0XHRcdHBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCB2QiApO1xuXHRcdFx0XHRcdHBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCB2QyApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRuQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHZBICk7XG5cdFx0XHRcdFx0bkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QiApO1xuXHRcdFx0XHRcdG5DLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdkMgKTtcblxuXHRcdFx0XHRcdG5BLmFkZCggY2IgKTtcblx0XHRcdFx0XHRuQi5hZGQoIGNiICk7XG5cdFx0XHRcdFx0bkMuYWRkKCBjYiApO1xuXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkEsIG5BLngsIG5BLnksIG5BLnogKTtcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCB2QiwgbkIueCwgbkIueSwgbkIueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIHZDLCBuQy54LCBuQy55LCBuQy56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRwQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDAgKTtcblx0XHRcdFx0XHRwQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDEgKTtcblx0XHRcdFx0XHRwQy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDIgKTtcblxuXHRcdFx0XHRcdGNiLnN1YlZlY3RvcnMoIHBDLCBwQiApO1xuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xuXHRcdFx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSArIDAsIGNiLngsIGNiLnksIGNiLnogKTtcblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMSwgY2IueCwgY2IueSwgY2IueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGkgKyAyLCBjYi54LCBjYi55LCBjYi56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpO1xuXG5cdFx0XHRub3JtYWxBdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRtZXJnZSggZ2VvbWV0cnksIG9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2Zmc2V0ID0gMDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogT3ZlcndyaXRpbmcgb3JpZ2luYWwgZ2VvbWV0cnksIHN0YXJ0aW5nIGF0IG9mZnNldD0wLiAnXG5cdFx0XHRcdCsgJ1VzZSBCdWZmZXJHZW9tZXRyeVV0aWxzLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZvciBsb3NzbGVzcyBtZXJnZS4nXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkxID0gYXR0cmlidXRlMS5hcnJheTtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlMiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkyID0gYXR0cmlidXRlMi5hcnJheTtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlT2Zmc2V0ID0gYXR0cmlidXRlMi5pdGVtU2l6ZSAqIG9mZnNldDtcblx0XHRcdGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKCBhdHRyaWJ1dGVBcnJheTIubGVuZ3RoLCBhdHRyaWJ1dGVBcnJheTEubGVuZ3RoIC0gYXR0cmlidXRlT2Zmc2V0ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaiA9IGF0dHJpYnV0ZU9mZnNldDsgaSA8IGxlbmd0aDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bm9ybWFsaXplTm9ybWFscygpIHtcblxuXHRcdGNvbnN0IG5vcm1hbHMgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ4Lm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnNldFhZWiggaSwgX3ZlY3RvciQ4LngsIF92ZWN0b3IkOC55LCBfdmVjdG9yJDgueiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR0b05vbkluZGV4ZWQoKSB7XG5cblx0XHRmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdFx0Y29uc3QgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cdFx0XHRjb25zdCBub3JtYWxpemVkID0gYXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cblx0XHRcdGNvbnN0IGFycmF5MiA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggaW5kaWNlcy5sZW5ndGggKiBpdGVtU2l6ZSApO1xuXG5cdFx0XHRsZXQgaW5kZXggPSAwLCBpbmRleDIgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogYXR0cmlidXRlLmRhdGEuc3RyaWRlICsgYXR0cmlidXRlLm9mZnNldDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBpdGVtU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheTIsIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeS50b05vbkluZGV4ZWQoKTogQnVmZmVyR2VvbWV0cnkgaXMgYWxyZWFkeSBub24taW5kZXhlZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0Z2VvbWV0cnkyLnNldEF0dHJpYnV0ZSggbmFtZSwgbmV3QXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSB0aGlzLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEFycmF5ID0gW107XG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sgbmFtZSBdOyAvLyBtb3JwaEF0dHJpYnV0ZTogYXJyYXkgb2YgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlWyBpIF07XG5cblx0XHRcdFx0Y29uc3QgbmV3QXR0cmlidXRlID0gY29udmVydEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRpY2VzICk7XG5cblx0XHRcdFx0bW9ycGhBcnJheS5wdXNoKCBuZXdBdHRyaWJ1dGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeTIubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBtb3JwaEFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkyLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdGdlb21ldHJ5Mi5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQnVmZmVyR2VvbWV0cnknLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdCdWZmZXJHZW9tZXRyeS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIEJ1ZmZlckdlb21ldHJ5IHNlcmlhbGl6YXRpb25cblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcnNbIGtleSBdICE9PSB1bmRlZmluZWQgKSBkYXRhWyBrZXkgXSA9IHBhcmFtZXRlcnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZm9yIHNpbXBsaWNpdHkgdGhlIGNvZGUgYXNzdW1lcyBhdHRyaWJ1dGVzIGFyZSBub3Qgc2hhcmVkIGFjcm9zcyBnZW9tZXRyaWVzLCBzZWUgIzE1ODExXG5cblx0XHRkYXRhLmRhdGEgPSB7IGF0dHJpYnV0ZXM6IHt9IH07XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRkYXRhLmRhdGEuaW5kZXggPSB7XG5cdFx0XHRcdHR5cGU6IGluZGV4LmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG5cdFx0XHRcdGFycmF5OiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggaW5kZXguYXJyYXkgKVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdGRhdGEuZGF0YS5hdHRyaWJ1dGVzWyBrZXkgXSA9IGF0dHJpYnV0ZS50b0pTT04oIGRhdGEuZGF0YSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0bGV0IGhhc01vcnBoQXR0cmlidXRlcyA9IGZhbHNlO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIHRoaXMubW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVBcnJheSA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5WyBpIF07XG5cblx0XHRcdFx0YXJyYXkucHVzaCggYXR0cmlidXRlLnRvSlNPTiggZGF0YS5kYXRhICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGFycmF5Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0bW9ycGhBdHRyaWJ1dGVzWyBrZXkgXSA9IGFycmF5O1xuXG5cdFx0XHRcdGhhc01vcnBoQXR0cmlidXRlcyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggaGFzTW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRkYXRhLmRhdGEubW9ycGhBdHRyaWJ1dGVzID0gbW9ycGhBdHRyaWJ1dGVzO1xuXHRcdFx0ZGF0YS5kYXRhLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSB0aGlzLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmJvdW5kaW5nU3BoZXJlID0ge1xuXHRcdFx0XHRjZW50ZXI6IGJvdW5kaW5nU3BoZXJlLmNlbnRlci50b0FycmF5KCksXG5cdFx0XHRcdHJhZGl1czogYm91bmRpbmdTcGhlcmUucmFkaXVzXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIHVzZWQgZm9yIHN0b3JpbmcgY2xvbmVkLCBzaGFyZWQgZGF0YVxuXG5cdFx0Y29uc3QgZGF0YSA9IHt9O1xuXG5cdFx0Ly8gbmFtZVxuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHQvLyBpbmRleFxuXG5cdFx0Y29uc3QgaW5kZXggPSBzb3VyY2UuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnNldEluZGV4KCBpbmRleC5jbG9uZSggZGF0YSApICk7XG5cblx0XHR9XG5cblx0XHQvLyBhdHRyaWJ1dGVzXG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBuYW1lLCBhdHRyaWJ1dGUuY2xvbmUoIGRhdGEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggYXR0cmlidXRlc1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gc291cmNlLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSggZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHNvdXJjZS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0Y29uc3QgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdGNvbnN0IGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xuXG5cdFx0aWYgKCBib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBzcGhlcmVcblxuXHRcdGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gc291cmNlLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBkcmF3IHJhbmdlXG5cblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHNvdXJjZS5kcmF3UmFuZ2Uuc3RhcnQ7XG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBzb3VyY2UuZHJhd1JhbmdlLmNvdW50O1xuXG5cdFx0Ly8gdXNlciBkYXRhXG5cblx0XHR0aGlzLnVzZXJEYXRhID0gc291cmNlLnVzZXJEYXRhO1xuXG5cdFx0Ly8gZ2VvbWV0cnkgZ2VuZXJhdG9yIHBhcmFtZXRlcnNcblxuXHRcdGlmICggc291cmNlLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn1cblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmlzQnVmZmVyR2VvbWV0cnkgPSB0cnVlO1xuXG5jb25zdCBfaW52ZXJzZU1hdHJpeCQyID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3JheSQyID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7XG5jb25zdCBfc3BoZXJlJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcblxuY29uc3QgX3ZBJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkIkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QyQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfdGVtcEEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdGVtcEIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdGVtcEMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9tb3JwaEEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbW9ycGhCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21vcnBoQyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3V2QSQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3V2QiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3V2QyQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jb25zdCBfaW50ZXJzZWN0aW9uUG9pbnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTWVzaCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaCc7XG5cblx0XHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnNsaWNlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHNvdXJjZS5tYXRlcmlhbDtcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXHRcdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1lc2gudXBkYXRlTW9ycGhUYXJnZXRzKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkMy5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUkMy5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQzICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdF9pbnZlcnNlTWF0cml4JDIuY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRfcmF5JDIuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXgkMiApO1xuXG5cdFx0Ly8gQ2hlY2sgYm91bmRpbmdCb3ggYmVmb3JlIGNvbnRpbnVpbmdcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX3JheSQyLmludGVyc2VjdHNCb3goIGdlb21ldHJ5LmJvdW5kaW5nQm94ICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGludGVyc2VjdGlvbjtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGNvbnN0IG1vcnBoUG9zaXRpb24gPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXHRcdFx0Y29uc3QgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xuXHRcdFx0Y29uc3QgdXYyID0gZ2VvbWV0cnkuYXR0cmlidXRlcy51djI7XG5cdFx0XHRjb25zdCBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cdFx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gaW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICkgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBqICk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGIgPSBpbmRleC5nZXRYKCBqICsgMSApO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXkkMiwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaSApO1xuXHRcdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0XHRjb25zdCBjID0gaW5kZXguZ2V0WCggaSArIDIgKTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSQyLCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBub24taW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICkgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGEgPSBqO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBiID0gaiArIDE7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGMgPSBqICsgMjtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXkkMiwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaiAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIG5vbi1pbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZS5tYXRlcmlhbEluZGV4ID0gZ3JvdXAubWF0ZXJpYWxJbmRleDtcblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYSA9IGk7XG5cdFx0XHRcdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRcdFx0XHRjb25zdCBjID0gaSArIDI7XG5cblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIG1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXkkMiwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaC5yYXljYXN0KCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbk1lc2gucHJvdG90eXBlLmlzTWVzaCA9IHRydWU7XG5cbmZ1bmN0aW9uIGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcEEsIHBCLCBwQywgcG9pbnQgKSB7XG5cblx0bGV0IGludGVyc2VjdDtcblxuXHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQywgcEIsIHBBLCB0cnVlLCBwb2ludCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBBLCBwQiwgcEMsIG1hdGVyaWFsLnNpZGUgIT09IERvdWJsZVNpZGUsIHBvaW50ICk7XG5cblx0fVxuXG5cdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTtcblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkICk7XG5cblx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdHBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxuXHRcdG9iamVjdDogb2JqZWN0XG5cdH07XG5cbn1cblxuZnVuY3Rpb24gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCBtb3JwaFBvc2l0aW9uLCBtb3JwaFRhcmdldHNSZWxhdGl2ZSwgdXYsIHV2MiwgYSwgYiwgYyApIHtcblxuXHRfdkEkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYSApO1xuXHRfdkIkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYiApO1xuXHRfdkMkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYyApO1xuXG5cdGNvbnN0IG1vcnBoSW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0aWYgKCBtb3JwaFBvc2l0aW9uICYmIG1vcnBoSW5mbHVlbmNlcyApIHtcblxuXHRcdF9tb3JwaEEuc2V0KCAwLCAwLCAwICk7XG5cdFx0X21vcnBoQi5zZXQoIDAsIDAsIDAgKTtcblx0XHRfbW9ycGhDLnNldCggMCwgMCwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdO1xuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaFBvc2l0aW9uWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlID09PSAwICkgY29udGludWU7XG5cblx0XHRcdF90ZW1wQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgYSApO1xuXHRcdFx0X3RlbXBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBiICk7XG5cdFx0XHRfdGVtcEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGMgKTtcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRfbW9ycGhBLmFkZFNjYWxlZFZlY3RvciggX3RlbXBBLCBpbmZsdWVuY2UgKTtcblx0XHRcdFx0X21vcnBoQi5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQiwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdF9tb3JwaEMuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEMsIGluZmx1ZW5jZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9tb3JwaEEuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEEuc3ViKCBfdkEkMSApLCBpbmZsdWVuY2UgKTtcblx0XHRcdFx0X21vcnBoQi5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQi5zdWIoIF92QiQxICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhDLmFkZFNjYWxlZFZlY3RvciggX3RlbXBDLnN1YiggX3ZDJDEgKSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdF92QSQxLmFkZCggX21vcnBoQSApO1xuXHRcdF92QiQxLmFkZCggX21vcnBoQiApO1xuXHRcdF92QyQxLmFkZCggX21vcnBoQyApO1xuXG5cdH1cblxuXHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0b2JqZWN0LmJvbmVUcmFuc2Zvcm0oIGEsIF92QSQxICk7XG5cdFx0b2JqZWN0LmJvbmVUcmFuc2Zvcm0oIGIsIF92QiQxICk7XG5cdFx0b2JqZWN0LmJvbmVUcmFuc2Zvcm0oIGMsIF92QyQxICk7XG5cblx0fVxuXG5cdGNvbnN0IGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgX3ZBJDEsIF92QiQxLCBfdkMkMSwgX2ludGVyc2VjdGlvblBvaW50ICk7XG5cblx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRpZiAoIHV2ICkge1xuXG5cdFx0XHRfdXZBJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYsIGEgKTtcblx0XHRcdF91dkIkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB1diwgYiApO1xuXHRcdFx0X3V2QyQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSQxLCBfdkIkMSwgX3ZDJDEsIF91dkEkMSwgX3V2QiQxLCBfdXZDJDEsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXYyICkge1xuXG5cdFx0XHRfdXZBJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBhICk7XG5cdFx0XHRfdXZCJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBiICk7XG5cdFx0XHRfdXZDJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi51djIgPSBUcmlhbmdsZS5nZXRVViggX2ludGVyc2VjdGlvblBvaW50LCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBfdXZBJDEsIF91dkIkMSwgX3V2QyQxLCBuZXcgVmVjdG9yMigpICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBmYWNlID0ge1xuXHRcdFx0YTogYSxcblx0XHRcdGI6IGIsXG5cdFx0XHRjOiBjLFxuXHRcdFx0bm9ybWFsOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0bWF0ZXJpYWxJbmRleDogMFxuXHRcdH07XG5cblx0XHRUcmlhbmdsZS5nZXROb3JtYWwoIF92QSQxLCBfdkIkMSwgX3ZDJDEsIGZhY2Uubm9ybWFsICk7XG5cblx0XHRpbnRlcnNlY3Rpb24uZmFjZSA9IGZhY2U7XG5cblx0fVxuXG5cdHJldHVybiBpbnRlcnNlY3Rpb247XG5cbn1cblxuY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxLCBkZXB0aFNlZ21lbnRzID0gMSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQm94R2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRkZXB0aDogZGVwdGgsXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHRcdH07XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHQvLyBzZWdtZW50c1xuXG5cdFx0d2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKTtcblx0XHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICk7XG5cdFx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCBudW1iZXJPZlZlcnRpY2VzID0gMDtcblx0XHRsZXQgZ3JvdXBTdGFydCA9IDA7XG5cblx0XHQvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeVxuXG5cdFx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgLSAxLCAtIDEsIGRlcHRoLCBoZWlnaHQsIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMCApOyAvLyBweFxuXHRcdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgLSB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDEgKTsgLy8gbnhcblx0XHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3onLCAneScsIDEsIC0gMSwgd2lkdGgsIGRlcHRoLCAtIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMyApOyAvLyBueVxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIDEsIC0gMSwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA0ICk7IC8vIHB6XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHRcdGNvbnN0IHNlZ21lbnRXaWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdFx0XHRjb25zdCBzZWdtZW50SGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7XG5cblx0XHRcdGNvbnN0IHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHRcdGNvbnN0IGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyO1xuXHRcdFx0Y29uc3QgZGVwdGhIYWxmID0gZGVwdGggLyAyO1xuXG5cdFx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRcdGxldCB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdFx0Y29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudEhlaWdodCAtIGhlaWdodEhhbGY7XG5cblx0XHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuXHRcdFx0XHRcdHZlY3RvclsgdSBdID0geCAqIHVkaXI7XG5cdFx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0XHR2ZWN0b3JbIHcgXSA9IGRlcHRoSGFsZjtcblxuXHRcdFx0XHRcdC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gdmVydGV4IGJ1ZmZlclxuXG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuXHRcdFx0XHRcdHZlY3RvclsgdSBdID0gMDtcblx0XHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aCA+IDAgPyAxIDogLSAxO1xuXG5cdFx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byBub3JtYWwgYnVmZmVyXG5cblx0XHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHRcdC8vIHV2c1xuXG5cdFx0XHRcdFx0dXZzLnB1c2goIGl4IC8gZ3JpZFggKTtcblx0XHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdFx0XHQvLyBjb3VudGVyc1xuXG5cdFx0XHRcdFx0dmVydGV4Q291bnRlciArPSAxO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdC8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlXG5cdFx0XHQvLyAyLiBhIHNpbmdsZSBzZWdtZW50IGNvbnNpc3RzIG9mIHR3byBmYWNlc1xuXHRcdFx0Ly8gMy4gc28gd2UgbmVlZCB0byBnZW5lcmF0ZSBzaXggKDIqMykgaW5kaWNlcyBwZXIgc2VnbWVudFxuXG5cdFx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaXggPSAwOyBpeCA8IGdyaWRYOyBpeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdFx0XHRjb25zdCBiID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0XHRjb25zdCBjID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHRcdFx0Ly8gaW5jcmVhc2UgY291bnRlclxuXG5cdFx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgbWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0XHQvLyB1cGRhdGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzXG5cblx0XHRcdG51bWJlck9mVmVydGljZXMgKz0gdmVydGV4Q291bnRlcjtcblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBCb3hHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5kZXB0aFNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVW5pZm9ybSBVdGlsaXRpZXNcbiAqL1xuXG5mdW5jdGlvbiBjbG9uZVVuaWZvcm1zKCBzcmMgKSB7XG5cblx0Y29uc3QgZHN0ID0ge307XG5cblx0Zm9yICggY29uc3QgdSBpbiBzcmMgKSB7XG5cblx0XHRkc3RbIHUgXSA9IHt9O1xuXG5cdFx0Zm9yICggY29uc3QgcCBpbiBzcmNbIHUgXSApIHtcblxuXHRcdFx0Y29uc3QgcHJvcGVydHkgPSBzcmNbIHUgXVsgcCBdO1xuXG5cdFx0XHRpZiAoIHByb3BlcnR5ICYmICggcHJvcGVydHkuaXNDb2xvciB8fFxuXHRcdFx0XHRwcm9wZXJ0eS5pc01hdHJpeDMgfHwgcHJvcGVydHkuaXNNYXRyaXg0IHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzVmVjdG9yMiB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjMgfHwgcHJvcGVydHkuaXNWZWN0b3I0IHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzVGV4dHVyZSB8fCBwcm9wZXJ0eS5pc1F1YXRlcm5pb24gKSApIHtcblxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHkuY2xvbmUoKTtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcHJvcGVydHkgKSApIHtcblxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHkuc2xpY2UoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGRzdDtcblxufVxuXG5mdW5jdGlvbiBtZXJnZVVuaWZvcm1zKCB1bmlmb3JtcyApIHtcblxuXHRjb25zdCBtZXJnZWQgPSB7fTtcblxuXHRmb3IgKCBsZXQgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7XG5cblx0XHRjb25zdCB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7XG5cblx0XHRmb3IgKCBjb25zdCBwIGluIHRtcCApIHtcblxuXHRcdFx0bWVyZ2VkWyBwIF0gPSB0bXBbIHAgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIG1lcmdlZDtcblxufVxuXG4vLyBMZWdhY3lcblxuY29uc3QgVW5pZm9ybXNVdGlscyA9IHsgY2xvbmU6IGNsb25lVW5pZm9ybXMsIG1lcmdlOiBtZXJnZVVuaWZvcm1zIH07XG5cbnZhciBkZWZhdWx0X3ZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7XG5cbnZhciBkZWZhdWx0X2ZyYWdtZW50ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZGVmaW5lczogeyBcImxhYmVsXCIgOiBcInZhbHVlXCIgfSxcbiAqICB1bmlmb3JtczogeyBcInBhcmFtZXRlcjFcIjogeyB2YWx1ZTogMS4wIH0sIFwicGFyYW1ldGVyMlwiOiB7IHZhbHVlMjogMiB9IH0sXG4gKlxuICogIGZyYWdtZW50U2hhZGVyOiA8c3RyaW5nPixcbiAqICB2ZXJ0ZXhTaGFkZXI6IDxzdHJpbmc+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIGxpZ2h0czogPGJvb2w+XG4gKiB9XG4gKi9cblxuY2xhc3MgU2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NoYWRlck1hdGVyaWFsJztcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHt9O1xuXHRcdHRoaXMudW5pZm9ybXMgPSB7fTtcblxuXHRcdHRoaXMudmVydGV4U2hhZGVyID0gZGVmYXVsdF92ZXJ0ZXg7XG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGRlZmF1bHRfZnJhZ21lbnQ7XG5cblx0XHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHRcdHRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nXG5cdFx0dGhpcy5saWdodHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBsaWdodHNcblx0XHR0aGlzLmNsaXBwaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2UgdXNlci1kZWZpbmVkIGNsaXBwaW5nIHBsYW5lc1xuXG5cdFx0dGhpcy5leHRlbnNpb25zID0ge1xuXHRcdFx0ZGVyaXZhdGl2ZXM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRlcml2YXRpdmVzXG5cdFx0XHRmcmFnRGVwdGg6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGZyYWdtZW50IGRlcHRoIHZhbHVlc1xuXHRcdFx0ZHJhd0J1ZmZlcnM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRyYXcgYnVmZmVyc1xuXHRcdFx0c2hhZGVyVGV4dHVyZUxPRDogZmFsc2UgLy8gc2V0IHRvIHVzZSBzaGFkZXIgdGV4dHVyZSBMT0Rcblx0XHR9O1xuXG5cdFx0Ly8gV2hlbiByZW5kZXJlZCBnZW9tZXRyeSBkb2Vzbid0IGluY2x1ZGUgdGhlc2UgYXR0cmlidXRlcyBidXQgdGhlIG1hdGVyaWFsIGRvZXMsXG5cdFx0Ly8gdXNlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGluIFdlYkdMLiBUaGlzIGF2b2lkcyBlcnJvcnMgd2hlbiBidWZmZXIgZGF0YSBpcyBtaXNzaW5nLlxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHtcblx0XHRcdCdjb2xvcic6IFsgMSwgMSwgMSBdLFxuXHRcdFx0J3V2JzogWyAwLCAwIF0sXG5cdFx0XHQndXYyJzogWyAwLCAwIF1cblx0XHR9O1xuXG5cdFx0dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gbnVsbDtcblxuXHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHBhcmFtZXRlcnMuYXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TaGFkZXJNYXRlcmlhbDogYXR0cmlidXRlcyBzaG91bGQgbm93IGJlIGRlZmluZWQgaW4gVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xuXHRcdHRoaXMudmVydGV4U2hhZGVyID0gc291cmNlLnZlcnRleFNoYWRlcjtcblxuXHRcdHRoaXMudW5pZm9ybXMgPSBjbG9uZVVuaWZvcm1zKCBzb3VyY2UudW5pZm9ybXMgKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UuZGVmaW5lcyApO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0XHR0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nO1xuXG5cdFx0dGhpcy5leHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5leHRlbnNpb25zICk7XG5cblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gc291cmNlLmdsc2xWZXJzaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEuZ2xzbFZlcnNpb24gPSB0aGlzLmdsc2xWZXJzaW9uO1xuXHRcdGRhdGEudW5pZm9ybXMgPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gdGhpcy51bmlmb3JtcyApIHtcblxuXHRcdFx0Y29uc3QgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcblx0XHRcdGNvbnN0IHZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9KU09OKCBtZXRhICkudXVpZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0XHR0eXBlOiAnYycsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLmdldEhleCgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMiApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YyJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YzJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3Y0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4MyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ20zJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIG5vdGU6IHRoZSBhcnJheSB2YXJpYW50cyB2MnYsIHYzdiwgdjR2LCBtNHYgYW5kIHR2IGFyZSBub3Qgc3VwcG9ydGVkIHNvIGZhclxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLmRlZmluZXMgKS5sZW5ndGggPiAwICkgZGF0YS5kZWZpbmVzID0gdGhpcy5kZWZpbmVzO1xuXG5cdFx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcblx0XHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbnMgPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiB0aGlzLmV4dGVuc2lvbnMgKSB7XG5cblx0XHRcdGlmICggdGhpcy5leHRlbnNpb25zWyBrZXkgXSA9PT0gdHJ1ZSApIGV4dGVuc2lvbnNbIGtleSBdID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggT2JqZWN0LmtleXMoIGV4dGVuc2lvbnMgKS5sZW5ndGggPiAwICkgZGF0YS5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cbmNsYXNzIENhbWVyYSBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhJztcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggc291cmNlLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0V29ybGREaXJlY3Rpb24oIHRhcmdldCApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRjb25zdCBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50cztcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAtIGVbIDggXSwgLSBlWyA5IF0sIC0gZVsgMTAgXSApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xuXG5cdFx0c3VwZXIudXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5DYW1lcmEucHJvdG90eXBlLmlzQ2FtZXJhID0gdHJ1ZTtcblxuY2xhc3MgUGVyc3BlY3RpdmVDYW1lcmEgZXh0ZW5kcyBDYW1lcmEge1xuXG5cdGNvbnN0cnVjdG9yKCBmb3YgPSA1MCwgYXNwZWN0ID0gMSwgbmVhciA9IDAuMSwgZmFyID0gMjAwMCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUGVyc3BlY3RpdmVDYW1lcmEnO1xuXG5cdFx0dGhpcy5mb3YgPSBmb3Y7XG5cdFx0dGhpcy56b29tID0gMTtcblxuXHRcdHRoaXMubmVhciA9IG5lYXI7XG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cdFx0dGhpcy5mb2N1cyA9IDEwO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHRcdHRoaXMuZmlsbUdhdWdlID0gMzU7XHQvLyB3aWR0aCBvZiB0aGUgZmlsbSAoZGVmYXVsdCBpbiBtaWxsaW1ldGVycylcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSAwO1x0Ly8gaG9yaXpvbnRhbCBmaWxtIG9mZnNldCAoc2FtZSB1bml0IGFzIGdhdWdlKVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZm92ID0gc291cmNlLmZvdjtcblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBzb3VyY2UuYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0dGhpcy5maWxtR2F1Z2UgPSBzb3VyY2UuZmlsbUdhdWdlO1xuXHRcdHRoaXMuZmlsbU9mZnNldCA9IHNvdXJjZS5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBGT1YgYnkgZm9jYWwgbGVuZ3RoIGluIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgLmZpbG1HYXVnZS5cblx0ICpcblx0ICogVGhlIGRlZmF1bHQgZmlsbSBnYXVnZSBpcyAzNSwgc28gdGhhdCB0aGUgZm9jYWwgbGVuZ3RoIGNhbiBiZSBzcGVjaWZpZWQgZm9yXG5cdCAqIGEgMzVtbSAoZnVsbCBmcmFtZSkgY2FtZXJhLlxuXHQgKlxuXHQgKiBWYWx1ZXMgZm9yIGZvY2FsIGxlbmd0aCBhbmQgZmlsbSBnYXVnZSBtdXN0IGhhdmUgdGhlIHNhbWUgdW5pdC5cblx0ICovXG5cdHNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApIHtcblxuXHRcdC8qKiBzZWUge0BsaW5rIGh0dHA6Ly93d3cuYm9iYXRraW5zLmNvbS9waG90b2dyYXBoeS90ZWNobmljYWwvZmllbGRfb2Zfdmlldy5odG1sfSAqL1xuXHRcdGNvbnN0IHZFeHRlbnRTbG9wZSA9IDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gZm9jYWxMZW5ndGg7XG5cblx0XHR0aGlzLmZvdiA9IFJBRDJERUcgKiAyICogTWF0aC5hdGFuKCB2RXh0ZW50U2xvcGUgKTtcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IC5mb3YgYW5kIC5maWxtR2F1Z2UuXG5cdCAqL1xuXHRnZXRGb2NhbExlbmd0aCgpIHtcblxuXHRcdGNvbnN0IHZFeHRlbnRTbG9wZSA9IE1hdGgudGFuKCBERUcyUkFEICogMC41ICogdGhpcy5mb3YgKTtcblxuXHRcdHJldHVybiAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIHZFeHRlbnRTbG9wZTtcblxuXHR9XG5cblx0Z2V0RWZmZWN0aXZlRk9WKCkge1xuXG5cdFx0cmV0dXJuIFJBRDJERUcgKiAyICogTWF0aC5hdGFuKFxuXHRcdFx0TWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7XG5cblx0fVxuXG5cdGdldEZpbG1XaWR0aCgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBwb3J0cmFpdCBmb3JtYXQgKGFzcGVjdCA8IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fVxuXG5cdGdldEZpbG1IZWlnaHQoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gbGFuZHNjYXBlIGZvcm1hdCAoYXNwZWN0ID4gMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYW4gb2Zmc2V0IGluIGEgbGFyZ2VyIGZydXN0dW0uIFRoaXMgaXMgdXNlZnVsIGZvciBtdWx0aS13aW5kb3cgb3Jcblx0ICogbXVsdGktbW9uaXRvci9tdWx0aS1tYWNoaW5lIHNldHVwcy5cblx0ICpcblx0ICogRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIDN4MiBtb25pdG9ycyBhbmQgZWFjaCBtb25pdG9yIGlzIDE5MjB4MTA4MCBhbmRcblx0ICogdGhlIG1vbml0b3JzIGFyZSBpbiBncmlkIGxpa2UgdGhpc1xuXHQgKlxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEEgfCBCIHwgQyB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKiAgIHwgRCB8IEUgfCBGIHxcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqXG5cdCAqIHRoZW4gZm9yIGVhY2ggbW9uaXRvciB5b3Ugd291bGQgY2FsbCBpdCBsaWtlIHRoaXNcblx0ICpcblx0ICogICBjb25zdCB3ID0gMTkyMDtcblx0ICogICBjb25zdCBoID0gMTA4MDtcblx0ICogICBjb25zdCBmdWxsV2lkdGggPSB3ICogMztcblx0ICogICBjb25zdCBmdWxsSGVpZ2h0ID0gaCAqIDI7XG5cdCAqXG5cdCAqICAgLS1BLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUItLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tQy0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1ELS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDEsIHcsIGggKTtcblx0ICogICAtLUUtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMSwgdywgaCApO1xuXHQgKiAgIC0tRi0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDIsIGggKiAxLCB3LCBoICk7XG5cdCAqXG5cdCAqICAgTm90ZSB0aGVyZSBpcyBubyByZWFzb24gbW9uaXRvcnMgaGF2ZSB0byBiZSB0aGUgc2FtZSBzaXplIG9yIGluIGEgZ3JpZC5cblx0ICovXG5cdHNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHRoaXMuYXNwZWN0ID0gZnVsbFdpZHRoIC8gZnVsbEhlaWdodDtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y2xlYXJWaWV3T2Zmc2V0KCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcblxuXHRcdGNvbnN0IG5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0bGV0IHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb207XG5cdFx0bGV0IGhlaWdodCA9IDIgKiB0b3A7XG5cdFx0bGV0IHdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQ7XG5cdFx0bGV0IGxlZnQgPSAtIDAuNSAqIHdpZHRoO1xuXHRcdGNvbnN0IHZpZXcgPSB0aGlzLnZpZXc7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcblxuXHRcdFx0Y29uc3QgZnVsbFdpZHRoID0gdmlldy5mdWxsV2lkdGgsXG5cdFx0XHRcdGZ1bGxIZWlnaHQgPSB2aWV3LmZ1bGxIZWlnaHQ7XG5cblx0XHRcdGxlZnQgKz0gdmlldy5vZmZzZXRYICogd2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHR0b3AgLT0gdmlldy5vZmZzZXRZICogaGVpZ2h0IC8gZnVsbEhlaWdodDtcblx0XHRcdHdpZHRoICo9IHZpZXcud2lkdGggLyBmdWxsV2lkdGg7XG5cdFx0XHRoZWlnaHQgKj0gdmlldy5oZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2tldyA9IHRoaXMuZmlsbU9mZnNldDtcblx0XHRpZiAoIHNrZXcgIT09IDAgKSBsZWZ0ICs9IG5lYXIgKiBza2V3IC8gdGhpcy5nZXRGaWxtV2lkdGgoKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIGxlZnQgKyB3aWR0aCwgdG9wLCB0b3AgLSBoZWlnaHQsIG5lYXIsIHRoaXMuZmFyICk7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMucHJvamVjdGlvbk1hdHJpeCApLmludmVydCgpO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5mb3YgPSB0aGlzLmZvdjtcblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblx0XHRkYXRhLm9iamVjdC5mb2N1cyA9IHRoaXMuZm9jdXM7XG5cblx0XHRkYXRhLm9iamVjdC5hc3BlY3QgPSB0aGlzLmFzcGVjdDtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZpbG1HYXVnZSA9IHRoaXMuZmlsbUdhdWdlO1xuXHRcdGRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLmlzUGVyc3BlY3RpdmVDYW1lcmEgPSB0cnVlO1xuXG5jb25zdCBmb3YgPSA5MCwgYXNwZWN0ID0gMTtcblxuY2xhc3MgQ3ViZUNhbWVyYSBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbmVhciwgZmFyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1YmVDYW1lcmEnO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgIT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5DdWJlQ2FtZXJhOiBUaGUgY29uc3RydWN0b3Igbm93IGV4cGVjdHMgYW4gaW5zdGFuY2Ugb2YgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGFzIHRoaXJkIHBhcmFtZXRlci4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdGNvbnN0IGNhbWVyYVBYID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhUFgubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhUFgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRjYW1lcmFQWC5sb29rQXQoIG5ldyBWZWN0b3IzKCAxLCAwLCAwICkgKTtcblx0XHR0aGlzLmFkZCggY2FtZXJhUFggKTtcblxuXHRcdGNvbnN0IGNhbWVyYU5YID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhTlgubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhTlgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0XHRjYW1lcmFOWC5sb29rQXQoIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSApO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFOWCApO1xuXG5cdFx0Y29uc3QgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFQWS5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHRjYW1lcmFQWS51cC5zZXQoIDAsIDAsIDEgKTtcblx0XHRjYW1lcmFQWS5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0XHR0aGlzLmFkZCggY2FtZXJhUFkgKTtcblxuXHRcdGNvbnN0IGNhbWVyYU5ZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhTlkubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAtIDEgKTtcblx0XHRjYW1lcmFOWS5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAtIDEsIDAgKSApO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFOWSApO1xuXG5cdFx0Y29uc3QgY2FtZXJhUFogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFQWi5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHRjYW1lcmFQWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRcdGNhbWVyYVBaLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSApO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFQWiApO1xuXG5cdFx0Y29uc3QgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFOWi5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHRjYW1lcmFOWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRcdGNhbWVyYU5aLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApICk7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5aICk7XG5cblx0fVxuXG5cdHVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0O1xuXG5cdFx0Y29uc3QgWyBjYW1lcmFQWCwgY2FtZXJhTlgsIGNhbWVyYVBZLCBjYW1lcmFOWSwgY2FtZXJhUFosIGNhbWVyYU5aIF0gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Y29uc3QgY3VycmVudFhyRW5hYmxlZCA9IHJlbmRlcmVyLnhyLmVuYWJsZWQ7XG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0cmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBYICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMSApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5YICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMiApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBZICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMyApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5ZICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBaICk7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgNSApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5aICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmNsYXNzIEN1YmVUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRcdGltYWdlcyA9IGltYWdlcyAhPT0gdW5kZWZpbmVkID8gaW1hZ2VzIDogW107XG5cdFx0bWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0XHRzdXBlciggaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0fVxuXG5cdGdldCBpbWFnZXMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbWFnZTtcblxuXHR9XG5cblx0c2V0IGltYWdlcyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmltYWdlID0gdmFsdWU7XG5cblx0fVxuXG59XG5cbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggc2l6ZSwgc2l6ZSwgb3B0aW9ucyApO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSB7IHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIGRlcHRoOiAxIH07XG5cdFx0Y29uc3QgaW1hZ2VzID0gWyBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlIF07XG5cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoIGltYWdlcywgb3B0aW9ucy5tYXBwaW5nLCBvcHRpb25zLndyYXBTLCBvcHRpb25zLndyYXBULCBvcHRpb25zLm1hZ0ZpbHRlciwgb3B0aW9ucy5taW5GaWx0ZXIsIG9wdGlvbnMuZm9ybWF0LCBvcHRpb25zLnR5cGUsIG9wdGlvbnMuYW5pc290cm9weSwgb3B0aW9ucy5lbmNvZGluZyApO1xuXG5cdFx0Ly8gQnkgY29udmVudGlvbiAtLSBsaWtlbHkgYmFzZWQgb24gdGhlIFJlbmRlck1hbiBzcGVjIGZyb20gdGhlIDE5OTAncyAtLSBjdWJlIG1hcHMgYXJlIHNwZWNpZmllZCBieSBXZWJHTCAoYW5kIHRocmVlLmpzKVxuXHRcdC8vIGluIGEgY29vcmRpbmF0ZSBzeXN0ZW0gaW4gd2hpY2ggcG9zaXRpdmUteCBpcyB0byB0aGUgcmlnaHQgd2hlbiBsb29raW5nIHVwIHRoZSBwb3NpdGl2ZS16IGF4aXMgLS0gaW4gb3RoZXIgd29yZHMsXG5cdFx0Ly8gaW4gYSBsZWZ0LWhhbmRlZCBjb29yZGluYXRlIHN5c3RlbS4gQnkgY29udGludWluZyB0aGlzIGNvbnZlbnRpb24sIHByZWV4aXN0aW5nIGN1YmUgbWFwcyBjb250aW51ZWQgdG8gcmVuZGVyIGNvcnJlY3RseS5cblxuXHRcdC8vIHRocmVlLmpzIHVzZXMgYSByaWdodC1oYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0uIFNvIGVudmlyb25tZW50IG1hcHMgdXNlZCBpbiB0aHJlZS5qcyBhcHBlYXIgdG8gaGF2ZSBweCBhbmQgbnggc3dhcHBlZFxuXHRcdC8vIGFuZCB0aGUgZmxhZyBpc1JlbmRlclRhcmdldFRleHR1cmUgY29udHJvbHMgdGhpcyBjb252ZXJzaW9uLiBUaGUgZmxpcCBpcyBub3QgcmVxdWlyZWQgd2hlbiB1c2luZyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQudGV4dHVyZVxuXHRcdC8vIGFzIGEgY3ViZSB0ZXh0dXJlICh0aGlzIGlzIGRldGVjdGVkIHdoZW4gaXNSZW5kZXJUYXJnZXRUZXh0dXJlIGlzIHNldCB0byB0cnVlIGZvciBjdWJlIHRleHR1cmVzKS5cblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IGZhbHNlO1xuXHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSBvcHRpb25zLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cblx0fVxuXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlKCByZW5kZXJlciwgdGV4dHVyZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZS50eXBlID0gdGV4dHVyZS50eXBlO1xuXHRcdHRoaXMudGV4dHVyZS5mb3JtYXQgPSBSR0JBRm9ybWF0OyAvLyBzZWUgIzE4ODU5XG5cdFx0dGhpcy50ZXh0dXJlLmVuY29kaW5nID0gdGV4dHVyZS5lbmNvZGluZztcblxuXHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXI7XG5cdFx0dGhpcy50ZXh0dXJlLm1hZ0ZpbHRlciA9IHRleHR1cmUubWFnRmlsdGVyO1xuXG5cdFx0Y29uc3Qgc2hhZGVyID0ge1xuXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdH0sXG5cblx0XHRcdHZlcnRleFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuXG5cdFx0XHRcdHZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcblxuXHRcdFx0XHRcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG5cdFx0XHRcdFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuXG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cblx0XHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcblxuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xuXG5cdFx0XHRcdCNpbmNsdWRlIDxjb21tb24+XG5cblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xuXG5cdFx0XHRcdFx0dmVjMiBzYW1wbGVVViA9IGVxdWlyZWN0VXYoIGRpcmVjdGlvbiApO1xuXG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XG5cblx0XHRcdFx0fVxuXHRcdFx0YFxuXHRcdH07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCb3hHZW9tZXRyeSggNSwgNSwgNSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdFx0bmFtZTogJ0N1YmVtYXBGcm9tRXF1aXJlY3QnLFxuXG5cdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3Jtcyggc2hhZGVyLnVuaWZvcm1zICksXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRibGVuZGluZzogTm9CbGVuZGluZ1xuXG5cdFx0fSApO1xuXG5cdFx0bWF0ZXJpYWwudW5pZm9ybXMudEVxdWlyZWN0LnZhbHVlID0gdGV4dHVyZTtcblxuXHRcdGNvbnN0IG1lc2ggPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRjb25zdCBjdXJyZW50TWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHQvLyBBdm9pZCBibHVycmVkIHBvbGVzXG5cdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciA9PT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRjb25zdCBjYW1lcmEgPSBuZXcgQ3ViZUNhbWVyYSggMSwgMTAsIHRoaXMgKTtcblx0XHRjYW1lcmEudXBkYXRlKCByZW5kZXJlciwgbWVzaCApO1xuXG5cdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBjdXJyZW50TWluRmlsdGVyO1xuXG5cdFx0bWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0bWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xlYXIoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMsIGkgKTtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG59XG5cbldlYkdMQ3ViZVJlbmRlclRhcmdldC5wcm90b3R5cGUuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5jb25zdCBfdmVjdG9yMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92ZWN0b3IyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTtcblxuY2xhc3MgUGxhbmUge1xuXG5cdGNvbnN0cnVjdG9yKCBub3JtYWwgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApLCBjb25zdGFudCA9IDAgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR0aGlzLm5vcm1hbCA9IG5vcm1hbDtcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XG5cblx0fVxuXG5cdHNldCggbm9ybWFsLCBjb25zdGFudCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnRzKCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuc2V0KCB4LCB5LCB6ICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIG5vcm1hbCwgcG9pbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gLSBwb2ludC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNvcGxhbmFyUG9pbnRzKCBhLCBiLCBjICkge1xuXG5cdFx0Y29uc3Qgbm9ybWFsID0gX3ZlY3RvcjEuc3ViVmVjdG9ycyggYywgYiApLmNyb3NzKCBfdmVjdG9yMi5zdWJWZWN0b3JzKCBhLCBiICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdC8vIFE6IHNob3VsZCBhbiBlcnJvciBiZSB0aHJvd24gaWYgbm9ybWFsIGlzIHplcm8gKGUuZy4gZGVnZW5lcmF0ZSBwbGFuZSk/XG5cblx0XHR0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIGEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBwbGFuZSApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHBsYW5lLm5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHQvLyBOb3RlOiB3aWxsIGxlYWQgdG8gYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgcGxhbmUgaXMgaW52YWxpZC5cblxuXHRcdGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcblx0XHR0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApO1xuXHRcdHRoaXMuY29uc3RhbnQgKj0gaW52ZXJzZU5vcm1hbExlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50ICo9IC0gMTtcblx0XHR0aGlzLm5vcm1hbC5uZWdhdGUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsLmRvdCggcG9pbnQgKSArIHRoaXMuY29uc3RhbnQ7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9TcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIC0gc3BoZXJlLnJhZGl1cztcblxuXHR9XG5cblx0cHJvamVjdFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm5vcm1hbCApLm11bHRpcGx5U2NhbGFyKCAtIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBwb2ludCApICkuYWRkKCBwb2ludCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKCBfdmVjdG9yMSApO1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoIGRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5zdGFydCApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFVuc3VyZSBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IG1ldGhvZCB0byBoYW5kbGUgdGhpcyBjYXNlLlxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ID0gLSAoIGxpbmUuc3RhcnQuZG90KCB0aGlzLm5vcm1hbCApICsgdGhpcy5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHRpZiAoIHQgPCAwIHx8IHQgPiAxICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggZGlyZWN0aW9uICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIGxpbmUuc3RhcnQgKTtcblxuXHR9XG5cblx0aW50ZXJzZWN0c0xpbmUoIGxpbmUgKSB7XG5cblx0XHQvLyBOb3RlOiB0aGlzIHRlc3RzIGlmIGEgbGluZSBpbnRlcnNlY3RzIHRoZSBwbGFuZSwgbm90IHdoZXRoZXIgaXQgKG9yIGl0cyBlbmQtcG9pbnRzKSBhcmUgY29wbGFuYXIgd2l0aCBpdC5cblxuXHRcdGNvbnN0IHN0YXJ0U2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICk7XG5cdFx0Y29uc3QgZW5kU2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLmVuZCApO1xuXG5cdFx0cmV0dXJuICggc3RhcnRTaWduIDwgMCAmJiBlbmRTaWduID4gMCApIHx8ICggZW5kU2lnbiA8IDAgJiYgc3RhcnRTaWduID4gMCApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3BsYW5hclBvaW50KCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCwgb3B0aW9uYWxOb3JtYWxNYXRyaXggKSB7XG5cblx0XHRjb25zdCBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRjb25zdCByZWZlcmVuY2VQb2ludCA9IHRoaXMuY29wbGFuYXJQb2ludCggX3ZlY3RvcjEgKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0Y29uc3Qgbm9ybWFsID0gdGhpcy5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHJlZmVyZW5jZVBvaW50LmRvdCggbm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKCB0aGlzLm5vcm1hbCApICYmICggcGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cblBsYW5lLnByb3RvdHlwZS5pc1BsYW5lID0gdHJ1ZTtcblxuY29uc3QgX3NwaGVyZSQyID0gLypAX19QVVJFX18qLyBuZXcgU3BoZXJlKCk7XG5jb25zdCBfdmVjdG9yJDcgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIEZydXN0dW0ge1xuXG5cdGNvbnN0cnVjdG9yKCBwMCA9IG5ldyBQbGFuZSgpLCBwMSA9IG5ldyBQbGFuZSgpLCBwMiA9IG5ldyBQbGFuZSgpLCBwMyA9IG5ldyBQbGFuZSgpLCBwNCA9IG5ldyBQbGFuZSgpLCBwNSA9IG5ldyBQbGFuZSgpICkge1xuXG5cdFx0dGhpcy5wbGFuZXMgPSBbIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgXTtcblxuXHR9XG5cblx0c2V0KCBwMCwgcDEsIHAyLCBwMywgcDQsIHA1ICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRwbGFuZXNbIDAgXS5jb3B5KCBwMCApO1xuXHRcdHBsYW5lc1sgMSBdLmNvcHkoIHAxICk7XG5cdFx0cGxhbmVzWyAyIF0uY29weSggcDIgKTtcblx0XHRwbGFuZXNbIDMgXS5jb3B5KCBwMyApO1xuXHRcdHBsYW5lc1sgNCBdLmNvcHkoIHA0ICk7XG5cdFx0cGxhbmVzWyA1IF0uY29weSggcDUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBmcnVzdHVtICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRwbGFuZXNbIGkgXS5jb3B5KCBmcnVzdHVtLnBsYW5lc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIG0gKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUwID0gbWVbIDAgXSwgbWUxID0gbWVbIDEgXSwgbWUyID0gbWVbIDIgXSwgbWUzID0gbWVbIDMgXTtcblx0XHRjb25zdCBtZTQgPSBtZVsgNCBdLCBtZTUgPSBtZVsgNSBdLCBtZTYgPSBtZVsgNiBdLCBtZTcgPSBtZVsgNyBdO1xuXHRcdGNvbnN0IG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdGNvbnN0IG1lMTIgPSBtZVsgMTIgXSwgbWUxMyA9IG1lWyAxMyBdLCBtZTE0ID0gbWVbIDE0IF0sIG1lMTUgPSBtZVsgMTUgXTtcblxuXHRcdHBsYW5lc1sgMCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMCwgbWU3IC0gbWU0LCBtZTExIC0gbWU4LCBtZTE1IC0gbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMSBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMyBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMSwgbWU3IC0gbWU1LCBtZTExIC0gbWU5LCBtZTE1IC0gbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgNCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTAsIG1lMTUgKyBtZTE0ICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlJDIuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQyICk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNTcHJpdGUoIHNwcml0ZSApIHtcblxuXHRcdF9zcGhlcmUkMi5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XG5cdFx0X3NwaGVyZSQyLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3Njtcblx0XHRfc3BoZXJlJDIuYXBwbHlNYXRyaXg0KCBzcHJpdGUubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMiApO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdGNvbnN0IG5lZ1JhZGl1cyA9IC0gc3BoZXJlLnJhZGl1cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBjZW50ZXIgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IG5lZ1JhZGl1cyApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdC8vIGNvcm5lciBhdCBtYXggZGlzdGFuY2VcblxuXHRcdFx0X3ZlY3RvciQ3LnggPSBwbGFuZS5ub3JtYWwueCA+IDAgPyBib3gubWF4LnggOiBib3gubWluLng7XG5cdFx0XHRfdmVjdG9yJDcueSA9IHBsYW5lLm5vcm1hbC55ID4gMCA/IGJveC5tYXgueSA6IGJveC5taW4ueTtcblx0XHRcdF92ZWN0b3IkNy56ID0gcGxhbmUubm9ybWFsLnogPiAwID8gYm94Lm1heC56IDogYm94Lm1pbi56O1xuXG5cdFx0XHRpZiAoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggX3ZlY3RvciQ3ICkgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkge1xuXG5cdGxldCBjb250ZXh0ID0gbnVsbDtcblx0bGV0IGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdGxldCBhbmltYXRpb25Mb29wID0gbnVsbDtcblx0bGV0IHJlcXVlc3RJZCA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0cmVxdWVzdElkID0gY29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdHJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnRleHQuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHJlcXVlc3RJZCApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdHNldEFuaW1hdGlvbkxvb3A6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcblxuXHRcdH0sXG5cblx0XHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEF0dHJpYnV0ZXMoIGdsLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0Y29uc3QgaXNXZWJHTDIgPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDI7XG5cblx0Y29uc3QgYnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHRjb25zdCB1c2FnZSA9IGF0dHJpYnV0ZS51c2FnZTtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cdFx0Z2wuYnVmZmVyRGF0YSggYnVmZmVyVHlwZSwgYXJyYXksIHVzYWdlICk7XG5cblx0XHRhdHRyaWJ1dGUub25VcGxvYWRDYWxsYmFjaygpO1xuXG5cdFx0bGV0IHR5cGU7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0XHRcdFx0dHlwZSA9IDUxMzE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVXNhZ2Ugb2YgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBXZWJHTDIuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0eXBlID0gNTEyMztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTI1O1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjE7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVW5zdXBwb3J0ZWQgYnVmZmVyIGRhdGEgZm9ybWF0OiAnICsgYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRidWZmZXI6IGJ1ZmZlcixcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRieXRlc1BlckVsZW1lbnQ6IGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0dmVyc2lvbjogYXR0cmlidXRlLnZlcnNpb25cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVCdWZmZXIoIGJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgdXBkYXRlUmFuZ2UgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2U7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblxuXHRcdGlmICggdXBkYXRlUmFuZ2UuY291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgMCwgYXJyYXkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0YXJyYXksIHVwZGF0ZVJhbmdlLm9mZnNldCwgdXBkYXRlUmFuZ2UuY291bnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCB1cGRhdGVSYW5nZS5vZmZzZXQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdFx0XHRhcnJheS5zdWJhcnJheSggdXBkYXRlUmFuZ2Uub2Zmc2V0LCB1cGRhdGVSYW5nZS5vZmZzZXQgKyB1cGRhdGVSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlUmFuZ2UuY291bnQgPSAtIDE7IC8vIHJlc2V0IHJhbmdlXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRyZXR1cm4gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdGNvbnN0IGRhdGEgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRpZiAoIGRhdGEgKSB7XG5cblx0XHRcdGdsLmRlbGV0ZUJ1ZmZlciggZGF0YS5idWZmZXIgKTtcblxuXHRcdFx0YnVmZmVycy5kZWxldGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzR0xCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGNvbnN0IGNhY2hlZCA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0aWYgKCAhIGNhY2hlZCB8fCBjYWNoZWQudmVyc2lvbiA8IGF0dHJpYnV0ZS52ZXJzaW9uICkge1xuXG5cdFx0XHRcdGJ1ZmZlcnMuc2V0KCBhdHRyaWJ1dGUsIHtcblx0XHRcdFx0XHRidWZmZXI6IGF0dHJpYnV0ZS5idWZmZXIsXG5cdFx0XHRcdFx0dHlwZTogYXR0cmlidXRlLnR5cGUsXG5cdFx0XHRcdFx0Ynl0ZXNQZXJFbGVtZW50OiBhdHRyaWJ1dGUuZWxlbWVudFNpemUsXG5cdFx0XHRcdFx0dmVyc2lvbjogYXR0cmlidXRlLnZlcnNpb25cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdGNvbnN0IGRhdGEgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwgY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZGF0YS52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlciggZGF0YS5idWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApO1xuXG5cdFx0XHRkYXRhLnZlcnNpb24gPSBhdHRyaWJ1dGUudmVyc2lvbjtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZ2V0LFxuXHRcdHJlbW92ZTogcmVtb3ZlLFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cblx0fTtcblxufVxuXG5jbGFzcyBQbGFuZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIHdpZHRoU2VnbWVudHMgPSAxLCBoZWlnaHRTZWdtZW50cyA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50c1xuXHRcdH07XG5cblx0XHRjb25zdCB3aWR0aF9oYWxmID0gd2lkdGggLyAyO1xuXHRcdGNvbnN0IGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHRcdGNvbnN0IGdyaWRYID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xuXHRcdGNvbnN0IGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdGNvbnN0IGdyaWRYMSA9IGdyaWRYICsgMTtcblx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRjb25zdCBzZWdtZW50X3dpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHRjb25zdCBzZWdtZW50X2hlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIC0geSwgMCApO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHRcdHV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTsgaXkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRjb25zdCBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRjb25zdCBjID0gKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFBsYW5lR2VvbWV0cnkoIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0LCBkYXRhLndpZHRoU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMgKTtcblxuXHR9XG5cbn1cblxudmFyIGFscGhhbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdlV2ICkuZztcXG4jZW5kaWZcIjtcblxudmFyIGFscGhhbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBhbHBoYU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGFscGhhdGVzdF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQVRFU1RcXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgYWxwaGFUZXN0ICkgZGlzY2FyZDtcXG4jZW5kaWZcIjtcblxudmFyIGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBVEVTVFxcblxcdHVuaWZvcm0gZmxvYXQgYWxwaGFUZXN0O1xcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQU9NQVBcXG5cXHRmbG9hdCBhbWJpZW50T2NjbHVzaW9uID0gKCB0ZXh0dXJlMkQoIGFvTWFwLCB2VXYyICkuciAtIDEuMCApICogYW9NYXBJbnRlbnNpdHkgKyAxLjA7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGFtYmllbnRPY2NsdXNpb247XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwucm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBhb21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBhb01hcEludGVuc2l0eTtcXG4jZW5kaWZcIjtcblxudmFyIGJlZ2luX3ZlcnRleCA9IFwidmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XCI7XG5cbnZhciBiZWdpbm5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgb2JqZWN0Tm9ybWFsID0gdmVjMyggbm9ybWFsICk7XFxuI2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0dmVjMyBvYmplY3RUYW5nZW50ID0gdmVjMyggdGFuZ2VudC54eXogKTtcXG4jZW5kaWZcIjtcblxudmFyIGJzZGZzID0gXCJ2ZWMzIEJSREZfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC0gNS41NTQ3MyAqIGRvdFZIIC0gNi45ODMxNiApICogZG90VkggKTtcXG5cXHRyZXR1cm4gZjAgKiAoIDEuMCAtIGZyZXNuZWwgKSArICggZjkwICogZnJlc25lbCApO1xcbn1cXG5mbG9hdCBWX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROTCwgY29uc3QgaW4gZmxvYXQgZG90TlYgKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRmbG9hdCBnbCA9IGRvdE5WICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROTCApICk7XFxuXFx0cmV0dXJuIDAuNSAvIG1heCggZ3YgKyBnbCwgRVBTSUxPTiApO1xcbn1cXG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcXG5cXHRmbG9hdCBkZW5vbSA9IHBvdzIoIGRvdE5IICkgKiAoIGEyIC0gMS4wICkgKyAxLjA7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XFxufVxcbnZlYzMgQlJERl9HR1goIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgZjAsIGNvbnN0IGluIGZsb2F0IGY5MCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGFscGhhID0gcG93Miggcm91Z2huZXNzICk7XFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgbGlnaHREaXIgKSApO1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgZG90VkggPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIGYwLCBmOTAsIGRvdFZIICk7XFxuXFx0ZmxvYXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xcblxcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIFYgKiBEICk7XFxufVxcbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGNvbnN0IGZsb2F0IExVVF9TSVpFID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyA9IDAuNSAvIExVVF9TSVpFO1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggTiwgViApICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoIHJvdWdobmVzcywgc3FydCggMS4wIC0gZG90TlYgKSApO1xcblxcdHV2ID0gdXYgKiBMVVRfU0NBTEUgKyBMVVRfQklBUztcXG5cXHRyZXR1cm4gdXY7XFxufVxcbmZsb2F0IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyBmICkge1xcblxcdGZsb2F0IGwgPSBsZW5ndGgoIGYgKTtcXG5cXHRyZXR1cm4gbWF4KCAoIGwgKiBsICsgZi56ICkgLyAoIGwgKyAxLjAgKSwgMC4wICk7XFxufVxcbnZlYzMgTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIHYxLCBjb25zdCBpbiB2ZWMzIHYyICkge1xcblxcdGZsb2F0IHggPSBkb3QoIHYxLCB2MiApO1xcblxcdGZsb2F0IHkgPSBhYnMoIHggKTtcXG5cXHRmbG9hdCBhID0gMC44NTQzOTg1ICsgKCAwLjQ5NjUxNTUgKyAwLjAxNDUyMDYgKiB5ICkgKiB5O1xcblxcdGZsb2F0IGIgPSAzLjQxNzU5NDAgKyAoIDQuMTYxNjcyNCArIHkgKSAqIHk7XFxuXFx0ZmxvYXQgdiA9IGEgLyBiO1xcblxcdGZsb2F0IHRoZXRhX3NpbnRoZXRhID0gKCB4ID4gMC4wICkgPyB2IDogMC41ICogaW52ZXJzZXNxcnQoIG1heCggMS4wIC0geCAqIHgsIDFlLTcgKSApIC0gdjtcXG5cXHRyZXR1cm4gY3Jvc3MoIHYxLCB2MiApICogdGhldGFfc2ludGhldGE7XFxufVxcbnZlYzMgTFRDX0V2YWx1YXRlKCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gdmVjMyBQLCBjb25zdCBpbiBtYXQzIG1JbnYsIGNvbnN0IGluIHZlYzMgcmVjdENvb3Jkc1sgNCBdICkge1xcblxcdHZlYzMgdjEgPSByZWN0Q29vcmRzWyAxIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyB2MiA9IHJlY3RDb29yZHNbIDMgXSAtIHJlY3RDb29yZHNbIDAgXTtcXG5cXHR2ZWMzIGxpZ2h0Tm9ybWFsID0gY3Jvc3MoIHYxLCB2MiApO1xcblxcdGlmKCBkb3QoIGxpZ2h0Tm9ybWFsLCBQIC0gcmVjdENvb3Jkc1sgMCBdICkgPCAwLjAgKSByZXR1cm4gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBUMSwgVDI7XFxuXFx0VDEgPSBub3JtYWxpemUoIFYgLSBOICogZG90KCBWLCBOICkgKTtcXG5cXHRUMiA9IC0gY3Jvc3MoIE4sIFQxICk7XFxuXFx0bWF0MyBtYXQgPSBtSW52ICogdHJhbnNwb3NlTWF0MyggbWF0MyggVDEsIFQyLCBOICkgKTtcXG5cXHR2ZWMzIGNvb3Jkc1sgNCBdO1xcblxcdGNvb3Jkc1sgMCBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAwIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDEgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDIgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMiBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMyBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAzIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAwIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMCBdICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMSBdICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMiBdICk7XFxuXFx0Y29vcmRzWyAzIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjMyB2ZWN0b3JGb3JtRmFjdG9yID0gdmVjMyggMC4wICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMCBdLCBjb29yZHNbIDEgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDEgXSwgY29vcmRzWyAyIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAyIF0sIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMyBdLCBjb29yZHNbIDAgXSApO1xcblxcdGZsb2F0IHJlc3VsdCA9IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggdmVjdG9yRm9ybUZhY3RvciApO1xcblxcdHJldHVybiB2ZWMzKCByZXN1bHQgKTtcXG59XFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MgKSB7XFxuXFx0dmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBsaWdodERpciArIHZpZXdEaXIgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgaGFsZkRpciApICk7XFxuXFx0ZmxvYXQgZG90VkggPSBzYXR1cmF0ZSggZG90KCB2aWV3RGlyLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIDEuMCwgZG90VkggKTtcXG5cXHRmbG9hdCBHID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxuI2lmIGRlZmluZWQoIFVTRV9TSEVFTiApXFxuZmxvYXQgRF9DaGFybGllKCBmbG9hdCByb3VnaG5lc3MsIGZsb2F0IGRvdE5IICkge1xcblxcdGZsb2F0IGFscGhhID0gcG93Miggcm91Z2huZXNzICk7XFxuXFx0ZmxvYXQgaW52QWxwaGEgPSAxLjAgLyBhbHBoYTtcXG5cXHRmbG9hdCBjb3MyaCA9IGRvdE5IICogZG90Tkg7XFxuXFx0ZmxvYXQgc2luMmggPSBtYXgoIDEuMCAtIGNvczJoLCAwLjAwNzgxMjUgKTtcXG5cXHRyZXR1cm4gKCAyLjAgKyBpbnZBbHBoYSApICogcG93KCBzaW4yaCwgaW52QWxwaGEgKiAwLjUgKSAvICggMi4wICogUEkgKTtcXG59XFxuZmxvYXQgVl9OZXViZWx0KCBmbG9hdCBkb3ROViwgZmxvYXQgZG90TkwgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCAxLjAgLyAoIDQuMCAqICggZG90TkwgKyBkb3ROViAtIGRvdE5MICogZG90TlYgKSApICk7XFxufVxcbnZlYzMgQlJERl9TaGVlbiggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgdmVjMyBzaGVlbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGVlblJvdWdobmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBEID0gRF9DaGFybGllKCBzaGVlblJvdWdobmVzcywgZG90TkggKTtcXG5cXHRmbG9hdCBWID0gVl9OZXViZWx0KCBkb3ROViwgZG90TkwgKTtcXG5cXHRyZXR1cm4gc2hlZW5Db2xvciAqICggRCAqIFYgKTtcXG59XFxuI2VuZGlmXCI7XG5cbnZhciBidW1wbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHksIGZsb2F0IGZhY2VEaXJlY3Rpb24gKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKSAqIGZhY2VEaXJlY3Rpb247XFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmVjNCBwbGFuZTtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xcblxcdFxcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRpZiAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgZGlzY2FyZDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdFxcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmFyeWluZyB2ZWMzIHZDbGlwUG9zaXRpb247XFxuXFx0dW5pZm9ybSB2ZWM0IGNsaXBwaW5nUGxhbmVzWyBOVU1fQ0xJUFBJTkdfUExBTkVTIF07XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dkNsaXBQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKVxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKVxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9wYXJzX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dmFyeWluZyB2ZWM0IHZDb2xvcjtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQ09MT1IgKSB8fCBkZWZpbmVkKCBVU0VfSU5TVEFOQ0lOR19DT0xPUiApXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApXFxuXFx0dkNvbG9yID0gdmVjNCggMS4wICk7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0lOU1RBTkNJTkdfQ09MT1IgKVxcblxcdHZDb2xvciA9IHZlYzMoIDEuMCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IgKj0gY29sb3I7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SXFxuXFx0dkNvbG9yLnh5eiAqPSBpbnN0YW5jZUNvbG9yLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU4OTc5M1xcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MTc5NTg2XFxuI2RlZmluZSBQSV9IQUxGIDEuNTcwNzk2MzI2Nzk0ODk2NlxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4Mzc5MDdcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTQzMDkxODk1MzVcXG4jZGVmaW5lIEVQU0lMT04gMWUtNlxcbiNpZm5kZWYgc2F0dXJhdGVcXG4jZGVmaW5lIHNhdHVyYXRlKCBhICkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG4jZGVmaW5lIHdoaXRlQ29tcGxlbWVudCggYSApICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBtYXgzKCBjb25zdCBpbiB2ZWMzIHYgKSB7IHJldHVybiBtYXgoIG1heCggdi54LCB2LnkgKSwgdi56ICk7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdCggc2luKCBzbiApICogYyApO1xcbn1cXG4jaWZkZWYgSElHSF9QUkVDSVNJT05cXG5cXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7IHJldHVybiBsZW5ndGgoIHYgKTsgfVxcbiNlbHNlXFxuXFx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkge1xcblxcdFxcdGZsb2F0IG1heENvbXBvbmVudCA9IG1heDMoIGFicyggdiApICk7XFxuXFx0XFx0cmV0dXJuIGxlbmd0aCggdiAvIG1heENvbXBvbmVudCApICogbWF4Q29tcG9uZW50O1xcblxcdH1cXG4jZW5kaWZcXG5zdHJ1Y3QgSW5jaWRlbnRMaWdodCB7XFxuXFx0dmVjMyBjb2xvcjtcXG5cXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRib29sIHZpc2libGU7XFxufTtcXG5zdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xcblxcdHZlYzMgZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGRpcmVjdFNwZWN1bGFyO1xcblxcdHZlYzMgaW5kaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcXG59O1xcbnN0cnVjdCBHZW9tZXRyaWNDb250ZXh0IHtcXG5cXHR2ZWMzIHBvc2l0aW9uO1xcblxcdHZlYzMgbm9ybWFsO1xcblxcdHZlYzMgdmlld0RpcjtcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHZlYzMgY2xlYXJjb2F0Tm9ybWFsO1xcbiNlbmRpZlxcbn07XFxudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcXG59XFxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XFxufVxcbm1hdDMgdHJhbnNwb3NlTWF0MyggY29uc3QgaW4gbWF0MyBtICkge1xcblxcdG1hdDMgdG1wO1xcblxcdHRtcFsgMCBdID0gdmVjMyggbVsgMCBdLngsIG1bIDEgXS54LCBtWyAyIF0ueCApO1xcblxcdHRtcFsgMSBdID0gdmVjMyggbVsgMCBdLnksIG1bIDEgXS55LCBtWyAyIF0ueSApO1xcblxcdHRtcFsgMiBdID0gdmVjMyggbVsgMCBdLnosIG1bIDEgXS56LCBtWyAyIF0ueiApO1xcblxcdHJldHVybiB0bXA7XFxufVxcbmZsb2F0IGxpbmVhclRvUmVsYXRpdmVMdW1pbmFuY2UoIGNvbnN0IGluIHZlYzMgY29sb3IgKSB7XFxuXFx0dmVjMyB3ZWlnaHRzID0gdmVjMyggMC4yMTI2LCAwLjcxNTIsIDAuMDcyMiApO1xcblxcdHJldHVybiBkb3QoIHdlaWdodHMsIGNvbG9yLnJnYiApO1xcbn1cXG5ib29sIGlzUGVyc3BlY3RpdmVNYXRyaXgoIG1hdDQgbSApIHtcXG5cXHRyZXR1cm4gbVsgMiBdWyAzIF0gPT0gLSAxLjA7XFxufVxcbnZlYzIgZXF1aXJlY3RVdiggaW4gdmVjMyBkaXIgKSB7XFxuXFx0ZmxvYXQgdSA9IGF0YW4oIGRpci56LCBkaXIueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0ZmxvYXQgdiA9IGFzaW4oIGNsYW1wKCBkaXIueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHJldHVybiB2ZWMyKCB1LCB2ICk7XFxufVwiO1xuXG52YXIgY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50ID0gXCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcblxcdCNkZWZpbmUgY3ViZVVWX21pbk1pcExldmVsIDQuMFxcblxcdCNkZWZpbmUgY3ViZVVWX21pblRpbGVTaXplIDE2LjBcXG5cXHRmbG9hdCBnZXRGYWNlKCB2ZWMzIGRpcmVjdGlvbiApIHtcXG5cXHRcXHR2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyggZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgZmFjZSA9IC0gMS4wO1xcblxcdFxcdGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueiApIHtcXG5cXHRcXHRcXHRpZiAoIGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAuMCA6IDMuMDtcXG5cXHRcXHRcXHRlbHNlXFxuXFx0XFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0aWYgKCBhYnNEaXJlY3Rpb24ueiA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyLjAgOiA1LjA7XFxuXFx0XFx0XFx0ZWxzZVxcblxcdFxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEuMCA6IDQuMDtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIGZhY2U7XFxuXFx0fVxcblxcdHZlYzIgZ2V0VVYoIHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBmYWNlICkge1xcblxcdFxcdHZlYzIgdXY7XFxuXFx0XFx0aWYgKCBmYWNlID09IDAuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueCApO1xcblxcdFxcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMS4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgLSBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xcblxcdFxcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMi4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDMuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi54ICk7XFxuXFx0XFx0fSBlbHNlIGlmICggZmFjZSA9PSA0LjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiApIC8gYWJzKCBkaXJlY3Rpb24ueSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnogKTtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIDAuNSAqICggdXYgKyAxLjAgKTtcXG5cXHR9XFxuXFx0dmVjMyBiaWxpbmVhckN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBkaXJlY3Rpb24sIGZsb2F0IG1pcEludCApIHtcXG5cXHRcXHRmbG9hdCBmYWNlID0gZ2V0RmFjZSggZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgZmlsdGVySW50ID0gbWF4KCBjdWJlVVZfbWluTWlwTGV2ZWwgLSBtaXBJbnQsIDAuMCApO1xcblxcdFxcdG1pcEludCA9IG1heCggbWlwSW50LCBjdWJlVVZfbWluTWlwTGV2ZWwgKTtcXG5cXHRcXHRmbG9hdCBmYWNlU2l6ZSA9IGV4cDIoIG1pcEludCApO1xcblxcdFxcdHZlYzIgdXYgPSBnZXRVViggZGlyZWN0aW9uLCBmYWNlICkgKiAoIGZhY2VTaXplIC0gMS4wICkgKyAwLjU7XFxuXFx0XFx0aWYgKCBmYWNlID4gMi4wICkge1xcblxcdFxcdFxcdHV2LnkgKz0gZmFjZVNpemU7XFxuXFx0XFx0XFx0ZmFjZSAtPSAzLjA7XFxuXFx0XFx0fVxcblxcdFxcdHV2LnggKz0gZmFjZSAqIGZhY2VTaXplO1xcblxcdFxcdHV2LnggKz0gZmlsdGVySW50ICogMy4wICogY3ViZVVWX21pblRpbGVTaXplO1xcblxcdFxcdHV2LnkgKz0gNC4wICogKCBleHAyKCBDVUJFVVZfTUFYX01JUCApIC0gZmFjZVNpemUgKTtcXG5cXHRcXHR1di54ICo9IENVQkVVVl9URVhFTF9XSURUSDtcXG5cXHRcXHR1di55ICo9IENVQkVVVl9URVhFTF9IRUlHSFQ7XFxuXFx0XFx0I2lmZGVmIHRleHR1cmUyREdyYWRFWFRcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJER3JhZEVYVCggZW52TWFwLCB1diwgdmVjMiggMC4wICksIHZlYzIoIDAuMCApICkucmdiO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRCggZW52TWFwLCB1diApLnJnYjtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0I2RlZmluZSByMCAxLjBcXG5cXHQjZGVmaW5lIHYwIDAuMzM5XFxuXFx0I2RlZmluZSBtMCAtIDIuMFxcblxcdCNkZWZpbmUgcjEgMC44XFxuXFx0I2RlZmluZSB2MSAwLjI3NlxcblxcdCNkZWZpbmUgbTEgLSAxLjBcXG5cXHQjZGVmaW5lIHI0IDAuNFxcblxcdCNkZWZpbmUgdjQgMC4wNDZcXG5cXHQjZGVmaW5lIG00IDIuMFxcblxcdCNkZWZpbmUgcjUgMC4zMDVcXG5cXHQjZGVmaW5lIHY1IDAuMDE2XFxuXFx0I2RlZmluZSBtNSAzLjBcXG5cXHQjZGVmaW5lIHI2IDAuMjFcXG5cXHQjZGVmaW5lIHY2IDAuMDAzOFxcblxcdCNkZWZpbmUgbTYgNC4wXFxuXFx0ZmxvYXQgcm91Z2huZXNzVG9NaXAoIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRcXHRmbG9hdCBtaXAgPSAwLjA7XFxuXFx0XFx0aWYgKCByb3VnaG5lc3MgPj0gcjEgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCByMCAtIHJvdWdobmVzcyApICogKCBtMSAtIG0wICkgLyAoIHIwIC0gcjEgKSArIG0wO1xcblxcdFxcdH0gZWxzZSBpZiAoIHJvdWdobmVzcyA+PSByNCApIHtcXG5cXHRcXHRcXHRtaXAgPSAoIHIxIC0gcm91Z2huZXNzICkgKiAoIG00IC0gbTEgKSAvICggcjEgLSByNCApICsgbTE7XFxuXFx0XFx0fSBlbHNlIGlmICggcm91Z2huZXNzID49IHI1ICkge1xcblxcdFxcdFxcdG1pcCA9ICggcjQgLSByb3VnaG5lc3MgKSAqICggbTUgLSBtNCApIC8gKCByNCAtIHI1ICkgKyBtNDtcXG5cXHRcXHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gcjYgKSB7XFxuXFx0XFx0XFx0bWlwID0gKCByNSAtIHJvdWdobmVzcyApICogKCBtNiAtIG01ICkgLyAoIHI1IC0gcjYgKSArIG01O1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0bWlwID0gLSAyLjAgKiBsb2cyKCAxLjE2ICogcm91Z2huZXNzICk7XFx0XFx0fVxcblxcdFxcdHJldHVybiBtaXA7XFxuXFx0fVxcblxcdHZlYzQgdGV4dHVyZUN1YmVVViggc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBzYW1wbGVEaXIsIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRcXHRmbG9hdCBtaXAgPSBjbGFtcCggcm91Z2huZXNzVG9NaXAoIHJvdWdobmVzcyApLCBtMCwgQ1VCRVVWX01BWF9NSVAgKTtcXG5cXHRcXHRmbG9hdCBtaXBGID0gZnJhY3QoIG1pcCApO1xcblxcdFxcdGZsb2F0IG1pcEludCA9IGZsb29yKCBtaXAgKTtcXG5cXHRcXHR2ZWMzIGNvbG9yMCA9IGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpciwgbWlwSW50ICk7XFxuXFx0XFx0aWYgKCBtaXBGID09IDAuMCApIHtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjNCggY29sb3IwLCAxLjAgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHZlYzMgY29sb3IxID0gYmlsaW5lYXJDdWJlVVYoIGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQgKyAxLjAgKTtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjNCggbWl4KCBjb2xvcjAsIGNvbG9yMSwgbWlwRiApLCAxLjAgKTtcXG5cXHRcXHR9XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgZGVmYXVsdG5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBvYmplY3ROb3JtYWw7XFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0bWF0MyBtID0gbWF0MyggaW5zdGFuY2VNYXRyaXggKTtcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCAvPSB2ZWMzKCBkb3QoIG1bIDAgXSwgbVsgMCBdICksIGRvdCggbVsgMSBdLCBtWyAxIF0gKSwgZG90KCBtWyAyIF0sIG1bIDIgXSApICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSBtICogdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxudHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jaWZkZWYgRkxJUF9TSURFRFxcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gLSB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9ICggbW9kZWxWaWV3TWF0cml4ICogdmVjNCggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XFxuXFx0I2lmZGVmIEZMSVBfU0lERURcXG5cXHRcXHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSAtIHRyYW5zZm9ybWVkVGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXNwbGFjZW1lbnRNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRTY2FsZTtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudEJpYXM7XFxuI2VuZGlmXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHRyYW5zZm9ybWVkICs9IG5vcm1hbGl6ZSggb2JqZWN0Tm9ybWFsICkgKiAoIHRleHR1cmUyRCggZGlzcGxhY2VtZW50TWFwLCB2VXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuI2VuZGlmXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZlYzQgZW1pc3NpdmVDb2xvciA9IHRleHR1cmUyRCggZW1pc3NpdmVNYXAsIHZVdiApO1xcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcIjtcblxudmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGVuY29kaW5nc19mcmFnbWVudCA9IFwiZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7XCI7XG5cbnZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9IFwidmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XCI7XG5cbnZhciBlbnZtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZlYzMgY2FtZXJhVG9GcmFnO1xcblxcdFxcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9GcmFnID0gbm9ybWFsaXplKCB2ZWMzKCAtIHZpZXdNYXRyaXhbIDAgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDEgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDIgXVsgMiBdICkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdH1cXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCBjYW1lcmFUb0ZyYWcsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb0ZyYWcsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZVVWKCBlbnZNYXAsIHJlZmxlY3RWZWMsIDAuMCApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHZlYzQoIDAuMCApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdFxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0dW5pZm9ybSBmbG9hdCByZWZsZWN0aXZpdHk7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHQjZGVmaW5lIEVOVl9XT1JMRFBPU1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8ZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4O1xcblxcdFxcdGlmICggaXNPcnRob2dyYXBoaWMgKSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHZlYzMoIC0gdmlld01hdHJpeFsgMCBdWyAyIF0sIC0gdmlld01hdHJpeFsgMSBdWyAyIF0sIC0gdmlld01hdHJpeFsgMiBdWyAyIF0gKSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR9XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2Rm9nRGVwdGggPSAtIG12UG9zaXRpb24uejtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGb2dEZXB0aDtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiB2Rm9nRGVwdGggKiB2Rm9nRGVwdGggKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgdkZvZ0RlcHRoICk7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcdHZhcnlpbmcgZmxvYXQgdkZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfR1JBRElFTlRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBncmFkaWVudE1hcDtcXG4jZW5kaWZcXG52ZWMzIGdldEdyYWRpZW50SXJyYWRpYW5jZSggdmVjMyBub3JtYWwsIHZlYzMgbGlnaHREaXJlY3Rpb24gKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBkb3QoIG5vcm1hbCwgbGlnaHREaXJlY3Rpb24gKTtcXG5cXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xcblxcdCNpZmRlZiBVU0VfR1JBRElFTlRNQVBcXG5cXHRcXHRyZXR1cm4gdmVjMyggdGV4dHVyZTJEKCBncmFkaWVudE1hcCwgY29vcmQgKS5yICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZXR1cm4gKCBjb29yZC54IDwgMC43ICkgPyB2ZWMzKCAwLjcgKSA6IHZlYzMoIDEuMCApO1xcblxcdCNlbmRpZlxcbn1cIjtcblxudmFyIGxpZ2h0bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApO1xcblxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRsaWdodE1hcElycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbnZJbmRpcmVjdEZyb250ID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2SW5kaXJlY3RCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG52SW5kaXJlY3RGcm9udCArPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcbnZJbmRpcmVjdEZyb250ICs9IGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBsaWdodFByb2JlLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dkluZGlyZWN0QmFjayArPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGJhY2tHZW9tZXRyeS5ub3JtYWwgKTtcXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludExpZ2h0SW5mbyggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC0gZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0U3BvdExpZ2h0SW5mbyggc3BvdExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLSBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGRpcmVjdGlvbmFsTGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZJbmRpcmVjdEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkubm9ybWFsICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfcGFyc19iZWdpbiA9IFwidW5pZm9ybSBib29sIHJlY2VpdmVTaGFkb3c7XFxudW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcbnVuaWZvcm0gdmVjMyBsaWdodFByb2JlWyA5IF07XFxudmVjMyBzaEdldElycmFkaWFuY2VBdCggaW4gdmVjMyBub3JtYWwsIGluIHZlYzMgc2hDb2VmZmljaWVudHNbIDkgXSApIHtcXG5cXHRmbG9hdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xcblxcdHZlYzMgcmVzdWx0ID0gc2hDb2VmZmljaWVudHNbIDAgXSAqIDAuODg2MjI3O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMSBdICogMi4wICogMC41MTE2NjQgKiB5O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNCBdICogMi4wICogMC40MjkwNDMgKiB4ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDUgXSAqIDIuMCAqIDAuNDI5MDQzICogeSAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA2IF0gKiAoIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApO1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNyBdICogMi4wICogMC40MjkwNDMgKiB4ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDggXSAqIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICk7XFxuXFx0cmV0dXJuIHJlc3VsdDtcXG59XFxudmVjMyBnZXRMaWdodFByb2JlSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBsaWdodFByb2JlWyA5IF0sIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdHJldHVybiBpcnJhZGlhbmNlO1xcbn1cXG5mbG9hdCBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcXG5cXHQjaWYgZGVmaW5lZCAoIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMgKVxcblxcdFxcdGZsb2F0IGRpc3RhbmNlRmFsbG9mZiA9IDEuMCAvIG1heCggcG93KCBsaWdodERpc3RhbmNlLCBkZWNheUV4cG9uZW50ICksIDAuMDEgKTtcXG5cXHRcXHRpZiAoIGN1dG9mZkRpc3RhbmNlID4gMC4wICkge1xcblxcdFxcdFxcdGRpc3RhbmNlRmFsbG9mZiAqPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gZGlzdGFuY2VGYWxsb2ZmO1xcblxcdCNlbHNlXFxuXFx0XFx0aWYgKCBjdXRvZmZEaXN0YW5jZSA+IDAuMCAmJiBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdFxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiAxLjA7XFxuXFx0I2VuZGlmXFxufVxcbmZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbiggY29uc3QgaW4gZmxvYXQgY29uZUNvc2luZSwgY29uc3QgaW4gZmxvYXQgcGVudW1icmFDb3NpbmUsIGNvbnN0IGluIGZsb2F0IGFuZ2xlQ29zaW5lICkge1xcblxcdHJldHVybiBzbW9vdGhzdGVwKCBjb25lQ29zaW5lLCBwZW51bWJyYUNvc2luZSwgYW5nbGVDb3NpbmUgKTtcXG59XFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGNvbnN0IGluIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0bGlnaHQuY29sb3IgPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yO1xcblxcdFxcdGxpZ2h0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uO1xcblxcdFxcdGxpZ2h0LnZpc2libGUgPSB0cnVlO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUG9pbnRMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdH07XFxuXFx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRQb2ludExpZ2h0SW5mbyggY29uc3QgaW4gUG9pbnRMaWdodCBwb2ludExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBvdXQgSW5jaWRlbnRMaWdodCBsaWdodCApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBwb2ludExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgbGlnaHREaXN0YW5jZSA9IGxlbmd0aCggbFZlY3RvciApO1xcblxcdFxcdGxpZ2h0LmNvbG9yID0gcG9pbnRMaWdodC5jb2xvcjtcXG5cXHRcXHRsaWdodC5jb2xvciAqPSBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBsaWdodERpc3RhbmNlLCBwb2ludExpZ2h0LmRpc3RhbmNlLCBwb2ludExpZ2h0LmRlY2F5ICk7XFxuXFx0XFx0bGlnaHQudmlzaWJsZSA9ICggbGlnaHQuY29sb3IgIT0gdmVjMyggMC4wICkgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgU3BvdExpZ2h0IHtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2U7XFxuXFx0XFx0ZmxvYXQgZGVjYXk7XFxuXFx0XFx0ZmxvYXQgY29uZUNvcztcXG5cXHRcXHRmbG9hdCBwZW51bWJyYUNvcztcXG5cXHR9O1xcblxcdHVuaWZvcm0gU3BvdExpZ2h0IHNwb3RMaWdodHNbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0U3BvdExpZ2h0SW5mbyggY29uc3QgaW4gU3BvdExpZ2h0IHNwb3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0bGlnaHQuZGlyZWN0aW9uID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGxpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IHNwb3RBdHRlbnVhdGlvbiA9IGdldFNwb3RBdHRlbnVhdGlvbiggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRpZiAoIHNwb3RBdHRlbnVhdGlvbiA+IDAuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgPSBzcG90TGlnaHQuY29sb3IgKiBzcG90QXR0ZW51YXRpb247XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgKj0gZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRsaWdodC52aXNpYmxlID0gKCBsaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0bGlnaHQuY29sb3IgPSB2ZWMzKCAwLjAgKTtcXG5cXHRcXHRcXHRsaWdodC52aXNpYmxlID0gZmFsc2U7XFxuXFx0XFx0fVxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFJlY3RBcmVhTGlnaHQge1xcblxcdFxcdHZlYzMgY29sb3I7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQ7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMTtcXHR1bmlmb3JtIHNhbXBsZXIyRCBsdGNfMjtcXG5cXHR1bmlmb3JtIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodHNbIE5VTV9SRUNUX0FSRUFfTElHSFRTIF07XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgSGVtaXNwaGVyZUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIHNreUNvbG9yO1xcblxcdFxcdHZlYzMgZ3JvdW5kQ29sb3I7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIEhlbWlzcGhlcmVMaWdodCBoZW1pc3BoZXJlTGlnaHRzWyBOVU1fSEVNSV9MSUdIVFMgXTtcXG5cXHR2ZWMzIGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIEhlbWlzcGhlcmVMaWdodCBoZW1pTGlnaHQsIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0cmV0dXJuIGlycmFkaWFuY2U7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGUkFDVElPTlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgZ2V0SUJMSXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0XFx0I2lmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCB3b3JsZE5vcm1hbCwgMS4wICk7XFxuXFx0XFx0XFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHR2ZWMzIGdldElCTFJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0XFx0I2lmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYztcXG5cXHRcXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdFxcdHJlZmxlY3RWZWMgPSByZWZsZWN0KCAtIHZpZXdEaXIsIG5vcm1hbCApO1xcblxcdFxcdFxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHRyZWZsZWN0VmVjID0gcmVmcmFjdCggLSB2aWV3RGlyLCBub3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgcmVmbGVjdFZlYywgcm91Z2huZXNzICk7XFxuXFx0XFx0XFx0cmV0dXJuIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB2ZWMzKCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfdG9vbl9mcmFnbWVudCA9IFwiVG9vbk1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XCI7XG5cbnZhciBsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5zdHJ1Y3QgVG9vbk1hdGVyaWFsIHtcXG5cXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X1Rvb24oIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFRvb25NYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfVG9vbiggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfVG9vblxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1Rvb25cXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsIClcXHQoMClcIjtcblxudmFyIGxpZ2h0c19waG9uZ19mcmFnbWVudCA9IFwiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xuXG52YXIgbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbnN0cnVjdCBCbGlublBob25nTWF0ZXJpYWwge1xcblxcdHZlYzMgZGlmZnVzZUNvbG9yO1xcblxcdHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdCBzcGVjdWxhclNoaW5pbmVzcztcXG5cXHRmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfQmxpbm5QaG9uZyggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzICkgKiBtYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9CbGlublBob25nXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVxcdCgwKVwiO1xuXG52YXIgbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50ID0gXCJQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2IgKiAoIDEuMCAtIG1ldGFsbmVzc0ZhY3RvciApO1xcbnZlYzMgZHh5ID0gbWF4KCBhYnMoIGRGZHgoIGdlb21ldHJ5Tm9ybWFsICkgKSwgYWJzKCBkRmR5KCBnZW9tZXRyeU5vcm1hbCApICkgKTtcXG5mbG9hdCBnZW9tZXRyeVJvdWdobmVzcyA9IG1heCggbWF4KCBkeHkueCwgZHh5LnkgKSwgZHh5LnogKTtcXG5tYXRlcmlhbC5yb3VnaG5lc3MgPSBtYXgoIHJvdWdobmVzc0ZhY3RvciwgMC4wNTI1ICk7bWF0ZXJpYWwucm91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwucm91Z2huZXNzLCAxLjAgKTtcXG4jaWZkZWYgSU9SXFxuXFx0I2lmZGVmIFNQRUNVTEFSXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgPSBzcGVjdWxhckludGVuc2l0eTtcXG5cXHRcXHR2ZWMzIHNwZWN1bGFyQ29sb3JGYWN0b3IgPSBzcGVjdWxhckNvbG9yO1xcblxcdFxcdCNpZmRlZiBVU0VfU1BFQ1VMQVJJTlRFTlNJVFlNQVBcXG5cXHRcXHRcXHRzcGVjdWxhckludGVuc2l0eUZhY3RvciAqPSB0ZXh0dXJlMkQoIHNwZWN1bGFySW50ZW5zaXR5TWFwLCB2VXYgKS5hO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdCNpZmRlZiBVU0VfU1BFQ1VMQVJDT0xPUk1BUFxcblxcdFxcdFxcdHNwZWN1bGFyQ29sb3JGYWN0b3IgKj0gdGV4dHVyZTJEKCBzcGVjdWxhckNvbG9yTWFwLCB2VXYgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSBtaXgoIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCAxLjAsIG1ldGFsbmVzc0ZhY3RvciApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgPSAxLjA7XFxuXFx0XFx0dmVjMyBzcGVjdWxhckNvbG9yRmFjdG9yID0gdmVjMyggMS4wICk7XFxuXFx0XFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggbWluKCBwb3cyKCAoIGlvciAtIDEuMCApIC8gKCBpb3IgKyAxLjAgKSApICogc3BlY3VsYXJDb2xvckZhY3RvciwgdmVjMyggMS4wICkgKSAqIHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG4jZWxzZVxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIHZlYzMoIDAuMDQgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJGOTAgPSAxLjA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXQgPSBjbGVhcmNvYXQ7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gY2xlYXJjb2F0Um91Z2huZXNzO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdEYwID0gdmVjMyggMC4wNCApO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdEY5MCA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdFxcdG1hdGVyaWFsLmNsZWFyY29hdCAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE1hcCwgdlV2ICkueDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKj0gdGV4dHVyZTJEKCBjbGVhcmNvYXRSb3VnaG5lc3NNYXAsIHZVdiApLnk7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmNsZWFyY29hdCApO1xcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1heCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAwLjA1MjUgKTtcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDEuMCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hFRU5cXG5cXHRtYXRlcmlhbC5zaGVlbkNvbG9yID0gc2hlZW5Db2xvcjtcXG5cXHQjaWZkZWYgVVNFX1NIRUVOQ09MT1JNQVBcXG5cXHRcXHRtYXRlcmlhbC5zaGVlbkNvbG9yICo9IHRleHR1cmUyRCggc2hlZW5Db2xvck1hcCwgdlV2ICkucmdiO1xcblxcdCNlbmRpZlxcblxcdG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzID0gY2xhbXAoIHNoZWVuUm91Z2huZXNzLCAwLjA3LCAxLjAgKTtcXG5cXHQjaWZkZWYgVVNFX1NIRUVOUk9VR0hORVNTTUFQXFxuXFx0XFx0bWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgKj0gdGV4dHVyZTJEKCBzaGVlblJvdWdobmVzc01hcCwgdlV2ICkuYTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50ID0gXCJzdHJ1Y3QgUGh5c2ljYWxNYXRlcmlhbCB7XFxuXFx0dmVjMyBkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXQgcm91Z2huZXNzO1xcblxcdHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdCBzcGVjdWxhckY5MDtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGZsb2F0IGNsZWFyY29hdDtcXG5cXHRcXHRmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XFxuXFx0XFx0dmVjMyBjbGVhcmNvYXRGMDtcXG5cXHRcXHRmbG9hdCBjbGVhcmNvYXRGOTA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTlxcblxcdFxcdHZlYzMgc2hlZW5Db2xvcjtcXG5cXHRcXHRmbG9hdCBzaGVlblJvdWdobmVzcztcXG5cXHQjZW5kaWZcXG59O1xcbnZlYzMgY2xlYXJjb2F0U3BlY3VsYXIgPSB2ZWMzKCAwLjAgKTtcXG52ZWMzIHNoZWVuU3BlY3VsYXIgPSB2ZWMzKCAwLjAgKTtcXG5mbG9hdCBJQkxTaGVlbkJSREYoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcykge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcXG5cXHRmbG9hdCByMiA9IHJvdWdobmVzcyAqIHJvdWdobmVzcztcXG5cXHRmbG9hdCBhID0gcm91Z2huZXNzIDwgMC4yNSA/IC0zMzkuMiAqIHIyICsgMTYxLjQgKiByb3VnaG5lc3MgLSAyNS45IDogLTguNDggKiByMiArIDE0LjMgKiByb3VnaG5lc3MgLSA5Ljk1O1xcblxcdGZsb2F0IGIgPSByb3VnaG5lc3MgPCAwLjI1ID8gNDQuMCAqIHIyIC0gMjMuNyAqIHJvdWdobmVzcyArIDMuMjYgOiAxLjk3ICogcjIgLSAzLjI3ICogcm91Z2huZXNzICsgMC43MjtcXG5cXHRmbG9hdCBERyA9IGV4cCggYSAqIGRvdE5WICsgYiApICsgKCByb3VnaG5lc3MgPCAwLjI1ID8gMC4wIDogMC4xICogKCByb3VnaG5lc3MgLSAwLjI1ICkgKTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIERHICogUkVDSVBST0NBTF9QSSApO1xcbn1cXG52ZWMyIERGR0FwcHJveCggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcXG5cXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcXG5cXHRjb25zdCB2ZWM0IGMxID0gdmVjNCggMSwgMC4wNDI1LCAxLjA0LCAtIDAuMDQgKTtcXG5cXHR2ZWM0IHIgPSByb3VnaG5lc3MgKiBjMCArIGMxO1xcblxcdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xcblxcdHZlYzIgZmFiID0gdmVjMiggLSAxLjA0LCAxLjA0ICkgKiBhMDA0ICsgci56dztcXG5cXHRyZXR1cm4gZmFiO1xcbn1cXG52ZWMzIEVudmlyb25tZW50QlJERiggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdHZlYzIgZmFiID0gREZHQXBwcm94KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdHJldHVybiBzcGVjdWxhckNvbG9yICogZmFiLnggKyBzcGVjdWxhckY5MCAqIGZhYi55O1xcbn1cXG52b2lkIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgaW5vdXQgdmVjMyBzaW5nbGVTY2F0dGVyLCBpbm91dCB2ZWMzIG11bHRpU2NhdHRlciApIHtcXG5cXHR2ZWMyIGZhYiA9IERGR0FwcHJveCggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIEZzc0VzcyA9IHNwZWN1bGFyQ29sb3IgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XFxuXFx0ZmxvYXQgRXNzID0gZmFiLnggKyBmYWIueTtcXG5cXHRmbG9hdCBFbXMgPSAxLjAgLSBFc3M7XFxuXFx0dmVjMyBGYXZnID0gc3BlY3VsYXJDb2xvciArICggMS4wIC0gc3BlY3VsYXJDb2xvciApICogMC4wNDc2MTk7XFx0dmVjMyBGbXMgPSBGc3NFc3MgKiBGYXZnIC8gKCAxLjAgLSBFbXMgKiBGYXZnICk7XFxuXFx0c2luZ2xlU2NhdHRlciArPSBGc3NFc3M7XFxuXFx0bXVsdGlTY2F0dGVyICs9IEZtcyAqIEVtcztcXG59XFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHZvaWQgUkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsKCBjb25zdCBpbiBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnkubm9ybWFsO1xcblxcdFxcdHZlYzMgdmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XFxuXFx0XFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzO1xcblxcdFxcdHZlYzMgcmVjdENvb3Jkc1sgNCBdO1xcblxcdFxcdHJlY3RDb29yZHNbIDAgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXHRcXHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdFxcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xcblxcdFxcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xcblxcdFxcdG1hdDMgbUludiA9IG1hdDMoXFxuXFx0XFx0XFx0dmVjMyggdDEueCwgMCwgdDEueSApLFxcblxcdFxcdFxcdHZlYzMoICAgIDAsIDEsICAgIDAgKSxcXG5cXHRcXHRcXHR2ZWMzKCB0MS56LCAwLCB0MS53IClcXG5cXHRcXHQpO1xcblxcdFxcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xcblxcdH1cXG4jZW5kaWZcXG52b2lkIFJFX0RpcmVjdF9QaHlzaWNhbCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGZsb2F0IGRvdE5MY2MgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0XFx0dmVjMyBjY0lycmFkaWFuY2UgPSBkb3ROTGNjICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0Y2xlYXJjb2F0U3BlY3VsYXIgKz0gY2NJcnJhZGlhbmNlICogQlJERl9HR1goIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0c2hlZW5TcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9TaGVlbiggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNoZWVuQ29sb3IsIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLnJvdWdobmVzcyApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRjbGVhcmNvYXRTcGVjdWxhciArPSBjbGVhcmNvYXRSYWRpYW5jZSAqIEVudmlyb25tZW50QlJERiggZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyLCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0c2hlZW5TcGVjdWxhciArPSBpcnJhZGlhbmNlICogbWF0ZXJpYWwuc2hlZW5Db2xvciAqIElCTFNoZWVuQlJERiggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyLCBtYXRlcmlhbC5zaGVlblJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgc2luZ2xlU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgbXVsdGlTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2UgPSBpcnJhZGlhbmNlICogUkVDSVBST0NBTF9QSTtcXG5cXHRjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5yb3VnaG5lc3MsIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZyApO1xcblxcdHZlYzMgZGlmZnVzZSA9IG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqICggMS4wIC0gKCBzaW5nbGVTY2F0dGVyaW5nICsgbXVsdGlTY2F0dGVyaW5nICkgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IHJhZGlhbmNlICogc2luZ2xlU2NhdHRlcmluZztcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IG11bHRpU2NhdHRlcmluZyAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gZGlmZnVzZSAqIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0RpcmVjdF9SZWN0QXJlYVxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdFNwZWN1bGFyXFx0XFx0UkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbFxcbmZsb2F0IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IGFtYmllbnRPY2NsdXNpb24sIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIHBvdyggZG90TlYgKyBhbWJpZW50T2NjbHVzaW9uLCBleHAyKCAtIDE2LjAgKiByb3VnaG5lc3MgLSAxLjAgKSApIC0gMS4wICsgYW1iaWVudE9jY2x1c2lvbiApO1xcbn1cIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9iZWdpbiA9IFwiXFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IC0gdlZpZXdQb3NpdGlvbjtcXG5nZW9tZXRyeS5ub3JtYWwgPSBub3JtYWw7XFxuZ2VvbWV0cnkudmlld0RpciA9ICggaXNPcnRob2dyYXBoaWMgKSA/IHZlYzMoIDAsIDAsIDEgKSA6IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0Z2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsID0gY2xlYXJjb2F0Tm9ybWFsO1xcbiNlbmRpZlxcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuI2lmICggTlVNX1BPSU5UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRQb2ludExpZ2h0SW5mbyggcG9pbnRMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0cG9pbnRMaWdodFNoYWRvdyA9IHBvaW50TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3c7XFxuXFx0I2VuZGlmXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0U3BvdExpZ2h0SW5mbyggc3BvdExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fRElSX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3c7XFxuXFx0I2VuZGlmXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldERpcmVjdGlvbmFsTGlnaHRJbmZvKCBkaXJlY3Rpb25hbExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxcblxcdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cmVjdEFyZWFMaWdodCA9IHJlY3RBcmVhTGlnaHRzWyBpIF07XFxuXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhKCByZWN0QXJlYUxpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0dmVjMyBpYmxJcnJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHRpcnJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBsaWdodFByb2JlLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG5cXHQjaWYgKCBOVU1fSEVNSV9MSUdIVFMgPiAwIClcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0dmVjMyByYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9tYXBzID0gXCIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApO1xcblxcdFxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRsaWdodE1hcElycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdGlibElycmFkaWFuY2UgKz0gZ2V0SUJMSXJyYWRpYW5jZSggZ2VvbWV0cnkubm9ybWFsICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRyYWRpYW5jZSArPSBnZXRJQkxSYWRpYW5jZSggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGNsZWFyY29hdFJhZGlhbmNlICs9IGdldElCTFJhZGlhbmNlKCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X2VuZCA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0UkVfSW5kaXJlY3REaWZmdXNlKCBpcnJhZGlhbmNlLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdFJFX0luZGlyZWN0U3BlY3VsYXIoIHJhZGlhbmNlLCBpYmxJcnJhZGlhbmNlLCBjbGVhcmNvYXRSYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKSAmJiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUZfRVhUIClcXG5cXHRnbF9GcmFnRGVwdGhFWFQgPSB2SXNQZXJzcGVjdGl2ZSA9PSAwLjAgPyBnbF9GcmFnQ29vcmQueiA6IGxvZzIoIHZGcmFnRGVwdGggKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjU7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcXG5cXHRcXHR2SXNQZXJzcGVjdGl2ZSA9IGZsb2F0KCBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICkgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICkge1xcblxcdFxcdFxcdGdsX1Bvc2l0aW9uLnogPSBsb2cyKCBtYXgoIEVQU0lMT04sIGdsX1Bvc2l0aW9uLncgKyAxLjAgKSApICogbG9nRGVwdGhCdWZGQyAtIDEuMDtcXG5cXHRcXHRcXHRnbF9Qb3NpdGlvbi56ICo9IGdsX1Bvc2l0aW9uLnc7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzQgc2FtcGxlZERpZmZ1c2VDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2VXYgKTtcXG5cXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVcXG5cXHRcXHRzYW1wbGVkRGlmZnVzZUNvbG9yID0gdmVjNCggbWl4KCBwb3coIHNhbXBsZWREaWZmdXNlQ29sb3IucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHNhbXBsZWREaWZmdXNlQ29sb3IucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCBzYW1wbGVkRGlmZnVzZUNvbG9yLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCBzYW1wbGVkRGlmZnVzZUNvbG9yLncgKTtcXG5cXHQjZW5kaWZcXG5cXHRkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUFQXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHRleHR1cmUyRCggbWFwLCB1diApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB1diApLmc7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdlV2ICk7XFxuXFx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtZXRhbG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaGNvbG9yX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NT1JQSENPTE9SUyApICYmIGRlZmluZWQoIE1PUlBIVEFSR0VUU19URVhUVVJFIClcXG5cXHR2Q29sb3IgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBIClcXG5cXHRcXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApXFxuXFx0XFx0XFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSB2Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkucmdiICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF1cXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHQjaWZkZWYgTU9SUEhUQVJHRVRTX1RFWFRVUkVcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XFxuXFx0XFx0XFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSBvYmplY3ROb3JtYWwgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAxICkueHl6ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMCAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xcblxcdFxcdG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDEgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRcXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwyICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0XFx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMyAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XFxuXFx0I2lmZGVmIE1PUlBIVEFSR0VUU19URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIE1PUlBIVEFSR0VUU19DT1VOVCBdO1xcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEQXJyYXkgbW9ycGhUYXJnZXRzVGV4dHVyZTtcXG5cXHRcXHR1bmlmb3JtIHZlYzIgbW9ycGhUYXJnZXRzVGV4dHVyZVNpemU7XFxuXFx0XFx0dmVjNCBnZXRNb3JwaCggY29uc3QgaW4gaW50IHZlcnRleEluZGV4LCBjb25zdCBpbiBpbnQgbW9ycGhUYXJnZXRJbmRleCwgY29uc3QgaW4gaW50IG9mZnNldCApIHtcXG5cXHRcXHRcXHRmbG9hdCB0ZXhlbEluZGV4ID0gZmxvYXQoIHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0ICk7XFxuXFx0XFx0XFx0ZmxvYXQgeSA9IGZsb29yKCB0ZXhlbEluZGV4IC8gbW9ycGhUYXJnZXRzVGV4dHVyZVNpemUueCApO1xcblxcdFxcdFxcdGZsb2F0IHggPSB0ZXhlbEluZGV4IC0geSAqIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0XFx0dmVjMyBtb3JwaFVWID0gdmVjMyggKCB4ICsgMC41ICkgLyBtb3JwaFRhcmdldHNUZXh0dXJlU2l6ZS54LCB5IC8gbW9ycGhUYXJnZXRzVGV4dHVyZVNpemUueSwgbW9ycGhUYXJnZXRJbmRleCApO1xcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlKCBtb3JwaFRhcmdldHNUZXh0dXJlLCBtb3JwaFVWICk7XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0XFx0XFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDggXTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdCNpZmRlZiBNT1JQSFRBUkdFVFNfVEVYVFVSRVxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHRyYW5zZm9ybWVkICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMCApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdFxcdH1cXG5cXHQjZWxzZVxcblxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MCAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xcblxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0MyAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xcblxcdFxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdFxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0NCAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdFxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0NSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xcblxcdFxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0NiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNiBdO1xcblxcdFxcdFxcdHRyYW5zZm9ybWVkICs9IG1vcnBoVGFyZ2V0NyAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNyBdO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCJmbG9hdCBmYWNlRGlyZWN0aW9uID0gZ2xfRnJvbnRGYWNpbmcgPyAxLjAgOiAtIDEuMDtcXG4jaWZkZWYgRkxBVF9TSEFERURcXG5cXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIGZkeSA9IHZlYzMoIGRGZHkoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeSggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG4jZWxzZVxcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqIGZhY2VEaXJlY3Rpb247XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmVjMyB0YW5nZW50ID0gbm9ybWFsaXplKCB2VGFuZ2VudCApO1xcblxcdFxcdHZlYzMgYml0YW5nZW50ID0gbm9ybWFsaXplKCB2Qml0YW5nZW50ICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHRhbmdlbnQgPSB0YW5nZW50ICogZmFjZURpcmVjdGlvbjtcXG5cXHRcXHRcXHRiaXRhbmdlbnQgPSBiaXRhbmdlbnQgKiBmYWNlRGlyZWN0aW9uO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdCNpZiBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKVxcblxcdFxcdFxcdG1hdDMgdlRCTiA9IG1hdDMoIHRhbmdlbnQsIGJpdGFuZ2VudCwgbm9ybWFsICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxudmVjMyBnZW9tZXRyeU5vcm1hbCA9IG5vcm1hbDtcIjtcblxudmFyIG5vcm1hbF9mcmFnbWVudF9tYXBzID0gXCIjaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0bm9ybWFsID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHQjaWZkZWYgRkxJUF9TSURFRFxcblxcdFxcdG5vcm1hbCA9IC0gbm9ybWFsO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiBmYWNlRGlyZWN0aW9uO1xcblxcdCNlbmRpZlxcblxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XFxuI2VsaWYgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRtYXBOLnh5ICo9IG5vcm1hbFNjYWxlO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIG1hcE4gKTtcXG5cXHQjZWxzZVxcblxcdFxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtIHZWaWV3UG9zaXRpb24sIG5vcm1hbCwgbWFwTiwgZmFjZURpcmVjdGlvbiApO1xcblxcdCNlbmRpZlxcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtIHZWaWV3UG9zaXRpb24sIG5vcm1hbCwgZEhkeHlfZndkKCksIGZhY2VEaXJlY3Rpb24gKTtcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX3BhcnNfdmVydGV4ID0gXCIjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsX3ZlcnRleCA9IFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkVGFuZ2VudCApO1xcblxcdFxcdHZCaXRhbmdlbnQgPSBub3JtYWxpemUoIGNyb3NzKCB2Tm9ybWFsLCB2VGFuZ2VudCApICogdGFuZ2VudC53ICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIG5vcm1hbFNjYWxlO1xcbiNlbmRpZlxcbiNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4O1xcbiNlbmRpZlxcbiNpZiAhIGRlZmluZWQgKCBVU0VfVEFOR0VOVCApICYmICggZGVmaW5lZCAoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkICggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKSApXFxuXFx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMyBtYXBOLCBmbG9hdCBmYWNlRGlyZWN0aW9uICkge1xcblxcdFxcdHZlYzMgcTAgPSB2ZWMzKCBkRmR4KCBleWVfcG9zLnggKSwgZEZkeCggZXllX3Bvcy55ICksIGRGZHgoIGV5ZV9wb3MueiApICk7XFxuXFx0XFx0dmVjMyBxMSA9IHZlYzMoIGRGZHkoIGV5ZV9wb3MueCApLCBkRmR5KCBleWVfcG9zLnkgKSwgZEZkeSggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHZVdi5zdCApO1xcblxcdFxcdHZlYzIgc3QxID0gZEZkeSggdlV2LnN0ICk7XFxuXFx0XFx0dmVjMyBOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgcTFwZXJwID0gY3Jvc3MoIHExLCBOICk7XFxuXFx0XFx0dmVjMyBxMHBlcnAgPSBjcm9zcyggTiwgcTAgKTtcXG5cXHRcXHR2ZWMzIFQgPSBxMXBlcnAgKiBzdDAueCArIHEwcGVycCAqIHN0MS54O1xcblxcdFxcdHZlYzMgQiA9IHExcGVycCAqIHN0MC55ICsgcTBwZXJwICogc3QxLnk7XFxuXFx0XFx0ZmxvYXQgZGV0ID0gbWF4KCBkb3QoIFQsIFQgKSwgZG90KCBCLCBCICkgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZSA9ICggZGV0ID09IDAuMCApID8gMC4wIDogZmFjZURpcmVjdGlvbiAqIGludmVyc2VzcXJ0KCBkZXQgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBUICogKCBtYXBOLnggKiBzY2FsZSApICsgQiAqICggbWFwTi55ICogc2NhbGUgKSArIE4gKiBtYXBOLnogKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gZ2VvbWV0cnlOb3JtYWw7XFxuI2VuZGlmXCI7XG5cbnZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHZlYzMgY2xlYXJjb2F0TWFwTiA9IHRleHR1cmUyRCggY2xlYXJjb2F0Tm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0Y2xlYXJjb2F0TWFwTi54eSAqPSBjbGVhcmNvYXROb3JtYWxTY2FsZTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRjbGVhcmNvYXROb3JtYWwgPSBub3JtYWxpemUoIHZUQk4gKiBjbGVhcmNvYXRNYXBOICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRjbGVhcmNvYXROb3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLSB2Vmlld1Bvc2l0aW9uLCBjbGVhcmNvYXROb3JtYWwsIGNsZWFyY29hdE1hcE4sIGZhY2VEaXJlY3Rpb24gKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdE1hcDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXRSb3VnaG5lc3NNYXA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0Tm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBjbGVhcmNvYXROb3JtYWxTY2FsZTtcXG4jZW5kaWZcIjtcblxudmFyIG91dHB1dF9mcmFnbWVudCA9IFwiI2lmZGVmIE9QQVFVRVxcbmRpZmZ1c2VDb2xvci5hID0gMS4wO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuZGlmZnVzZUNvbG9yLmEgKj0gdHJhbnNtaXNzaW9uQWxwaGEgKyAwLjE7XFxuI2VuZGlmXFxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcIjtcblxudmFyIHBhY2tpbmcgPSBcInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcXG59XFxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XFxuXFx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XFxufVxcbmNvbnN0IGZsb2F0IFBhY2tVcHNjYWxlID0gMjU2LiAvIDI1NS47Y29uc3QgZmxvYXQgVW5wYWNrRG93bnNjYWxlID0gMjU1LiAvIDI1Ni47XFxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sIDI1Ni4gKTtcXG5jb25zdCB2ZWM0IFVucGFja0ZhY3RvcnMgPSBVbnBhY2tEb3duc2NhbGUgLyB2ZWM0KCBQYWNrRmFjdG9ycywgMS4gKTtcXG5jb25zdCBmbG9hdCBTaGlmdFJpZ2h0OCA9IDEuIC8gMjU2LjtcXG52ZWM0IHBhY2tEZXB0aFRvUkdCQSggY29uc3QgaW4gZmxvYXQgdiApIHtcXG5cXHR2ZWM0IHIgPSB2ZWM0KCBmcmFjdCggdiAqIFBhY2tGYWN0b3JzICksIHYgKTtcXG5cXHRyLnl6dyAtPSByLnh5eiAqIFNoaWZ0UmlnaHQ4O1xcdHJldHVybiByICogUGFja1Vwc2NhbGU7XFxufVxcbmZsb2F0IHVucGFja1JHQkFUb0RlcHRoKCBjb25zdCBpbiB2ZWM0IHYgKSB7XFxuXFx0cmV0dXJuIGRvdCggdiwgVW5wYWNrRmFjdG9ycyApO1xcbn1cXG52ZWM0IHBhY2sySGFsZlRvUkdCQSggdmVjMiB2ICkge1xcblxcdHZlYzQgciA9IHZlYzQoIHYueCwgZnJhY3QoIHYueCAqIDI1NS4wICksIHYueSwgZnJhY3QoIHYueSAqIDI1NS4wICkgKTtcXG5cXHRyZXR1cm4gdmVjNCggci54IC0gci55IC8gMjU1LjAsIHIueSwgci56IC0gci53IC8gMjU1LjAsIHIudyApO1xcbn1cXG52ZWMyIHVucGFja1JHQkFUbzJIYWxmKCB2ZWM0IHYgKSB7XFxuXFx0cmV0dXJuIHZlYzIoIHYueCArICggdi55IC8gMjU1LjAgKSwgdi56ICsgKCB2LncgLyAyNTUuMCApICk7XFxufVxcbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCB2aWV3WiArIG5lYXIgKSAvICggbmVhciAtIGZhciApO1xcbn1cXG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGxpbmVhckNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xcbn1cXG5mbG9hdCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCAoIG5lYXIgKyB2aWV3WiApICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogdmlld1ogKTtcXG59XFxuZmxvYXQgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGludkNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICggbmVhciAqIGZhciApIC8gKCAoIGZhciAtIG5lYXIgKSAqIGludkNsaXBaIC0gZmFyICk7XFxufVwiO1xuXG52YXIgcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCA9IFwiI2lmZGVmIFBSRU1VTFRJUExJRURfQUxQSEFcXG5cXHRnbF9GcmFnQ29sb3IucmdiICo9IGdsX0ZyYWdDb2xvci5hO1xcbiNlbmRpZlwiO1xuXG52YXIgcHJvamVjdF92ZXJ0ZXggPSBcInZlYzQgbXZQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRtdlBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiBtdlBvc2l0aW9uO1xcbiNlbmRpZlxcbm12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiBtdlBvc2l0aW9uO1xcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCI7XG5cbnZhciBkaXRoZXJpbmdfZnJhZ21lbnQgPSBcIiNpZmRlZiBESVRIRVJJTkdcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gZGl0aGVyaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIERJVEhFUklOR1xcblxcdHZlYzMgZGl0aGVyaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdFxcdGZsb2F0IGdyaWRfcG9zaXRpb24gPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcXG5cXHRcXHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xcblxcdFxcdGRpdGhlcl9zaGlmdF9SR0IgPSBtaXgoIDIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIC0yLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCBncmlkX3Bvc2l0aW9uICk7XFxuXFx0XFx0cmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCByb3VnaG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3dzWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHBvaW50U2hhZG93TWFwWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgUG9pbnRMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvd3NbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcXG5cXHR9XFxuXFx0dmVjMiB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYgKSB7XFxuXFx0XFx0cmV0dXJuIHVucGFja1JHQkFUbzJIYWxmKCB0ZXh0dXJlMkQoIHNoYWRvdywgdXYgKSApO1xcblxcdH1cXG5cXHRmbG9hdCBWU01TaGFkb3cgKHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKXtcXG5cXHRcXHRmbG9hdCBvY2NsdXNpb24gPSAxLjA7XFxuXFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNoYWRvdywgdXYgKTtcXG5cXHRcXHRmbG9hdCBoYXJkX3NoYWRvdyA9IHN0ZXAoIGNvbXBhcmUgLCBkaXN0cmlidXRpb24ueCApO1xcblxcdFxcdGlmIChoYXJkX3NoYWRvdyAhPSAxLjAgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgZGlzdGFuY2UgPSBjb21wYXJlIC0gZGlzdHJpYnV0aW9uLnggO1xcblxcdFxcdFxcdGZsb2F0IHZhcmlhbmNlID0gbWF4KCAwLjAwMDAwLCBkaXN0cmlidXRpb24ueSAqIGRpc3RyaWJ1dGlvbi55ICk7XFxuXFx0XFx0XFx0ZmxvYXQgc29mdG5lc3NfcHJvYmFiaWxpdHkgPSB2YXJpYW5jZSAvICh2YXJpYW5jZSArIGRpc3RhbmNlICogZGlzdGFuY2UgKTtcXHRcXHRcXHRzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IGNsYW1wKCAoIHNvZnRuZXNzX3Byb2JhYmlsaXR5IC0gMC4zICkgLyAoIDAuOTUgLSAwLjMgKSwgMC4wLCAxLjAgKTtcXHRcXHRcXHRvY2NsdXNpb24gPSBjbGFtcCggbWF4KCBoYXJkX3NoYWRvdywgc29mdG5lc3NfcHJvYmFiaWxpdHkgKSwgMC4wLCAxLjAgKTtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIG9jY2x1c2lvbjtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MiA9IGR4MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeTIgPSBkeTAgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MyA9IGR5MSAvIDIuMDtcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MywgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gMTcuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IHRleGVsU2l6ZS54O1xcblxcdFxcdFxcdGZsb2F0IGR5ID0gdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0dmVjMiB1diA9IHNoYWRvd0Nvb3JkLnh5O1xcblxcdFxcdFxcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNoYWRvd01hcFNpemUgKyAwLjUgKTtcXG5cXHRcXHRcXHR1diAtPSBmICogdGV4ZWxTaXplO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgZHkgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdGV4ZWxTaXplLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi54ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgZHkgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueCApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIC1keSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCBmLnkgKSArXFxuXFx0XFx0XFx0XFx0bWl4KCBtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAtZHgsIC1keSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHRcXHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcXG5cXHRcXHRcXHRzaGFkb3cgPSBWU01TaGFkb3coIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHNoYWRvdztcXG5cXHR9XFxuXFx0dmVjMiBjdWJlVG9VViggdmVjMyB2LCBmbG9hdCB0ZXhlbFNpemVZICkge1xcblxcdFxcdHZlYzMgYWJzViA9IGFicyggdiApO1xcblxcdFxcdGZsb2F0IHNjYWxlVG9DdWJlID0gMS4wIC8gbWF4KCBhYnNWLngsIG1heCggYWJzVi55LCBhYnNWLnogKSApO1xcblxcdFxcdGFic1YgKj0gc2NhbGVUb0N1YmU7XFxuXFx0XFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xcblxcdFxcdHZlYzIgcGxhbmFyID0gdi54eTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RBVGV4ZWwgPSAxLjUgKiB0ZXhlbFNpemVZO1xcblxcdFxcdGZsb2F0IGFsbW9zdE9uZSA9IDEuMCAtIGFsbW9zdEFUZXhlbDtcXG5cXHRcXHRpZiAoIGFic1YueiA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0aWYgKCB2LnogPiAwLjAgKVxcblxcdFxcdFxcdFxcdHBsYW5hci54ID0gNC4wIC0gdi54O1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueCA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueiAqIHNpZ25YICsgMi4wICogc2lnblg7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi55ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWSA9IHNpZ24oIHYueSApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi54ICsgMi4wICogc2lnblkgKyAyLjA7XFxuXFx0XFx0XFx0cGxhbmFyLnkgPSB2LnogKiBzaWduWSAtIDIuMDtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuMTI1LCAwLjI1ICkgKiBwbGFuYXIgKyB2ZWMyKCAwLjM3NSwgMC43NSApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRQb2ludFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xcblxcdFxcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xcblxcdFxcdGZsb2F0IGRwID0gKCBsZW5ndGgoIGxpZ2h0VG9Qb3NpdGlvbiApIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XFx0XFx0ZHAgKz0gc2hhZG93QmlhcztcXG5cXHRcXHR2ZWMzIGJkM0QgPSBub3JtYWxpemUoIGxpZ2h0VG9Qb3NpdGlvbiApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1ZTTSApXFxuXFx0XFx0XFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xcblxcdFxcdFxcdHJldHVybiAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgc3BvdFNoYWRvd01hdHJpeFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3dzWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYU5lYXI7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhRmFyO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBQb2ludExpZ2h0U2hhZG93IHBvaW50TGlnaHRTaGFkb3dzWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMCB8fCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMCB8fCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR2ZWMzIHNoYWRvd1dvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggdHJhbnNmb3JtZWROb3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHR2ZWM0IHNoYWRvd1dvcmxkUG9zaXRpb247XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHNoYWRvd1dvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uICsgdmVjNCggc2hhZG93V29ybGROb3JtYWwgKiBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXMsIDAgKTtcXG5cXHRcXHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIHNwb3RMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzLCAwICk7XFxuXFx0XFx0dlNwb3RTaGFkb3dDb29yZFsgaSBdID0gc3BvdFNoYWRvd01hdHJpeFsgaSBdICogc2hhZG93V29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHNoYWRvd1dvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uICsgdmVjNCggc2hhZG93V29ybGROb3JtYWwgKiBwb2ludExpZ2h0U2hhZG93c1sgaSBdLnNoYWRvd05vcm1hbEJpYXMsIDAgKTtcXG5cXHRcXHR2UG9pbnRTaGFkb3dDb29yZFsgaSBdID0gcG9pbnRTaGFkb3dNYXRyaXhbIGkgXSAqIHNoYWRvd1dvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQgPSBcImZsb2F0IGdldFNoYWRvd01hc2soKSB7XFxuXFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gc2hhZG93O1xcbn1cIjtcblxudmFyIHNraW5iYXNlX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xcblxcdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xcblxcdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xcblxcdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5pbmdfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeDtcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeEludmVyc2U7XFxuXFx0I2lmZGVmIEJPTkVfVEVYVFVSRVxcblxcdFxcdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xcblxcdFxcdHVuaWZvcm0gaW50IGJvbmVUZXh0dXJlU2l6ZTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgaiA9IGkgKiA0LjA7XFxuXFx0XFx0XFx0ZmxvYXQgeCA9IG1vZCggaiwgZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgeSA9IGZsb29yKCBqIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHggPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0eSA9IGR5ICogKCB5ICsgMC41ICk7XFxuXFx0XFx0XFx0dmVjNCB2MSA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMC41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjIgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDEuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYzID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAyLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2NCA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMy41ICksIHkgKSApO1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IGJvbmVNYXRyaWNlc1sgTUFYX0JPTkVTIF07XFxuXFx0XFx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IGJvbmVNYXRyaWNlc1sgaW50KGkpIF07XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5pbmdfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHR2ZWM0IHNraW5uZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRaICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQuejtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcXG5cXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KCAwLjAgKTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueCAqIGJvbmVNYXRYO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnogKiBib25lTWF0WjtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQudyAqIGJvbmVNYXRXO1xcblxcdHNraW5NYXRyaXggPSBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5NYXRyaXggKiBiaW5kTWF0cml4O1xcblxcdG9iamVjdE5vcm1hbCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3ROb3JtYWwsIDAuMCApICkueHl6O1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdG9iamVjdFRhbmdlbnQgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9IFwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCI7XG5cbnZhciBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFRPTkVfTUFQUElORyApXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IHRvbmVNYXBwaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIHNhdHVyYXRlXFxuI2RlZmluZSBzYXR1cmF0ZSggYSApIGNsYW1wKCBhLCAwLjAsIDEuMCApXFxuI2VuZGlmXFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ0V4cG9zdXJlO1xcbnZlYzMgTGluZWFyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0cmV0dXJuIHRvbmVNYXBwaW5nRXhwb3N1cmUgKiBjb2xvcjtcXG59XFxudmVjMyBSZWluaGFyZFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciAvICggdmVjMyggMS4wICkgKyBjb2xvciApICk7XFxufVxcbnZlYzMgT3B0aW1pemVkQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG52ZWMzIFJSVEFuZE9EVEZpdCggdmVjMyB2ICkge1xcblxcdHZlYzMgYSA9IHYgKiAoIHYgKyAwLjAyNDU3ODYgKSAtIDAuMDAwMDkwNTM3O1xcblxcdHZlYzMgYiA9IHYgKiAoIDAuOTgzNzI5ICogdiArIDAuNDMyOTUxMCApICsgMC4yMzgwODE7XFxuXFx0cmV0dXJuIGEgLyBiO1xcbn1cXG52ZWMzIEFDRVNGaWxtaWNUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb25zdCBtYXQzIEFDRVNJbnB1dE1hdCA9IG1hdDMoXFxuXFx0XFx0dmVjMyggMC41OTcxOSwgMC4wNzYwMCwgMC4wMjg0MCApLFxcdFxcdHZlYzMoIDAuMzU0NTgsIDAuOTA4MzQsIDAuMTMzODMgKSxcXG5cXHRcXHR2ZWMzKCAwLjA0ODIzLCAwLjAxNTY2LCAwLjgzNzc3IClcXG5cXHQpO1xcblxcdGNvbnN0IG1hdDMgQUNFU091dHB1dE1hdCA9IG1hdDMoXFxuXFx0XFx0dmVjMyggIDEuNjA0NzUsIC0wLjEwMjA4LCAtMC4wMDMyNyApLFxcdFxcdHZlYzMoIC0wLjUzMTA4LCAgMS4xMDgxMywgLTAuMDcyNzYgKSxcXG5cXHRcXHR2ZWMzKCAtMC4wNzM2NywgLTAuMDA2MDUsICAxLjA3NjAyIClcXG5cXHQpO1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmUgLyAwLjY7XFxuXFx0Y29sb3IgPSBBQ0VTSW5wdXRNYXQgKiBjb2xvcjtcXG5cXHRjb2xvciA9IFJSVEFuZE9EVEZpdCggY29sb3IgKTtcXG5cXHRjb2xvciA9IEFDRVNPdXRwdXRNYXQgKiBjb2xvcjtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yICk7XFxufVxcbnZlYzMgQ3VzdG9tVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7IHJldHVybiBjb2xvcjsgfVwiO1xuXG52YXIgdHJhbnNtaXNzaW9uX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdGZsb2F0IHRyYW5zbWlzc2lvbkFscGhhID0gMS4wO1xcblxcdGZsb2F0IHRyYW5zbWlzc2lvbkZhY3RvciA9IHRyYW5zbWlzc2lvbjtcXG5cXHRmbG9hdCB0aGlja25lc3NGYWN0b3IgPSB0aGlja25lc3M7XFxuXFx0I2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcXG5cXHRcXHR0cmFuc21pc3Npb25GYWN0b3IgKj0gdGV4dHVyZTJEKCB0cmFuc21pc3Npb25NYXAsIHZVdiApLnI7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9USElDS05FU1NNQVBcXG5cXHRcXHR0aGlja25lc3NGYWN0b3IgKj0gdGV4dHVyZTJEKCB0aGlja25lc3NNYXAsIHZVdiApLmc7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyBwb3MgPSB2V29ybGRQb3NpdGlvbjtcXG5cXHR2ZWMzIHYgPSBub3JtYWxpemUoIGNhbWVyYVBvc2l0aW9uIC0gcG9zICk7XFxuXFx0dmVjMyBuID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0dmVjNCB0cmFuc21pc3Npb24gPSBnZXRJQkxWb2x1bWVSZWZyYWN0aW9uKFxcblxcdFxcdG4sIHYsIHJvdWdobmVzc0ZhY3RvciwgbWF0ZXJpYWwuZGlmZnVzZUNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhckY5MCxcXG5cXHRcXHRwb3MsIG1vZGVsTWF0cml4LCB2aWV3TWF0cml4LCBwcm9qZWN0aW9uTWF0cml4LCBpb3IsIHRoaWNrbmVzc0ZhY3RvcixcXG5cXHRcXHRhdHRlbnVhdGlvbkNvbG9yLCBhdHRlbnVhdGlvbkRpc3RhbmNlICk7XFxuXFx0dG90YWxEaWZmdXNlID0gbWl4KCB0b3RhbERpZmZ1c2UsIHRyYW5zbWlzc2lvbi5yZ2IsIHRyYW5zbWlzc2lvbkZhY3RvciApO1xcblxcdHRyYW5zbWlzc2lvbkFscGhhID0gbWl4KCB0cmFuc21pc3Npb25BbHBoYSwgdHJhbnNtaXNzaW9uLmEsIHRyYW5zbWlzc2lvbkZhY3RvciApO1xcbiNlbmRpZlwiO1xuXG52YXIgdHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuXFx0dW5pZm9ybSBmbG9hdCB0cmFuc21pc3Npb247XFxuXFx0dW5pZm9ybSBmbG9hdCB0aGlja25lc3M7XFxuXFx0dW5pZm9ybSBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlO1xcblxcdHVuaWZvcm0gdmVjMyBhdHRlbnVhdGlvbkNvbG9yO1xcblxcdCNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgdHJhbnNtaXNzaW9uTWFwO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgdGhpY2tuZXNzTWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gdmVjMiB0cmFuc21pc3Npb25TYW1wbGVyU2l6ZTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCB0cmFuc21pc3Npb25TYW1wbGVyTWFwO1xcblxcdHVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcXG5cXHR1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG5cXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0dmVjMyBnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkoIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCB0aGlja25lc3MsIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gbWF0NCBtb2RlbE1hdHJpeCApIHtcXG5cXHRcXHR2ZWMzIHJlZnJhY3Rpb25WZWN0b3IgPSByZWZyYWN0KCAtIHYsIG5vcm1hbGl6ZSggbiApLCAxLjAgLyBpb3IgKTtcXG5cXHRcXHR2ZWMzIG1vZGVsU2NhbGU7XFxuXFx0XFx0bW9kZWxTY2FsZS54ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMCBdLnh5eiApICk7XFxuXFx0XFx0bW9kZWxTY2FsZS55ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMSBdLnh5eiApICk7XFxuXFx0XFx0bW9kZWxTY2FsZS56ID0gbGVuZ3RoKCB2ZWMzKCBtb2RlbE1hdHJpeFsgMiBdLnh5eiApICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggcmVmcmFjdGlvblZlY3RvciApICogdGhpY2tuZXNzICogbW9kZWxTY2FsZTtcXG5cXHR9XFxuXFx0ZmxvYXQgYXBwbHlJb3JUb1JvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IgKSB7XFxuXFx0XFx0cmV0dXJuIHJvdWdobmVzcyAqIGNsYW1wKCBpb3IgKiAyLjAgLSAyLjAsIDAuMCwgMS4wICk7XFxuXFx0fVxcblxcdHZlYzQgZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCBjb25zdCBpbiB2ZWMyIGZyYWdDb29yZCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZnJhbWVidWZmZXJMb2QgPSBsb2cyKCB0cmFuc21pc3Npb25TYW1wbGVyU2l6ZS54ICkgKiBhcHBseUlvclRvUm91Z2huZXNzKCByb3VnaG5lc3MsIGlvciApO1xcblxcdFxcdCNpZmRlZiB0ZXh0dXJlMkRMb2RFWFRcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJETG9kRVhUKCB0cmFuc21pc3Npb25TYW1wbGVyTWFwLCBmcmFnQ29vcmQueHksIGZyYW1lYnVmZmVyTG9kICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEKCB0cmFuc21pc3Npb25TYW1wbGVyTWFwLCBmcmFnQ29vcmQueHksIGZyYW1lYnVmZmVyTG9kICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdHZlYzMgYXBwbHlWb2x1bWVBdHRlbnVhdGlvbiggY29uc3QgaW4gdmVjMyByYWRpYW5jZSwgY29uc3QgaW4gZmxvYXQgdHJhbnNtaXNzaW9uRGlzdGFuY2UsIGNvbnN0IGluIHZlYzMgYXR0ZW51YXRpb25Db2xvciwgY29uc3QgaW4gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZSApIHtcXG5cXHRcXHRpZiAoIGF0dGVudWF0aW9uRGlzdGFuY2UgPT0gMC4wICkge1xcblxcdFxcdFxcdHJldHVybiByYWRpYW5jZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdHZlYzMgYXR0ZW51YXRpb25Db2VmZmljaWVudCA9IC1sb2coIGF0dGVudWF0aW9uQ29sb3IgKSAvIGF0dGVudWF0aW9uRGlzdGFuY2U7XFxuXFx0XFx0XFx0dmVjMyB0cmFuc21pdHRhbmNlID0gZXhwKCAtIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgKiB0cmFuc21pc3Npb25EaXN0YW5jZSApO1xcdFxcdFxcdHJldHVybiB0cmFuc21pdHRhbmNlICogcmFkaWFuY2U7XFxuXFx0XFx0fVxcblxcdH1cXG5cXHR2ZWM0IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oIGNvbnN0IGluIHZlYzMgbiwgY29uc3QgaW4gdmVjMyB2LCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yLFxcblxcdFxcdGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc3BlY3VsYXJGOTAsIGNvbnN0IGluIHZlYzMgcG9zaXRpb24sIGNvbnN0IGluIG1hdDQgbW9kZWxNYXRyaXgsXFxuXFx0XFx0Y29uc3QgaW4gbWF0NCB2aWV3TWF0cml4LCBjb25zdCBpbiBtYXQ0IHByb2pNYXRyaXgsIGNvbnN0IGluIGZsb2F0IGlvciwgY29uc3QgaW4gZmxvYXQgdGhpY2tuZXNzLFxcblxcdFxcdGNvbnN0IGluIHZlYzMgYXR0ZW51YXRpb25Db2xvciwgY29uc3QgaW4gZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZSApIHtcXG5cXHRcXHR2ZWMzIHRyYW5zbWlzc2lvblJheSA9IGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSggbiwgdiwgdGhpY2tuZXNzLCBpb3IsIG1vZGVsTWF0cml4ICk7XFxuXFx0XFx0dmVjMyByZWZyYWN0ZWRSYXlFeGl0ID0gcG9zaXRpb24gKyB0cmFuc21pc3Npb25SYXk7XFxuXFx0XFx0dmVjNCBuZGNQb3MgPSBwcm9qTWF0cml4ICogdmlld01hdHJpeCAqIHZlYzQoIHJlZnJhY3RlZFJheUV4aXQsIDEuMCApO1xcblxcdFxcdHZlYzIgcmVmcmFjdGlvbkNvb3JkcyA9IG5kY1Bvcy54eSAvIG5kY1Bvcy53O1xcblxcdFxcdHJlZnJhY3Rpb25Db29yZHMgKz0gMS4wO1xcblxcdFxcdHJlZnJhY3Rpb25Db29yZHMgLz0gMi4wO1xcblxcdFxcdHZlYzQgdHJhbnNtaXR0ZWRMaWdodCA9IGdldFRyYW5zbWlzc2lvblNhbXBsZSggcmVmcmFjdGlvbkNvb3Jkcywgcm91Z2huZXNzLCBpb3IgKTtcXG5cXHRcXHR2ZWMzIGF0dGVudWF0ZWRDb2xvciA9IGFwcGx5Vm9sdW1lQXR0ZW51YXRpb24oIHRyYW5zbWl0dGVkTGlnaHQucmdiLCBsZW5ndGgoIHRyYW5zbWlzc2lvblJheSApLCBhdHRlbnVhdGlvbkNvbG9yLCBhdHRlbnVhdGlvbkRpc3RhbmNlICk7XFxuXFx0XFx0dmVjMyBGID0gRW52aXJvbm1lbnRCUkRGKCBuLCB2LCBzcGVjdWxhckNvbG9yLCBzcGVjdWxhckY5MCwgcm91Z2huZXNzICk7XFxuXFx0XFx0cmV0dXJuIHZlYzQoICggMS4wIC0gRiApICogYXR0ZW51YXRlZENvbG9yICogZGlmZnVzZUNvbG9yLCB0cmFuc21pdHRlZExpZ2h0LmEgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciB1dl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgKCBkZWZpbmVkKCBVU0VfVVYgKSAmJiAhIGRlZmluZWQoIFVWU19WRVJURVhfT05MWSApIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfVVZcXG5cXHQjaWZkZWYgVVZTX1ZFUlRFWF9PTkxZXFxuXFx0XFx0dmVjMiB2VXY7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzIgdlV2O1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG4jZW5kaWZcIjtcblxudmFyIHV2X3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9VVlxcblxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdGF0dHJpYnV0ZSB2ZWMyIHV2MjtcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG5cXHR1bmlmb3JtIG1hdDMgdXYyVHJhbnNmb3JtO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFx0dlV2MiA9ICggdXYyVHJhbnNmb3JtICogdmVjMyggdXYyLCAxICkgKS54eTtcXG4jZW5kaWZcIjtcblxudmFyIHdvcmxkcG9zX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBESVNUQU5DRSApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQICkgfHwgZGVmaW5lZCAoIFVTRV9UUkFOU01JU1NJT04gKVxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHQjaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRcXHR3b3JsZFBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHdvcmxkUG9zaXRpb247XFxuI2VuZGlmXCI7XG5cbmNvbnN0IHZlcnRleCRnID0gXCJ2YXJ5aW5nIHZlYzIgdlV2O1xcbnVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG52b2lkIG1haW4oKSB7XFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLnh5LCAxLjAsIDEuMCApO1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdDJEO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdDJELCB2VXYgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRmID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRmID0gXCIjaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgdlJlZmxlY3QgPSB2V29ybGREaXJlY3Rpb247XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSBlbnZDb2xvcjtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGUgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2SGlnaFByZWNpc2lvblpXID0gZ2xfUG9zaXRpb24uenc7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRlID0gXCIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudmFyeWluZyB2ZWMyIHZIaWdoUHJlY2lzaW9uWlc7XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdGZsb2F0IGZyYWdDb29yZFogPSAwLjUgKiB2SGlnaFByZWNpc2lvblpXWzBdIC8gdkhpZ2hQcmVjaXNpb25aV1sxXSArIDAuNTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyggMS4wIC0gZnJhZ0Nvb3JkWiApLCBvcGFjaXR5ICk7XFxuXFx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBmcmFnQ29vcmRaICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnVuaWZvcm0gdmVjMyByZWZlcmVuY2VQb3NpdGlvbjtcXG51bmlmb3JtIGZsb2F0IG5lYXJEaXN0YW5jZTtcXG51bmlmb3JtIGZsb2F0IGZhckRpc3RhbmNlO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XCI7XG5cbmNvbnN0IHZlcnRleCRjID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRjID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7XFxuXFx0dmVjMiBzYW1wbGVVViA9IGVxdWlyZWN0VXYoIGRpcmVjdGlvbiApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGIgPSBcInVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuYXR0cmlidXRlIGZsb2F0IGxpbmVEaXN0YW5jZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRiID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGEgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpZiBkZWZpbmVkICggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQgKCBVU0VfU0tJTk5JTkcgKVxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGxpZ2h0TWFwVGV4ZWwucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxvdXRwdXRfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDkgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG52YXJ5aW5nIHZlYzMgdkluZGlyZWN0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcblxcdHZhcnlpbmcgdmVjMyB2SW5kaXJlY3RCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDkgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbnZhcnlpbmcgdmVjMyB2SW5kaXJlY3RGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuXFx0dmFyeWluZyB2ZWMzIHZJbmRpcmVjdEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gKCBnbF9Gcm9udEZhY2luZyApID8gdkluZGlyZWN0RnJvbnQgOiB2SW5kaXJlY3RCYWNrO1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHZJbmRpcmVjdEZyb250O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxsaWdodG1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2TGlnaHRGcm9udCA6IHZMaWdodEJhY2s7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gdkxpZ2h0RnJvbnQ7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKSAqIGdldFNoYWRvd01hc2soKTtcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxvdXRwdXRfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDggPSBcIiNkZWZpbmUgTUFUQ0FQXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDggPSBcIiNkZWZpbmUgTUFUQ0FQXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hdGNhcDtcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHR2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XFxuXFx0dmVjMyB5ID0gY3Jvc3MoIHZpZXdEaXIsIHggKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggZG90KCB4LCBub3JtYWwgKSwgZG90KCB5LCBub3JtYWwgKSApICogMC40OTUgKyAwLjU7XFxuXFx0I2lmZGVmIFVTRV9NQVRDQVBcXG5cXHRcXHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IG1hdGNhcENvbG9yID0gdmVjNCggdmVjMyggbWl4KCAwLjIsIDAuOCwgdXYueSApICksIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkNyA9IFwiI2RlZmluZSBOT1JNQUxcXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG4jZW5kaWZcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDcgPSBcIiNkZWZpbmUgTk9STUFMXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgb3BhY2l0eSApO1xcblxcdCNpZmRlZiBPUEFRVUVcXG5cXHRcXHRnbF9GcmFnQ29sb3IuYSA9IDEuMDtcXG5cXHQjZW5kaWZcXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ2ID0gXCIjZGVmaW5lIFBIT05HXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNiA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkNSA9IFwiI2RlZmluZSBTVEFOREFSRFxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuXFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNSA9IFwiI2RlZmluZSBTVEFOREFSRFxcbiNpZmRlZiBQSFlTSUNBTFxcblxcdCNkZWZpbmUgSU9SXFxuXFx0I2RlZmluZSBTUEVDVUxBUlxcbiNlbmRpZlxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcXG51bmlmb3JtIGZsb2F0IG1ldGFsbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmZGVmIElPUlxcblxcdHVuaWZvcm0gZmxvYXQgaW9yO1xcbiNlbmRpZlxcbiNpZmRlZiBTUEVDVUxBUlxcblxcdHVuaWZvcm0gZmxvYXQgc3BlY3VsYXJJbnRlbnNpdHk7XFxuXFx0dW5pZm9ybSB2ZWMzIHNwZWN1bGFyQ29sb3I7XFxuXFx0I2lmZGVmIFVTRV9TUEVDVUxBUklOVEVOU0lUWU1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFySW50ZW5zaXR5TWFwO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU1BFQ1VMQVJDT0xPUk1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyQ29sb3JNYXA7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyY29hdDtcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOXFxuXFx0dW5pZm9ybSB2ZWMzIHNoZWVuQ29sb3I7XFxuXFx0dW5pZm9ybSBmbG9hdCBzaGVlblJvdWdobmVzcztcXG5cXHQjaWZkZWYgVVNFX1NIRUVOQ09MT1JNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGVlbkNvbG9yTWFwO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5ST1VHSE5FU1NNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGVlblJvdWdobmVzc01hcDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyB0b3RhbERpZmZ1c2UgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgdG90YWxTcGVjdWxhciA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhcjtcXG5cXHQjaW5jbHVkZSA8dHJhbnNtaXNzaW9uX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHRvdGFsRGlmZnVzZSArIHRvdGFsU3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2lmZGVmIFVTRV9TSEVFTlxcblxcdFxcdGZsb2F0IHNoZWVuRW5lcmd5Q29tcCA9IDEuMCAtIDAuMTU3ICogbWF4MyggbWF0ZXJpYWwuc2hlZW5Db2xvciApO1xcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBvdXRnb2luZ0xpZ2h0ICogc2hlZW5FbmVyZ3lDb21wICsgc2hlZW5TcGVjdWxhcjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGZsb2F0IGRvdE5WY2MgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdHZlYzMgRmNjID0gRl9TY2hsaWNrKCBtYXRlcmlhbC5jbGVhcmNvYXRGMCwgbWF0ZXJpYWwuY2xlYXJjb2F0RjkwLCBkb3ROVmNjICk7XFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiAoIDEuMCAtIG1hdGVyaWFsLmNsZWFyY29hdCAqIEZjYyApICsgY2xlYXJjb2F0U3BlY3VsYXIgKiBtYXRlcmlhbC5jbGVhcmNvYXQ7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkNCA9IFwiI2RlZmluZSBUT09OXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDQgPSBcIiNkZWZpbmUgVE9PTlxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c190b29uX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxvdXRwdXRfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDMgPSBcInVuaWZvcm0gZmxvYXQgc2l6ZTtcXG51bmlmb3JtIGZsb2F0IHNjYWxlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1BvaW50U2l6ZSA9IHNpemU7XFxuXFx0I2lmZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cXG5cXHRcXHRib29sIGlzUGVyc3BlY3RpdmUgPSBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICk7XFxuXFx0XFx0aWYgKCBpc1BlcnNwZWN0aXZlICkgZ2xfUG9pbnRTaXplICo9ICggc2NhbGUgLyAtIG12UG9zaXRpb24ueiApO1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDMgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHQjaW5jbHVkZSA8b3V0cHV0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkMiA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDIgPSBcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIG9wYWNpdHkgKiAoIDEuMCAtIGdldFNoYWRvd01hc2soKSApICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQxID0gXCJ1bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiBjZW50ZXI7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG5cXHR2ZWMyIHNjYWxlO1xcblxcdHNjYWxlLnggPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAwIF0ueCwgbW9kZWxNYXRyaXhbIDAgXS55LCBtb2RlbE1hdHJpeFsgMCBdLnogKSApO1xcblxcdHNjYWxlLnkgPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAxIF0ueCwgbW9kZWxNYXRyaXhbIDEgXS55LCBtb2RlbE1hdHJpeFsgMSBdLnogKSApO1xcblxcdCNpZm5kZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMyIGFsaWduZWRQb3NpdGlvbiA9ICggcG9zaXRpb24ueHkgLSAoIGNlbnRlciAtIHZlYzIoIDAuNSApICkgKSAqIHNjYWxlO1xcblxcdHZlYzIgcm90YXRlZFBvc2l0aW9uO1xcblxcdHJvdGF0ZWRQb3NpdGlvbi54ID0gY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRyb3RhdGVkUG9zaXRpb24ueSA9IHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxuXFx0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkMSA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvdXRwdXRfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IFNoYWRlckNodW5rID0ge1xuXHRhbHBoYW1hcF9mcmFnbWVudDogYWxwaGFtYXBfZnJhZ21lbnQsXG5cdGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ6IGFscGhhbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9mcmFnbWVudDogYWxwaGF0ZXN0X2ZyYWdtZW50LFxuXHRhbHBoYXRlc3RfcGFyc19mcmFnbWVudDogYWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQsXG5cdGFvbWFwX2ZyYWdtZW50OiBhb21hcF9mcmFnbWVudCxcblx0YW9tYXBfcGFyc19mcmFnbWVudDogYW9tYXBfcGFyc19mcmFnbWVudCxcblx0YmVnaW5fdmVydGV4OiBiZWdpbl92ZXJ0ZXgsXG5cdGJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LFxuXHRic2RmczogYnNkZnMsXG5cdGJ1bXBtYXBfcGFyc19mcmFnbWVudDogYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCxcblx0Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCxcblx0Y29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX2ZyYWdtZW50OiBjb2xvcl9wYXJzX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX3ZlcnRleDogY29sb3JfcGFyc192ZXJ0ZXgsXG5cdGNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LFxuXHRjb21tb246IGNvbW1vbixcblx0Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50OiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQsXG5cdGRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCxcblx0ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgsXG5cdGVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCxcblx0ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudDogZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCxcblx0ZW5jb2RpbmdzX2ZyYWdtZW50OiBlbmNvZGluZ3NfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19wYXJzX2ZyYWdtZW50OiBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX2ZyYWdtZW50OiBlbnZtYXBfZnJhZ21lbnQsXG5cdGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudDogZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfcGFyc19mcmFnbWVudDogZW52bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX3ZlcnRleDogZW52bWFwX3BhcnNfdmVydGV4LFxuXHRlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF92ZXJ0ZXg6IGVudm1hcF92ZXJ0ZXgsXG5cdGZvZ192ZXJ0ZXg6IGZvZ192ZXJ0ZXgsXG5cdGZvZ19wYXJzX3ZlcnRleDogZm9nX3BhcnNfdmVydGV4LFxuXHRmb2dfZnJhZ21lbnQ6IGZvZ19mcmFnbWVudCxcblx0Zm9nX3BhcnNfZnJhZ21lbnQ6IGZvZ19wYXJzX2ZyYWdtZW50LFxuXHRncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50OiBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodG1hcF9mcmFnbWVudDogbGlnaHRtYXBfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X3ZlcnRleDogbGlnaHRzX2xhbWJlcnRfdmVydGV4LFxuXHRsaWdodHNfcGFyc19iZWdpbjogbGlnaHRzX3BhcnNfYmVnaW4sXG5cdGxpZ2h0c190b29uX2ZyYWdtZW50OiBsaWdodHNfdG9vbl9mcmFnbWVudCxcblx0bGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudDogbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2ZyYWdtZW50X2JlZ2luOiBsaWdodHNfZnJhZ21lbnRfYmVnaW4sXG5cdGxpZ2h0c19mcmFnbWVudF9tYXBzOiBsaWdodHNfZnJhZ21lbnRfbWFwcyxcblx0bGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCxcblx0bG9nZGVwdGhidWZfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXG5cdGxvZ2RlcHRoYnVmX3ZlcnRleDogbG9nZGVwdGhidWZfdmVydGV4LFxuXHRtYXBfZnJhZ21lbnQ6IG1hcF9mcmFnbWVudCxcblx0bWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50LFxuXHRtb3JwaGNvbG9yX3ZlcnRleDogbW9ycGhjb2xvcl92ZXJ0ZXgsXG5cdG1vcnBobm9ybWFsX3ZlcnRleDogbW9ycGhub3JtYWxfdmVydGV4LFxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LFxuXHRub3JtYWxfZnJhZ21lbnRfYmVnaW46IG5vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRub3JtYWxfcGFyc19mcmFnbWVudDogbm9ybWFsX3BhcnNfZnJhZ21lbnQsXG5cdG5vcm1hbF9wYXJzX3ZlcnRleDogbm9ybWFsX3BhcnNfdmVydGV4LFxuXHRub3JtYWxfdmVydGV4OiBub3JtYWxfdmVydGV4LFxuXHRub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW46IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRjbGVhcmNvYXRfcGFyc19mcmFnbWVudDogY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQsXG5cdG91dHB1dF9mcmFnbWVudDogb3V0cHV0X2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dHJhbnNtaXNzaW9uX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fZnJhZ21lbnQsXG5cdHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0dXYyX3BhcnNfZnJhZ21lbnQ6IHV2Ml9wYXJzX2ZyYWdtZW50LFxuXHR1djJfcGFyc192ZXJ0ZXg6IHV2Ml9wYXJzX3ZlcnRleCxcblx0dXYyX3ZlcnRleDogdXYyX3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF92ZXJ0OiB2ZXJ0ZXgkZyxcblx0YmFja2dyb3VuZF9mcmFnOiBmcmFnbWVudCRnLFxuXHRjdWJlX3ZlcnQ6IHZlcnRleCRmLFxuXHRjdWJlX2ZyYWc6IGZyYWdtZW50JGYsXG5cdGRlcHRoX3ZlcnQ6IHZlcnRleCRlLFxuXHRkZXB0aF9mcmFnOiBmcmFnbWVudCRlLFxuXHRkaXN0YW5jZVJHQkFfdmVydDogdmVydGV4JGQsXG5cdGRpc3RhbmNlUkdCQV9mcmFnOiBmcmFnbWVudCRkLFxuXHRlcXVpcmVjdF92ZXJ0OiB2ZXJ0ZXgkYyxcblx0ZXF1aXJlY3RfZnJhZzogZnJhZ21lbnQkYyxcblx0bGluZWRhc2hlZF92ZXJ0OiB2ZXJ0ZXgkYixcblx0bGluZWRhc2hlZF9mcmFnOiBmcmFnbWVudCRiLFxuXHRtZXNoYmFzaWNfdmVydDogdmVydGV4JGEsXG5cdG1lc2hiYXNpY19mcmFnOiBmcmFnbWVudCRhLFxuXHRtZXNobGFtYmVydF92ZXJ0OiB2ZXJ0ZXgkOSxcblx0bWVzaGxhbWJlcnRfZnJhZzogZnJhZ21lbnQkOSxcblx0bWVzaG1hdGNhcF92ZXJ0OiB2ZXJ0ZXgkOCxcblx0bWVzaG1hdGNhcF9mcmFnOiBmcmFnbWVudCQ4LFxuXHRtZXNobm9ybWFsX3ZlcnQ6IHZlcnRleCQ3LFxuXHRtZXNobm9ybWFsX2ZyYWc6IGZyYWdtZW50JDcsXG5cdG1lc2hwaG9uZ192ZXJ0OiB2ZXJ0ZXgkNixcblx0bWVzaHBob25nX2ZyYWc6IGZyYWdtZW50JDYsXG5cdG1lc2hwaHlzaWNhbF92ZXJ0OiB2ZXJ0ZXgkNSxcblx0bWVzaHBoeXNpY2FsX2ZyYWc6IGZyYWdtZW50JDUsXG5cdG1lc2h0b29uX3ZlcnQ6IHZlcnRleCQ0LFxuXHRtZXNodG9vbl9mcmFnOiBmcmFnbWVudCQ0LFxuXHRwb2ludHNfdmVydDogdmVydGV4JDMsXG5cdHBvaW50c19mcmFnOiBmcmFnbWVudCQzLFxuXHRzaGFkb3dfdmVydDogdmVydGV4JDIsXG5cdHNoYWRvd19mcmFnOiBmcmFnbWVudCQyLFxuXHRzcHJpdGVfdmVydDogdmVydGV4JDEsXG5cdHNwcml0ZV9mcmFnOiBmcmFnbWVudCQxXG59O1xuXG4vKipcbiAqIFVuaWZvcm1zIGxpYnJhcnkgZm9yIHNoYXJlZCB3ZWJnbCBzaGFkZXJzXG4gKi9cblxuY29uc3QgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cdFx0dXYyVHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhVGVzdDogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRzcGVjdWxhcm1hcDoge1xuXG5cdFx0c3BlY3VsYXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblxuXHR9LFxuXG5cdGVudm1hcDoge1xuXG5cdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0ZmxpcEVudk1hcDogeyB2YWx1ZTogLSAxIH0sXG5cdFx0cmVmbGVjdGl2aXR5OiB7IHZhbHVlOiAxLjAgfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cdFx0aW9yOiB7IHZhbHVlOiAxLjUgfSwgLy8gc3RhbmRhcmQsIHBoeXNpY2FsXG5cdFx0cmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH1cblxuXHR9LFxuXG5cdGFvbWFwOiB7XG5cblx0XHRhb01hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFvTWFwSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH1cblxuXHR9LFxuXG5cdGxpZ2h0bWFwOiB7XG5cblx0XHRsaWdodE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGxpZ2h0TWFwSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH1cblxuXHR9LFxuXG5cdGVtaXNzaXZlbWFwOiB7XG5cblx0XHRlbWlzc2l2ZU1hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRidW1wbWFwOiB7XG5cblx0XHRidW1wTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YnVtcFNjYWxlOiB7IHZhbHVlOiAxIH1cblxuXHR9LFxuXG5cdG5vcm1hbG1hcDoge1xuXG5cdFx0bm9ybWFsTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bm9ybWFsU2NhbGU6IHsgdmFsdWU6IG5ldyBWZWN0b3IyKCAxLCAxICkgfVxuXG5cdH0sXG5cblx0ZGlzcGxhY2VtZW50bWFwOiB7XG5cblx0XHRkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRkaXNwbGFjZW1lbnRTY2FsZTogeyB2YWx1ZTogMSB9LFxuXHRcdGRpc3BsYWNlbWVudEJpYXM6IHsgdmFsdWU6IDAgfVxuXG5cdH0sXG5cblx0cm91Z2huZXNzbWFwOiB7XG5cblx0XHRyb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0bWV0YWxuZXNzbWFwOiB7XG5cblx0XHRtZXRhbG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Z3JhZGllbnRtYXA6IHtcblxuXHRcdGdyYWRpZW50TWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGZvZzoge1xuXG5cdFx0Zm9nRGVuc2l0eTogeyB2YWx1ZTogMC4wMDAyNSB9LFxuXHRcdGZvZ05lYXI6IHsgdmFsdWU6IDEgfSxcblx0XHRmb2dGYXI6IHsgdmFsdWU6IDIwMDAgfSxcblx0XHRmb2dDb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweGZmZmZmZiApIH1cblxuXHR9LFxuXG5cdGxpZ2h0czoge1xuXG5cdFx0YW1iaWVudExpZ2h0Q29sb3I6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRsaWdodFByb2JlOiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0Y29sb3I6IHt9XG5cdFx0fSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRzcG90TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblx0XHRcdGNvbmVDb3M6IHt9LFxuXHRcdFx0cGVudW1icmFDb3M6IHt9LFxuXHRcdFx0ZGVjYXk6IHt9XG5cdFx0fSB9LFxuXG5cdFx0c3BvdExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93Tm9ybWFsQmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fVxuXHRcdH0gfSxcblxuXHRcdHBvaW50TGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYU5lYXI6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhRmFyOiB7fVxuXHRcdH0gfSxcblxuXHRcdHBvaW50U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHBvaW50U2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0aGVtaXNwaGVyZUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRza3lDb2xvcjoge30sXG5cdFx0XHRncm91bmRDb2xvcjoge31cblx0XHR9IH0sXG5cblx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogUmVjdEFyZWFMaWdodCBCUkRGIGRhdGEgbmVlZHMgdG8gYmUgbW92ZWQgZnJvbSBleGFtcGxlIHRvIG1haW4gc3JjXG5cdFx0cmVjdEFyZWFMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHR3aWR0aDoge30sXG5cdFx0XHRoZWlnaHQ6IHt9XG5cdFx0fSB9LFxuXG5cdFx0bHRjXzE6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRsdGNfMjogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNjYWxlOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhVGVzdDogeyB2YWx1ZTogMCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGZmZmZmZiApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0Y2VudGVyOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LFxuXHRcdHJvdGF0aW9uOiB7IHZhbHVlOiAwLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhVGVzdDogeyB2YWx1ZTogMCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH1cblxuXHR9XG5cbn07XG5cbmNvbnN0IFNoYWRlckxpYiA9IHtcblxuXHRiYXNpYzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY19mcmFnXG5cblx0fSxcblxuXHRsYW1iZXJ0OiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfZnJhZ1xuXG5cdH0sXG5cblx0cGhvbmc6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdFx0c3BlY3VsYXI6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgxMTExMTEgKSB9LFxuXHRcdFx0XHRzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfZnJhZ1xuXG5cdH0sXG5cblx0c3RhbmRhcmQ6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIucm91Z2huZXNzbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubWV0YWxuZXNzbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHJvdWdobmVzczogeyB2YWx1ZTogMS4wIH0sXG5cdFx0XHRcdG1ldGFsbmVzczogeyB2YWx1ZTogMC4wIH0sXG5cdFx0XHRcdGVudk1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9IC8vIHRlbXBvcmFyeVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXG5cblx0fSxcblxuXHR0b29uOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmdyYWRpZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2h0b29uX2ZyYWdcblxuXHR9LFxuXG5cdG1hdGNhcDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdG1hdGNhcDogeyB2YWx1ZTogbnVsbCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobWF0Y2FwX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZ1xuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIucG9pbnRzLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsucG9pbnRzX2ZyYWdcblxuXHR9LFxuXG5cdGRhc2hlZDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0c2NhbGU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0ZGFzaFNpemU6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0dG90YWxTaXplOiB7IHZhbHVlOiAyIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF9mcmFnXG5cblx0fSxcblxuXHRkZXB0aDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfZnJhZ1xuXG5cdH0sXG5cblx0bm9ybWFsOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdHtcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hub3JtYWxfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG5vcm1hbF9mcmFnXG5cblx0fSxcblxuXHRzcHJpdGU6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcHJpdGUsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfZnJhZ1xuXG5cdH0sXG5cblx0YmFja2dyb3VuZDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfZnJhZ1xuXG5cdH0sXG5cdC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly9cdEN1YmUgbWFwIHNoYWRlclxuXHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdGN1YmU6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0ZXF1aXJlY3Q6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF9mcmFnXG5cblx0fSxcblxuXHRkaXN0YW5jZVJHQkE6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiBuZXcgVmVjdG9yMygpIH0sXG5cdFx0XHRcdG5lYXJEaXN0YW5jZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRmYXJEaXN0YW5jZTogeyB2YWx1ZTogMTAwMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX2ZyYWdcblxuXHR9LFxuXG5cdHNoYWRvdzoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdHtcblx0XHRcdFx0Y29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMCApIH0sXG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd19mcmFnXG5cblx0fVxuXG59O1xuXG5TaGFkZXJMaWIucGh5c2ljYWwgPSB7XG5cblx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRTaGFkZXJMaWIuc3RhbmRhcmQudW5pZm9ybXMsXG5cdFx0e1xuXHRcdFx0Y2xlYXJjb2F0OiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhcmNvYXRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzczogeyB2YWx1ZTogMCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9LFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzaGVlbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0c2hlZW5Db2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRzaGVlbkNvbG9yTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzaGVlblJvdWdobmVzczogeyB2YWx1ZTogMSB9LFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRyYW5zbWlzc2lvbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0cmFuc21pc3Npb25TYW1wbGVyU2l6ZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uU2FtcGxlck1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dGhpY2tuZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHR0aGlja25lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGF0dGVudWF0aW9uRGlzdGFuY2U6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGF0dGVudWF0aW9uQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzcGVjdWxhckNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDEsIDEsIDEgKSB9LFxuXHRcdFx0c3BlY3VsYXJDb2xvck1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG5mdW5jdGlvbiBXZWJHTEJhY2tncm91bmQoIHJlbmRlcmVyLCBjdWJlbWFwcywgc3RhdGUsIG9iamVjdHMsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0Y29uc3QgY2xlYXJDb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0bGV0IGNsZWFyQWxwaGEgPSBhbHBoYSA9PT0gdHJ1ZSA/IDAgOiAxO1xuXG5cdGxldCBwbGFuZU1lc2g7XG5cdGxldCBib3hNZXNoO1xuXG5cdGxldCBjdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XG5cdGxldCBjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSAwO1xuXHRsZXQgY3VycmVudFRvbmVtYXBwaW5nID0gbnVsbDtcblxuXHRmdW5jdGlvbiByZW5kZXIoIHJlbmRlckxpc3QsIHNjZW5lICkge1xuXG5cdFx0bGV0IGZvcmNlQ2xlYXIgPSBmYWxzZTtcblx0XHRsZXQgYmFja2dyb3VuZCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5iYWNrZ3JvdW5kIDogbnVsbDtcblxuXHRcdGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0YmFja2dyb3VuZCA9IGN1YmVtYXBzLmdldCggYmFja2dyb3VuZCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSWdub3JlIGJhY2tncm91bmQgaW4gQVJcblx0XHQvLyBUT0RPOiBSZWNvbnNpZGVyIHRoaXMuXG5cblx0XHRjb25zdCB4ciA9IHJlbmRlcmVyLnhyO1xuXHRcdGNvbnN0IHNlc3Npb24gPSB4ci5nZXRTZXNzaW9uICYmIHhyLmdldFNlc3Npb24oKTtcblxuXHRcdGlmICggc2Vzc2lvbiAmJiBzZXNzaW9uLmVudmlyb25tZW50QmxlbmRNb2RlID09PSAnYWRkaXRpdmUnICkge1xuXG5cdFx0XHRiYWNrZ3JvdW5kID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdGlmICggYmFja2dyb3VuZCA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yICkge1xuXG5cdFx0XHRzZXRDbGVhciggYmFja2dyb3VuZCwgMSApO1xuXHRcdFx0Zm9yY2VDbGVhciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyICkge1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgJiYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgfHwgYmFja2dyb3VuZC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApICkge1xuXG5cdFx0XHRpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib3hNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IEJveEdlb21ldHJ5KCAxLCAxLCAxICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHRuYW1lOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmN1YmUudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbFxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGJveE1lc2gubWF0ZXJpYWwsICdlbnZNYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZW52TWFwLnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZW52TWFwLnZhbHVlID0gYmFja2dyb3VuZDtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlICYmIGJhY2tncm91bmQuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLSAxIDogMTtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fFxuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgIT09IHJlbmRlcmVyLnRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdGJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdC51bnNoaWZ0KCBib3hNZXNoLCBib3hNZXNoLmdlb21ldHJ5LCBib3hNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHBsYW5lTWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBsYW5lTWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBQbGFuZUdlb21ldHJ5KCAyLCAyICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHRuYW1lOiAnQmFja2dyb3VuZE1hdGVyaWFsJyxcblx0XHRcdFx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBTaGFkZXJMaWIuYmFja2dyb3VuZC51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZC52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdFx0XHRzaWRlOiBGcm9udFNpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cGxhbmVNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblxuXHRcdFx0XHQvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbFxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50MkQudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBwbGFuZU1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudDJELnZhbHVlID0gYmFja2dyb3VuZDtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggYmFja2dyb3VuZC5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fFxuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgIT09IHJlbmRlcmVyLnRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSBiYWNrZ3JvdW5kLnZlcnNpb247XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGVhciggY29sb3IsIGFscGhhICkge1xuXG5cdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJDb2xvcjtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJDb2xvcjogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgPSAxICkge1xuXG5cdFx0XHRjbGVhckNvbG9yLnNldCggY29sb3IgKTtcblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYTtcblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9LFxuXHRcdGdldENsZWFyQWxwaGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNsZWFyQWxwaGE7XG5cblx0XHR9LFxuXHRcdHNldENsZWFyQWxwaGE6IGZ1bmN0aW9uICggYWxwaGEgKSB7XG5cblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYTtcblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9LFxuXHRcdHJlbmRlcjogcmVuZGVyXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEJpbmRpbmdTdGF0ZXMoIGdsLCBleHRlbnNpb25zLCBhdHRyaWJ1dGVzLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0Y29uc3QgbWF4VmVydGV4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTtcblxuXHRjb25zdCBleHRlbnNpb24gPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBudWxsIDogZXh0ZW5zaW9ucy5nZXQoICdPRVNfdmVydGV4X2FycmF5X29iamVjdCcgKTtcblx0Y29uc3QgdmFvQXZhaWxhYmxlID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbiAhPT0gbnVsbDtcblxuXHRjb25zdCBiaW5kaW5nU3RhdGVzID0ge307XG5cblx0Y29uc3QgZGVmYXVsdFN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBudWxsICk7XG5cdGxldCBjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5LCBpbmRleCApIHtcblxuXHRcdGxldCB1cGRhdGVCdWZmZXJzID0gZmFsc2U7XG5cblx0XHRpZiAoIHZhb0F2YWlsYWJsZSApIHtcblxuXHRcdFx0Y29uc3Qgc3RhdGUgPSBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRTdGF0ZSAhPT0gc3RhdGUgKSB7XG5cblx0XHRcdFx0Y3VycmVudFN0YXRlID0gc3RhdGU7XG5cdFx0XHRcdGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggY3VycmVudFN0YXRlLm9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSBuZWVkc1VwZGF0ZSggZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHRcdGlmICggdXBkYXRlQnVmZmVycyApIHNhdmVDYWNoZSggZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCB3aXJlZnJhbWUgPSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5nZW9tZXRyeSAhPT0gZ2VvbWV0cnkuaWQgfHxcblx0XHRcdFx0Y3VycmVudFN0YXRlLnByb2dyYW0gIT09IHByb2dyYW0uaWQgfHxcblx0XHRcdFx0Y3VycmVudFN0YXRlLndpcmVmcmFtZSAhPT0gd2lyZWZyYW1lICkge1xuXG5cdFx0XHRcdGN1cnJlbnRTdGF0ZS5nZW9tZXRyeSA9IGdlb21ldHJ5LmlkO1xuXHRcdFx0XHRjdXJyZW50U3RhdGUucHJvZ3JhbSA9IHByb2dyYW0uaWQ7XG5cdFx0XHRcdGN1cnJlbnRTdGF0ZS53aXJlZnJhbWUgPSB3aXJlZnJhbWU7XG5cblx0XHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggaW5kZXgsIDM0OTYzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgKSB7XG5cblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbC5iaW5kQnVmZmVyKCAzNDk2MywgYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlVmVydGV4QXJyYXlPYmplY3QoKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbi5jcmVhdGVWZXJ0ZXhBcnJheU9FUygpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVmVydGV4QXJyYXlPYmplY3QoIHZhbyApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkgcmV0dXJuIGdsLmJpbmRWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0XHRyZXR1cm4gZXh0ZW5zaW9uLmJpbmRWZXJ0ZXhBcnJheU9FUyggdmFvICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHJldHVybiBnbC5kZWxldGVWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0XHRyZXR1cm4gZXh0ZW5zaW9uLmRlbGV0ZVZlcnRleEFycmF5T0VTKCB2YW8gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0QmluZGluZ1N0YXRlKCBnZW9tZXRyeSwgcHJvZ3JhbSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB3aXJlZnJhbWUgPSAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApO1xuXG5cdFx0bGV0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBwcm9ncmFtTWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHByb2dyYW1NYXAgPSB7fTtcblx0XHRcdGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPSBwcm9ncmFtTWFwO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdO1xuXG5cdFx0aWYgKCBzdGF0ZU1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGF0ZU1hcCA9IHt9O1xuXHRcdFx0cHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID0gc3RhdGVNYXA7XG5cblx0XHR9XG5cblx0XHRsZXQgc3RhdGUgPSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRpZiAoIHN0YXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBjcmVhdGVWZXJ0ZXhBcnJheU9iamVjdCgpICk7XG5cdFx0XHRzdGF0ZU1hcFsgd2lyZWZyYW1lIF0gPSBzdGF0ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlQmluZGluZ1N0YXRlKCB2YW8gKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gW107XG5cdFx0Y29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBbXTtcblx0XHRjb25zdCBhdHRyaWJ1dGVEaXZpc29ycyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF4VmVydGV4QXR0cmlidXRlczsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBvbiBub24tVkFPIHN1cHBvcnQgYnJvd3NlclxuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXG5cdFx0XHRwcm9ncmFtOiBudWxsLFxuXHRcdFx0d2lyZWZyYW1lOiBmYWxzZSxcblxuXHRcdFx0bmV3QXR0cmlidXRlczogbmV3QXR0cmlidXRlcyxcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzOiBlbmFibGVkQXR0cmlidXRlcyxcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzOiBhdHRyaWJ1dGVEaXZpc29ycyxcblx0XHRcdG9iamVjdDogdmFvLFxuXHRcdFx0YXR0cmlidXRlczoge30sXG5cdFx0XHRpbmRleDogbnVsbFxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gbmVlZHNVcGRhdGUoIGdlb21ldHJ5LCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNhY2hlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuYXR0cmlidXRlcztcblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0bGV0IGF0dHJpYnV0ZXNOdW0gPSAwO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGdlb21ldHJ5QXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGVkQXR0cmlidXRlID0gY2FjaGVkQXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdGlmICggY2FjaGVkQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGUuYXR0cmlidXRlICE9PSBnZW9tZXRyeUF0dHJpYnV0ZSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZS5kYXRhICE9PSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdGF0dHJpYnV0ZXNOdW0gKys7XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtICE9PSBhdHRyaWJ1dGVzTnVtICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5pbmRleCAhPT0gaW5kZXggKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZUNhY2hlKCBnZW9tZXRyeSwgaW5kZXggKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHt9O1xuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdGxldCBhdHRyaWJ1dGVzTnVtID0gMDtcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0Y29uc3QgZGF0YSA9IHt9O1xuXHRcdFx0ZGF0YS5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmRhdGEgKSB7XG5cblx0XHRcdFx0ZGF0YS5kYXRhID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FjaGVbIGtleSBdID0gZGF0YTtcblxuXHRcdFx0YXR0cmlidXRlc051bSArKztcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzID0gY2FjaGU7XG5cdFx0Y3VycmVudFN0YXRlLmF0dHJpYnV0ZXNOdW0gPSBhdHRyaWJ1dGVzTnVtO1xuXG5cdFx0Y3VycmVudFN0YXRlLmluZGV4ID0gaW5kZXg7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5ld0F0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdG5ld0F0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCAwICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlcztcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5lbmFibGVkQXR0cmlidXRlcztcblx0XHRjb25zdCBhdHRyaWJ1dGVEaXZpc29ycyA9IGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVEaXZpc29ycztcblxuXHRcdG5ld0F0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID09PSAwICkge1xuXG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSggYXR0cmlidXRlICk7XG5cdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gIT09IG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/IGdsIDogZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRleHRlbnNpb25bIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yJyA6ICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnIF0oIGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSApO1xuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLm5ld0F0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgZW5hYmxlZEF0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUuZW5hYmxlZEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSAhPT0gbmV3QXR0cmlidXRlc1sgaSBdICkge1xuXG5cdFx0XHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXHRcdFx0XHRlbmFibGVkQXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gdHJ1ZSAmJiAoIHR5cGUgPT09IDUxMjQgfHwgdHlwZSA9PT0gNTEyNSApICkge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJJUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIHN0cmlkZSwgb2Zmc2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBpbmRleCwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyID09PSBmYWxzZSAmJiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggfHwgZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdH1cblxuXHRcdGluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7XG5cblx0XHRcdFx0bGV0IGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VNYXRyaXgnICYmIG9iamVjdC5pbnN0YW5jZU1hdHJpeCApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VDb2xvcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgbm9ybWFsaXplZCA9IGdlb21ldHJ5QXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cdFx0XHRcdFx0Y29uc3Qgc2l6ZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5QXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG5cdFx0XHRcdFx0Y29uc3QgdHlwZSA9IGF0dHJpYnV0ZS50eXBlO1xuXHRcdFx0XHRcdGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGF0dHJpYnV0ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggIT09IHRydWUgJiYgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmVydGV4QXR0cmliUG9pbnRlcihcblx0XHRcdFx0XHRcdFx0XHRwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSxcblx0XHRcdFx0XHRcdFx0XHRzaXplIC8gcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemUsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxpemVkLFxuXHRcdFx0XHRcdFx0XHRcdHN0cmlkZSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHQoIG9mZnNldCArICggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICkgKiBieXRlc1BlckVsZW1lbnRcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGUsXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsaXplZCxcblx0XHRcdFx0XHRcdFx0XHRzaXplICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdCggc2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplICkgKiBpICogYnl0ZXNQZXJFbGVtZW50XG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRnbC52ZXJ0ZXhBdHRyaWIzZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlc2V0KCk7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHN0YXRlTWFwWyB3aXJlZnJhbWUgXS5vYmplY3QgKTtcblxuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnlJZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvZ3JhbUlkIGluIHByb2dyYW1NYXAgKSB7XG5cblx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW1JZCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGVsZXRlIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZXNldERlZmF1bHRTdGF0ZSgpO1xuXG5cdFx0aWYgKCBjdXJyZW50U3RhdGUgPT09IGRlZmF1bHRTdGF0ZSApIHJldHVybjtcblxuXHRcdGN1cnJlbnRTdGF0ZSA9IGRlZmF1bHRTdGF0ZTtcblx0XHRiaW5kVmVydGV4QXJyYXlPYmplY3QoIGN1cnJlbnRTdGF0ZS5vYmplY3QgKTtcblxuXHR9XG5cblx0Ly8gZm9yIGJhY2t3YXJkLWNvbXBhdGlsaWJpdHlcblxuXHRmdW5jdGlvbiByZXNldERlZmF1bHRTdGF0ZSgpIHtcblxuXHRcdGRlZmF1bHRTdGF0ZS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0ZGVmYXVsdFN0YXRlLnByb2dyYW0gPSBudWxsO1xuXHRcdGRlZmF1bHRTdGF0ZS53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHNldHVwOiBzZXR1cCxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0cmVzZXREZWZhdWx0U3RhdGU6IHJlc2V0RGVmYXVsdFN0YXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2UsXG5cdFx0cmVsZWFzZVN0YXRlc09mR2VvbWV0cnk6IHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5LFxuXHRcdHJlbGVhc2VTdGF0ZXNPZlByb2dyYW06IHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0sXG5cblx0XHRpbml0QXR0cmlidXRlczogaW5pdEF0dHJpYnV0ZXMsXG5cdFx0ZW5hYmxlQXR0cmlidXRlOiBlbmFibGVBdHRyaWJ1dGUsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICkge1xuXG5cdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdGxldCBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXIoIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdGdsLmRyYXdBcnJheXMoIG1vZGUsIHN0YXJ0LCBjb3VudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7XG5cblx0XHRpZiAoIHByaW1jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdGxldCBleHRlbnNpb24sIG1ldGhvZE5hbWU7XG5cblx0XHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBnbDtcblx0XHRcdG1ldGhvZE5hbWUgPSAnZHJhd0FycmF5c0luc3RhbmNlZCc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdBcnJheXNJbnN0YW5jZWRBTkdMRSc7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblxufVxuXG5mdW5jdGlvbiBXZWJHTENhcGFiaWxpdGllcyggZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IG1heEFuaXNvdHJvcHk7XG5cblx0ZnVuY3Rpb24gZ2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdGlmICggbWF4QW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWF4UHJlY2lzaW9uKCBwcmVjaXNpb24gKSB7XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ2hpZ2hwJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMzLCAzNjMzOCApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdFx0Z2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMiwgMzYzMzggKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnaGlnaHAnO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByZWNpc2lvbiA9ICdtZWRpdW1wJztcblxuXHRcdH1cblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMywgMzYzMzcgKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzIsIDM2MzM3ICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ21lZGl1bXAnO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ2xvd3AnO1xuXG5cdH1cblxuXHRjb25zdCBpc1dlYkdMMiA9ICggdHlwZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCApIHx8XG5cdFx0KCB0eXBlb2YgV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQgKTtcblxuXHRsZXQgcHJlY2lzaW9uID0gcGFyYW1ldGVycy5wcmVjaXNpb24gIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlY2lzaW9uIDogJ2hpZ2hwJztcblx0Y29uc3QgbWF4UHJlY2lzaW9uID0gZ2V0TWF4UHJlY2lzaW9uKCBwcmVjaXNpb24gKTtcblxuXHRpZiAoIG1heFByZWNpc2lvbiAhPT0gcHJlY2lzaW9uICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjonLCBwcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIG1heFByZWNpc2lvbiwgJ2luc3RlYWQuJyApO1xuXHRcdHByZWNpc2lvbiA9IG1heFByZWNpc2lvbjtcblxuXHR9XG5cblx0Y29uc3QgZHJhd0J1ZmZlcnMgPSBpc1dlYkdMMiB8fCBleHRlbnNpb25zLmhhcyggJ1dFQkdMX2RyYXdfYnVmZmVycycgKTtcblxuXHRjb25zdCBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXG5cdGNvbnN0IG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkzMCApO1xuXHRjb25zdCBtYXhWZXJ0ZXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzU2NjAgKTtcblx0Y29uc3QgbWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIDMzNzkgKTtcblx0Y29uc3QgbWF4Q3ViZW1hcFNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIDM0MDc2ICk7XG5cblx0Y29uc3QgbWF4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MjEgKTtcblx0Y29uc3QgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ3ICk7XG5cdGNvbnN0IG1heFZhcnlpbmdzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OCApO1xuXHRjb25zdCBtYXhGcmFnbWVudFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNjM0OSApO1xuXG5cdGNvbnN0IHZlcnRleFRleHR1cmVzID0gbWF4VmVydGV4VGV4dHVyZXMgPiAwO1xuXHRjb25zdCBmbG9hdEZyYWdtZW50VGV4dHVyZXMgPSBpc1dlYkdMMiB8fCBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXHRjb25zdCBmbG9hdFZlcnRleFRleHR1cmVzID0gdmVydGV4VGV4dHVyZXMgJiYgZmxvYXRGcmFnbWVudFRleHR1cmVzO1xuXG5cdGNvbnN0IG1heFNhbXBsZXMgPSBpc1dlYkdMMiA/IGdsLmdldFBhcmFtZXRlciggMzYxODMgKSA6IDA7XG5cblx0cmV0dXJuIHtcblxuXHRcdGlzV2ViR0wyOiBpc1dlYkdMMixcblxuXHRcdGRyYXdCdWZmZXJzOiBkcmF3QnVmZmVycyxcblxuXHRcdGdldE1heEFuaXNvdHJvcHk6IGdldE1heEFuaXNvdHJvcHksXG5cdFx0Z2V0TWF4UHJlY2lzaW9uOiBnZXRNYXhQcmVjaXNpb24sXG5cblx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0bWF4VGV4dHVyZXM6IG1heFRleHR1cmVzLFxuXHRcdG1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcyxcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXG5cdFx0bWF4Q3ViZW1hcFNpemU6IG1heEN1YmVtYXBTaXplLFxuXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcblx0XHRtYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsXG5cdFx0bWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLFxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXG5cblx0XHR2ZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cdFx0ZmxvYXRGcmFnbWVudFRleHR1cmVzOiBmbG9hdEZyYWdtZW50VGV4dHVyZXMsXG5cdFx0ZmxvYXRWZXJ0ZXhUZXh0dXJlczogZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdG1heFNhbXBsZXM6IG1heFNhbXBsZXNcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ2xpcHBpbmcoIHByb3BlcnRpZXMgKSB7XG5cblx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdGxldCBnbG9iYWxTdGF0ZSA9IG51bGwsXG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gMCxcblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblxuXHRjb25zdCBwbGFuZSA9IG5ldyBQbGFuZSgpLFxuXHRcdHZpZXdOb3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLFxuXG5cdFx0dW5pZm9ybSA9IHsgdmFsdWU6IG51bGwsIG5lZWRzVXBkYXRlOiBmYWxzZSB9O1xuXG5cdHRoaXMudW5pZm9ybSA9IHVuaWZvcm07XG5cdHRoaXMubnVtUGxhbmVzID0gMDtcblx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uICggcGxhbmVzLCBlbmFibGVMb2NhbENsaXBwaW5nLCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBlbmFibGVkID1cblx0XHRcdHBsYW5lcy5sZW5ndGggIT09IDAgfHxcblx0XHRcdGVuYWJsZUxvY2FsQ2xpcHBpbmcgfHxcblx0XHRcdC8vIGVuYWJsZSBzdGF0ZSBvZiBwcmV2aW91cyBmcmFtZSAtIHRoZSBjbGlwcGluZyBjb2RlIGhhcyB0b1xuXHRcdFx0Ly8gcnVuIGFub3RoZXIgZnJhbWUgaW4gb3JkZXIgdG8gcmVzZXQgdGhlIHN0YXRlOlxuXHRcdFx0bnVtR2xvYmFsUGxhbmVzICE9PSAwIHx8XG5cdFx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZDtcblxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZW5hYmxlTG9jYWxDbGlwcGluZztcblxuXHRcdGdsb2JhbFN0YXRlID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIDAgKTtcblx0XHRudW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIGVuYWJsZWQ7XG5cblx0fTtcblxuXHR0aGlzLmJlZ2luU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSB0cnVlO1xuXHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuZW5kU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldFN0YXRlID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgY2FtZXJhLCB1c2VDYWNoZSApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0Y2xpcEludGVyc2VjdGlvbiA9IG1hdGVyaWFsLmNsaXBJbnRlcnNlY3Rpb24sXG5cdFx0XHRjbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoICEgbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgcGxhbmVzID09PSBudWxsIHx8IHBsYW5lcy5sZW5ndGggPT09IDAgfHwgcmVuZGVyaW5nU2hhZG93cyAmJiAhIGNsaXBTaGFkb3dzICkge1xuXG5cdFx0XHQvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nXG5cblx0XHRcdGlmICggcmVuZGVyaW5nU2hhZG93cyApIHtcblxuXHRcdFx0XHQvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZ1xuXG5cdFx0XHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IG5HbG9iYWwgPSByZW5kZXJpbmdTaGFkb3dzID8gMCA6IG51bUdsb2JhbFBsYW5lcyxcblx0XHRcdFx0bEdsb2JhbCA9IG5HbG9iYWwgKiA0O1xuXG5cdFx0XHRsZXQgZHN0QXJyYXkgPSBtYXRlcmlhbFByb3BlcnRpZXMuY2xpcHBpbmdTdGF0ZSB8fCBudWxsO1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGVcblxuXHRcdFx0ZHN0QXJyYXkgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgbEdsb2JhbCwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBsR2xvYmFsOyArKyBpICkge1xuXG5cdFx0XHRcdGRzdEFycmF5WyBpIF0gPSBnbG9iYWxTdGF0ZVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5jbGlwcGluZ1N0YXRlID0gZHN0QXJyYXk7XG5cdFx0XHR0aGlzLm51bUludGVyc2VjdGlvbiA9IGNsaXBJbnRlcnNlY3Rpb24gPyB0aGlzLm51bVBsYW5lcyA6IDA7XG5cdFx0XHR0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsO1xuXG5cdFx0fVxuXG5cblx0fTtcblxuXHRmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuXG5cdFx0aWYgKCB1bmlmb3JtLnZhbHVlICE9PSBnbG9iYWxTdGF0ZSApIHtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGdsb2JhbFN0YXRlO1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IG51bUdsb2JhbFBsYW5lcyA+IDA7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSApIHtcblxuXHRcdGNvbnN0IG5QbGFuZXMgPSBwbGFuZXMgIT09IG51bGwgPyBwbGFuZXMubGVuZ3RoIDogMDtcblx0XHRsZXQgZHN0QXJyYXkgPSBudWxsO1xuXG5cdFx0aWYgKCBuUGxhbmVzICE9PSAwICkge1xuXG5cdFx0XHRkc3RBcnJheSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdGlmICggc2tpcFRyYW5zZm9ybSAhPT0gdHJ1ZSB8fCBkc3RBcnJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBmbGF0U2l6ZSA9IGRzdE9mZnNldCArIG5QbGFuZXMgKiA0LFxuXHRcdFx0XHRcdHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xuXG5cdFx0XHRcdHZpZXdOb3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0aWYgKCBkc3RBcnJheSA9PT0gbnVsbCB8fCBkc3RBcnJheS5sZW5ndGggPCBmbGF0U2l6ZSApIHtcblxuXHRcdFx0XHRcdGRzdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggZmxhdFNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpNCA9IGRzdE9mZnNldDsgaSAhPT0gblBsYW5lczsgKysgaSwgaTQgKz0gNCApIHtcblxuXHRcdFx0XHRcdHBsYW5lLmNvcHkoIHBsYW5lc1sgaSBdICkuYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4LCB2aWV3Tm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdFx0XHRwbGFuZS5ub3JtYWwudG9BcnJheSggZHN0QXJyYXksIGk0ICk7XG5cdFx0XHRcdFx0ZHN0QXJyYXlbIGk0ICsgMyBdID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gblBsYW5lcztcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdFx0cmV0dXJuIGRzdEFycmF5O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTEN1YmVNYXBzKCByZW5kZXJlciApIHtcblxuXHRsZXQgY3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG1hcFRleHR1cmVNYXBwaW5nKCB0ZXh0dXJlLCBtYXBwaW5nICkge1xuXG5cdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRleHR1cmUubWFwcGluZyA9IEN1YmVSZWZyYWN0aW9uTWFwcGluZztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgJiYgdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zdCBtYXBwaW5nID0gdGV4dHVyZS5tYXBwaW5nO1xuXG5cdFx0XHRpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHRcdGlmICggY3ViZW1hcHMuaGFzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBjdWJlbWFwID0gY3ViZW1hcHMuZ2V0KCB0ZXh0dXJlICkudGV4dHVyZTtcblx0XHRcdFx0XHRyZXR1cm4gbWFwVGV4dHVyZU1hcHBpbmcoIGN1YmVtYXAsIHRleHR1cmUubWFwcGluZyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRpZiAoIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IG5ldyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQoIGltYWdlLmhlaWdodCAvIDIgKTtcblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC5mcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSggcmVuZGVyZXIsIHRleHR1cmUgKTtcblx0XHRcdFx0XHRcdGN1YmVtYXBzLnNldCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBtYXBUZXh0dXJlTWFwcGluZyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHRleHR1cmUubWFwcGluZyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gaW1hZ2Ugbm90IHlldCByZWFkeS4gdHJ5IHRoZSBjb252ZXJzaW9uIG5leHQgZnJhbWVcblxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdGNvbnN0IGN1YmVtYXAgPSBjdWJlbWFwcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggY3ViZW1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjdWJlbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0Y3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5jbGFzcyBPcnRob2dyYXBoaWNDYW1lcmEgZXh0ZW5kcyBDYW1lcmEge1xuXG5cdGNvbnN0cnVjdG9yKCBsZWZ0ID0gLSAxLCByaWdodCA9IDEsIHRvcCA9IDEsIGJvdHRvbSA9IC0gMSwgbmVhciA9IDAuMSwgZmFyID0gMjAwMCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnT3J0aG9ncmFwaGljQ2FtZXJhJztcblxuXHRcdHRoaXMuem9vbSA9IDE7XG5cdFx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHRcdHRoaXMubGVmdCA9IGxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHJpZ2h0O1xuXHRcdHRoaXMudG9wID0gdG9wO1xuXHRcdHRoaXMuYm90dG9tID0gYm90dG9tO1xuXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcblx0XHR0aGlzLmZhciA9IGZhcjtcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmxlZnQgPSBzb3VyY2UubGVmdDtcblx0XHR0aGlzLnJpZ2h0ID0gc291cmNlLnJpZ2h0O1xuXHRcdHRoaXMudG9wID0gc291cmNlLnRvcDtcblx0XHR0aGlzLmJvdHRvbSA9IHNvdXJjZS5ib3R0b207XG5cdFx0dGhpcy5uZWFyID0gc291cmNlLm5lYXI7XG5cdFx0dGhpcy5mYXIgPSBzb3VyY2UuZmFyO1xuXG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XG5cdFx0dGhpcy52aWV3ID0gc291cmNlLnZpZXcgPT09IG51bGwgPyBudWxsIDogT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS52aWV3ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldyA9IHtcblx0XHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxuXHRcdFx0XHRmdWxsSGVpZ2h0OiAxLFxuXHRcdFx0XHRvZmZzZXRYOiAwLFxuXHRcdFx0XHRvZmZzZXRZOiAwLFxuXHRcdFx0XHR3aWR0aDogMSxcblx0XHRcdFx0aGVpZ2h0OiAxXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52aWV3LmVuYWJsZWQgPSB0cnVlO1xuXHRcdHRoaXMudmlldy5mdWxsV2lkdGggPSBmdWxsV2lkdGg7XG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xuXHRcdHRoaXMudmlldy5vZmZzZXRYID0geDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WSA9IHk7XG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IGhlaWdodDtcblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHRjbGVhclZpZXdPZmZzZXQoKSB7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3LmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH1cblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkge1xuXG5cdFx0Y29uc3QgZHggPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvICggMiAqIHRoaXMuem9vbSApO1xuXHRcdGNvbnN0IGR5ID0gKCB0aGlzLnRvcCAtIHRoaXMuYm90dG9tICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHRjb25zdCBjeCA9ICggdGhpcy5yaWdodCArIHRoaXMubGVmdCApIC8gMjtcblx0XHRjb25zdCBjeSA9ICggdGhpcy50b3AgKyB0aGlzLmJvdHRvbSApIC8gMjtcblxuXHRcdGxldCBsZWZ0ID0gY3ggLSBkeDtcblx0XHRsZXQgcmlnaHQgPSBjeCArIGR4O1xuXHRcdGxldCB0b3AgPSBjeSArIGR5O1xuXHRcdGxldCBib3R0b20gPSBjeSAtIGR5O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7XG5cblx0XHRcdGNvbnN0IHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCAvIHRoaXMuem9vbTtcblx0XHRcdGNvbnN0IHNjYWxlSCA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gdGhpcy52aWV3LmZ1bGxIZWlnaHQgLyB0aGlzLnpvb207XG5cblx0XHRcdGxlZnQgKz0gc2NhbGVXICogdGhpcy52aWV3Lm9mZnNldFg7XG5cdFx0XHRyaWdodCA9IGxlZnQgKyBzY2FsZVcgKiB0aGlzLnZpZXcud2lkdGg7XG5cdFx0XHR0b3AgLT0gc2NhbGVIICogdGhpcy52aWV3Lm9mZnNldFk7XG5cdFx0XHRib3R0b20gPSB0b3AgLSBzY2FsZUggKiB0aGlzLnZpZXcuaGVpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblx0XHRkYXRhLm9iamVjdC5sZWZ0ID0gdGhpcy5sZWZ0O1xuXHRcdGRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDtcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcblx0XHRkYXRhLm9iamVjdC5ib3R0b20gPSB0aGlzLmJvdHRvbTtcblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUuaXNPcnRob2dyYXBoaWNDYW1lcmEgPSB0cnVlO1xuXG5jb25zdCBMT0RfTUlOID0gNDtcblxuLy8gVGhlIHN0YW5kYXJkIGRldmlhdGlvbnMgKHJhZGlhbnMpIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0cmEgbWlwcy4gVGhlc2UgYXJlXG4vLyBjaG9zZW4gdG8gYXBwcm94aW1hdGUgYSBUcm93YnJpZGdlLVJlaXR6IGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiB0aW1lcyB0aGVcbi8vIGdlb21ldHJpYyBzaGFkb3dpbmcgZnVuY3Rpb24uIFRoZXNlIHNpZ21hIHZhbHVlcyBzcXVhcmVkIG11c3QgbWF0Y2ggdGhlXG4vLyB2YXJpYW5jZSAjZGVmaW5lcyBpbiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQuZ2xzbC5qcy5cbmNvbnN0IEVYVFJBX0xPRF9TSUdNQSA9IFsgMC4xMjUsIDAuMjE1LCAwLjM1LCAwLjQ0NiwgMC41MjYsIDAuNTgyIF07XG5cbi8vIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgYmx1ciBmb3IgbG9vcC4gU21hbGxlciBzaWdtYXMgd2lsbCB1c2UgZmV3ZXJcbi8vIHNhbXBsZXMgYW5kIGV4aXQgZWFybHksIGJ1dCBub3QgcmVjb21waWxlIHRoZSBzaGFkZXIuXG5jb25zdCBNQVhfU0FNUExFUyA9IDIwO1xuXG5jb25zdCBfZmxhdENhbWVyYSA9IC8qQF9fUFVSRV9fKi8gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSgpO1xuY29uc3QgX2NsZWFyQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcigpO1xubGV0IF9vbGRUYXJnZXQgPSBudWxsO1xuXG4vLyBHb2xkZW4gUmF0aW9cbmNvbnN0IFBISSA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuY29uc3QgSU5WX1BISSA9IDEgLyBQSEk7XG5cbi8vIFZlcnRpY2VzIG9mIGEgZG9kZWNhaGVkcm9uIChleGNlcHQgdGhlIG9wcG9zaXRlcywgd2hpY2ggcmVwcmVzZW50IHRoZVxuLy8gc2FtZSBheGlzKSwgdXNlZCBhcyBheGlzIGRpcmVjdGlvbnMgZXZlbmx5IHNwcmVhZCBvbiBhIHNwaGVyZS5cbmNvbnN0IF9heGlzRGlyZWN0aW9ucyA9IFtcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgMSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIDEsIDEsIDEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgLSAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gMSwgMSwgLSAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCBQSEksIC0gSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCBJTlZfUEhJLCAwLCBQSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBJTlZfUEhJLCAwLCBQSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggUEhJLCBJTlZfUEhJLCAwICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIC0gUEhJLCBJTlZfUEhJLCAwICkgXTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGdlbmVyYXRlcyBhIFByZWZpbHRlcmVkLCBNaXBtYXBwZWQgUmFkaWFuY2UgRW52aXJvbm1lbnQgTWFwXG4gKiAoUE1SRU0pIGZyb20gYSBjdWJlTWFwIGVudmlyb25tZW50IHRleHR1cmUuIFRoaXMgYWxsb3dzIGRpZmZlcmVudCBsZXZlbHMgb2ZcbiAqIGJsdXIgdG8gYmUgcXVpY2tseSBhY2Nlc3NlZCBiYXNlZCBvbiBtYXRlcmlhbCByb3VnaG5lc3MuIEl0IGlzIHBhY2tlZCBpbnRvIGFcbiAqIHNwZWNpYWwgQ3ViZVVWIGZvcm1hdCB0aGF0IGFsbG93cyB1cyB0byBwZXJmb3JtIGN1c3RvbSBpbnRlcnBvbGF0aW9uIHNvIHRoYXRcbiAqIHdlIGNhbiBzdXBwb3J0IG5vbmxpbmVhciBmb3JtYXRzIHN1Y2ggYXMgUkdCRS4gVW5saWtlIGEgdHJhZGl0aW9uYWwgbWlwbWFwXG4gKiBjaGFpbiwgaXQgb25seSBnb2VzIGRvd24gdG8gdGhlIExPRF9NSU4gbGV2ZWwgKGFib3ZlKSwgYW5kIHRoZW4gY3JlYXRlcyBleHRyYVxuICogZXZlbiBtb3JlIGZpbHRlcmVkICdtaXBzJyBhdCB0aGUgc2FtZSBMT0RfTUlOIHJlc29sdXRpb24sIGFzc29jaWF0ZWQgd2l0aFxuICogaGlnaGVyIHJvdWdobmVzcyBsZXZlbHMuIEluIHRoaXMgd2F5IHdlIG1haW50YWluIHJlc29sdXRpb24gdG8gc21vb3RobHlcbiAqIGludGVycG9sYXRlIGRpZmZ1c2UgbGlnaHRpbmcgd2hpbGUgbGltaXRpbmcgc2FtcGxpbmcgY29tcHV0YXRpb24uXG4gKlxuICogUGFwZXI6IEZhc3QsIEFjY3VyYXRlIEltYWdlLUJhc2VkIExpZ2h0aW5nXG4gKiBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzE1eThyX1VwS2xVOVN2VjRJTGIwQzNxQ1BlY1M4cHZMei92aWV3XG4qL1xuXG5jbGFzcyBQTVJFTUdlbmVyYXRvciB7XG5cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyICkge1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcblx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHR0aGlzLl9sb2RNYXggPSAwO1xuXHRcdHRoaXMuX2N1YmVTaXplID0gMDtcblx0XHR0aGlzLl9sb2RQbGFuZXMgPSBbXTtcblx0XHR0aGlzLl9zaXplTG9kcyA9IFtdO1xuXHRcdHRoaXMuX3NpZ21hcyA9IFtdO1xuXG5cdFx0dGhpcy5fYmx1ck1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBudWxsO1xuXHRcdHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9ibHVyTWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYSBzdXBwbGllZCBTY2VuZSwgd2hpY2ggY2FuIGJlIGZhc3RlciB0aGFuIHVzaW5nIGFuXG5cdCAqIGltYWdlIGlmIG5ldHdvcmtpbmcgYmFuZHdpZHRoIGlzIGxvdy4gT3B0aW9uYWwgc2lnbWEgc3BlY2lmaWVzIGEgYmx1ciByYWRpdXNcblx0ICogaW4gcmFkaWFucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBzY2VuZSBiZWZvcmUgUE1SRU0gZ2VuZXJhdGlvbi4gT3B0aW9uYWwgbmVhclxuXHQgKiBhbmQgZmFyIHBsYW5lcyBlbnN1cmUgdGhlIHNjZW5lIGlzIHJlbmRlcmVkIGluIGl0cyBlbnRpcmV0eSAodGhlIGN1YmVDYW1lcmFcblx0ICogaXMgcGxhY2VkIGF0IHRoZSBvcmlnaW4pLlxuXHQgKi9cblx0ZnJvbVNjZW5lKCBzY2VuZSwgc2lnbWEgPSAwLCBuZWFyID0gMC4xLCBmYXIgPSAxMDAgKSB7XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR0aGlzLl9zZXRTaXplKCAyNTYgKTtcblxuXHRcdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdGN1YmVVVlJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciA9IHRydWU7XG5cblx0XHR0aGlzLl9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggc2lnbWEgPiAwICkge1xuXG5cdFx0XHR0aGlzLl9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIDAsIDAsIHNpZ21hICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9hcHBseVBNUkVNKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0XHR0aGlzLl9jbGVhbnVwKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGFuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiBvciBIRFIuIFRoZSBpZGVhbCBpbnB1dCBpbWFnZSBzaXplIGlzIDFrICgxMDI0IHggNTEyKSxcblx0ICogYXMgdGhpcyBtYXRjaGVzIGJlc3Qgd2l0aCB0aGUgMjU2IHggMjU2IGN1YmVtYXAgb3V0cHV0LlxuXHQgKi9cblx0ZnJvbUVxdWlyZWN0YW5ndWxhciggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBlcXVpcmVjdGFuZ3VsYXIsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBjdWJlbWFwIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGN1YmUgc2l6ZSBpcyAyNTYgeCAyNTYsXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICovXG5cdGZyb21DdWJlbWFwKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgY3ViZW1hcCBzaGFkZXIuIFlvdSBjYW4gZ2V0IGZhc3RlciBzdGFydC11cCBieSBpbnZva2luZyB0aGlzIG1ldGhvZCBkdXJpbmdcblx0ICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LlxuXHQgKi9cblx0Y29tcGlsZUN1YmVtYXBTaGFkZXIoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsID0gX2dldEN1YmVtYXBNYXRlcmlhbCgpO1xuXHRcdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgZXF1aXJlY3Rhbmd1bGFyIHNoYWRlci4gWW91IGNhbiBnZXQgZmFzdGVyIHN0YXJ0LXVwIGJ5IGludm9raW5nIHRoaXMgbWV0aG9kIGR1cmluZ1xuXHQgKiB5b3VyIHRleHR1cmUncyBuZXR3b3JrIGZldGNoIGZvciBpbmNyZWFzZWQgY29uY3VycmVuY3kuXG5cdCAqL1xuXHRjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblx0XHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhlIFBNUkVNR2VuZXJhdG9yJ3MgaW50ZXJuYWwgbWVtb3J5LiBOb3RlIHRoYXQgUE1SRU1HZW5lcmF0b3IgaXMgYSBzdGF0aWMgY2xhc3MsXG5cdCAqIHNvIHlvdSBzaG91bGQgbm90IG5lZWQgbW9yZSB0aGFuIG9uZSBQTVJFTUdlbmVyYXRvciBvYmplY3QuIElmIHlvdSBkbywgY2FsbGluZyBkaXNwb3NlKCkgb25cblx0ICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fY3ViZW1hcE1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Ly8gcHJpdmF0ZSBpbnRlcmZhY2VcblxuXHRfc2V0U2l6ZSggY3ViZVNpemUgKSB7XG5cblx0XHR0aGlzLl9sb2RNYXggPSBNYXRoLmZsb29yKCBNYXRoLmxvZzIoIGN1YmVTaXplICkgKTtcblx0XHR0aGlzLl9jdWJlU2l6ZSA9IE1hdGgucG93KCAyLCB0aGlzLl9sb2RNYXggKTtcblxuXHR9XG5cblx0X2Rpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCAhPT0gbnVsbCApIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX2xvZFBsYW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuX2xvZFBsYW5lc1sgaSBdLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2NsZWFudXAoIG91dHB1dFRhcmdldCApIHtcblxuXHRcdHRoaXMuX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggX29sZFRhcmdldCApO1xuXHRcdG91dHB1dFRhcmdldC5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXHRcdF9zZXRWaWV3cG9ydCggb3V0cHV0VGFyZ2V0LCAwLCAwLCBvdXRwdXRUYXJnZXQud2lkdGgsIG91dHB1dFRhcmdldC5oZWlnaHQgKTtcblxuXHR9XG5cblx0X2Zyb21UZXh0dXJlKCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCA9PT0gMCA/IDE2IDogKCB0ZXh0dXJlLmltYWdlWyAwIF0ud2lkdGggfHwgdGV4dHVyZS5pbWFnZVsgMCBdLmltYWdlLndpZHRoICkgKTtcblxuXHRcdH0gZWxzZSB7IC8vIEVxdWlyZWN0YW5ndWxhclxuXG5cdFx0XHR0aGlzLl9zZXRTaXplKCB0ZXh0dXJlLmltYWdlLndpZHRoIC8gNCApO1xuXG5cdFx0fVxuXG5cdFx0X29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdHRoaXMuX3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHRfYWxsb2NhdGVUYXJnZXRzKCkge1xuXG5cdFx0Y29uc3Qgd2lkdGggPSAzICogTWF0aC5tYXgoIHRoaXMuX2N1YmVTaXplLCAxNiAqIDcgKTtcblx0XHRjb25zdCBoZWlnaHQgPSA0ICogdGhpcy5fY3ViZVNpemUgLSAzMjtcblxuXHRcdGNvbnN0IHBhcmFtcyA9IHtcblx0XHRcdG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0bWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuXHRcdFx0dHlwZTogSGFsZkZsb2F0VHlwZSxcblx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdGVuY29kaW5nOiBMaW5lYXJFbmNvZGluZyxcblx0XHRcdGRlcHRoQnVmZmVyOiBmYWxzZVxuXHRcdH07XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXG5cdFx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0XHQoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoIF9sb2RNYXggKSApO1xuXG5cdFx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwgPSBfZ2V0Qmx1clNoYWRlciggX2xvZE1heCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2NvbXBpbGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB0bXBNZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLmNvbXBpbGUoIHRtcE1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG5cdF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBmb3YgPSA5MDtcblx0XHRjb25zdCBhc3BlY3QgPSAxO1xuXHRcdGNvbnN0IGN1YmVDYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjb25zdCB1cFNpZ24gPSBbIDEsIC0gMSwgMSwgMSwgMSwgMSBdO1xuXHRcdGNvbnN0IGZvcndhcmRTaWduID0gWyAxLCAxLCAxLCAtIDEsIC0gMSwgLSAxIF07XG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IG9yaWdpbmFsQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggX2NsZWFyQ29sb3IgKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgge1xuXHRcdFx0bmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgYmFja2dyb3VuZEJveCA9IG5ldyBNZXNoKCBuZXcgQm94R2VvbWV0cnkoKSwgYmFja2dyb3VuZE1hdGVyaWFsICk7XG5cblx0XHRsZXQgdXNlU29saWRDb2xvciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggYmFja2dyb3VuZCApO1xuXHRcdFx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBmb3J3YXJkU2lnblsgaSBdLCAwLCAwICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbCA9PT0gMSApIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgMCwgdXBTaWduWyBpIF0gKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIGZvcndhcmRTaWduWyBpIF0sIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgdXBTaWduWyBpIF0sIDAgKTtcblx0XHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIDAsIDAsIGZvcndhcmRTaWduWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzaXplID0gdGhpcy5fY3ViZVNpemU7XG5cblx0XHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCBjb2wgKiBzaXplLCBpID4gMiA/IHNpemUgOiAwLCBzaXplLCBzaXplICk7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggdXNlU29saWRDb2xvciApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXIoIGJhY2tncm91bmRCb3gsIGN1YmVDYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjdWJlQ2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRiYWNrZ3JvdW5kQm94Lmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHRiYWNrZ3JvdW5kQm94Lm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gdG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gb3JpZ2luYWxBdXRvQ2xlYXI7XG5cdFx0c2NlbmUuYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cblx0fVxuXG5cdF90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cblx0XHRjb25zdCBpc0N1YmVUZXh0dXJlID0gKCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCB0ZXh0dXJlLm1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApO1xuXG5cdFx0aWYgKCBpc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsLnVuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLSAxIDogMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBpc0N1YmVUZXh0dXJlID8gdGhpcy5fY3ViZW1hcE1hdGVyaWFsIDogdGhpcy5fZXF1aXJlY3RNYXRlcmlhbDtcblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcztcblxuXHRcdHVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGV4dHVyZTtcblxuXHRcdGNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTtcblxuXHRcdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCAzICogc2l6ZSwgMiAqIHNpemUgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBtZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxuXHRfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBhdXRvQ2xlYXIgPSByZW5kZXJlci5hdXRvQ2xlYXI7XG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaWdtYSA9IE1hdGguc3FydCggdGhpcy5fc2lnbWFzWyBpIF0gKiB0aGlzLl9zaWdtYXNbIGkgXSAtIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSAqIHRoaXMuX3NpZ21hc1sgaSAtIDEgXSApO1xuXG5cdFx0XHRjb25zdCBwb2xlQXhpcyA9IF9heGlzRGlyZWN0aW9uc1sgKCBpIC0gMSApICUgX2F4aXNEaXJlY3Rpb25zLmxlbmd0aCBdO1xuXG5cdFx0XHR0aGlzLl9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGkgLSAxLCBpLCBzaWdtYSwgcG9sZUF4aXMgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGF1dG9DbGVhcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgaXMgYSB0d28tcGFzcyBHYXVzc2lhbiBibHVyIGZvciBhIGN1YmVtYXAuIE5vcm1hbGx5IHRoaXMgaXMgZG9uZVxuXHQgKiB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHksIGJ1dCB0aGlzIGJyZWFrcyBkb3duIG9uIGEgY3ViZS4gSGVyZSB3ZSBhcHBseVxuXHQgKiB0aGUgYmx1ciBsYXRpdHVkaW5hbGx5IChhcm91bmQgdGhlIHBvbGVzKSwgYW5kIHRoZW4gbG9uZ2l0dWRpbmFsbHkgKHRvd2FyZHNcblx0ICogdGhlIHBvbGVzKSB0byBhcHByb3hpbWF0ZSB0aGUgb3J0aG9nb25hbGx5LXNlcGFyYWJsZSBibHVyLiBJdCBpcyBsZWFzdFxuXHQgKiBhY2N1cmF0ZSBhdCB0aGUgcG9sZXMsIGJ1dCBzdGlsbCBkb2VzIGEgZGVjZW50IGpvYi5cblx0ICovXG5cdF9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hLCBwb2xlQXhpcyApIHtcblxuXHRcdGNvbnN0IHBpbmdQb25nUmVuZGVyVGFyZ2V0ID0gdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQ7XG5cblx0XHR0aGlzLl9oYWxmQmx1cihcblx0XHRcdGN1YmVVVlJlbmRlclRhcmdldCxcblx0XHRcdHBpbmdQb25nUmVuZGVyVGFyZ2V0LFxuXHRcdFx0bG9kSW4sXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRzaWdtYSxcblx0XHRcdCdsYXRpdHVkaW5hbCcsXG5cdFx0XHRwb2xlQXhpcyApO1xuXG5cdFx0dGhpcy5faGFsZkJsdXIoXG5cdFx0XHRwaW5nUG9uZ1JlbmRlclRhcmdldCxcblx0XHRcdGN1YmVVVlJlbmRlclRhcmdldCxcblx0XHRcdGxvZE91dCxcblx0XHRcdGxvZE91dCxcblx0XHRcdHNpZ21hLFxuXHRcdFx0J2xvbmdpdHVkaW5hbCcsXG5cdFx0XHRwb2xlQXhpcyApO1xuXG5cdH1cblxuXHRfaGFsZkJsdXIoIHRhcmdldEluLCB0YXJnZXRPdXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hUmFkaWFucywgZGlyZWN0aW9uLCBwb2xlQXhpcyApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cdFx0Y29uc3QgYmx1ck1hdGVyaWFsID0gdGhpcy5fYmx1ck1hdGVyaWFsO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb24gIT09ICdsYXRpdHVkaW5hbCcgJiYgZGlyZWN0aW9uICE9PSAnbG9uZ2l0dWRpbmFsJyApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0J2JsdXIgZGlyZWN0aW9uIG11c3QgYmUgZWl0aGVyIGxhdGl0dWRpbmFsIG9yIGxvbmdpdHVkaW5hbCEnICk7XG5cblx0XHR9XG5cblx0XHQvLyBOdW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBhdCB3aGljaCB0byBjdXQgb2ZmIHRoZSBkaXNjcmV0ZSBhcHByb3hpbWF0aW9uLlxuXHRcdGNvbnN0IFNUQU5EQVJEX0RFVklBVElPTlMgPSAzO1xuXG5cdFx0Y29uc3QgYmx1ck1lc2ggPSBuZXcgTWVzaCggdGhpcy5fbG9kUGxhbmVzWyBsb2RPdXQgXSwgYmx1ck1hdGVyaWFsICk7XG5cdFx0Y29uc3QgYmx1clVuaWZvcm1zID0gYmx1ck1hdGVyaWFsLnVuaWZvcm1zO1xuXG5cdFx0Y29uc3QgcGl4ZWxzID0gdGhpcy5fc2l6ZUxvZHNbIGxvZEluIF0gLSAxO1xuXHRcdGNvbnN0IHJhZGlhbnNQZXJQaXhlbCA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IE1hdGguUEkgLyAoIDIgKiBwaXhlbHMgKSA6IDIgKiBNYXRoLlBJIC8gKCAyICogTUFYX1NBTVBMRVMgLSAxICk7XG5cdFx0Y29uc3Qgc2lnbWFQaXhlbHMgPSBzaWdtYVJhZGlhbnMgLyByYWRpYW5zUGVyUGl4ZWw7XG5cdFx0Y29uc3Qgc2FtcGxlcyA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IDEgKyBNYXRoLmZsb29yKCBTVEFOREFSRF9ERVZJQVRJT05TICogc2lnbWFQaXhlbHMgKSA6IE1BWF9TQU1QTEVTO1xuXG5cdFx0aWYgKCBzYW1wbGVzID4gTUFYX1NBTVBMRVMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggYHNpZ21hUmFkaWFucywgJHtcblx0XHRcdFx0c2lnbWFSYWRpYW5zfSwgaXMgdG9vIGxhcmdlIGFuZCB3aWxsIGNsaXAsIGFzIGl0IHJlcXVlc3RlZCAke1xuXHRcdFx0XHRzYW1wbGVzfSBzYW1wbGVzIHdoZW4gdGhlIG1heGltdW0gaXMgc2V0IHRvICR7TUFYX1NBTVBMRVN9YCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgd2VpZ2h0cyA9IFtdO1xuXHRcdGxldCBzdW0gPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgTUFYX1NBTVBMRVM7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBpIC8gc2lnbWFQaXhlbHM7XG5cdFx0XHRjb25zdCB3ZWlnaHQgPSBNYXRoLmV4cCggLSB4ICogeCAvIDIgKTtcblx0XHRcdHdlaWdodHMucHVzaCggd2VpZ2h0ICk7XG5cblx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRzdW0gKz0gd2VpZ2h0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpIDwgc2FtcGxlcyApIHtcblxuXHRcdFx0XHRzdW0gKz0gMiAqIHdlaWdodDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHdlaWdodHNbIGkgXSA9IHdlaWdodHNbIGkgXSAvIHN1bTtcblxuXHRcdH1cblxuXHRcdGJsdXJVbmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRhcmdldEluLnRleHR1cmU7XG5cdFx0Ymx1clVuaWZvcm1zWyAnc2FtcGxlcycgXS52YWx1ZSA9IHNhbXBsZXM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnd2VpZ2h0cycgXS52YWx1ZSA9IHdlaWdodHM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnbGF0aXR1ZGluYWwnIF0udmFsdWUgPSBkaXJlY3Rpb24gPT09ICdsYXRpdHVkaW5hbCc7XG5cblx0XHRpZiAoIHBvbGVBeGlzICkge1xuXG5cdFx0XHRibHVyVW5pZm9ybXNbICdwb2xlQXhpcycgXS52YWx1ZSA9IHBvbGVBeGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgeyBfbG9kTWF4IH0gPSB0aGlzO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ2RUaGV0YScgXS52YWx1ZSA9IHJhZGlhbnNQZXJQaXhlbDtcblx0XHRibHVyVW5pZm9ybXNbICdtaXBJbnQnIF0udmFsdWUgPSBfbG9kTWF4IC0gbG9kSW47XG5cblx0XHRjb25zdCBvdXRwdXRTaXplID0gdGhpcy5fc2l6ZUxvZHNbIGxvZE91dCBdO1xuXHRcdGNvbnN0IHggPSAzICogb3V0cHV0U2l6ZSAqICggbG9kT3V0ID4gX2xvZE1heCAtIExPRF9NSU4gPyBsb2RPdXQgLSBfbG9kTWF4ICsgTE9EX01JTiA6IDAgKTtcblx0XHRjb25zdCB5ID0gNCAqICggdGhpcy5fY3ViZVNpemUgLSBvdXRwdXRTaXplICk7XG5cblx0XHRfc2V0Vmlld3BvcnQoIHRhcmdldE91dCwgeCwgeSwgMyAqIG91dHB1dFNpemUsIDIgKiBvdXRwdXRTaXplICk7XG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0YXJnZXRPdXQgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIGJsdXJNZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxufVxuXG5cblxuZnVuY3Rpb24gX2NyZWF0ZVBsYW5lcyggbG9kTWF4ICkge1xuXG5cdGNvbnN0IGxvZFBsYW5lcyA9IFtdO1xuXHRjb25zdCBzaXplTG9kcyA9IFtdO1xuXHRjb25zdCBzaWdtYXMgPSBbXTtcblxuXHRsZXQgbG9kID0gbG9kTWF4O1xuXG5cdGNvbnN0IHRvdGFsTG9kcyA9IGxvZE1heCAtIExPRF9NSU4gKyAxICsgRVhUUkFfTE9EX1NJR01BLmxlbmd0aDtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0b3RhbExvZHM7IGkgKysgKSB7XG5cblx0XHRjb25zdCBzaXplTG9kID0gTWF0aC5wb3coIDIsIGxvZCApO1xuXHRcdHNpemVMb2RzLnB1c2goIHNpemVMb2QgKTtcblx0XHRsZXQgc2lnbWEgPSAxLjAgLyBzaXplTG9kO1xuXG5cdFx0aWYgKCBpID4gbG9kTWF4IC0gTE9EX01JTiApIHtcblxuXHRcdFx0c2lnbWEgPSBFWFRSQV9MT0RfU0lHTUFbIGkgLSBsb2RNYXggKyBMT0RfTUlOIC0gMSBdO1xuXG5cdFx0fSBlbHNlIGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0c2lnbWEgPSAwO1xuXG5cdFx0fVxuXG5cdFx0c2lnbWFzLnB1c2goIHNpZ21hICk7XG5cblx0XHRjb25zdCB0ZXhlbFNpemUgPSAxLjAgLyAoIHNpemVMb2QgLSAxICk7XG5cdFx0Y29uc3QgbWluID0gLSB0ZXhlbFNpemUgLyAyO1xuXHRcdGNvbnN0IG1heCA9IDEgKyB0ZXhlbFNpemUgLyAyO1xuXHRcdGNvbnN0IHV2MSA9IFsgbWluLCBtaW4sIG1heCwgbWluLCBtYXgsIG1heCwgbWluLCBtaW4sIG1heCwgbWF4LCBtaW4sIG1heCBdO1xuXG5cdFx0Y29uc3QgY3ViZUZhY2VzID0gNjtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IDY7XG5cdFx0Y29uc3QgcG9zaXRpb25TaXplID0gMztcblx0XHRjb25zdCB1dlNpemUgPSAyO1xuXHRcdGNvbnN0IGZhY2VJbmRleFNpemUgPSAxO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheSggdXZTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblx0XHRjb25zdCBmYWNlSW5kZXggPSBuZXcgRmxvYXQzMkFycmF5KCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblxuXHRcdGZvciAoIGxldCBmYWNlID0gMDsgZmFjZSA8IGN1YmVGYWNlczsgZmFjZSArKyApIHtcblxuXHRcdFx0Y29uc3QgeCA9ICggZmFjZSAlIDMgKSAqIDIgLyAzIC0gMTtcblx0XHRcdGNvbnN0IHkgPSBmYWNlID4gMiA/IDAgOiAtIDE7XG5cdFx0XHRjb25zdCBjb29yZGluYXRlcyA9IFtcblx0XHRcdFx0eCwgeSwgMCxcblx0XHRcdFx0eCArIDIgLyAzLCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHkgKyAxLCAwLFxuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHkgKyAxLCAwLFxuXHRcdFx0XHR4LCB5ICsgMSwgMFxuXHRcdFx0XTtcblx0XHRcdHBvc2l0aW9uLnNldCggY29vcmRpbmF0ZXMsIHBvc2l0aW9uU2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXHRcdFx0dXYuc2V0KCB1djEsIHV2U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXHRcdFx0Y29uc3QgZmlsbCA9IFsgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSBdO1xuXHRcdFx0ZmFjZUluZGV4LnNldCggZmlsbCwgZmFjZUluZGV4U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcGxhbmVzID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIHBvc2l0aW9uU2l6ZSApICk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdXYsIHV2U2l6ZSApICk7XG5cdFx0cGxhbmVzLnNldEF0dHJpYnV0ZSggJ2ZhY2VJbmRleCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGZhY2VJbmRleCwgZmFjZUluZGV4U2l6ZSApICk7XG5cdFx0bG9kUGxhbmVzLnB1c2goIHBsYW5lcyApO1xuXG5cdFx0aWYgKCBsb2QgPiBMT0RfTUlOICkge1xuXG5cdFx0XHRsb2QgLS07XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7IGxvZFBsYW5lcywgc2l6ZUxvZHMsIHNpZ21hcyB9O1xuXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApIHtcblxuXHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQudGV4dHVyZS5tYXBwaW5nID0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnUE1SRU0uY3ViZVV2Jztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnNjaXNzb3JUZXN0ID0gdHJ1ZTtcblx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxufVxuXG5mdW5jdGlvbiBfc2V0Vmlld3BvcnQoIHRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHR0YXJnZXQudmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cdHRhcmdldC5zY2lzc29yLnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRCbHVyU2hhZGVyKCBsb2RNYXgsIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0Y29uc3Qgd2VpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkoIE1BWF9TQU1QTEVTICk7XG5cdGNvbnN0IHBvbGVBeGlzID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblx0Y29uc3Qgc2hhZGVyTWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdG5hbWU6ICdTcGhlcmljYWxHYXVzc2lhbkJsdXInLFxuXG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0J24nOiBNQVhfU0FNUExFUyxcblx0XHRcdCdDVUJFVVZfVEVYRUxfV0lEVEgnOiAxLjAgLyB3aWR0aCxcblx0XHRcdCdDVUJFVVZfVEVYRUxfSEVJR0hUJzogMS4wIC8gaGVpZ2h0LFxuXHRcdFx0J0NVQkVVVl9NQVhfTUlQJzogYCR7bG9kTWF4fS4wYCxcblx0XHR9LFxuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdCdlbnZNYXAnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHQnc2FtcGxlcyc6IHsgdmFsdWU6IDEgfSxcblx0XHRcdCd3ZWlnaHRzJzogeyB2YWx1ZTogd2VpZ2h0cyB9LFxuXHRcdFx0J2xhdGl0dWRpbmFsJzogeyB2YWx1ZTogZmFsc2UgfSxcblx0XHRcdCdkVGhldGEnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQnbWlwSW50JzogeyB2YWx1ZTogMCB9LFxuXHRcdFx0J3BvbGVBeGlzJzogeyB2YWx1ZTogcG9sZUF4aXMgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblx0XHRcdHVuaWZvcm0gaW50IHNhbXBsZXM7XG5cdFx0XHR1bmlmb3JtIGZsb2F0IHdlaWdodHNbIG4gXTtcblx0XHRcdHVuaWZvcm0gYm9vbCBsYXRpdHVkaW5hbDtcblx0XHRcdHVuaWZvcm0gZmxvYXQgZFRoZXRhO1xuXHRcdFx0dW5pZm9ybSBmbG9hdCBtaXBJbnQ7XG5cdFx0XHR1bmlmb3JtIHZlYzMgcG9sZUF4aXM7XG5cblx0XHRcdCNkZWZpbmUgRU5WTUFQX1RZUEVfQ1VCRV9VVlxuXHRcdFx0I2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cblxuXHRcdFx0dmVjMyBnZXRTYW1wbGUoIGZsb2F0IHRoZXRhLCB2ZWMzIGF4aXMgKSB7XG5cblx0XHRcdFx0ZmxvYXQgY29zVGhldGEgPSBjb3MoIHRoZXRhICk7XG5cdFx0XHRcdC8vIFJvZHJpZ3VlcycgYXhpcy1hbmdsZSByb3RhdGlvblxuXHRcdFx0XHR2ZWMzIHNhbXBsZURpcmVjdGlvbiA9IHZPdXRwdXREaXJlY3Rpb24gKiBjb3NUaGV0YVxuXHRcdFx0XHRcdCsgY3Jvc3MoIGF4aXMsIHZPdXRwdXREaXJlY3Rpb24gKSAqIHNpbiggdGhldGEgKVxuXHRcdFx0XHRcdCsgYXhpcyAqIGRvdCggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogKCAxLjAgLSBjb3NUaGV0YSApO1xuXG5cdFx0XHRcdHJldHVybiBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXJlY3Rpb24sIG1pcEludCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHR2ZWMzIGF4aXMgPSBsYXRpdHVkaW5hbCA/IHBvbGVBeGlzIDogY3Jvc3MoIHBvbGVBeGlzLCB2T3V0cHV0RGlyZWN0aW9uICk7XG5cblx0XHRcdFx0aWYgKCBhbGwoIGVxdWFsKCBheGlzLCB2ZWMzKCAwLjAgKSApICkgKSB7XG5cblx0XHRcdFx0XHRheGlzID0gdmVjMyggdk91dHB1dERpcmVjdGlvbi56LCAwLjAsIC0gdk91dHB1dERpcmVjdGlvbi54ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGF4aXMgPSBub3JtYWxpemUoIGF4aXMgKTtcblxuXHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTtcblx0XHRcdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzWyAwIF0gKiBnZXRTYW1wbGUoIDAuMCwgYXhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGludCBpID0gMTsgaSA8IG47IGkrKyApIHtcblxuXHRcdFx0XHRcdGlmICggaSA+PSBzYW1wbGVzICkge1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZsb2F0IHRoZXRhID0gZFRoZXRhICogZmxvYXQoIGkgKTtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggLTEuMCAqIHRoZXRhLCBheGlzICk7XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzWyBpIF0gKiBnZXRTYW1wbGUoIHRoZXRhLCBheGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cblx0cmV0dXJuIHNoYWRlck1hdGVyaWFsO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRFcXVpcmVjdE1hdGVyaWFsKCkge1xuXG5cdHJldHVybiBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdG5hbWU6ICdFcXVpcmVjdGFuZ3VsYXJUb0N1YmVVVicsXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcblxuXHRcdFx0I2luY2x1ZGUgPGNvbW1vbj5cblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdHZlYzMgb3V0cHV0RGlyZWN0aW9uID0gbm9ybWFsaXplKCB2T3V0cHV0RGlyZWN0aW9uICk7XG5cdFx0XHRcdHZlYzIgdXYgPSBlcXVpcmVjdFV2KCBvdXRwdXREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB0ZXh0dXJlMkQgKCBlbnZNYXAsIHV2ICkucmdiLCAxLjAgKTtcblxuXHRcdFx0fVxuXHRcdGAsXG5cblx0XHRibGVuZGluZzogTm9CbGVuZGluZyxcblx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdGRlcHRoV3JpdGU6IGZhbHNlXG5cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRDdWJlbWFwTWF0ZXJpYWwoKSB7XG5cblx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ0N1YmVtYXBUb0N1YmVVVicsXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdCdmbGlwRW52TWFwJzogeyB2YWx1ZTogLSAxIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksXG5cblx0XHRmcmFnbWVudFNoYWRlcjogLyogZ2xzbCAqL2BcblxuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cdFx0XHRwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG5cblx0XHRcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcblxuXHRcdFx0dmFyeWluZyB2ZWMzIHZPdXRwdXREaXJlY3Rpb247XG5cblx0XHRcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xuXG5cdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHZPdXRwdXREaXJlY3Rpb24ueCwgdk91dHB1dERpcmVjdGlvbi55eiApICk7XG5cblx0XHRcdH1cblx0XHRgLFxuXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRkZXB0aFdyaXRlOiBmYWxzZVxuXG5cdH0gKTtcblxufVxuXG5mdW5jdGlvbiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCkge1xuXG5cdHJldHVybiAvKiBnbHNsICovYFxuXG5cdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0YXR0cmlidXRlIGZsb2F0IGZhY2VJbmRleDtcblxuXHRcdHZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xuXG5cdFx0Ly8gUkggY29vcmRpbmF0ZSBzeXN0ZW07IFBNUkVNIGZhY2UtaW5kZXhpbmcgY29udmVudGlvblxuXHRcdHZlYzMgZ2V0RGlyZWN0aW9uKCB2ZWMyIHV2LCBmbG9hdCBmYWNlICkge1xuXG5cdFx0XHR1diA9IDIuMCAqIHV2IC0gMS4wO1xuXG5cdFx0XHR2ZWMzIGRpcmVjdGlvbiA9IHZlYzMoIHV2LCAxLjAgKTtcblxuXHRcdFx0aWYgKCBmYWNlID09IDAuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24uenl4OyAvLyAoIDEsIHYsIHUgKSBwb3MgeFxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDEuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24gPSBkaXJlY3Rpb24ueHp5O1xuXHRcdFx0XHRkaXJlY3Rpb24ueHogKj0gLTEuMDsgLy8gKCAtdSwgMSwgLXYgKSBwb3MgeVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBmYWNlID09IDIuMCApIHtcblxuXHRcdFx0XHRkaXJlY3Rpb24ueCAqPSAtMS4wOyAvLyAoIC11LCB2LCAxICkgcG9zIHpcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAzLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnp5eDtcblx0XHRcdFx0ZGlyZWN0aW9uLnh6ICo9IC0xLjA7IC8vICggLTEsIHYsIC11ICkgbmVnIHhcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSA0LjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTtcblx0XHRcdFx0ZGlyZWN0aW9uLnh5ICo9IC0xLjA7IC8vICggLXUsIC0xLCB2ICkgbmVnIHlcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSA1LjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uLnogKj0gLTEuMDsgLy8gKCB1LCB2LCAtMSApIG5lZyB6XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRpcmVjdGlvbjtcblxuXHRcdH1cblxuXHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0dk91dHB1dERpcmVjdGlvbiA9IGdldERpcmVjdGlvbiggdXYsIGZhY2VJbmRleCApO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cblx0XHR9XG5cdGA7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xDdWJlVVZNYXBzKCByZW5kZXJlciApIHtcblxuXHRsZXQgY3ViZVVWbWFwcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0bGV0IHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRmdW5jdGlvbiBnZXQoIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRcdGNvbnN0IGlzRXF1aXJlY3RNYXAgPSAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICk7XG5cdFx0XHRjb25zdCBpc0N1YmVNYXAgPSAoIG1hcHBpbmcgPT09IEN1YmVSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKTtcblxuXHRcdFx0Ly8gZXF1aXJlY3QvY3ViZSBtYXAgdG8gY3ViZVVWIGNvbnZlcnNpb25cblxuXHRcdFx0aWYgKCBpc0VxdWlyZWN0TWFwIHx8IGlzQ3ViZU1hcCApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICYmIHRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IGN1YmVVVm1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXQgPSBpc0VxdWlyZWN0TWFwID8gcG1yZW1HZW5lcmF0b3IuZnJvbUVxdWlyZWN0YW5ndWxhciggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICkgOiBwbXJlbUdlbmVyYXRvci5mcm9tQ3ViZW1hcCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0Y3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIGN1YmVVVm1hcHMuaGFzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRcdGlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRcdGN1YmVVVm1hcHMuc2V0KCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpbWFnZSBub3QgeWV0IHJlYWR5LiB0cnkgdGhlIGNvbnZlcnNpb24gbmV4dCBmcmFtZVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHtcblxuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudCA9PT0gbGVuZ3RoO1xuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwVVYgPSBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCBjdWJlbWFwVVYgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXBVVi5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRjdWJlVVZtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGlmICggcG1yZW1HZW5lcmF0b3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHBtcmVtR2VuZXJhdG9yLmRpc3Bvc2UoKTtcblx0XHRcdHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCBuYW1lICkge1xuXG5cdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGhhczogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0RXh0ZW5zaW9uKCBuYW1lICkgIT09IG51bGw7XG5cblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gKCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyICkge1xuXG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0Z2V0RXh0ZW5zaW9uKCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0XHRnZXRFeHRlbnNpb24oICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU19lbGVtZW50X2luZGV4X3VpbnQnICk7XG5cdFx0XHRcdGdldEV4dGVuc2lvbiggJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0JyApO1xuXHRcdFx0XHRnZXRFeHRlbnNpb24oICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdldEV4dGVuc2lvbiggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRcdGdldEV4dGVuc2lvbiggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKTtcblx0XHRcdGdldEV4dGVuc2lvbiggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKTtcblxuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMR2VvbWV0cmllcyggZ2wsIGF0dHJpYnV0ZXMsIGluZm8sIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0Y29uc3QgZ2VvbWV0cmllcyA9IHt9O1xuXHRjb25zdCB3aXJlZnJhbWVBdHRyaWJ1dGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBnZW9tZXRyeS5pbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggZ2VvbWV0cnkuYXR0cmlidXRlc1sgbmFtZSBdICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRkZWxldGUgZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBhdHRyaWJ1dGUgKTtcblx0XHRcdHdpcmVmcmFtZUF0dHJpYnV0ZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0fVxuXG5cdFx0YmluZGluZ1N0YXRlcy5yZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0ZGVsZXRlIGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50O1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGluZm8ubWVtb3J5Lmdlb21ldHJpZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggb2JqZWN0LCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9PT0gdHJ1ZSApIHJldHVybiBnZW9tZXRyeTtcblxuXHRcdGdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGdlb21ldHJpZXNbIGdlb21ldHJ5LmlkIF0gPSB0cnVlO1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKztcblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBVcGRhdGluZyBpbmRleCBidWZmZXIgaW4gVkFPIG5vdy4gU2VlIFdlYkdMQmluZGluZ1N0YXRlcy5cblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF0sIDM0OTYyICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgMzQ5NjIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdGNvbnN0IGdlb21ldHJ5UG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGxldCB2ZXJzaW9uID0gMDtcblxuXHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBnZW9tZXRyeUluZGV4LmFycmF5O1xuXHRcdFx0dmVyc2lvbiA9IGdlb21ldHJ5SW5kZXgudmVyc2lvbjtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBhcnJheVsgaSArIDAgXTtcblx0XHRcdFx0Y29uc3QgYiA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0XHRjb25zdCBjID0gYXJyYXlbIGkgKyAyIF07XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBiLCBjLCBjLCBhICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gZ2VvbWV0cnlQb3NpdGlvbi5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeVBvc2l0aW9uLnZlcnNpb247XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggYXJyYXkubGVuZ3RoIC8gMyApIC0gMTsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaSArIDA7XG5cdFx0XHRcdGNvbnN0IGIgPSBpICsgMTtcblx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRpY2VzICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApO1xuXHRcdGF0dHJpYnV0ZS52ZXJzaW9uID0gdmVyc2lvbjtcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzXG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcHJldmlvdXNBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggcHJldmlvdXNBdHRyaWJ1dGUgKSBhdHRyaWJ1dGVzLnJlbW92ZSggcHJldmlvdXNBdHRyaWJ1dGUgKTtcblxuXHRcdC8vXG5cblx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzLnNldCggZ2VvbWV0cnksIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgY3VycmVudEF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cblx0XHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lXG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlLnZlcnNpb24gPCBnZW9tZXRyeUluZGV4LnZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRsZXQgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0bGV0IHR5cGUsIGJ5dGVzUGVyRWxlbWVudDtcblxuXHRmdW5jdGlvbiBzZXRJbmRleCggdmFsdWUgKSB7XG5cblx0XHR0eXBlID0gdmFsdWUudHlwZTtcblx0XHRieXRlc1BlckVsZW1lbnQgPSB2YWx1ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0VsZW1lbnRzKCBtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgMSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRsZXQgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xuXG5cdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZ2w7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJztcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCwgcHJpbWNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMSW5mbyggZ2wgKSB7XG5cblx0Y29uc3QgbWVtb3J5ID0ge1xuXHRcdGdlb21ldHJpZXM6IDAsXG5cdFx0dGV4dHVyZXM6IDBcblx0fTtcblxuXHRjb25zdCByZW5kZXIgPSB7XG5cdFx0ZnJhbWU6IDAsXG5cdFx0Y2FsbHM6IDAsXG5cdFx0dHJpYW5nbGVzOiAwLFxuXHRcdHBvaW50czogMCxcblx0XHRsaW5lczogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggY291bnQsIG1vZGUsIGluc3RhbmNlQ291bnQgKSB7XG5cblx0XHRyZW5kZXIuY2FsbHMgKys7XG5cblx0XHRzd2l0Y2ggKCBtb2RlICkge1xuXG5cdFx0XHRjYXNlIDQ6XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAzICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDIgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC0gMSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmZyYW1lICsrO1xuXHRcdHJlbmRlci5jYWxscyA9IDA7XG5cdFx0cmVuZGVyLnRyaWFuZ2xlcyA9IDA7XG5cdFx0cmVuZGVyLnBvaW50cyA9IDA7XG5cdFx0cmVuZGVyLmxpbmVzID0gMDtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRtZW1vcnk6IG1lbW9yeSxcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0XHRwcm9ncmFtczogbnVsbCxcblx0XHRhdXRvUmVzZXQ6IHRydWUsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gbnVtZXJpY2FsU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gYVsgMCBdIC0gYlsgMCBdO1xuXG59XG5cbmZ1bmN0aW9uIGFic051bWVyaWNhbFNvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIE1hdGguYWJzKCBiWyAxIF0gKSAtIE1hdGguYWJzKCBhWyAxIF0gKTtcblxufVxuXG5mdW5jdGlvbiBkZW5vcm1hbGl6ZSggbW9ycGgsIGF0dHJpYnV0ZSApIHtcblxuXHRsZXQgZGVub21pbmF0b3IgPSAxO1xuXHRjb25zdCBhcnJheSA9IGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID8gYXR0cmlidXRlLmRhdGEuYXJyYXkgOiBhdHRyaWJ1dGUuYXJyYXk7XG5cblx0aWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIGRlbm9taW5hdG9yID0gMTI3O1xuXHRlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkgZGVub21pbmF0b3IgPSAzMjc2Nztcblx0ZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIGRlbm9taW5hdG9yID0gMjE0NzQ4MzY0Nztcblx0ZWxzZSBjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xNb3JwaHRhcmdldHM6IFVuc3VwcG9ydGVkIG1vcnBoIGF0dHJpYnV0ZSBkYXRhIHR5cGU6ICcsIGFycmF5ICk7XG5cblx0bW9ycGguZGl2aWRlU2NhbGFyKCBkZW5vbWluYXRvciApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTW9ycGh0YXJnZXRzKCBnbCwgY2FwYWJpbGl0aWVzLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBpbmZsdWVuY2VzTGlzdCA9IHt9O1xuXHRjb25zdCBtb3JwaEluZmx1ZW5jZXMgPSBuZXcgRmxvYXQzMkFycmF5KCA4ICk7XG5cdGNvbnN0IG1vcnBoVGV4dHVyZXMgPSBuZXcgV2Vha01hcCgpO1xuXHRjb25zdCBtb3JwaCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0Y29uc3Qgd29ya0luZmx1ZW5jZXMgPSBbXTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA4OyBpICsrICkge1xuXG5cdFx0d29ya0luZmx1ZW5jZXNbIGkgXSA9IFsgaSwgMCBdO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB1c2luZyBhdHRyaWJ1dGVzLCB0aGUgV2ViR0wgMiBjb2RlIHBhdGggZW5jb2RlcyBtb3JwaCB0YXJnZXRzXG5cdFx0XHQvLyBpbnRvIGFuIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMuIEVhY2ggbGF5ZXIgcmVwcmVzZW50cyBhIHNpbmdsZSBtb3JwaCB0YXJnZXQuXG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRcdGxldCBlbnRyeSA9IG1vcnBoVGV4dHVyZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRpZiAoIGVudHJ5ID09PSB1bmRlZmluZWQgfHwgZW50cnkuY291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRcdGlmICggZW50cnkgIT09IHVuZGVmaW5lZCApIGVudHJ5LnRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHRcdGNvbnN0IGhhc01vcnBoUG9zaXRpb24gPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZDtcblx0XHRcdFx0Y29uc3QgaGFzTW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0XHRjb25zdCBoYXNNb3JwaENvbG9ycyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiB8fCBbXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBbXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgfHwgW107XG5cblx0XHRcdFx0bGV0IHZlcnRleERhdGFDb3VudCA9IDA7XG5cblx0XHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMTtcblx0XHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAyO1xuXHRcdFx0XHRpZiAoIGhhc01vcnBoQ29sb3JzID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMztcblxuXHRcdFx0XHRsZXQgd2lkdGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ICogdmVydGV4RGF0YUNvdW50O1xuXHRcdFx0XHRsZXQgaGVpZ2h0ID0gMTtcblxuXHRcdFx0XHRpZiAoIHdpZHRoID4gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0aGVpZ2h0ID0gTWF0aC5jZWlsKCB3aWR0aCAvIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0XHRcdHdpZHRoID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApO1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggYnVmZmVyLCB3aWR0aCwgaGVpZ2h0LCBtb3JwaFRhcmdldHNDb3VudCApO1xuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IFJHQkFGb3JtYXQ7IC8vIHVzaW5nIFJHQkEgc2luY2UgUkdCIG1pZ2h0IGJlIGVtdWxhdGVkIChhbmQgaXMgdGh1cyBzbG93ZXIpXG5cdFx0XHRcdHRleHR1cmUudHlwZSA9IEZsb2F0VHlwZTtcblx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0Ly8gZmlsbCBidWZmZXJcblxuXHRcdFx0XHRjb25zdCB2ZXJ0ZXhEYXRhU3RyaWRlID0gdmVydGV4RGF0YUNvdW50ICogNDtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXTtcblx0XHRcdFx0XHRjb25zdCBtb3JwaENvbG9yID0gbW9ycGhDb2xvcnNbIGkgXTtcblxuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IHdpZHRoICogaGVpZ2h0ICogNCAqIGk7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtb3JwaFRhcmdldC5jb3VudDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gaiAqIHZlcnRleERhdGFTdHJpZGU7XG5cblx0XHRcdFx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldCwgaiApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXQubm9ybWFsaXplZCA9PT0gdHJ1ZSApIGRlbm9ybWFsaXplKCBtb3JwaCwgbW9ycGhUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDAgXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMSBdID0gbW9ycGgueTtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAyIF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDMgXSA9IDA7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhOb3JtYWwsIGogKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIG1vcnBoTm9ybWFsLm5vcm1hbGl6ZWQgPT09IHRydWUgKSBkZW5vcm1hbGl6ZSggbW9ycGgsIG1vcnBoTm9ybWFsICk7XG5cblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA0IF0gPSBtb3JwaC54O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDUgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgNiBdID0gbW9ycGguejtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA3IF0gPSAwO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggaGFzTW9ycGhDb2xvcnMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhDb2xvciwgaiApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbW9ycGhDb2xvci5ub3JtYWxpemVkID09PSB0cnVlICkgZGVub3JtYWxpemUoIG1vcnBoLCBtb3JwaE5vcm1hbCApO1xuXG5cdFx0XHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOCBdID0gbW9ycGgueDtcblx0XHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA5IF0gPSBtb3JwaC55O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEwIF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDExIF0gPSAoIG1vcnBoQ29sb3IuaXRlbVNpemUgPT09IDQgKSA/IG1vcnBoLncgOiAxO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVudHJ5ID0ge1xuXHRcdFx0XHRcdGNvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdFx0XHR0ZXh0dXJlOiB0ZXh0dXJlLFxuXHRcdFx0XHRcdHNpemU6IG5ldyBWZWN0b3IyKCB3aWR0aCwgaGVpZ2h0IClcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRtb3JwaFRleHR1cmVzLnNldCggZ2VvbWV0cnksIGVudHJ5ICk7XG5cblx0XHRcdFx0ZnVuY3Rpb24gZGlzcG9zZVRleHR1cmUoKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0XHRcdG1vcnBoVGV4dHVyZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlVGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IG1vcnBoSW5mbHVlbmNlc1N1bSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1N1bSArPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG9iamVjdEluZmx1ZW5jZXMgKTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmUnLCBlbnRyeS50ZXh0dXJlLCB0ZXh0dXJlcyApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmVTaXplJywgZW50cnkuc2l6ZSApO1xuXG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBXaGVuIG9iamVjdCBkb2Vzbid0IGhhdmUgbW9ycGggdGFyZ2V0IGluZmx1ZW5jZXMgZGVmaW5lZCwgd2UgdHJlYXQgaXQgYXMgYSAwLWxlbmd0aCBhcnJheVxuXHRcdFx0Ly8gVGhpcyBpcyBpbXBvcnRhbnQgdG8gbWFrZSBzdXJlIHdlIHNldCB1cCBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2UgLyBtb3JwaFRhcmdldEluZmx1ZW5jZXNcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gb2JqZWN0SW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkID8gMCA6IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoO1xuXG5cdFx0XHRsZXQgaW5mbHVlbmNlcyA9IGluZmx1ZW5jZXNMaXN0WyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0XHRpZiAoIGluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCB8fCBpbmZsdWVuY2VzLmxlbmd0aCAhPT0gbGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIGluaXRpYWxpc2UgbGlzdFxuXG5cdFx0XHRcdGluZmx1ZW5jZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpbmZsdWVuY2VzWyBpIF0gPSBbIGksIDAgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbGxlY3QgaW5mbHVlbmNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0XHRcdGluZmx1ZW5jZVsgMCBdID0gaTtcblx0XHRcdFx0aW5mbHVlbmNlWyAxIF0gPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbHVlbmNlcy5zb3J0KCBhYnNOdW1lcmljYWxTb3J0ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpIDwgbGVuZ3RoICYmIGluZmx1ZW5jZXNbIGkgXVsgMSBdICkge1xuXG5cdFx0XHRcdFx0d29ya0luZmx1ZW5jZXNbIGkgXVsgMCBdID0gaW5mbHVlbmNlc1sgaSBdWyAwIF07XG5cdFx0XHRcdFx0d29ya0luZmx1ZW5jZXNbIGkgXVsgMSBdID0gaW5mbHVlbmNlc1sgaSBdWyAxIF07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHdvcmtJbmZsdWVuY2VzWyBpIF1bIDAgXSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuXHRcdFx0XHRcdHdvcmtJbmZsdWVuY2VzWyBpIF1bIDEgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHdvcmtJbmZsdWVuY2VzLnNvcnQoIG51bWVyaWNhbFNvcnQgKTtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0bGV0IG1vcnBoSW5mbHVlbmNlc1N1bSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5mbHVlbmNlID0gd29ya0luZmx1ZW5jZXNbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpbmZsdWVuY2VbIDAgXTtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBpbmZsdWVuY2VbIDEgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSApIHtcblxuXHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKSAhPT0gbW9ycGhUYXJnZXRzWyBpbmRleCBdICkge1xuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpLCBtb3JwaFRhcmdldHNbIGluZGV4IF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICYmIGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGkgKSAhPT0gbW9ycGhOb3JtYWxzWyBpbmRleCBdICkge1xuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdtb3JwaE5vcm1hbCcgKyBpLCBtb3JwaE5vcm1hbHNbIGluZGV4IF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1sgaSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IHZhbHVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5oYXNBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICYmIGdlb21ldHJ5Lmhhc0F0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGkgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBHTFNMIHNoYWRlciB1c2VzIGZvcm11bGEgYmFzZWluZmx1ZW5jZSAqIGJhc2UgKyBzdW0odGFyZ2V0ICogaW5mbHVlbmNlKVxuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgdXMgdG8gc3dpdGNoIGJldHdlZW4gYWJzb2x1dGUgbW9ycGhzIGFuZCByZWxhdGl2ZSBtb3JwaHMgd2l0aG91dCBjaGFuZ2luZyBzaGFkZXIgY29kZVxuXHRcdFx0Ly8gV2hlbiBiYXNlaW5mbHVlbmNlID0gMSAtIHN1bShpbmZsdWVuY2UpLCB0aGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0byBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKVxuXHRcdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUgPyAxIDogMSAtIG1vcnBoSW5mbHVlbmNlc1N1bTtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG1vcnBoSW5mbHVlbmNlcyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMT2JqZWN0cyggZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0bGV0IHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApO1xuXG5cdFx0Ly8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lXG5cblx0XHRpZiAoIHVwZGF0ZU1hcC5nZXQoIGJ1ZmZlcmdlb21ldHJ5ICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTWFwLnNldCggYnVmZmVyZ2VvbWV0cnksIGZyYW1lICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lmhhc0V2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25JbnN0YW5jZWRNZXNoRGlzcG9zZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZU1hdHJpeCwgMzQ5NjIgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggb2JqZWN0Lmluc3RhbmNlQ29sb3IsIDM0OTYyICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgaW5zdGFuY2VkTWVzaCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGluc3RhbmNlZE1lc2gucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZU1hdHJpeCApO1xuXG5cdFx0aWYgKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZUNvbG9yICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cbiAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCxcbiAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnXG4gKlxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0bGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gKlxuICovXG5cbmNvbnN0IGVtcHR5VGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5jb25zdCBlbXB0eUFycmF5VGV4dHVyZSA9IG5ldyBEYXRhQXJyYXlUZXh0dXJlKCk7XG5jb25zdCBlbXB0eTNkVGV4dHVyZSA9IG5ldyBEYXRhM0RUZXh0dXJlKCk7XG5jb25zdCBlbXB0eUN1YmVUZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cbi8vIC0tLSBVdGlsaXRpZXMgLS0tXG5cbi8vIEFycmF5IENhY2hlcyAocHJvdmlkZSB0eXBlZCBhcnJheXMgZm9yIHRlbXBvcmFyeSBieSBzaXplKVxuXG5jb25zdCBhcnJheUNhY2hlRjMyID0gW107XG5jb25zdCBhcnJheUNhY2hlSTMyID0gW107XG5cbi8vIEZsb2F0MzJBcnJheSBjYWNoZXMgdXNlZCBmb3IgdXBsb2FkaW5nIE1hdHJpeCB1bmlmb3Jtc1xuXG5jb25zdCBtYXQ0YXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCAxNiApO1xuY29uc3QgbWF0M2FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggOSApO1xuY29uc3QgbWF0MmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggNCApO1xuXG4vLyBGbGF0dGVuaW5nIGZvciBhcnJheXMgb2YgdmVjdG9ycyBhbmQgbWF0cmljZXNcblxuZnVuY3Rpb24gZmxhdHRlbiggYXJyYXksIG5CbG9ja3MsIGJsb2NrU2l6ZSApIHtcblxuXHRjb25zdCBmaXJzdEVsZW0gPSBhcnJheVsgMCBdO1xuXG5cdGlmICggZmlyc3RFbGVtIDw9IDAgfHwgZmlyc3RFbGVtID4gMCApIHJldHVybiBhcnJheTtcblx0Ly8gdW5vcHRpbWl6ZWQ6ICEgaXNOYU4oIGZpcnN0RWxlbSApXG5cdC8vIHNlZSBodHRwOi8vamFja3NvbmR1bnN0YW4uY29tL2FydGljbGVzLzk4M1xuXG5cdGNvbnN0IG4gPSBuQmxvY2tzICogYmxvY2tTaXplO1xuXHRsZXQgciA9IGFycmF5Q2FjaGVGMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgRmxvYXQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUYzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0aWYgKCBuQmxvY2tzICE9PSAwICkge1xuXG5cdFx0Zmlyc3RFbGVtLnRvQXJyYXkoIHIsIDAgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMSwgb2Zmc2V0ID0gMDsgaSAhPT0gbkJsb2NrczsgKysgaSApIHtcblxuXHRcdFx0b2Zmc2V0ICs9IGJsb2NrU2l6ZTtcblx0XHRcdGFycmF5WyBpIF0udG9BcnJheSggciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKCBhLCBiICkge1xuXG5cdGlmICggYS5sZW5ndGggIT09IGIubGVuZ3RoICkgcmV0dXJuIGZhbHNlO1xuXG5cdGZvciAoIGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGlmICggYVsgaSBdICE9PSBiWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmZ1bmN0aW9uIGNvcHlBcnJheSggYSwgYiApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRhWyBpIF0gPSBiWyBpIF07XG5cblx0fVxuXG59XG5cbi8vIFRleHR1cmUgdW5pdCBhbGxvY2F0aW9uXG5cbmZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICkge1xuXG5cdGxldCByID0gYXJyYXlDYWNoZUkzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBJbnQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUkzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0clsgaSBdID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG4vLyAtLS0gU2V0dGVycyAtLS1cblxuLy8gTm90ZTogRGVmaW5pbmcgdGhlc2UgbWV0aG9kcyBleHRlcm5hbGx5LCBiZWNhdXNlIHRoZXkgY29tZSBpbiBhIGJ1bmNoXG4vLyBhbmQgdGhpcyB3YXkgdGhlaXIgbmFtZXMgbWluaWZ5LlxuXG4vLyBTaW5nbGUgc2NhbGFyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xZiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTJmKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2UgaWYgKCB2LnIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi5yIHx8IGNhY2hlWyAxIF0gIT09IHYuZyB8fCBjYWNoZVsgMiBdICE9PSB2LmIgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdGhpcy5hZGRyLCB2LnIsIHYuZywgdi5iICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2LnI7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi5nO1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuYjtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5NYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTMoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0M2FycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDNhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNNCggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgaW50ZWdlciAvIGJvb2xlYW5cblxuZnVuY3Rpb24gc2V0VmFsdWVWMWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gPT09IHYgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgaW50ZWdlciAvIGJvb2xlYW4gdmVjdG9yIChmcm9tIGZsYXQgYXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2koIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbi8vIFNpbmdsZSB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMXVpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVWMnVpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMnVpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjN1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTN1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0dWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzRDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2IHx8IGVtcHR5M2RUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNiggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheTEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHYgfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMjsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTM7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWk7IC8vIFVJTlRcblx0XHRjYXNlIDB4OGRjNjogcmV0dXJuIHNldFZhbHVlVjJ1aTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGRjNzogcmV0dXJuIHNldFZhbHVlVjN1aTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMTtcblxuXHRcdGNhc2UgMHg4YjVmOiAvLyBTQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkY2I6IC8vIElOVF9TQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUM0QxO1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDY7XG5cblx0XHRjYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGNmOiAvLyBJTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGQ3OiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDJEQXJyYXkxO1xuXG5cdH1cblxufVxuXG5cbi8vIEFycmF5IG9mIHNjYWxhcnNcblxuZnVuY3Rpb24gc2V0VmFsdWVWMWZBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTFmdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5IG9yIGFycmF5IG9mIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDIgKTtcblxuXHRnbC51bmlmb3JtMmZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIG1hdHJpY2VzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTNBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgOSApO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU00QXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDE2ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIGludGVnZXIgLyBib29sZWFuIHZlY3RvcnMgKGZyb20gZmxhdCBhcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM2lBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxdWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTF1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbi8vIEFycmF5IG9mIHVuc2lnbmVkIGludGVnZXIgdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5KVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYydWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTJ1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjN1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM3VpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNHVpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm00dWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5cbi8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIDNEIC8gQ3ViZSAvIDJEQXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzREFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbiA9IHYubGVuZ3RoO1xuXG5cdGNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCB2WyBpIF0gfHwgZW1wdHkzZFRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUNkFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbiA9IHYubGVuZ3RoO1xuXG5cdGNvbnN0IHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZUN1YmUoIHZbIGkgXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDJEQXJyYXlBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCB2WyBpIF0gfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXlcblxuZnVuY3Rpb24gZ2V0UHVyZUFycmF5U2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyZkFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2ZBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTNBcnJheTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRBcnJheTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2lBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWlBcnJheTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhkYzc6IHJldHVybiBzZXRWYWx1ZVYzdWlBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGNiOiAvLyBJTlRfU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGQzOiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8zRFxuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDNEQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNkFycmF5O1xuXG5cdFx0Y2FzZSAweDhkYzE6IC8vIFNBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRkNzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjNDogLy8gU0FNUExFUl8yRF9BUlJBWV9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQyREFycmF5QXJyYXk7XG5cblx0fVxuXG59XG5cbi8vIC0tLSBVbmlmb3JtIENsYXNzZXMgLS0tXG5cbmZ1bmN0aW9uIFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblx0dGhpcy5hZGRyID0gYWRkcjtcblx0dGhpcy5jYWNoZSA9IFtdO1xuXHR0aGlzLnNldFZhbHVlID0gZ2V0U2luZ3VsYXJTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxufVxuXG5mdW5jdGlvbiBQdXJlQXJyYXlVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHR0aGlzLmlkID0gaWQ7XG5cdHRoaXMuYWRkciA9IGFkZHI7XG5cdHRoaXMuY2FjaGUgPSBbXTtcblx0dGhpcy5zaXplID0gYWN0aXZlSW5mby5zaXplO1xuXHR0aGlzLnNldFZhbHVlID0gZ2V0UHVyZUFycmF5U2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cbn1cblxuUHVyZUFycmF5VW5pZm9ybS5wcm90b3R5cGUudXBkYXRlQ2FjaGUgPSBmdW5jdGlvbiAoIGRhdGEgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0fVxuXG5cdGNvcHlBcnJheSggY2FjaGUsIGRhdGEgKTtcblxufTtcblxuZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblxuXHR0aGlzLnNlcSA9IFtdO1xuXHR0aGlzLm1hcCA9IHt9O1xuXG59XG5cblN0cnVjdHVyZWRVbmlmb3JtLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBzZXEgPSB0aGlzLnNlcTtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0Y29uc3QgdSA9IHNlcVsgaSBdO1xuXHRcdHUuc2V0VmFsdWUoIGdsLCB2YWx1ZVsgdS5pZCBdLCB0ZXh0dXJlcyApO1xuXG5cdH1cblxufTtcblxuLy8gLS0tIFRvcC1sZXZlbCAtLS1cblxuLy8gUGFyc2VyIC0gYnVpbGRzIHVwIHRoZSBwcm9wZXJ0eSB0cmVlIGZyb20gdGhlIHBhdGggc3RyaW5nc1xuXG5jb25zdCBSZVBhdGhQYXJ0ID0gLyhcXHcrKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdGNvbnN0IHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksXG5cdFx0XHRtYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4O1xuXG5cdFx0bGV0IGlkID0gbWF0Y2hbIDEgXTtcblx0XHRjb25zdCBpZElzSW5kZXggPSBtYXRjaFsgMiBdID09PSAnXScsXG5cdFx0XHRzdWJzY3JpcHQgPSBtYXRjaFsgMyBdO1xuXG5cdFx0aWYgKCBpZElzSW5kZXggKSBpZCA9IGlkIHwgMDsgLy8gY29udmVydCB0byBpbnRlZ2VyXG5cblx0XHRpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHtcblxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxuXG5cdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0bmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOlxuXHRcdFx0XHRuZXcgUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdFxuXG5cdFx0XHRjb25zdCBtYXAgPSBjb250YWluZXIubWFwO1xuXHRcdFx0bGV0IG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICkge1xuXG5cdHRoaXMuc2VxID0gW107XG5cdHRoaXMubWFwID0ge307XG5cblx0Y29uc3QgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE4ICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbjsgKysgaSApIHtcblxuXHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKCBwcm9ncmFtLCBpICksXG5cdFx0XHRhZGRyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCBpbmZvLm5hbWUgKTtcblxuXHRcdHBhcnNlVW5pZm9ybSggaW5mbywgYWRkciwgdGhpcyApO1xuXG5cdH1cblxufVxuXG5XZWJHTFVuaWZvcm1zLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCB1ID0gdGhpcy5tYXBbIG5hbWUgXTtcblxuXHRpZiAoIHUgIT09IHVuZGVmaW5lZCApIHUuc2V0VmFsdWUoIGdsLCB2YWx1ZSwgdGV4dHVyZXMgKTtcblxufTtcblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0Y29uc3QgdiA9IG9iamVjdFsgbmFtZSBdO1xuXG5cdGlmICggdiAhPT0gdW5kZWZpbmVkICkgdGhpcy5zZXRWYWx1ZSggZ2wsIG5hbWUsIHYgKTtcblxufTtcblxuXG4vLyBTdGF0aWMgaW50ZXJmYWNlXG5cbldlYkdMVW5pZm9ybXMudXBsb2FkID0gZnVuY3Rpb24gKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRjb25zdCB1ID0gc2VxWyBpIF0sXG5cdFx0XHR2ID0gdmFsdWVzWyB1LmlkIF07XG5cblx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBub3RlOiBhbHdheXMgdXBkYXRpbmcgd2hlbiAubmVlZHNVcGRhdGUgaXMgdW5kZWZpbmVkXG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdi52YWx1ZSwgdGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbldlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlID0gZnVuY3Rpb24gKCBzZXEsIHZhbHVlcyApIHtcblxuXHRjb25zdCByID0gW107XG5cblx0Zm9yICggbGV0IGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdGNvbnN0IHUgPSBzZXFbIGkgXTtcblx0XHRpZiAoIHUuaWQgaW4gdmFsdWVzICkgci5wdXNoKCB1ICk7XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59O1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRlciggZ2wsIHR5cGUsIHN0cmluZyApIHtcblxuXHRjb25zdCBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoIHR5cGUgKTtcblxuXHRnbC5zaGFkZXJTb3VyY2UoIHNoYWRlciwgc3RyaW5nICk7XG5cdGdsLmNvbXBpbGVTaGFkZXIoIHNoYWRlciApO1xuXG5cdHJldHVybiBzaGFkZXI7XG5cbn1cblxubGV0IHByb2dyYW1JZENvdW50ID0gMDtcblxuZnVuY3Rpb24gYWRkTGluZU51bWJlcnMoIHN0cmluZyApIHtcblxuXHRjb25zdCBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRsaW5lc1sgaSBdID0gKCBpICsgMSApICsgJzogJyArIGxpbmVzWyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBsaW5lcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKSB7XG5cblx0c3dpdGNoICggZW5jb2RpbmcgKSB7XG5cblx0XHRjYXNlIExpbmVhckVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ0xpbmVhcicsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBzUkdCRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnc1JHQicsICcoIHZhbHVlICknIF07XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogVW5zdXBwb3J0ZWQgZW5jb2Rpbmc6JywgZW5jb2RpbmcgKTtcblx0XHRcdHJldHVybiBbICdMaW5lYXInLCAnKCB2YWx1ZSApJyBdO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXRTaGFkZXJFcnJvcnMoIGdsLCBzaGFkZXIsIHR5cGUgKSB7XG5cblx0Y29uc3Qgc3RhdHVzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKCBzaGFkZXIsIDM1NzEzICk7XG5cdGNvbnN0IGVycm9ycyA9IGdsLmdldFNoYWRlckluZm9Mb2coIHNoYWRlciApLnRyaW0oKTtcblxuXHRpZiAoIHN0YXR1cyAmJiBlcnJvcnMgPT09ICcnICkgcmV0dXJuICcnO1xuXG5cdC8vIC0tZW5hYmxlLXByaXZpbGVnZWQtd2ViZ2wtZXh0ZW5zaW9uXG5cdC8vIGNvbnNvbGUubG9nKCAnKionICsgdHlwZSArICcqKicsIGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2RlYnVnX3NoYWRlcnMnICkuZ2V0VHJhbnNsYXRlZFNoYWRlclNvdXJjZSggc2hhZGVyICkgKTtcblxuXHRyZXR1cm4gdHlwZS50b1VwcGVyQ2FzZSgpICsgJ1xcblxcbicgKyBlcnJvcnMgKyAnXFxuXFxuJyArIGFkZExpbmVOdW1iZXJzKCBnbC5nZXRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIGVuY29kaW5nICkge1xuXG5cdGNvbnN0IGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuIExpbmVhclRvJyArIGNvbXBvbmVudHNbIDAgXSArIGNvbXBvbmVudHNbIDEgXSArICc7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0bGV0IHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdPcHRpbWl6ZWRDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDdXN0b21Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDdXN0b20nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCB0b25lTWFwcGluZzonLCB0b25lTWFwcGluZyApO1xuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyggcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXG5cdFx0KCBwYXJhbWV0ZXJzLmV4dGVuc2lvbkRlcml2YXRpdmVzIHx8ICEhIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0IHx8IHBhcmFtZXRlcnMuYnVtcE1hcCB8fCBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCB8fCBwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCB8fCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nIHx8IHBhcmFtZXRlcnMuc2hhZGVySUQgPT09ICdwaHlzaWNhbCcgKSA/ICcjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uRnJhZ0RlcHRoIHx8IHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGggPyAnI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uRHJhd0J1ZmZlcnMgJiYgcGFyYW1ldGVycy5yZW5kZXJlckV4dGVuc2lvbkRyYXdCdWZmZXJzICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZScgOiAnJyxcblx0XHQoIHBhcmFtZXRlcnMuZXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxPRCB8fCBwYXJhbWV0ZXJzLmVudk1hcCB8fCBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiApICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kID8gJyNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZScgOiAnJ1xuXHRdO1xuXG5cdHJldHVybiBjaHVua3MuZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApIHtcblxuXHRjb25zdCBjaHVua3MgPSBbXTtcblxuXHRmb3IgKCBjb25zdCBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHRjb25zdCB2YWx1ZSA9IGRlZmluZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRjaHVua3MucHVzaCggJyNkZWZpbmUgJyArIG5hbWUgKyAnICcgKyB2YWx1ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoIGdsLCBwcm9ncmFtICkge1xuXG5cdGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcblxuXHRjb25zdCBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MjEgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYiggcHJvZ3JhbSwgaSApO1xuXHRcdGNvbnN0IG5hbWUgPSBpbmZvLm5hbWU7XG5cblx0XHRsZXQgbG9jYXRpb25TaXplID0gMTtcblx0XHRpZiAoIGluZm8udHlwZSA9PT0gMzU2NzQgKSBsb2NhdGlvblNpemUgPSAyO1xuXHRcdGlmICggaW5mby50eXBlID09PSAzNTY3NSApIGxvY2F0aW9uU2l6ZSA9IDM7XG5cdFx0aWYgKCBpbmZvLnR5cGUgPT09IDM1Njc2ICkgbG9jYXRpb25TaXplID0gNDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSB7XG5cdFx0XHR0eXBlOiBpbmZvLnR5cGUsXG5cdFx0XHRsb2NhdGlvbjogZ2wuZ2V0QXR0cmliTG9jYXRpb24oIHByb2dyYW0sIG5hbWUgKSxcblx0XHRcdGxvY2F0aW9uU2l6ZTogbG9jYXRpb25TaXplXG5cdFx0fTtcblxuXHR9XG5cblx0cmV0dXJuIGF0dHJpYnV0ZXM7XG5cbn1cblxuZnVuY3Rpb24gZmlsdGVyRW1wdHlMaW5lKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZyAhPT0gJyc7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUxpZ2h0TnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9ESVJfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1JFQ1RfQVJFQV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9DTElQUElOR19QTEFORVMvZywgcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApXG5cdFx0LnJlcGxhY2UoIC9VTklPTl9DTElQUElOR19QTEFORVMvZywgKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIC0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICkgKTtcblxufVxuXG4vLyBSZXNvbHZlIEluY2x1ZGVzXG5cbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBpbmNsdWRlUGF0dGVybiwgaW5jbHVkZVJlcGxhY2VyICk7XG5cbn1cblxuZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRjb25zdCBzdHJpbmcgPSBTaGFkZXJDaHVua1sgaW5jbHVkZSBdO1xuXG5cdGlmICggc3RyaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0fVxuXG5cdHJldHVybiByZXNvbHZlSW5jbHVkZXMoIHN0cmluZyApO1xuXG59XG5cbi8vIFVucm9sbCBMb29wc1xuXG5jb25zdCBkZXByZWNhdGVkVW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcFtcXHNdKz9mb3IgXFwoIGludCBpIFxcPSAoXFxkKylcXDsgaSA8IChcXGQrKVxcOyBpIFxcK1xcKyBcXCkgXFx7KFtcXHNcXFNdKz8pKD89XFx9KVxcfS9nO1xuY29uc3QgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxccytmb3JcXHMqXFwoXFxzKmludFxccytpXFxzKj1cXHMqKFxcZCspXFxzKjtcXHMqaVxccyo8XFxzKihcXGQrKVxccyo7XFxzKmlcXHMqXFwrXFwrXFxzKlxcKVxccyp7KFtcXHNcXFNdKz8pfVxccysjcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nO1xuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApXG5cdFx0LnJlcGxhY2UoIGRlcHJlY2F0ZWRVbnJvbGxMb29wUGF0dGVybiwgZGVwcmVjYXRlZExvb3BSZXBsYWNlciApO1xuXG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWRMb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1dlYkdMUHJvZ3JhbTogI3ByYWdtYSB1bnJvbGxfbG9vcCBzaGFkZXIgc3ludGF4IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydCBzeW50YXggaW5zdGVhZC4nICk7XG5cdHJldHVybiBsb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICk7XG5cbn1cblxuZnVuY3Rpb24gbG9vcFJlcGxhY2VyKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRsZXQgc3RyaW5nID0gJyc7XG5cblx0Zm9yICggbGV0IGkgPSBwYXJzZUludCggc3RhcnQgKTsgaSA8IHBhcnNlSW50KCBlbmQgKTsgaSArKyApIHtcblxuXHRcdHN0cmluZyArPSBzbmlwcGV0XG5cdFx0XHQucmVwbGFjZSggL1xcW1xccyppXFxzKlxcXS9nLCAnWyAnICsgaSArICcgXScgKVxuXHRcdFx0LnJlcGxhY2UoIC9VTlJPTExFRF9MT09QX0lOREVYL2csIGkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgcHJlY2lzaW9uc3RyaW5nID0gJ3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGZsb2F0O1xcbnByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGludDsnO1xuXG5cdGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdoaWdocCcgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gJ1xcbiNkZWZpbmUgSElHSF9QUkVDSVNJT04nO1xuXG5cdH0gZWxzZSBpZiAoIHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gJ1xcbiNkZWZpbmUgTUVESVVNX1BSRUNJU0lPTic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdsb3dwJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBMT1dfUFJFQ0lTSU9OJztcblxuXHR9XG5cblx0cmV0dXJuIHByZWNpc2lvbnN0cmluZztcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfQkFTSUMnO1xuXG5cdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1ZTTSc7XG5cblx0fVxuXG5cdHJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRV9VVic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwVHlwZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGTEVDVElPTic7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApIHtcblxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOlxuXG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwTW9kZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc3QgaW1hZ2VIZWlnaHQgPSBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVVkhlaWdodDtcblxuXHRpZiAoIGltYWdlSGVpZ2h0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgbWF4TWlwID0gTWF0aC5sb2cyKCBpbWFnZUhlaWdodCAvIDMyICsgMSApICsgMztcblxuXHRjb25zdCB0ZXhlbEhlaWdodCA9IDEuMCAvIGltYWdlSGVpZ2h0O1xuXG5cdGNvbnN0IHRleGVsV2lkdGggPSAxLjAgLyAoIDMgKiBNYXRoLm1heCggTWF0aC5wb3coIDIsIG1heE1pcCApLCA3ICogMTYgKSApO1xuXG5cdHJldHVybiB7IHRleGVsV2lkdGgsIHRleGVsSGVpZ2h0LCBtYXhNaXAgfTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApIHtcblxuXHQvLyBUT0RPIFNlbmQgdGhpcyBldmVudCB0byBUaHJlZS5qcyBEZXZUb29sc1xuXHQvLyBjb25zb2xlLmxvZyggJ1dlYkdMUHJvZ3JhbScsIGNhY2hlS2V5ICk7XG5cblx0Y29uc3QgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG5cblx0Y29uc3QgZGVmaW5lcyA9IHBhcmFtZXRlcnMuZGVmaW5lcztcblxuXHRsZXQgdmVydGV4U2hhZGVyID0gcGFyYW1ldGVycy52ZXJ0ZXhTaGFkZXI7XG5cdGxldCBmcmFnbWVudFNoYWRlciA9IHBhcmFtZXRlcnMuZnJhZ21lbnRTaGFkZXI7XG5cblx0Y29uc3Qgc2hhZG93TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcE1vZGVEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcEN1YmVVVlNpemUgPSBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKTtcblxuXHRjb25zdCBjdXN0b21FeHRlbnNpb25zID0gcGFyYW1ldGVycy5pc1dlYkdMMiA/ICcnIDogZ2VuZXJhdGVFeHRlbnNpb25zKCBwYXJhbWV0ZXJzICk7XG5cblx0Y29uc3QgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0bGV0IHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cdGxldCB2ZXJzaW9uU3RyaW5nID0gcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA/ICcjdmVyc2lvbiAnICsgcGFyYW1ldGVycy5nbHNsVmVyc2lvbiArICdcXG4nIDogJyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGN1c3RvbURlZmluZXNcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdFx0aWYgKCBwcmVmaXhWZXJ0ZXgubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4VmVydGV4ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cblx0XHRcdGN1c3RvbUV4dGVuc2lvbnMsXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4RnJhZ21lbnQubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4RnJhZ21lbnQgKz0gJ1xcbic7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0cGFyYW1ldGVycy5pbnN0YW5jaW5nID8gJyNkZWZpbmUgVVNFX0lOU1RBTkNJTkcnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvciA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HX0NPTE9SJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgPyAnI2RlZmluZSBWRVJURVhfVEVYVFVSRVMnIDogJycsXG5cblx0XHRcdCcjZGVmaW5lIE1BWF9CT05FUyAnICsgcGFyYW1ldGVycy5tYXhCb25lcyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubWFwID8gJyNkZWZpbmUgVVNFX01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcE1vZGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLm9iamVjdFNwYWNlTm9ybWFsTWFwICkgPyAnI2RlZmluZSBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMudGFuZ2VudFNwYWNlTm9ybWFsTWFwICkgPyAnI2RlZmluZSBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgJiYgcGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJJTlRFTlNJVFlNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJDT0xPUk1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcCA/ICcjZGVmaW5lIFVTRV9BTFBIQU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb24gPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb25NYXAgPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50aGlja25lc3NNYXAgPyAnI2RlZmluZSBVU0VfVEhJQ0tORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5DT0xPUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5ST1VHSE5FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhBbHBoYXMgPyAnI2RlZmluZSBVU0VfQ09MT1JfQUxQSEEnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2cyA/ICcjZGVmaW5lIFVTRV9VVicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXZzVmVydGV4T25seSA/ICcjZGVmaW5lIFVWU19WRVJURVhfT05MWScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNraW5uaW5nID8gJyNkZWZpbmUgVVNFX1NLSU5OSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51c2VWZXJ0ZXhUZXh0dXJlID8gJyNkZWZpbmUgQk9ORV9URVhUVVJFJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA/ICcjZGVmaW5lIFVTRV9NT1JQSFRBUkdFVFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9NT1JQSE5PUk1BTFMnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhDb2xvcnMgJiYgcGFyYW1ldGVycy5pc1dlYkdMMiApID8gJyNkZWZpbmUgVVNFX01PUlBIQ09MT1JTJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ID4gMCAmJiBwYXJhbWV0ZXJzLmlzV2ViR0wyICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfVEVYVFVSRScgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCA+IDAgJiYgcGFyYW1ldGVycy5pc1dlYkdMMiApID8gJyNkZWZpbmUgTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICcgKyBwYXJhbWV0ZXJzLm1vcnBoVGV4dHVyZVN0cmlkZSA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ID4gMCAmJiBwYXJhbWV0ZXJzLmlzV2ViR0wyICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfQ09VTlQgJyArIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNpemVBdHRlbnVhdGlvbiA/ICcjZGVmaW5lIFVTRV9TSVpFQVRURU5VQVRJT04nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGggKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lORycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSBtYXQ0IGluc3RhbmNlTWF0cml4OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9JTlNUQU5DSU5HX0NPTE9SJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgaW5zdGFuY2VDb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVEFOR0VOVCcsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBjb2xvcjsnLFxuXG5cdFx0XHQnI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICknLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZiAoIGRlZmluZWQoIFVTRV9NT1JQSFRBUkdFVFMgKSAmJiAhIGRlZmluZWQoIE1PUlBIVEFSR0VUU19URVhUVVJFICkgKScsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MDsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQxOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDI7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MzsnLFxuXG5cdFx0XHQnXHQjaWZkZWYgVVNFX01PUlBITk9STUFMUycsXG5cblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwwOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMTsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDI7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwzOycsXG5cblx0XHRcdCdcdCNlbHNlJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDQ7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDc7JyxcblxuXHRcdFx0J1x0I2VuZGlmJyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1NLSU5OSU5HJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgc2tpbkluZGV4OycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnXFxuJ1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRwcmVmaXhGcmFnbWVudCA9IFtcblxuXHRcdFx0Y3VzdG9tRXh0ZW5zaW9ucyxcblxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAyICkgPyAnI2RlZmluZSBGT0dfRVhQMicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXRjYXAgPyAnI2RlZmluZSBVU0VfTUFUQ0FQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwVHlwZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwQmxlbmRpbmdEZWZpbmUgOiAnJyxcblx0XHRcdGVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfVEVYRUxfV0lEVEggJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxXaWR0aCA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9URVhFTF9IRUlHSFQgJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxIZWlnaHQgOiAnJyxcblx0XHRcdGVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfTUFYX01JUCAnICsgZW52TWFwQ3ViZVVWU2l6ZS5tYXhNaXAgKyAnLjAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgVEFOR0VOVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXQgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSSU5URU5TSVRZTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIFVTRV9BTFBIQVRFU1QnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hlZW4gPyAnI2RlZmluZSBVU0VfU0hFRU4nIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5DT0xPUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5ST1VHSE5FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwID8gJyNkZWZpbmUgVVNFX1RSQU5TTUlTU0lPTk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudGhpY2tuZXNzTWFwID8gJyNkZWZpbmUgVVNFX1RISUNLTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kZWNvZGVWaWRlb1RleHR1cmUgPyAnI2RlZmluZSBERUNPREVfVklERU9fVEVYVFVSRScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhUYW5nZW50cyA/ICcjZGVmaW5lIFVTRV9UQU5HRU5UJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgfHwgcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleEFscGhhcyA/ICcjZGVmaW5lIFVTRV9DT0xPUl9BTFBIQScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXZzID8gJyNkZWZpbmUgVVNFX1VWJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51dnNWZXJ0ZXhPbmx5ID8gJyNkZWZpbmUgVVZTX1ZFUlRFWF9PTkxZJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmdyYWRpZW50TWFwID8gJyNkZWZpbmUgVVNFX0dSQURJRU5UTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID8gJyNkZWZpbmUgRkxBVF9TSEFERUQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA/ICcjZGVmaW5lIFBSRU1VTFRJUExJRURfQUxQSEEnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPyAnI2RlZmluZSBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uRnJhZ0RlcHRoICkgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyAnI2RlZmluZSBUT05FX01BUFBJTkcnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IFNoYWRlckNodW5rWyAndG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCAndG9uZU1hcHBpbmcnLCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm9wYXF1ZSA/ICcjZGVmaW5lIE9QQVFVRScgOiAnJyxcblxuXHRcdFx0U2hhZGVyQ2h1bmtbICdlbmNvZGluZ3NfcGFyc19mcmFnbWVudCcgXSwgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB2YXJpb3VzIGVuY29kaW5nL2RlY29kaW5nIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggJ2xpbmVhclRvT3V0cHV0VGV4ZWwnLCBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nICksXG5cblx0XHRcdHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgOiAnJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHR2ZXJ0ZXhTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApO1xuXHR2ZXJ0ZXhTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHRmcmFnbWVudFNoYWRlciA9IHJlc29sdmVJbmNsdWRlcyggZnJhZ21lbnRTaGFkZXIgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApO1xuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHR2ZXJ0ZXhTaGFkZXIgPSB1bnJvbGxMb29wcyggdmVydGV4U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gdW5yb2xsTG9vcHMoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzV2ViR0wyICYmIHBhcmFtZXRlcnMuaXNSYXdTaGFkZXJNYXRlcmlhbCAhPT0gdHJ1ZSApIHtcblxuXHRcdC8vIEdMU0wgMy4wIGNvbnZlcnNpb24gZm9yIGJ1aWx0LWluIG1hdGVyaWFscyBhbmQgU2hhZGVyTWF0ZXJpYWxcblxuXHRcdHZlcnNpb25TdHJpbmcgPSAnI3ZlcnNpb24gMzAwIGVzXFxuJztcblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblx0XHRcdCdwcmVjaXNpb24gbWVkaXVtcCBzYW1wbGVyMkRBcnJheTsnLFxuXHRcdFx0JyNkZWZpbmUgYXR0cmlidXRlIGluJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgb3V0Jyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4VmVydGV4O1xuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIGluJyxcblx0XHRcdCggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJ2xheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjsnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLmdsc2xWZXJzaW9uID09PSBHTFNMMyApID8gJycgOiAnI2RlZmluZSBnbF9GcmFnQ29sb3IgcGNfZnJhZ0NvbG9yJyxcblx0XHRcdCcjZGVmaW5lIGdsX0ZyYWdEZXB0aEVYVCBnbF9GcmFnRGVwdGgnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmUgdGV4dHVyZScsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qIHRleHR1cmVQcm9qJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRExvZEVYVCB0ZXh0dXJlTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2pMb2RFWFQgdGV4dHVyZVByb2pMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRHcmFkRVhUIHRleHR1cmVHcmFkJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2pHcmFkRVhUIHRleHR1cmVQcm9qR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZUdyYWRFWFQgdGV4dHVyZUdyYWQnXG5cdFx0XS5qb2luKCAnXFxuJyApICsgJ1xcbicgKyBwcmVmaXhGcmFnbWVudDtcblxuXHR9XG5cblx0Y29uc3QgdmVydGV4R2xzbCA9IHZlcnNpb25TdHJpbmcgKyBwcmVmaXhWZXJ0ZXggKyB2ZXJ0ZXhTaGFkZXI7XG5cdGNvbnN0IGZyYWdtZW50R2xzbCA9IHZlcnNpb25TdHJpbmcgKyBwcmVmaXhGcmFnbWVudCArIGZyYWdtZW50U2hhZGVyO1xuXG5cdC8vIGNvbnNvbGUubG9nKCAnKlZFUlRFWConLCB2ZXJ0ZXhHbHNsICk7XG5cdC8vIGNvbnNvbGUubG9nKCAnKkZSQUdNRU5UKicsIGZyYWdtZW50R2xzbCApO1xuXG5cdGNvbnN0IGdsVmVydGV4U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMywgdmVydGV4R2xzbCApO1xuXHRjb25zdCBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMiwgZnJhZ21lbnRHbHNsICk7XG5cblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBGb3JjZSBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIHRvIGluZGV4IDAuXG5cblx0aWYgKCBwYXJhbWV0ZXJzLmluZGV4MEF0dHJpYnV0ZU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICk7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHQvLyBwcm9ncmFtcyB3aXRoIG1vcnBoVGFyZ2V0cyBkaXNwbGFjZSBwb3NpdGlvbiBvdXQgb2YgYXR0cmlidXRlIDBcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTtcblxuXHR9XG5cblx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHQvLyBjaGVjayBmb3IgbGluayBlcnJvcnNcblx0aWYgKCByZW5kZXJlci5kZWJ1Zy5jaGVja1NoYWRlckVycm9ycyApIHtcblxuXHRcdGNvbnN0IHByb2dyYW1Mb2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyggcHJvZ3JhbSApLnRyaW0oKTtcblx0XHRjb25zdCB2ZXJ0ZXhMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbFZlcnRleFNoYWRlciApLnRyaW0oKTtcblx0XHRjb25zdCBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsRnJhZ21lbnRTaGFkZXIgKS50cmltKCk7XG5cblx0XHRsZXQgcnVubmFibGUgPSB0cnVlO1xuXHRcdGxldCBoYXZlRGlhZ25vc3RpY3MgPSB0cnVlO1xuXG5cdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcxNCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0cnVubmFibGUgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgdmVydGV4RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xWZXJ0ZXhTaGFkZXIsICd2ZXJ0ZXgnICk7XG5cdFx0XHRjb25zdCBmcmFnbWVudEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsRnJhZ21lbnRTaGFkZXIsICdmcmFnbWVudCcgKTtcblxuXHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0J1RIUkVFLldlYkdMUHJvZ3JhbTogU2hhZGVyIEVycm9yICcgKyBnbC5nZXRFcnJvcigpICsgJyAtICcgK1xuXHRcdFx0XHQnVkFMSURBVEVfU1RBVFVTICcgKyBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcxNSApICsgJ1xcblxcbicgK1xuXHRcdFx0XHQnUHJvZ3JhbSBJbmZvIExvZzogJyArIHByb2dyYW1Mb2cgKyAnXFxuJyArXG5cdFx0XHRcdHZlcnRleEVycm9ycyArICdcXG4nICtcblx0XHRcdFx0ZnJhZ21lbnRFcnJvcnNcblx0XHRcdCk7XG5cblx0XHR9IGVsc2UgaWYgKCBwcm9ncmFtTG9nICE9PSAnJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBQcm9ncmFtIEluZm8gTG9nOicsIHByb2dyYW1Mb2cgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0XHRoYXZlRGlhZ25vc3RpY3MgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0XHR0aGlzLmRpYWdub3N0aWNzID0ge1xuXG5cdFx0XHRcdHJ1bm5hYmxlOiBydW5uYWJsZSxcblxuXHRcdFx0XHRwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLFxuXG5cdFx0XHRcdHZlcnRleFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0bG9nOiB2ZXJ0ZXhMb2csXG5cdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhWZXJ0ZXhcblxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGZyYWdtZW50U2hhZGVyOiB7XG5cblx0XHRcdFx0XHRsb2c6IGZyYWdtZW50TG9nLFxuXHRcdFx0XHRcdHByZWZpeDogcHJlZml4RnJhZ21lbnRcblxuXHRcdFx0XHR9XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIENsZWFuIHVwXG5cblx0Ly8gQ3Jhc2hlcyBpbiBpT1M5IGFuZCBpT1MxMC4gIzE4NDAyXG5cdC8vIGdsLmRldGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Ly8gZ2wuZGV0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Z2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5kZWxldGVTaGFkZXIoIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnNcblxuXHRsZXQgY2FjaGVkVW5pZm9ybXM7XG5cblx0dGhpcy5nZXRVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkVW5pZm9ybXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWRVbmlmb3JtcztcblxuXHR9O1xuXG5cdC8vIHNldCB1cCBjYWNoaW5nIGZvciBhdHRyaWJ1dGUgbG9jYXRpb25zXG5cblx0bGV0IGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0dGhpcy5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWRBdHRyaWJ1dGVzO1xuXG5cdH07XG5cblx0Ly8gZnJlZSByZXNvdXJjZVxuXG5cdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJpbmRpbmdTdGF0ZXMucmVsZWFzZVN0YXRlc09mUHJvZ3JhbSggdGhpcyApO1xuXG5cdFx0Z2wuZGVsZXRlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXHRcdHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy5uYW1lID0gcGFyYW1ldGVycy5zaGFkZXJOYW1lO1xuXHR0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQgKys7XG5cdHRoaXMuY2FjaGVLZXkgPSBjYWNoZUtleTtcblx0dGhpcy51c2VkVGltZXMgPSAxO1xuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IGdsVmVydGV4U2hhZGVyO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZ2xGcmFnbWVudFNoYWRlcjtcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5sZXQgX2lkID0gMDtcblxuY2xhc3MgV2ViR0xTaGFkZXJDYWNoZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLnNoYWRlckNhY2hlID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMubWF0ZXJpYWxDYWNoZSA9IG5ldyBNYXAoKTtcblxuXHR9XG5cblx0dXBkYXRlKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IHZlcnRleFNoYWRlciA9IG1hdGVyaWFsLnZlcnRleFNoYWRlcjtcblx0XHRjb25zdCBmcmFnbWVudFNoYWRlciA9IG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyU3RhZ2UgPSB0aGlzLl9nZXRTaGFkZXJTdGFnZSggdmVydGV4U2hhZGVyICk7XG5cdFx0Y29uc3QgZnJhZ21lbnRTaGFkZXJTdGFnZSA9IHRoaXMuX2dldFNoYWRlclN0YWdlKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxTaGFkZXJzID0gdGhpcy5fZ2V0U2hhZGVyQ2FjaGVGb3JNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggbWF0ZXJpYWxTaGFkZXJzLmhhcyggdmVydGV4U2hhZGVyU3RhZ2UgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdG1hdGVyaWFsU2hhZGVycy5hZGQoIHZlcnRleFNoYWRlclN0YWdlICk7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXJTdGFnZS51c2VkVGltZXMgKys7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsU2hhZGVycy5oYXMoIGZyYWdtZW50U2hhZGVyU3RhZ2UgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdG1hdGVyaWFsU2hhZGVycy5hZGQoIGZyYWdtZW50U2hhZGVyU3RhZ2UgKTtcblx0XHRcdGZyYWdtZW50U2hhZGVyU3RhZ2UudXNlZFRpbWVzICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJlbW92ZSggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbFNoYWRlcnMgPSB0aGlzLm1hdGVyaWFsQ2FjaGUuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdFx0Zm9yICggY29uc3Qgc2hhZGVyU3RhZ2Ugb2YgbWF0ZXJpYWxTaGFkZXJzICkge1xuXG5cdFx0XHRzaGFkZXJTdGFnZS51c2VkVGltZXMgLS07XG5cblx0XHRcdGlmICggc2hhZGVyU3RhZ2UudXNlZFRpbWVzID09PSAwICkgdGhpcy5zaGFkZXJDYWNoZS5kZWxldGUoIHNoYWRlclN0YWdlICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUuZGVsZXRlKCBtYXRlcmlhbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFZlcnRleFNoYWRlcklEKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZXRTaGFkZXJTdGFnZSggbWF0ZXJpYWwudmVydGV4U2hhZGVyICkuaWQ7XG5cblx0fVxuXG5cdGdldEZyYWdtZW50U2hhZGVySUQoIG1hdGVyaWFsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2dldFNoYWRlclN0YWdlKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApLmlkO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkZXJDYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMubWF0ZXJpYWxDYWNoZS5jbGVhcigpO1xuXG5cdH1cblxuXHRfZ2V0U2hhZGVyQ2FjaGVGb3JNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMubWF0ZXJpYWxDYWNoZTtcblxuXHRcdGlmICggY2FjaGUuaGFzKCBtYXRlcmlhbCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y2FjaGUuc2V0KCBtYXRlcmlhbCwgbmV3IFNldCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGUuZ2V0KCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHRfZ2V0U2hhZGVyU3RhZ2UoIGNvZGUgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuc2hhZGVyQ2FjaGU7XG5cblx0XHRpZiAoIGNhY2hlLmhhcyggY29kZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc3Qgc3RhZ2UgPSBuZXcgV2ViR0xTaGFkZXJTdGFnZSgpO1xuXHRcdFx0Y2FjaGUuc2V0KCBjb2RlLCBzdGFnZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlLmdldCggY29kZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBXZWJHTFNoYWRlclN0YWdlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuaWQgPSBfaWQgKys7XG5cblx0XHR0aGlzLnVzZWRUaW1lcyA9IDA7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbXMoIHJlbmRlcmVyLCBjdWJlbWFwcywgY3ViZXV2bWFwcywgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBiaW5kaW5nU3RhdGVzLCBjbGlwcGluZyApIHtcblxuXHRjb25zdCBfcHJvZ3JhbUxheWVycyA9IG5ldyBMYXllcnMoKTtcblx0Y29uc3QgX2N1c3RvbVNoYWRlcnMgPSBuZXcgV2ViR0xTaGFkZXJDYWNoZSgpO1xuXHRjb25zdCBwcm9ncmFtcyA9IFtdO1xuXG5cdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXHRjb25zdCBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI7XG5cdGNvbnN0IGZsb2F0VmVydGV4VGV4dHVyZXMgPSBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcztcblx0Y29uc3QgbWF4VmVydGV4VW5pZm9ybXMgPSBjYXBhYmlsaXRpZXMubWF4VmVydGV4VW5pZm9ybXM7XG5cdGNvbnN0IHZlcnRleFRleHR1cmVzID0gY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXHRsZXQgcHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLnByZWNpc2lvbjtcblxuXHRjb25zdCBzaGFkZXJJRHMgPSB7XG5cdFx0TWVzaERlcHRoTWF0ZXJpYWw6ICdkZXB0aCcsXG5cdFx0TWVzaERpc3RhbmNlTWF0ZXJpYWw6ICdkaXN0YW5jZVJHQkEnLFxuXHRcdE1lc2hOb3JtYWxNYXRlcmlhbDogJ25vcm1hbCcsXG5cdFx0TWVzaEJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TWVzaExhbWJlcnRNYXRlcmlhbDogJ2xhbWJlcnQnLFxuXHRcdE1lc2hQaG9uZ01hdGVyaWFsOiAncGhvbmcnLFxuXHRcdE1lc2hUb29uTWF0ZXJpYWw6ICd0b29uJyxcblx0XHRNZXNoU3RhbmRhcmRNYXRlcmlhbDogJ3BoeXNpY2FsJyxcblx0XHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogJ3BoeXNpY2FsJyxcblx0XHRNZXNoTWF0Y2FwTWF0ZXJpYWw6ICdtYXRjYXAnLFxuXHRcdExpbmVCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxuXHRcdExpbmVEYXNoZWRNYXRlcmlhbDogJ2Rhc2hlZCcsXG5cdFx0UG9pbnRzTWF0ZXJpYWw6ICdwb2ludHMnLFxuXHRcdFNoYWRvd01hdGVyaWFsOiAnc2hhZG93Jyxcblx0XHRTcHJpdGVNYXRlcmlhbDogJ3Nwcml0ZSdcblx0fTtcblxuXHRmdW5jdGlvbiBnZXRNYXhCb25lcyggb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cdFx0Y29uc3QgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcblxuXHRcdGlmICggZmxvYXRWZXJ0ZXhUZXh0dXJlcyApIHtcblxuXHRcdFx0cmV0dXJuIDEwMjQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBkZWZhdWx0IGZvciB3aGVuIG9iamVjdCBpcyBub3Qgc3BlY2lmaWVkXG5cdFx0XHQvLyAoIGZvciBleGFtcGxlIHdoZW4gcHJlYnVpbGRpbmcgc2hhZGVyIHRvIGJlIHVzZWQgd2l0aCBtdWx0aXBsZSBvYmplY3RzIClcblx0XHRcdC8vXG5cdFx0XHQvLyAgLSBsZWF2ZSBzb21lIGV4dHJhIHNwYWNlIGZvciBvdGhlciB1bmlmb3Jtc1xuXHRcdFx0Ly8gIC0gbGltaXQgaGVyZSBpcyBBTkdMRSdzIDI1NCBtYXggdW5pZm9ybSB2ZWN0b3JzXG5cdFx0XHQvLyAgICAodXAgdG8gNTQgc2hvdWxkIGJlIHNhZmUpXG5cblx0XHRcdGNvbnN0IG5WZXJ0ZXhVbmlmb3JtcyA9IG1heFZlcnRleFVuaWZvcm1zO1xuXHRcdFx0Y29uc3QgblZlcnRleE1hdHJpY2VzID0gTWF0aC5mbG9vciggKCBuVmVydGV4VW5pZm9ybXMgLSAyMCApIC8gNCApO1xuXG5cdFx0XHRjb25zdCBtYXhCb25lcyA9IE1hdGgubWluKCBuVmVydGV4TWF0cmljZXMsIGJvbmVzLmxlbmd0aCApO1xuXG5cdFx0XHRpZiAoIG1heEJvbmVzIDwgYm9uZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFNrZWxldG9uIGhhcyAnICsgYm9uZXMubGVuZ3RoICsgJyBib25lcy4gVGhpcyBHUFUgc3VwcG9ydHMgJyArIG1heEJvbmVzICsgJy4nICk7XG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXhCb25lcztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UGFyYW1ldGVycyggbWF0ZXJpYWwsIGxpZ2h0cywgc2hhZG93cywgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHRjb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cblx0XHRjb25zdCBlbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBlbnZpcm9ubWVudCApO1xuXHRcdGNvbnN0IGVudk1hcEN1YmVVVkhlaWdodCA9ICggISEgZW52TWFwICkgJiYgKCAoIGVudk1hcC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApIHx8ICggZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nICkgKSA/IGVudk1hcC5pbWFnZS5oZWlnaHQgOiBudWxsO1xuXG5cdFx0Y29uc3Qgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblxuXHRcdC8vIGhldXJpc3RpY3MgdG8gY3JlYXRlIHNoYWRlciBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0Ly8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldClcblxuXHRcdGNvbnN0IG1heEJvbmVzID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggPyBnZXRNYXhCb25lcyggb2JqZWN0ICkgOiAwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5wcmVjaXNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5nZXRNYXhQcmVjaXNpb24oIG1hdGVyaWFsLnByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbS5nZXRQYXJhbWV0ZXJzOicsIG1hdGVyaWFsLnByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgcHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvcjtcblx0XHRjb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDtcblxuXHRcdGxldCBtb3JwaFRleHR1cmVTdHJpZGUgPSAwO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG1vcnBoVGV4dHVyZVN0cmlkZSA9IDE7XG5cdFx0aWYgKCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAyO1xuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAzO1xuXG5cdFx0Ly9cblxuXHRcdGxldCB2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyO1xuXHRcdGxldCBjdXN0b21WZXJ0ZXhTaGFkZXJJRCwgY3VzdG9tRnJhZ21lbnRTaGFkZXJJRDtcblxuXHRcdGlmICggc2hhZGVySUQgKSB7XG5cblx0XHRcdGNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gc2hhZGVyLnZlcnRleFNoYWRlcjtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXIgPSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjtcblxuXHRcdFx0X2N1c3RvbVNoYWRlcnMudXBkYXRlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRjdXN0b21WZXJ0ZXhTaGFkZXJJRCA9IF9jdXN0b21TaGFkZXJzLmdldFZlcnRleFNoYWRlcklEKCBtYXRlcmlhbCApO1xuXHRcdFx0Y3VzdG9tRnJhZ21lbnRTaGFkZXJJRCA9IF9jdXN0b21TaGFkZXJzLmdldEZyYWdtZW50U2hhZGVySUQoIG1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRjb25zdCB1c2VBbHBoYVRlc3QgPSBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwO1xuXHRcdGNvbnN0IHVzZUNsZWFyY29hdCA9IG1hdGVyaWFsLmNsZWFyY29hdCA+IDA7XG5cblx0XHRjb25zdCBwYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHRpc1dlYkdMMjogaXNXZWJHTDIsXG5cblx0XHRcdHNoYWRlcklEOiBzaGFkZXJJRCxcblx0XHRcdHNoYWRlck5hbWU6IG1hdGVyaWFsLnR5cGUsXG5cblx0XHRcdHZlcnRleFNoYWRlcjogdmVydGV4U2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGZyYWdtZW50U2hhZGVyLFxuXHRcdFx0ZGVmaW5lczogbWF0ZXJpYWwuZGVmaW5lcyxcblxuXHRcdFx0Y3VzdG9tVmVydGV4U2hhZGVySUQ6IGN1c3RvbVZlcnRleFNoYWRlcklELFxuXHRcdFx0Y3VzdG9tRnJhZ21lbnRTaGFkZXJJRDogY3VzdG9tRnJhZ21lbnRTaGFkZXJJRCxcblxuXHRcdFx0aXNSYXdTaGFkZXJNYXRlcmlhbDogbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCA9PT0gdHJ1ZSxcblx0XHRcdGdsc2xWZXJzaW9uOiBtYXRlcmlhbC5nbHNsVmVyc2lvbixcblxuXHRcdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cblx0XHRcdGluc3RhbmNpbmc6IG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUsXG5cdFx0XHRpbnN0YW5jaW5nQ29sb3I6IG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgIT09IG51bGwsXG5cblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXHRcdFx0b3V0cHV0RW5jb2Rpbmc6ICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApID8gcmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgOiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSA/IGN1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5lbmNvZGluZyA6IExpbmVhckVuY29kaW5nICksXG5cdFx0XHRtYXA6ICEhIG1hdGVyaWFsLm1hcCxcblx0XHRcdG1hdGNhcDogISEgbWF0ZXJpYWwubWF0Y2FwLFxuXHRcdFx0ZW52TWFwOiAhISBlbnZNYXAsXG5cdFx0XHRlbnZNYXBNb2RlOiBlbnZNYXAgJiYgZW52TWFwLm1hcHBpbmcsXG5cdFx0XHRlbnZNYXBDdWJlVVZIZWlnaHQ6IGVudk1hcEN1YmVVVkhlaWdodCxcblx0XHRcdGxpZ2h0TWFwOiAhISBtYXRlcmlhbC5saWdodE1hcCxcblx0XHRcdGFvTWFwOiAhISBtYXRlcmlhbC5hb01hcCxcblx0XHRcdGVtaXNzaXZlTWFwOiAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcCxcblx0XHRcdGJ1bXBNYXA6ICEhIG1hdGVyaWFsLmJ1bXBNYXAsXG5cdFx0XHRub3JtYWxNYXA6ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCxcblx0XHRcdG9iamVjdFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBPYmplY3RTcGFjZU5vcm1hbE1hcCxcblx0XHRcdHRhbmdlbnRTcGFjZU5vcm1hbE1hcDogbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuXG5cdFx0XHRkZWNvZGVWaWRlb1RleHR1cmU6ICEhIG1hdGVyaWFsLm1hcCAmJiAoIG1hdGVyaWFsLm1hcC5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApICYmICggbWF0ZXJpYWwubWFwLmVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSxcblxuXHRcdFx0Y2xlYXJjb2F0OiB1c2VDbGVhcmNvYXQsXG5cdFx0XHRjbGVhcmNvYXRNYXA6IHVzZUNsZWFyY29hdCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXRNYXAsXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXA6IHVzZUNsZWFyY29hdCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAsXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXA6IHVzZUNsZWFyY29hdCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAsXG5cblx0XHRcdGRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXHRcdFx0cm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsXG5cdFx0XHRtZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCxcblx0XHRcdHNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5TWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCxcblx0XHRcdHNwZWN1bGFyQ29sb3JNYXA6ICEhIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAsXG5cblx0XHRcdG9wYXF1ZTogbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlICYmIG1hdGVyaWFsLmJsZW5kaW5nID09PSBOb3JtYWxCbGVuZGluZyxcblxuXHRcdFx0YWxwaGFNYXA6ICEhIG1hdGVyaWFsLmFscGhhTWFwLFxuXHRcdFx0YWxwaGFUZXN0OiB1c2VBbHBoYVRlc3QsXG5cblx0XHRcdGdyYWRpZW50TWFwOiAhISBtYXRlcmlhbC5ncmFkaWVudE1hcCxcblxuXHRcdFx0c2hlZW46IG1hdGVyaWFsLnNoZWVuID4gMCxcblx0XHRcdHNoZWVuQ29sb3JNYXA6ICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAsXG5cdFx0XHRzaGVlblJvdWdobmVzc01hcDogISEgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAsXG5cblx0XHRcdHRyYW5zbWlzc2lvbjogbWF0ZXJpYWwudHJhbnNtaXNzaW9uID4gMCxcblx0XHRcdHRyYW5zbWlzc2lvbk1hcDogISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLFxuXHRcdFx0dGhpY2tuZXNzTWFwOiAhISBtYXRlcmlhbC50aGlja25lc3NNYXAsXG5cblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXG5cblx0XHRcdHZlcnRleFRhbmdlbnRzOiAoICEhIG1hdGVyaWFsLm5vcm1hbE1hcCAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgKSxcblx0XHRcdHZlcnRleENvbG9yczogbWF0ZXJpYWwudmVydGV4Q29sb3JzLFxuXHRcdFx0dmVydGV4QWxwaGFzOiBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPT09IHRydWUgJiYgISEgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLml0ZW1TaXplID09PSA0LFxuXHRcdFx0dmVydGV4VXZzOiAhISBtYXRlcmlhbC5tYXAgfHwgISEgbWF0ZXJpYWwuYnVtcE1hcCB8fCAhISBtYXRlcmlhbC5ub3JtYWxNYXAgfHwgISEgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgfHwgISEgbWF0ZXJpYWwuYWxwaGFNYXAgfHwgISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgfHwgISEgbWF0ZXJpYWwucm91Z2huZXNzTWFwIHx8ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgfHwgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwIHx8ICEhIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCB8fCAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgfHwgISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwIHx8ICEhIG1hdGVyaWFsLnRoaWNrbmVzc01hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwIHx8ICEhIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgfHwgISEgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXAsXG5cdFx0XHR1dnNWZXJ0ZXhPbmx5OiAhICggISEgbWF0ZXJpYWwubWFwIHx8ICEhIG1hdGVyaWFsLmJ1bXBNYXAgfHwgISEgbWF0ZXJpYWwubm9ybWFsTWFwIHx8ICEhIG1hdGVyaWFsLnNwZWN1bGFyTWFwIHx8ICEhIG1hdGVyaWFsLmFscGhhTWFwIHx8ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwIHx8ICEhIG1hdGVyaWFsLnJvdWdobmVzc01hcCB8fCAhISBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwIHx8IG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgfHwgISEgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwIHx8ICEhIG1hdGVyaWFsLnRoaWNrbmVzc01hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwIHx8IG1hdGVyaWFsLnNoZWVuID4gMCB8fCAhISBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwIHx8ICEhIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkgJiYgISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXG5cdFx0XHRmb2c6ICEhIGZvZyxcblx0XHRcdHVzZUZvZzogbWF0ZXJpYWwuZm9nLFxuXHRcdFx0Zm9nRXhwMjogKCBmb2cgJiYgZm9nLmlzRm9nRXhwMiApLFxuXG5cdFx0XHRmbGF0U2hhZGluZzogISEgbWF0ZXJpYWwuZmxhdFNoYWRpbmcsXG5cblx0XHRcdHNpemVBdHRlbnVhdGlvbjogbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uLFxuXHRcdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcixcblxuXHRcdFx0c2tpbm5pbmc6IG9iamVjdC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmIG1heEJvbmVzID4gMCxcblx0XHRcdG1heEJvbmVzOiBtYXhCb25lcyxcblx0XHRcdHVzZVZlcnRleFRleHR1cmU6IGZsb2F0VmVydGV4VGV4dHVyZXMsXG5cblx0XHRcdG1vcnBoVGFyZ2V0czogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCxcblx0XHRcdG1vcnBoQ29sb3JzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCxcblx0XHRcdG1vcnBoVGFyZ2V0c0NvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdG1vcnBoVGV4dHVyZVN0cmlkZTogbW9ycGhUZXh0dXJlU3RyaWRlLFxuXG5cdFx0XHRudW1EaXJMaWdodHM6IGxpZ2h0cy5kaXJlY3Rpb25hbC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0czogbGlnaHRzLnBvaW50Lmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodHM6IGxpZ2h0cy5zcG90Lmxlbmd0aCxcblx0XHRcdG51bVJlY3RBcmVhTGlnaHRzOiBsaWdodHMucmVjdEFyZWEubGVuZ3RoLFxuXHRcdFx0bnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLFxuXG5cdFx0XHRudW1EaXJMaWdodFNoYWRvd3M6IGxpZ2h0cy5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0U2hhZG93czogbGlnaHRzLnBvaW50U2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodFNoYWRvd3M6IGxpZ2h0cy5zcG90U2hhZG93TWFwLmxlbmd0aCxcblxuXHRcdFx0bnVtQ2xpcHBpbmdQbGFuZXM6IGNsaXBwaW5nLm51bVBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbixcblxuXHRcdFx0ZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsXG5cblx0XHRcdHNoYWRvd01hcEVuYWJsZWQ6IHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkICYmIHNoYWRvd3MubGVuZ3RoID4gMCxcblx0XHRcdHNoYWRvd01hcFR5cGU6IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlLFxuXG5cdFx0XHR0b25lTWFwcGluZzogbWF0ZXJpYWwudG9uZU1hcHBlZCA/IHJlbmRlcmVyLnRvbmVNYXBwaW5nIDogTm9Ub25lTWFwcGluZyxcblx0XHRcdHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzOiByZW5kZXJlci5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxcblxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsXG5cblx0XHRcdGRvdWJsZVNpZGVkOiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlLFxuXHRcdFx0ZmxpcFNpZGVkOiBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSxcblxuXHRcdFx0ZGVwdGhQYWNraW5nOiAoIG1hdGVyaWFsLmRlcHRoUGFja2luZyAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgOiBmYWxzZSxcblxuXHRcdFx0aW5kZXgwQXR0cmlidXRlTmFtZTogbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSxcblxuXHRcdFx0ZXh0ZW5zaW9uRGVyaXZhdGl2ZXM6IG1hdGVyaWFsLmV4dGVuc2lvbnMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyxcblx0XHRcdGV4dGVuc2lvbkZyYWdEZXB0aDogbWF0ZXJpYWwuZXh0ZW5zaW9ucyAmJiBtYXRlcmlhbC5leHRlbnNpb25zLmZyYWdEZXB0aCxcblx0XHRcdGV4dGVuc2lvbkRyYXdCdWZmZXJzOiBtYXRlcmlhbC5leHRlbnNpb25zICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMuZHJhd0J1ZmZlcnMsXG5cdFx0XHRleHRlbnNpb25TaGFkZXJUZXh0dXJlTE9EOiBtYXRlcmlhbC5leHRlbnNpb25zICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMuc2hhZGVyVGV4dHVyZUxPRCxcblxuXHRcdFx0cmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGg6IGlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuaGFzKCAnRVhUX2ZyYWdfZGVwdGgnICksXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvbkRyYXdCdWZmZXJzOiBpc1dlYkdMMiB8fCBleHRlbnNpb25zLmhhcyggJ1dFQkdMX2RyYXdfYnVmZmVycycgKSxcblx0XHRcdHJlbmRlcmVyRXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxvZDogaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5oYXMoICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyApLFxuXG5cdFx0XHRjdXN0b21Qcm9ncmFtQ2FjaGVLZXk6IG1hdGVyaWFsLmN1c3RvbVByb2dyYW1DYWNoZUtleSgpXG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFByb2dyYW1DYWNoZUtleSggcGFyYW1ldGVycyApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuc2hhZGVySUQgKSB7XG5cblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZGVySUQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY3VzdG9tVmVydGV4U2hhZGVySUQgKTtcblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY3VzdG9tRnJhZ21lbnRTaGFkZXJJRCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgbmFtZSBpbiBwYXJhbWV0ZXJzLmRlZmluZXMgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbmFtZSApO1xuXHRcdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmRlZmluZXNbIG5hbWUgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuaXNSYXdTaGFkZXJNYXRlcmlhbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdldFByb2dyYW1DYWNoZUtleVBhcmFtZXRlcnMoIGFycmF5LCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyggYXJyYXksIHBhcmFtZXRlcnMgKTtcblx0XHRcdGFycmF5LnB1c2goIHJlbmRlcmVyLm91dHB1dEVuY29kaW5nICk7XG5cblx0XHR9XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVByb2dyYW1DYWNoZUtleSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5UGFyYW1ldGVycyggYXJyYXksIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVVkhlaWdodCApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY29tYmluZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudmVydGV4VXZzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5mb2dFeHAyICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1heEJvbmVzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaFRhcmdldHNDb3VudCApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubW9ycGhBdHRyaWJ1dGVDb3VudCApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodFNoYWRvd3MgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbiApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyggYXJyYXksIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRfcHJvZ3JhbUxheWVycy5kaXNhYmxlQWxsKCk7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuaXNXZWJHTDIgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tYXRjYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA1ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubGlnaHRNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA3ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmFvTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5lbWlzc2l2ZU1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYnVtcE1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDExICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm9iamVjdFNwYWNlTm9ybWFsTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudGFuZ2VudFNwYWNlTm9ybWFsTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTQgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5ncmFkaWVudE1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmFscGhhTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjQgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4QWxwaGFzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VXZzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy51dnNWZXJ0ZXhPbmx5IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZm9nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMzAgKTtcblxuXHRcdGFycmF5LnB1c2goIF9wcm9ncmFtTGF5ZXJzLm1hc2sgKTtcblx0XHRfcHJvZ3JhbUxheWVycy5kaXNhYmxlQWxsKCk7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMudXNlRm9nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5mbGF0U2hhZGluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc2tpbm5pbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnVzZVZlcnRleFRleHR1cmUgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubW9ycGhOb3JtYWxzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tb3JwaENvbG9ycyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZmxpcFNpZGVkIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGl0aGVyaW5nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTQgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudGhpY2tuZXNzTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc2hlZW4gKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kZWNvZGVWaWRlb1RleHR1cmUgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5vcGFxdWUgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyNCApO1xuXG5cdFx0YXJyYXkucHVzaCggX3Byb2dyYW1MYXllcnMubWFzayApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVbmlmb3JtcyggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXHRcdGxldCB1bmlmb3JtcztcblxuXHRcdGlmICggc2hhZGVySUQgKSB7XG5cblx0XHRcdGNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblx0XHRcdHVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1bmlmb3JtcyA9IG1hdGVyaWFsLnVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhY3F1aXJlUHJvZ3JhbSggcGFyYW1ldGVycywgY2FjaGVLZXkgKSB7XG5cblx0XHRsZXQgcHJvZ3JhbTtcblxuXHRcdC8vIENoZWNrIGlmIGNvZGUgaGFzIGJlZW4gYWxyZWFkeSBjb21waWxlZFxuXHRcdGZvciAoIGxldCBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0Y29uc3QgcHJlZXhpc3RpbmdQcm9ncmFtID0gcHJvZ3JhbXNbIHAgXTtcblxuXHRcdFx0aWYgKCBwcmVleGlzdGluZ1Byb2dyYW0uY2FjaGVLZXkgPT09IGNhY2hlS2V5ICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcmVleGlzdGluZ1Byb2dyYW07XG5cdFx0XHRcdCsrIHByb2dyYW0udXNlZFRpbWVzO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0Y29uc3QgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTtcblx0XHRcdHByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdO1xuXHRcdFx0cHJvZ3JhbXMucG9wKCk7XG5cblx0XHRcdC8vIEZyZWUgV2ViR0wgcmVzb3VyY2VzXG5cdFx0XHRwcm9ncmFtLmRlc3Ryb3koKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXRQYXJhbWV0ZXJzOiBnZXRQYXJhbWV0ZXJzLFxuXHRcdGdldFByb2dyYW1DYWNoZUtleTogZ2V0UHJvZ3JhbUNhY2hlS2V5LFxuXHRcdGdldFVuaWZvcm1zOiBnZXRVbmlmb3Jtcyxcblx0XHRhY3F1aXJlUHJvZ3JhbTogYWNxdWlyZVByb2dyYW0sXG5cdFx0cmVsZWFzZVByb2dyYW06IHJlbGVhc2VQcm9ncmFtLFxuXHRcdHJlbGVhc2VTaGFkZXJDYWNoZTogcmVsZWFzZVNoYWRlckNhY2hlLFxuXHRcdC8vIEV4cG9zZWQgZm9yIHJlc291cmNlIG1vbml0b3JpbmcgJiBlcnJvciBmZWVkYmFjayB2aWEgcmVuZGVyZXIuaW5mbzpcblx0XHRwcm9ncmFtczogcHJvZ3JhbXMsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUHJvcGVydGllcygpIHtcblxuXHRsZXQgcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QgKSB7XG5cblx0XHRsZXQgbWFwID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBtYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWFwID0ge307XG5cdFx0XHRwcm9wZXJ0aWVzLnNldCggb2JqZWN0LCBtYXAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZSggb2JqZWN0ICkge1xuXG5cdFx0cHJvcGVydGllcy5kZWxldGUoIG9iamVjdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwga2V5LCB2YWx1ZSApIHtcblxuXHRcdHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKVsga2V5IF0gPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdHJlbW92ZTogcmVtb3ZlLFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5mdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEubWF0ZXJpYWwuaWQgIT09IGIubWF0ZXJpYWwuaWQgKSB7XG5cblx0XHRyZXR1cm4gYS5tYXRlcmlhbC5pZCAtIGIubWF0ZXJpYWwuaWQ7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYS56IC0gYi56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEueiAhPT0gYi56ICkge1xuXG5cdFx0cmV0dXJuIGIueiAtIGEuejtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIGEuaWQgLSBiLmlkO1xuXG5cdH1cblxufVxuXG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdCgpIHtcblxuXHRjb25zdCByZW5kZXJJdGVtcyA9IFtdO1xuXHRsZXQgcmVuZGVySXRlbXNJbmRleCA9IDA7XG5cblx0Y29uc3Qgb3BhcXVlID0gW107XG5cdGNvbnN0IHRyYW5zbWlzc2l2ZSA9IFtdO1xuXHRjb25zdCB0cmFuc3BhcmVudCA9IFtdO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRcdG9wYXF1ZS5sZW5ndGggPSAwO1xuXHRcdHRyYW5zbWlzc2l2ZS5sZW5ndGggPSAwO1xuXHRcdHRyYW5zcGFyZW50Lmxlbmd0aCA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRsZXQgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF07XG5cblx0XHRpZiAoIHJlbmRlckl0ZW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVuZGVySXRlbSA9IHtcblx0XHRcdFx0aWQ6IG9iamVjdC5pZCxcblx0XHRcdFx0b2JqZWN0OiBvYmplY3QsXG5cdFx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXHRcdFx0XHRncm91cE9yZGVyOiBncm91cE9yZGVyLFxuXHRcdFx0XHRyZW5kZXJPcmRlcjogb2JqZWN0LnJlbmRlck9yZGVyLFxuXHRcdFx0XHR6OiB6LFxuXHRcdFx0XHRncm91cDogZ3JvdXBcblx0XHRcdH07XG5cblx0XHRcdHJlbmRlckl0ZW1zWyByZW5kZXJJdGVtc0luZGV4IF0gPSByZW5kZXJJdGVtO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVySXRlbS5pZCA9IG9iamVjdC5pZDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gb2JqZWN0O1xuXHRcdFx0cmVuZGVySXRlbS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cE9yZGVyID0gZ3JvdXBPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XG5cdFx0XHRyZW5kZXJJdGVtLnogPSB6O1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cCA9IGdyb3VwO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVySXRlbXNJbmRleCArKztcblxuXHRcdHJldHVybiByZW5kZXJJdGVtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRjb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7XG5cblx0XHRcdHRyYW5zbWlzc2l2ZS5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dHJhbnNwYXJlbnQucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3BhcXVlLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5zaGlmdCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICkge1xuXG5cdFx0Y29uc3QgcmVuZGVySXRlbSA9IGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKTtcblxuXHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uID4gMC4wICkge1xuXG5cdFx0XHR0cmFuc21pc3NpdmUudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgKSB7XG5cblx0XHRcdHRyYW5zcGFyZW50LnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG9wYXF1ZS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNvcnQoIGN1c3RvbU9wYXF1ZVNvcnQsIGN1c3RvbVRyYW5zcGFyZW50U29ydCApIHtcblxuXHRcdGlmICggb3BhcXVlLmxlbmd0aCA+IDEgKSBvcGFxdWUuc29ydCggY3VzdG9tT3BhcXVlU29ydCB8fCBwYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdHJhbnNtaXNzaXZlLmxlbmd0aCA+IDEgKSB0cmFuc21pc3NpdmUuc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdHJhbnNwYXJlbnQubGVuZ3RoID4gMSApIHRyYW5zcGFyZW50LnNvcnQoIGN1c3RvbVRyYW5zcGFyZW50U29ydCB8fCByZXZlcnNlUGFpbnRlclNvcnRTdGFibGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZmluaXNoKCkge1xuXG5cdFx0Ly8gQ2xlYXIgcmVmZXJlbmNlcyBmcm9tIGluYWN0aXZlIHJlbmRlckl0ZW1zIGluIHRoZSBsaXN0XG5cblx0XHRmb3IgKCBsZXQgaSA9IHJlbmRlckl0ZW1zSW5kZXgsIGlsID0gcmVuZGVySXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlckl0ZW0gPSByZW5kZXJJdGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHJlbmRlckl0ZW0uaWQgPT09IG51bGwgKSBicmVhaztcblxuXHRcdFx0cmVuZGVySXRlbS5pZCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLm9iamVjdCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ubWF0ZXJpYWwgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cCA9IG51bGw7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRvcGFxdWU6IG9wYXF1ZSxcblx0XHR0cmFuc21pc3NpdmU6IHRyYW5zbWlzc2l2ZSxcblx0XHR0cmFuc3BhcmVudDogdHJhbnNwYXJlbnQsXG5cblx0XHRpbml0OiBpbml0LFxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0dW5zaGlmdDogdW5zaGlmdCxcblx0XHRmaW5pc2g6IGZpbmlzaCxcblxuXHRcdHNvcnQ6IHNvcnRcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkge1xuXG5cdGxldCBsaXN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgcmVuZGVyQ2FsbERlcHRoICkge1xuXG5cdFx0bGV0IGxpc3Q7XG5cblx0XHRpZiAoIGxpc3RzLmhhcyggc2NlbmUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGxpc3QgPSBuZXcgV2ViR0xSZW5kZXJMaXN0KCk7XG5cdFx0XHRsaXN0cy5zZXQoIHNjZW5lLCBbIGxpc3QgXSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCByZW5kZXJDYWxsRGVwdGggPj0gbGlzdHMuZ2V0KCBzY2VuZSApLmxlbmd0aCApIHtcblxuXHRcdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xuXHRcdFx0XHRsaXN0cy5nZXQoIHNjZW5lICkucHVzaCggbGlzdCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGxpc3QgPSBsaXN0cy5nZXQoIHNjZW5lIClbIHJlbmRlckNhbGxEZXB0aCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gVW5pZm9ybXNDYWNoZSgpIHtcblxuXHRjb25zdCBsaWdodHMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHVuaWZvcm1zO1xuXG5cdFx0XHRzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGNvbmVDb3M6IDAsXG5cdFx0XHRcdFx0XHRwZW51bWJyYUNvczogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnSGVtaXNwaGVyZUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdHNreUNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUmVjdEFyZWFMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZXaWR0aDogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGhhbGZIZWlnaHQ6IG5ldyBWZWN0b3IzKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBTaGFkb3dVbmlmb3Jtc0NhY2hlKCkge1xuXG5cdGNvbnN0IGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93Tm9ybWFsQmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93Tm9ybWFsQmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYUZhcjogMTAwMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHNldCBSZWN0QXJlYUxpZ2h0IHNoYWRvdyB1bmlmb3Jtc1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5cblxubGV0IG5leHRWZXJzaW9uID0gMDtcblxuZnVuY3Rpb24gc2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0KCBsaWdodEEsIGxpZ2h0QiApIHtcblxuXHRyZXR1cm4gKCBsaWdodEIuY2FzdFNoYWRvdyA/IDEgOiAwICkgLSAoIGxpZ2h0QS5jYXN0U2hhZG93ID8gMSA6IDAgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cyggZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gbmV3IFVuaWZvcm1zQ2FjaGUoKTtcblxuXHRjb25zdCBzaGFkb3dDYWNoZSA9IFNoYWRvd1VuaWZvcm1zQ2FjaGUoKTtcblxuXHRjb25zdCBzdGF0ZSA9IHtcblxuXHRcdHZlcnNpb246IDAsXG5cblx0XHRoYXNoOiB7XG5cdFx0XHRkaXJlY3Rpb25hbExlbmd0aDogLSAxLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0gMSxcblx0XHRcdHNwb3RMZW5ndGg6IC0gMSxcblx0XHRcdHJlY3RBcmVhTGVuZ3RoOiAtIDEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtIDEsXG5cblx0XHRcdG51bURpcmVjdGlvbmFsU2hhZG93czogLSAxLFxuXHRcdFx0bnVtUG9pbnRTaGFkb3dzOiAtIDEsXG5cdFx0XHRudW1TcG90U2hhZG93czogLSAxXG5cdFx0fSxcblxuXHRcdGFtYmllbnQ6IFsgMCwgMCwgMCBdLFxuXHRcdHByb2JlOiBbXSxcblx0XHRkaXJlY3Rpb25hbDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3c6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogW10sXG5cdFx0c3BvdDogW10sXG5cdFx0c3BvdFNoYWRvdzogW10sXG5cdFx0c3BvdFNoYWRvd01hcDogW10sXG5cdFx0c3BvdFNoYWRvd01hdHJpeDogW10sXG5cdFx0cmVjdEFyZWE6IFtdLFxuXHRcdHJlY3RBcmVhTFRDMTogbnVsbCxcblx0XHRyZWN0QXJlYUxUQzI6IG51bGwsXG5cdFx0cG9pbnQ6IFtdLFxuXHRcdHBvaW50U2hhZG93OiBbXSxcblx0XHRwb2ludFNoYWRvd01hcDogW10sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdGhlbWk6IFtdXG5cblx0fTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmUucHVzaCggbmV3IFZlY3RvcjMoKSApO1xuXG5cdGNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblx0Y29uc3QgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMsIHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICkge1xuXG5cdFx0bGV0IHIgPSAwLCBnID0gMCwgYiA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmVbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdGxldCBkaXJlY3Rpb25hbExlbmd0aCA9IDA7XG5cdFx0bGV0IHBvaW50TGVuZ3RoID0gMDtcblx0XHRsZXQgc3BvdExlbmd0aCA9IDA7XG5cdFx0bGV0IHJlY3RBcmVhTGVuZ3RoID0gMDtcblx0XHRsZXQgaGVtaUxlbmd0aCA9IDA7XG5cblx0XHRsZXQgbnVtRGlyZWN0aW9uYWxTaGFkb3dzID0gMDtcblx0XHRsZXQgbnVtUG9pbnRTaGFkb3dzID0gMDtcblx0XHRsZXQgbnVtU3BvdFNoYWRvd3MgPSAwO1xuXG5cdFx0bGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCApO1xuXG5cdFx0Ly8gYXJ0aXN0LWZyaWVuZGx5IGxpZ2h0IGludGVuc2l0eSBzY2FsaW5nIGZhY3RvclxuXHRcdGNvbnN0IHNjYWxlRmFjdG9yID0gKCBwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cyAhPT0gdHJ1ZSApID8gTWF0aC5QSSA6IDE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSBsaWdodC5jb2xvcjtcblx0XHRcdGNvbnN0IGludGVuc2l0eSA9IGxpZ2h0LmludGVuc2l0eTtcblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0XHRcdGNvbnN0IHNoYWRvd01hcCA9ICggbGlnaHQuc2hhZG93ICYmIGxpZ2h0LnNoYWRvdy5tYXAgKSA/IGxpZ2h0LnNoYWRvdy5tYXAudGV4dHVyZSA6IG51bGw7XG5cblx0XHRcdGlmICggbGlnaHQuaXNBbWJpZW50TGlnaHQgKSB7XG5cblx0XHRcdFx0ciArPSBjb2xvci5yICogaW50ZW5zaXR5ICogc2NhbGVGYWN0b3I7XG5cdFx0XHRcdGcgKz0gY29sb3IuZyAqIGludGVuc2l0eSAqIHNjYWxlRmFjdG9yO1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHkgKiBzY2FsZUZhY3RvcjtcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNMaWdodFByb2JlICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDk7IGogKysgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5wcm9iZVsgaiBdLmFkZFNjYWxlZFZlY3RvciggbGlnaHQuc2guY29lZmZpY2llbnRzWyBqIF0sIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNEaXJlY3Rpb25hbExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSAqIHNjYWxlRmFjdG9yICk7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2hhZG93VW5pZm9ybXMgPSBzaGFkb3dDYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Tm9ybWFsQmlhcyA9IHNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3Jtcztcblx0XHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1EaXJlY3Rpb25hbFNoYWRvd3MgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsWyBkaXJlY3Rpb25hbExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzU3BvdExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKiBzY2FsZUZhY3RvciApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbmVDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKTtcblx0XHRcdFx0dW5pZm9ybXMucGVudW1icmFDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKiAoIDEgLSBsaWdodC5wZW51bWJyYSApICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2hhZG93VW5pZm9ybXMgPSBzaGFkb3dDYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Tm9ybWFsQmlhcyA9IHNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd1sgc3BvdExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcFsgc3BvdExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXhbIHNwb3RMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1TcG90U2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuc3BvdFsgc3BvdExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdC8vIChhKSBpbnRlbnNpdHkgaXMgdGhlIHRvdGFsIHZpc2libGUgbGlnaHQgZW1pdHRlZFxuXHRcdFx0XHQvL3VuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAvICggbGlnaHQud2lkdGggKiBsaWdodC5oZWlnaHQgKiBNYXRoLlBJICkgKTtcblxuXHRcdFx0XHQvLyAoYikgaW50ZW5zaXR5IGlzIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBsaWdodFxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYVsgcmVjdEFyZWFMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHJlY3RBcmVhTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICogc2NhbGVGYWN0b3IgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dOb3JtYWxCaWFzID0gc2hhZG93Lm5vcm1hbEJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Q2FtZXJhTmVhciA9IHNoYWRvdy5jYW1lcmEubmVhcjtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dDYW1lcmFGYXIgPSBzaGFkb3cuY2FtZXJhLmZhcjtcblxuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93WyBwb2ludExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXBbIHBvaW50TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXRyaXhbIHBvaW50TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXG5cdFx0XHRcdFx0bnVtUG9pbnRTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5wb2ludFsgcG9pbnRMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHBvaW50TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0hlbWlzcGhlcmVMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5za3lDb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKiBzY2FsZUZhY3RvciApO1xuXHRcdFx0XHR1bmlmb3Jtcy5ncm91bmRDb2xvci5jb3B5KCBsaWdodC5ncm91bmRDb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKiBzY2FsZUZhY3RvciApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVjdEFyZWFMZW5ndGggPiAwICkge1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHQvLyBXZWJHTCAyXG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMxID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzE7XG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhTFRDMiA9IFVuaWZvcm1zTGliLkxUQ19GTE9BVF8yO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFdlYkdMIDFcblxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMxID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzE7XG5cdFx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMyID0gVW5pZm9ybXNMaWIuTFRDX0ZMT0FUXzI7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnJlY3RBcmVhTFRDMSA9IFVuaWZvcm1zTGliLkxUQ19IQUxGXzE7XG5cdFx0XHRcdFx0c3RhdGUucmVjdEFyZWFMVEMyID0gVW5pZm9ybXNMaWIuTFRDX0hBTEZfMjtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFVuYWJsZSB0byB1c2UgUmVjdEFyZWFMaWdodC4gTWlzc2luZyBXZWJHTCBleHRlbnNpb25zLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmFtYmllbnRbIDAgXSA9IHI7XG5cdFx0c3RhdGUuYW1iaWVudFsgMSBdID0gZztcblx0XHRzdGF0ZS5hbWJpZW50WyAyIF0gPSBiO1xuXG5cdFx0Y29uc3QgaGFzaCA9IHN0YXRlLmhhc2g7XG5cblx0XHRpZiAoIGhhc2guZGlyZWN0aW9uYWxMZW5ndGggIT09IGRpcmVjdGlvbmFsTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoICE9PSBwb2ludExlbmd0aCB8fFxuXHRcdFx0aGFzaC5zcG90TGVuZ3RoICE9PSBzcG90TGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnJlY3RBcmVhTGVuZ3RoICE9PSByZWN0QXJlYUxlbmd0aCB8fFxuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoICE9PSBoZW1pTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyAhPT0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzIHx8XG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyAhPT0gbnVtUG9pbnRTaGFkb3dzIHx8XG5cdFx0XHRoYXNoLm51bVNwb3RTaGFkb3dzICE9PSBudW1TcG90U2hhZG93cyApIHtcblxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvdy5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvdy5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7XG5cblx0XHRcdGhhc2guZGlyZWN0aW9uYWxMZW5ndGggPSBkaXJlY3Rpb25hbExlbmd0aDtcblx0XHRcdGhhc2gucG9pbnRMZW5ndGggPSBwb2ludExlbmd0aDtcblx0XHRcdGhhc2guc3BvdExlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRoYXNoLnJlY3RBcmVhTGVuZ3RoID0gcmVjdEFyZWFMZW5ndGg7XG5cdFx0XHRoYXNoLmhlbWlMZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRoYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdGhhc2gubnVtUG9pbnRTaGFkb3dzID0gbnVtUG9pbnRTaGFkb3dzO1xuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyA9IG51bVNwb3RTaGFkb3dzO1xuXG5cdFx0XHRzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmlldyggbGlnaHRzLCBjYW1lcmEgKSB7XG5cblx0XHRsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwO1xuXHRcdGxldCBwb2ludExlbmd0aCA9IDA7XG5cdFx0bGV0IHNwb3RMZW5ndGggPSAwO1xuXHRcdGxldCByZWN0QXJlYUxlbmd0aCA9IDA7XG5cdFx0bGV0IGhlbWlMZW5ndGggPSAwO1xuXG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHQvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XG5cdFx0XHRcdG1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdFx0XHRtYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIG1hdHJpeDQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24ubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0aGVtaUxlbmd0aCArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNldHVwOiBzZXR1cCxcblx0XHRzZXR1cFZpZXc6IHNldHVwVmlldyxcblx0XHRzdGF0ZTogc3RhdGVcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0Y29uc3QgbGlnaHRzID0gbmV3IFdlYkdMTGlnaHRzKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblxuXHRjb25zdCBsaWdodHNBcnJheSA9IFtdO1xuXHRjb25zdCBzaGFkb3dzQXJyYXkgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCkge1xuXG5cdFx0bGlnaHRzQXJyYXkubGVuZ3RoID0gMDtcblx0XHRzaGFkb3dzQXJyYXkubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaExpZ2h0KCBsaWdodCApIHtcblxuXHRcdGxpZ2h0c0FycmF5LnB1c2goIGxpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hTaGFkb3coIHNoYWRvd0xpZ2h0ICkge1xuXG5cdFx0c2hhZG93c0FycmF5LnB1c2goIHNoYWRvd0xpZ2h0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzKCBwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cyApIHtcblxuXHRcdGxpZ2h0cy5zZXR1cCggbGlnaHRzQXJyYXksIHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzVmlldyggY2FtZXJhICkge1xuXG5cdFx0bGlnaHRzLnNldHVwVmlldyggbGlnaHRzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRsaWdodHM6IGxpZ2h0c1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdCxcblx0XHRzdGF0ZTogc3RhdGUsXG5cdFx0c2V0dXBMaWdodHM6IHNldHVwTGlnaHRzLFxuXHRcdHNldHVwTGlnaHRzVmlldzogc2V0dXBMaWdodHNWaWV3LFxuXG5cdFx0cHVzaExpZ2h0OiBwdXNoTGlnaHQsXG5cdFx0cHVzaFNoYWRvdzogcHVzaFNoYWRvd1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGVzKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0bGV0IHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgcmVuZGVyQ2FsbERlcHRoID0gMCApIHtcblxuXHRcdGxldCByZW5kZXJTdGF0ZTtcblxuXHRcdGlmICggcmVuZGVyU3RhdGVzLmhhcyggc2NlbmUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdFx0cmVuZGVyU3RhdGVzLnNldCggc2NlbmUsIFsgcmVuZGVyU3RhdGUgXSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCByZW5kZXJDYWxsRGVwdGggPj0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKS5sZW5ndGggKSB7XG5cblx0XHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSggZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cdFx0XHRcdHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICkucHVzaCggcmVuZGVyU3RhdGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lIClbIHJlbmRlckNhbGxEZXB0aCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVuZGVyU3RhdGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5jbGFzcyBNZXNoRGVwdGhNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5kZXB0aFBhY2tpbmcgPSBCYXNpY0RlcHRoUGFja2luZztcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHRcdHRoaXMuZm9nID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZztcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaERlcHRoTWF0ZXJpYWwgPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIHJlZmVyZW5jZVBvc2l0aW9uOiA8ZmxvYXQ+LFxuICogIG5lYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqICBmYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD5cbiAqXG4gKiB9XG4gKi9cblxuY2xhc3MgTWVzaERpc3RhbmNlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hEaXN0YW5jZU1hdGVyaWFsJztcblxuXHRcdHRoaXMucmVmZXJlbmNlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHRoaXMubmVhckRpc3RhbmNlID0gMTtcblx0XHR0aGlzLmZhckRpc3RhbmNlID0gMTAwMDtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLmZvZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoIHNvdXJjZS5yZWZlcmVuY2VQb3NpdGlvbiApO1xuXHRcdHRoaXMubmVhckRpc3RhbmNlID0gc291cmNlLm5lYXJEaXN0YW5jZTtcblx0XHR0aGlzLmZhckRpc3RhbmNlID0gc291cmNlLmZhckRpc3RhbmNlO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcblxuY29uc3QgdmVydGV4ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCA9IFwidW5pZm9ybSBzYW1wbGVyMkQgc2hhZG93X3Bhc3M7XFxudW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XFxudW5pZm9ybSBmbG9hdCByYWRpdXM7XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxudm9pZCBtYWluKCkge1xcblxcdGNvbnN0IGZsb2F0IHNhbXBsZXMgPSBmbG9hdCggVlNNX1NBTVBMRVMgKTtcXG5cXHRmbG9hdCBtZWFuID0gMC4wO1xcblxcdGZsb2F0IHNxdWFyZWRfbWVhbiA9IDAuMDtcXG5cXHRmbG9hdCB1dlN0cmlkZSA9IHNhbXBsZXMgPD0gMS4wID8gMC4wIDogMi4wIC8gKCBzYW1wbGVzIC0gMS4wICk7XFxuXFx0ZmxvYXQgdXZTdGFydCA9IHNhbXBsZXMgPD0gMS4wID8gMC4wIDogLSAxLjA7XFxuXFx0Zm9yICggZmxvYXQgaSA9IDAuMDsgaSA8IHNhbXBsZXM7IGkgKysgKSB7XFxuXFx0XFx0ZmxvYXQgdXZPZmZzZXQgPSB1dlN0YXJ0ICsgaSAqIHV2U3RyaWRlO1xcblxcdFxcdCNpZmRlZiBIT1JJWk9OVEFMX1BBU1NcXG5cXHRcXHRcXHR2ZWMyIGRpc3RyaWJ1dGlvbiA9IHVucGFja1JHQkFUbzJIYWxmKCB0ZXh0dXJlMkQoIHNoYWRvd19wYXNzLCAoIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoIHV2T2Zmc2V0LCAwLjAgKSAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XFxuXFx0XFx0XFx0bWVhbiArPSBkaXN0cmlidXRpb24ueDtcXG5cXHRcXHRcXHRzcXVhcmVkX21lYW4gKz0gZGlzdHJpYnV0aW9uLnkgKiBkaXN0cmlidXRpb24ueSArIGRpc3RyaWJ1dGlvbi54ICogZGlzdHJpYnV0aW9uLng7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRmbG9hdCBkZXB0aCA9IHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd19wYXNzLCAoIGdsX0ZyYWdDb29yZC54eSArIHZlYzIoIDAuMCwgdXZPZmZzZXQgKSAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XFxuXFx0XFx0XFx0bWVhbiArPSBkZXB0aDtcXG5cXHRcXHRcXHRzcXVhcmVkX21lYW4gKz0gZGVwdGggKiBkZXB0aDtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0bWVhbiA9IG1lYW4gLyBzYW1wbGVzO1xcblxcdHNxdWFyZWRfbWVhbiA9IHNxdWFyZWRfbWVhbiAvIHNhbXBsZXM7XFxuXFx0ZmxvYXQgc3RkX2RldiA9IHNxcnQoIHNxdWFyZWRfbWVhbiAtIG1lYW4gKiBtZWFuICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gcGFjazJIYWxmVG9SR0JBKCB2ZWMyKCBtZWFuLCBzdGRfZGV2ICkgKTtcXG59XCI7XG5cbmZ1bmN0aW9uIFdlYkdMU2hhZG93TWFwKCBfcmVuZGVyZXIsIF9vYmplY3RzLCBfY2FwYWJpbGl0aWVzICkge1xuXG5cdGxldCBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cblx0Y29uc3QgX3NoYWRvd01hcFNpemUgPSBuZXcgVmVjdG9yMigpLFxuXHRcdF92aWV3cG9ydFNpemUgPSBuZXcgVmVjdG9yMigpLFxuXG5cdFx0X3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSxcblxuXHRcdF9kZXB0aE1hdGVyaWFsID0gbmV3IE1lc2hEZXB0aE1hdGVyaWFsKCB7IGRlcHRoUGFja2luZzogUkdCQURlcHRoUGFja2luZyB9ICksXG5cdFx0X2Rpc3RhbmNlTWF0ZXJpYWwgPSBuZXcgTWVzaERpc3RhbmNlTWF0ZXJpYWwoKSxcblxuXHRcdF9tYXRlcmlhbENhY2hlID0ge30sXG5cblx0XHRfbWF4VGV4dHVyZVNpemUgPSBfY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdGNvbnN0IHNoYWRvd1NpZGUgPSB7IDA6IEJhY2tTaWRlLCAxOiBGcm9udFNpZGUsIDI6IERvdWJsZVNpZGUgfTtcblxuXHRjb25zdCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0VlNNX1NBTVBMRVM6IDhcblx0XHR9LFxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRzaGFkb3dfcGFzczogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0cmFkaXVzOiB7IHZhbHVlOiA0LjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleCxcblx0XHRmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRcblxuXHR9ICk7XG5cblx0Y29uc3Qgc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsID0gc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5jbG9uZSgpO1xuXHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5IT1JJWk9OVEFMX1BBU1MgPSAxO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5UcmkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0ZnVsbFNjcmVlblRyaS5zZXRBdHRyaWJ1dGUoXG5cdFx0J3Bvc2l0aW9uJyxcblx0XHRuZXcgQnVmZmVyQXR0cmlidXRlKFxuXHRcdFx0bmV3IEZsb2F0MzJBcnJheSggWyAtIDEsIC0gMSwgMC41LCAzLCAtIDEsIDAuNSwgLSAxLCAzLCAwLjUgXSApLFxuXHRcdFx0M1xuXHRcdClcblx0KTtcblxuXHRjb25zdCBmdWxsU2NyZWVuTWVzaCA9IG5ldyBNZXNoKCBmdWxsU2NyZWVuVHJpLCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsICk7XG5cblx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnR5cGUgPSBQQ0ZTaGFkb3dNYXA7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdGNvbnN0IGFjdGl2ZUN1YmVGYWNlID0gX3JlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0Y29uc3QgYWN0aXZlTWlwbWFwTGV2ZWwgPSBfcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHRcdGNvbnN0IF9zdGF0ZSA9IF9yZW5kZXJlci5zdGF0ZTtcblxuXHRcdC8vIFNldCBHTCBzdGF0ZSBmb3IgZGVwdGggbWFwLlxuXHRcdF9zdGF0ZS5zZXRCbGVuZGluZyggTm9CbGVuZGluZyApO1xuXHRcdF9zdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCAxLCAxLCAxLCAxICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdF9zdGF0ZS5zZXRTY2lzc29yVGVzdCggZmFsc2UgKTtcblxuXHRcdC8vIHJlbmRlciBkZXB0aCBtYXBcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBsaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdGlmICggc2hhZG93ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2hhZG93Lm5lZWRzVXBkYXRlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5jb3B5KCBzaGFkb3cubWFwU2l6ZSApO1xuXG5cdFx0XHRjb25zdCBzaGFkb3dGcmFtZUV4dGVudHMgPSBzaGFkb3cuZ2V0RnJhbWVFeHRlbnRzKCk7XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLm11bHRpcGx5KCBzaGFkb3dGcmFtZUV4dGVudHMgKTtcblxuXHRcdFx0X3ZpZXdwb3J0U2l6ZS5jb3B5KCBzaGFkb3cubWFwU2l6ZSApO1xuXG5cdFx0XHRpZiAoIF9zaGFkb3dNYXBTaXplLnggPiBfbWF4VGV4dHVyZVNpemUgfHwgX3NoYWRvd01hcFNpemUueSA+IF9tYXhUZXh0dXJlU2l6ZSApIHtcblxuXHRcdFx0XHRpZiAoIF9zaGFkb3dNYXBTaXplLnggPiBfbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnggPSBNYXRoLmZsb29yKCBfbWF4VGV4dHVyZVNpemUgLyBzaGFkb3dGcmFtZUV4dGVudHMueCApO1xuXHRcdFx0XHRcdF9zaGFkb3dNYXBTaXplLnggPSBfdmlld3BvcnRTaXplLnggKiBzaGFkb3dGcmFtZUV4dGVudHMueDtcblx0XHRcdFx0XHRzaGFkb3cubWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgPSBNYXRoLmZsb29yKCBfbWF4VGV4dHVyZVNpemUgLyBzaGFkb3dGcmFtZUV4dGVudHMueSApO1xuXHRcdFx0XHRcdF9zaGFkb3dNYXBTaXplLnkgPSBfdmlld3BvcnRTaXplLnkgKiBzaGFkb3dGcmFtZUV4dGVudHMueTtcblx0XHRcdFx0XHRzaGFkb3cubWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5tYXAgPT09IG51bGwgJiYgISBzaGFkb3cuaXNQb2ludExpZ2h0U2hhZG93ICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRcdGNvbnN0IHBhcnMgPSB7IG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XG5cblx0XHRcdFx0c2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXHRcdFx0XHRzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyAnLnNoYWRvd01hcCc7XG5cblx0XHRcdFx0c2hhZG93Lm1hcFBhc3MgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTtcblxuXHRcdFx0XHRzaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5tYXAgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgcGFycyA9IHsgbWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIGZvcm1hdDogUkdCQUZvcm1hdCB9O1xuXG5cdFx0XHRcdHNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTtcblx0XHRcdFx0c2hhZG93Lm1hcC50ZXh0dXJlLm5hbWUgPSBsaWdodC5uYW1lICsgJy5zaGFkb3dNYXAnO1xuXG5cdFx0XHRcdHNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTtcblx0XHRcdF9yZW5kZXJlci5jbGVhcigpO1xuXG5cdFx0XHRjb25zdCB2aWV3cG9ydENvdW50ID0gc2hhZG93LmdldFZpZXdwb3J0Q291bnQoKTtcblxuXHRcdFx0Zm9yICggbGV0IHZwID0gMDsgdnAgPCB2aWV3cG9ydENvdW50OyB2cCArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2aWV3cG9ydCA9IHNoYWRvdy5nZXRWaWV3cG9ydCggdnAgKTtcblxuXHRcdFx0XHRfdmlld3BvcnQuc2V0KFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LngsXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQueSxcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC56LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueSAqIHZpZXdwb3J0Lndcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRfc3RhdGUudmlld3BvcnQoIF92aWV3cG9ydCApO1xuXG5cdFx0XHRcdHNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZwICk7XG5cblx0XHRcdFx0X2ZydXN0dW0gPSBzaGFkb3cuZ2V0RnJ1c3R1bSgpO1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggc2NlbmUsIGNhbWVyYSwgc2hhZG93LmNhbWVyYSwgbGlnaHQsIHRoaXMudHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGRvIGJsdXIgcGFzcyBmb3IgVlNNXG5cblx0XHRcdGlmICggISBzaGFkb3cuaXNQb2ludExpZ2h0U2hhZG93ICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRcdFZTTVBhc3MoIHNoYWRvdywgY2FtZXJhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2hhZG93Lm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKCBmdWxsU2NyZWVuTWVzaCApO1xuXG5cdFx0aWYgKCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgIT09IHNoYWRvdy5ibHVyU2FtcGxlcyApIHtcblxuXHRcdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5kZWZpbmVzLlZTTV9TQU1QTEVTID0gc2hhZG93LmJsdXJTYW1wbGVzO1xuXHRcdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7XG5cblx0XHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vIHZlcnRpY2FsIHBhc3NcblxuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXBQYXNzICk7XG5cdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTtcblxuXHRcdC8vIGhvcml6b250YWwgcGFzc1xuXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcFBhc3MudGV4dHVyZTtcblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTtcblx0XHRfcmVuZGVyZXIuY2xlYXIoKTtcblx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBzaGFkb3dNYXRlcmlhbEhvcml6b250YWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCBzaGFkb3dDYW1lcmFOZWFyLCBzaGFkb3dDYW1lcmFGYXIsIHR5cGUgKSB7XG5cblx0XHRsZXQgcmVzdWx0ID0gbnVsbDtcblxuXHRcdGNvbnN0IGN1c3RvbU1hdGVyaWFsID0gKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgKSA/IG9iamVjdC5jdXN0b21EaXN0YW5jZU1hdGVyaWFsIDogb2JqZWN0LmN1c3RvbURlcHRoTWF0ZXJpYWw7XG5cblx0XHRpZiAoIGN1c3RvbU1hdGVyaWFsICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlc3VsdCA9IGN1c3RvbU1hdGVyaWFsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVzdWx0ID0gKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgKSA/IF9kaXN0YW5jZU1hdGVyaWFsIDogX2RlcHRoTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRpZiAoICggX3JlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmIG1hdGVyaWFsLmNsaXBTaGFkb3dzID09PSB0cnVlICYmIG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLmxlbmd0aCAhPT0gMCApIHx8XG5cdFx0XHQoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCAmJiBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gMCApIHx8XG5cdFx0XHQoIG1hdGVyaWFsLmFscGhhTWFwICYmIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSApIHtcblxuXHRcdFx0Ly8gaW4gdGhpcyBjYXNlIHdlIG5lZWQgYSB1bmlxdWUgbWF0ZXJpYWwgaW5zdGFuY2UgcmVmbGVjdGluZyB0aGVcblx0XHRcdC8vIGFwcHJvcHJpYXRlIHN0YXRlXG5cblx0XHRcdGNvbnN0IGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdGxldCBtYXRlcmlhbHNGb3JWYXJpYW50ID0gX21hdGVyaWFsQ2FjaGVbIGtleUEgXTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbHNGb3JWYXJpYW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRfbWF0ZXJpYWxDYWNoZVsga2V5QSBdID0gbWF0ZXJpYWxzRm9yVmFyaWFudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdGlmICggY2FjaGVkTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjYWNoZWRNYXRlcmlhbCA9IHJlc3VsdC5jbG9uZSgpO1xuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC52aXNpYmxlID0gbWF0ZXJpYWwudmlzaWJsZTtcblx0XHRyZXN1bHQud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lO1xuXG5cdFx0aWYgKCB0eXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9PSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogbWF0ZXJpYWwuc2lkZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9PSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogc2hhZG93U2lkZVsgbWF0ZXJpYWwuc2lkZSBdO1xuXG5cdFx0fVxuXG5cdFx0cmVzdWx0LmFscGhhTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cdFx0cmVzdWx0LmFscGhhVGVzdCA9IG1hdGVyaWFsLmFscGhhVGVzdDtcblxuXHRcdHJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXHRcdHJlc3VsdC5jbGlwcGluZ1BsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzO1xuXHRcdHJlc3VsdC5jbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbjtcblxuXHRcdHJlc3VsdC5kaXNwbGFjZW1lbnRNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudFNjYWxlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudEJpYXMgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0cmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRyZXN1bHQubGluZXdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0aWYgKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgJiYgcmVzdWx0LmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPT09IHRydWUgKSB7XG5cblx0XHRcdHJlc3VsdC5yZWZlcmVuY2VQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRyZXN1bHQubmVhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhTmVhcjtcblx0XHRcdHJlc3VsdC5mYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYUZhcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNvbnN0IHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSAmJiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSApIHtcblxuXHRcdFx0aWYgKCAoIG9iamVjdC5jYXN0U2hhZG93IHx8ICggb2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgdHlwZSA9PT0gVlNNU2hhZG93TWFwICkgKSAmJiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSApIHtcblxuXHRcdFx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGsgPSAwLCBrbCA9IGdyb3Vwcy5sZW5ndGg7IGsgPCBrbDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGsgXTtcblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIGdyb3VwTWF0ZXJpYWwsIGxpZ2h0LCBzaGFkb3dDYW1lcmEubmVhciwgc2hhZG93Q2FtZXJhLmZhciwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgbGlnaHQsIHNoYWRvd0NhbWVyYS5uZWFyLCBzaGFkb3dDYW1lcmEuZmFyLCB0eXBlICk7XG5cblx0XHRcdFx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xTdGF0ZSggZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRmdW5jdGlvbiBDb2xvckJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGNvbG9yID0gbmV3IFZlY3RvcjQoKTtcblx0XHRsZXQgY3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0Y29uc3QgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBjb2xvck1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBjb2xvck1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCByLCBnLCBiLCBhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRyICo9IGE7IGcgKj0gYTsgYiAqPSBhO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb2xvci5zZXQoIHIsIGcsIGIsIGEgKTtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuY29weSggY29sb3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLnNldCggLSAxLCAwLCAwLCAwICk7IC8vIHNldCB0byBpbnZhbGlkIHN0YXRlXG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIERlcHRoQnVmZmVyKCkge1xuXG5cdFx0bGV0IGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0bGV0IGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHRsZXQgY3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0XHRlbmFibGUoIDI5MjkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggMjkyOSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBkZXB0aE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhNYXNrICE9PSBkZXB0aE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5kZXB0aE1hc2soIGRlcHRoTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdGlmICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOZXZlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTIgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEFsd2F5c0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTkgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIExlc3NEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTEzICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTQgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTggKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE2ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOb3RFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTcgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCA1MTUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBkZXB0aCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aENsZWFyICE9PSBkZXB0aCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyRGVwdGgoIGRlcHRoICk7XG5cdFx0XHRcdFx0Y3VycmVudERlcHRoQ2xlYXIgPSBkZXB0aDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudERlcHRoTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIFN0ZW5jaWxCdWZmZXIoKSB7XG5cblx0XHRsZXQgbG9ja2VkID0gZmFsc2U7XG5cblx0XHRsZXQgY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGlmICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0XHRcdGVuYWJsZSggMjk2MCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0ZGlzYWJsZSggMjk2MCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsTWFzayAhPT0gc3RlbmNpbE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsTWFzayggc3RlbmNpbE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldEZ1bmM6IGZ1bmN0aW9uICggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGdW5jICE9PSBzdGVuY2lsRnVuYyB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsUmVmICE9PSBzdGVuY2lsUmVmIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBzdGVuY2lsRnVuYztcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGYWlsICE9PSBzdGVuY2lsRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWlBhc3MgIT09IHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL1xuXG5cdGNvbnN0IGNvbG9yQnVmZmVyID0gbmV3IENvbG9yQnVmZmVyKCk7XG5cdGNvbnN0IGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7XG5cdGNvbnN0IHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpO1xuXG5cdGxldCBlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XG5cblx0bGV0IGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyA9IHt9O1xuXHRsZXQgY3VycmVudERyYXdidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblx0bGV0IGRlZmF1bHREcmF3YnVmZmVycyA9IFtdO1xuXG5cdGxldCBjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblx0bGV0IGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0bGV0IGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRsZXQgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHRsZXQgY3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0bGV0IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdGNvbnN0IG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNTY2MSApO1xuXG5cdGxldCBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTtcblx0bGV0IHZlcnNpb24gPSAwO1xuXHRjb25zdCBnbFZlcnNpb24gPSBnbC5nZXRQYXJhbWV0ZXIoIDc5MzggKTtcblxuXHRpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnV2ViR0wnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMIChcXGQpLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApO1xuXG5cdH0gZWxzZSBpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnT3BlbkdMIEVTJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15PcGVuR0wgRVMgKFxcZCkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMi4wICk7XG5cblx0fVxuXG5cdGxldCBjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xuXHRsZXQgY3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRjb25zdCBzY2lzc29yUGFyYW0gPSBnbC5nZXRQYXJhbWV0ZXIoIDMwODggKTtcblx0Y29uc3Qgdmlld3BvcnRQYXJhbSA9IGdsLmdldFBhcmFtZXRlciggMjk3OCApO1xuXG5cdGNvbnN0IGN1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHNjaXNzb3JQYXJhbSApO1xuXHRjb25zdCBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSggdmlld3BvcnRQYXJhbSApO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoIHR5cGUsIHRhcmdldCwgY291bnQgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoIDQgKTsgLy8gNCBpcyByZXF1aXJlZCB0byBtYXRjaCBkZWZhdWx0IHVucGFjayBhbGlnbm1lbnQgb2YgNC5cblx0XHRjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoIHR5cGUsIHRleHR1cmUgKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCAxMDI0MSwgOTcyOCApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQwLCA5NzI4ICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UyRCggdGFyZ2V0ICsgaSwgMCwgNjQwOCwgMSwgMSwgMCwgNjQwOCwgNTEyMSwgZGF0YSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGNvbnN0IGVtcHR5VGV4dHVyZXMgPSB7fTtcblx0ZW1wdHlUZXh0dXJlc1sgMzU1MyBdID0gY3JlYXRlVGV4dHVyZSggMzU1MywgMzU1MywgMSApO1xuXHRlbXB0eVRleHR1cmVzWyAzNDA2NyBdID0gY3JlYXRlVGV4dHVyZSggMzQwNjcsIDM0MDY5LCA2ICk7XG5cblx0Ly8gaW5pdFxuXG5cdGNvbG9yQnVmZmVyLnNldENsZWFyKCAwLCAwLCAwLCAxICk7XG5cdGRlcHRoQnVmZmVyLnNldENsZWFyKCAxICk7XG5cdHN0ZW5jaWxCdWZmZXIuc2V0Q2xlYXIoIDAgKTtcblxuXHRlbmFibGUoIDI5MjkgKTtcblx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggTGVzc0VxdWFsRGVwdGggKTtcblxuXHRzZXRGbGlwU2lkZWQoIGZhbHNlICk7XG5cdHNldEN1bGxGYWNlKCBDdWxsRmFjZUJhY2sgKTtcblx0ZW5hYmxlKCAyODg0ICk7XG5cblx0c2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGVuYWJsZSggaWQgKSB7XG5cblx0XHRpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IHRydWUgKSB7XG5cblx0XHRcdGdsLmVuYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLmRpc2FibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRGcmFtZWJ1ZmZlciggdGFyZ2V0LCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdGlmICggY3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyB0YXJnZXQgXSAhPT0gZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggdGFyZ2V0LCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIHRhcmdldCBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdFx0Ly8gMzYwMDkgaXMgZXF1aXZhbGVudCB0byAzNjE2MFxuXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSAzNjAwOSApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgMzYxNjAgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gMzYxNjAgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnNbIDM2MDA5IF0gPSBmcmFtZWJ1ZmZlcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRyYXdCdWZmZXJzKCByZW5kZXJUYXJnZXQsIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0bGV0IGRyYXdCdWZmZXJzID0gZGVmYXVsdERyYXdidWZmZXJzO1xuXG5cdFx0bGV0IG5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0ZHJhd0J1ZmZlcnMgPSBjdXJyZW50RHJhd2J1ZmZlcnMuZ2V0KCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZHJhd0J1ZmZlcnMgPSBbXTtcblx0XHRcdFx0Y3VycmVudERyYXdidWZmZXJzLnNldCggZnJhbWVidWZmZXIsIGRyYXdCdWZmZXJzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdGlmICggZHJhd0J1ZmZlcnMubGVuZ3RoICE9PSB0ZXh0dXJlcy5sZW5ndGggfHwgZHJhd0J1ZmZlcnNbIDAgXSAhPT0gMzYwNjQgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGRyYXdCdWZmZXJzWyBpIF0gPSAzNjA2NCArIGk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkcmF3QnVmZmVycy5sZW5ndGggPSB0ZXh0dXJlcy5sZW5ndGg7XG5cblx0XHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggZHJhd0J1ZmZlcnNbIDAgXSAhPT0gMzYwNjQgKSB7XG5cblx0XHRcdFx0XHRkcmF3QnVmZmVyc1sgMCBdID0gMzYwNjQ7XG5cblx0XHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzWyAwIF0gIT09IDEwMjkgKSB7XG5cblx0XHRcdFx0ZHJhd0J1ZmZlcnNbIDAgXSA9IDEwMjk7XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiApIHtcblxuXHRcdFx0XHRnbC5kcmF3QnVmZmVycyggZHJhd0J1ZmZlcnMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRleHRlbnNpb25zLmdldCggJ1dFQkdMX2RyYXdfYnVmZmVycycgKS5kcmF3QnVmZmVyc1dFQkdMKCBkcmF3QnVmZmVycyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7XG5cblx0XHRcdGdsLnVzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdFx0Y3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0Y29uc3QgZXF1YXRpb25Ub0dMID0ge1xuXHRcdFsgQWRkRXF1YXRpb24gXTogMzI3NzQsXG5cdFx0WyBTdWJ0cmFjdEVxdWF0aW9uIF06IDMyNzc4LFxuXHRcdFsgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gXTogMzI3Nzlcblx0fTtcblxuXHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0ZXF1YXRpb25Ub0dMWyBNaW5FcXVhdGlvbiBdID0gMzI3NzU7XG5cdFx0ZXF1YXRpb25Ub0dMWyBNYXhFcXVhdGlvbiBdID0gMzI3NzY7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxuXHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRlcXVhdGlvblRvR0xbIE1pbkVxdWF0aW9uIF0gPSBleHRlbnNpb24uTUlOX0VYVDtcblx0XHRcdGVxdWF0aW9uVG9HTFsgTWF4RXF1YXRpb24gXSA9IGV4dGVuc2lvbi5NQVhfRVhUO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb25zdCBmYWN0b3JUb0dMID0ge1xuXHRcdFsgWmVyb0ZhY3RvciBdOiAwLFxuXHRcdFsgT25lRmFjdG9yIF06IDEsXG5cdFx0WyBTcmNDb2xvckZhY3RvciBdOiA3NjgsXG5cdFx0WyBTcmNBbHBoYUZhY3RvciBdOiA3NzAsXG5cdFx0WyBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIF06IDc3Nixcblx0XHRbIERzdENvbG9yRmFjdG9yIF06IDc3NCxcblx0XHRbIERzdEFscGhhRmFjdG9yIF06IDc3Mixcblx0XHRbIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgXTogNzY5LFxuXHRcdFsgT25lTWludXNTcmNBbHBoYUZhY3RvciBdOiA3NzEsXG5cdFx0WyBPbmVNaW51c0RzdENvbG9yRmFjdG9yIF06IDc3NSxcblx0XHRbIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgXTogNzczXG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0QmxlbmRpbmcoIGJsZW5kaW5nLCBibGVuZEVxdWF0aW9uLCBibGVuZFNyYywgYmxlbmREc3QsIGJsZW5kRXF1YXRpb25BbHBoYSwgYmxlbmRTcmNBbHBoYSwgYmxlbmREc3RBbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0aWYgKCBibGVuZGluZyA9PT0gTm9CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGRpc2FibGUoIDMwNDIgKTtcblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGVuYWJsZSggMzA0MiApO1xuXHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kaW5nICE9PSBDdXN0b21CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBibGVuZGluZyAhPT0gY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gY3VycmVudFByZW11bHRpcGxlZEFscGhhICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudEJsZW5kRXF1YXRpb24gIT09IEFkZEVxdWF0aW9uIHx8IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgIT09IEFkZEVxdWF0aW9uICkge1xuXG5cdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvbiggMzI3NzQgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XG5cdFx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IEFkZEVxdWF0aW9uO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMSwgNzcxLCAxLCA3NzEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCAxLCAxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCAwLCA3NjksIDAsIDEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDc2OCwgMCwgNzcwICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggNzcwLCA3NzEsIDEsIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDc3MCwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMCwgNzY5LCAwLCAxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggMCwgNzY4ICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdFx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3VzdG9tIGJsZW5kaW5nXG5cblx0XHRibGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGEgfHwgYmxlbmRFcXVhdGlvbjtcblx0XHRibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYztcblx0XHRibGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYSB8fCBibGVuZERzdDtcblxuXHRcdGlmICggYmxlbmRFcXVhdGlvbiAhPT0gY3VycmVudEJsZW5kRXF1YXRpb24gfHwgYmxlbmRFcXVhdGlvbkFscGhhICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbiBdLCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb25BbHBoYSBdICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJsZW5kU3JjICE9PSBjdXJyZW50QmxlbmRTcmMgfHwgYmxlbmREc3QgIT09IGN1cnJlbnRCbGVuZERzdCB8fCBibGVuZFNyY0FscGhhICE9PSBjdXJyZW50QmxlbmRTcmNBbHBoYSB8fCBibGVuZERzdEFscGhhICE9PSBjdXJyZW50QmxlbmREc3RBbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGZhY3RvclRvR0xbIGJsZW5kU3JjIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0IF0sIGZhY3RvclRvR0xbIGJsZW5kU3JjQWxwaGEgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3RBbHBoYSBdICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IGJsZW5kU3JjO1xuXHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7XG5cdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XG5cdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGE7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBudWxsO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICkge1xuXG5cdFx0bWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZVxuXHRcdFx0PyBkaXNhYmxlKCAyODg0IClcblx0XHRcdDogZW5hYmxlKCAyODg0ICk7XG5cblx0XHRsZXQgZmxpcFNpZGVkID0gKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApO1xuXHRcdGlmICggZnJvbnRGYWNlQ1cgKSBmbGlwU2lkZWQgPSAhIGZsaXBTaWRlZDtcblxuXHRcdHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICk7XG5cblx0XHQoIG1hdGVyaWFsLmJsZW5kaW5nID09PSBOb3JtYWxCbGVuZGluZyAmJiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgKVxuXHRcdFx0PyBzZXRCbGVuZGluZyggTm9CbGVuZGluZyApXG5cdFx0XHQ6IHNldEJsZW5kaW5nKCBtYXRlcmlhbC5ibGVuZGluZywgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbiwgbWF0ZXJpYWwuYmxlbmRTcmMsIG1hdGVyaWFsLmJsZW5kRHN0LCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEsIG1hdGVyaWFsLmJsZW5kU3JjQWxwaGEsIG1hdGVyaWFsLmJsZW5kRHN0QWxwaGEsIG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggbWF0ZXJpYWwuZGVwdGhGdW5jICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0VGVzdCggbWF0ZXJpYWwuZGVwdGhUZXN0ICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuZGVwdGhXcml0ZSApO1xuXHRcdGNvbG9yQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmNvbG9yV3JpdGUgKTtcblxuXHRcdGNvbnN0IHN0ZW5jaWxXcml0ZSA9IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZTtcblx0XHRzdGVuY2lsQnVmZmVyLnNldFRlc3QoIHN0ZW5jaWxXcml0ZSApO1xuXHRcdGlmICggc3RlbmNpbFdyaXRlICkge1xuXG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZU1hc2sgKTtcblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0RnVuYyggbWF0ZXJpYWwuc3RlbmNpbEZ1bmMsIG1hdGVyaWFsLnN0ZW5jaWxSZWYsIG1hdGVyaWFsLnN0ZW5jaWxGdW5jTWFzayApO1xuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRPcCggbWF0ZXJpYWwuc3RlbmNpbEZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpQYXNzICk7XG5cblx0XHR9XG5cblx0XHRzZXRQb2x5Z29uT2Zmc2V0KCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0LCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yLCBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgKTtcblxuXHRcdG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9PT0gdHJ1ZVxuXHRcdFx0PyBlbmFibGUoIDMyOTI2IClcblx0XHRcdDogZGlzYWJsZSggMzI5MjYgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApIHtcblxuXHRcdGlmICggY3VycmVudEZsaXBTaWRlZCAhPT0gZmxpcFNpZGVkICkge1xuXG5cdFx0XHRpZiAoIGZsaXBTaWRlZCApIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIDIzMDUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRpZiAoIGN1bGxGYWNlICE9PSBDdWxsRmFjZU5vbmUgKSB7XG5cblx0XHRcdGVuYWJsZSggMjg4NCApO1xuXG5cdFx0XHRpZiAoIGN1bGxGYWNlICE9PSBjdXJyZW50Q3VsbEZhY2UgKSB7XG5cblx0XHRcdFx0aWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VCYWNrICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjkgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDI4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCAxMDMyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAyODg0ICk7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7XG5cblx0XHRcdGlmICggbGluZVdpZHRoQXZhaWxhYmxlICkgZ2wubGluZVdpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdGVuYWJsZSggMzI4MjMgKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgIT09IHVuaXRzICkge1xuXG5cdFx0XHRcdGdsLnBvbHlnb25PZmZzZXQoIGZhY3RvciwgdW5pdHMgKTtcblxuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IGZhY3Rvcjtcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCAzMjgyMyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRpZiAoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0XHRlbmFibGUoIDMwODkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMwODkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gdGV4dHVyZVxuXG5cdGZ1bmN0aW9uIGFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApIHtcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB3ZWJnbFNsb3QgPSAzMzk4NCArIG1heFRleHR1cmVzIC0gMTtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0Y3VycmVudFRleHR1cmVTbG90ID0gd2ViZ2xTbG90O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0YWN0aXZlVGV4dHVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcblx0XHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXSA9IGJvdW5kVGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdGlmICggYm91bmRUZXh0dXJlLnR5cGUgIT09IHdlYmdsVHlwZSB8fCBib3VuZFRleHR1cmUudGV4dHVyZSAhPT0gd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5iaW5kVGV4dHVyZSgpIHtcblxuXHRcdGNvbnN0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgYm91bmRUZXh0dXJlLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIGJvdW5kVGV4dHVyZS50eXBlLCBudWxsICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleFN1YkltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRC5hcHBseSggZ2wsIGFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdG9yYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhTdG9yYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3RvcmFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3RvcmFnZTNELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleEltYWdlMkQoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleEltYWdlM0QoKSB7XG5cblx0XHR0cnkge1xuXG5cdFx0XHRnbC50ZXhJbWFnZTNELmFwcGx5KCBnbCwgYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2Npc3Nvciggc2Npc3NvciApIHtcblxuXHRcdGlmICggY3VycmVudFNjaXNzb3IuZXF1YWxzKCBzY2lzc29yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTtcblx0XHRcdGN1cnJlbnRTY2lzc29yLmNvcHkoIHNjaXNzb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmlld3BvcnQoIHZpZXdwb3J0ICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Vmlld3BvcnQuZXF1YWxzKCB2aWV3cG9ydCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wudmlld3BvcnQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LnosIHZpZXdwb3J0LncgKTtcblx0XHRcdGN1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0Ly8gcmVzZXQgc3RhdGVcblxuXHRcdGdsLmRpc2FibGUoIDMwNDIgKTtcblx0XHRnbC5kaXNhYmxlKCAyODg0ICk7XG5cdFx0Z2wuZGlzYWJsZSggMjkyOSApO1xuXHRcdGdsLmRpc2FibGUoIDMyODIzICk7XG5cdFx0Z2wuZGlzYWJsZSggMzA4OSApO1xuXHRcdGdsLmRpc2FibGUoIDI5NjAgKTtcblx0XHRnbC5kaXNhYmxlKCAzMjkyNiApO1xuXG5cdFx0Z2wuYmxlbmRFcXVhdGlvbiggMzI3NzQgKTtcblx0XHRnbC5ibGVuZEZ1bmMoIDEsIDAgKTtcblx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMSwgMCwgMSwgMCApO1xuXG5cdFx0Z2wuY29sb3JNYXNrKCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlICk7XG5cdFx0Z2wuY2xlYXJDb2xvciggMCwgMCwgMCwgMCApO1xuXG5cdFx0Z2wuZGVwdGhNYXNrKCB0cnVlICk7XG5cdFx0Z2wuZGVwdGhGdW5jKCA1MTMgKTtcblx0XHRnbC5jbGVhckRlcHRoKCAxICk7XG5cblx0XHRnbC5zdGVuY2lsTWFzayggMHhmZmZmZmZmZiApO1xuXHRcdGdsLnN0ZW5jaWxGdW5jKCA1MTksIDAsIDB4ZmZmZmZmZmYgKTtcblx0XHRnbC5zdGVuY2lsT3AoIDc2ODAsIDc2ODAsIDc2ODAgKTtcblx0XHRnbC5jbGVhclN0ZW5jaWwoIDAgKTtcblxuXHRcdGdsLmN1bGxGYWNlKCAxMDI5ICk7XG5cdFx0Z2wuZnJvbnRGYWNlKCAyMzA1ICk7XG5cblx0XHRnbC5wb2x5Z29uT2Zmc2V0KCAwLCAwICk7XG5cblx0XHRnbC5hY3RpdmVUZXh0dXJlKCAzMzk4NCApO1xuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdFx0aWYgKCBpc1dlYkdMMiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCAzNjAwOSwgbnVsbCApO1xuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCAzNjAwOCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0Z2wudXNlUHJvZ3JhbSggbnVsbCApO1xuXG5cdFx0Z2wubGluZVdpZHRoKCAxICk7XG5cblx0XHRnbC5zY2lzc29yKCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblx0XHRnbC52aWV3cG9ydCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cblx0XHQvLyByZXNldCBpbnRlcm5hbHNcblxuXHRcdGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyA9IHt9O1xuXHRcdGN1cnJlbnREcmF3YnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cdFx0ZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0XHRjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cdFx0Y3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0XHRjdXJyZW50U2Npc3Nvci5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXHRcdGN1cnJlbnRWaWV3cG9ydC5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0ZW5hYmxlOiBlbmFibGUsXG5cdFx0ZGlzYWJsZTogZGlzYWJsZSxcblxuXHRcdGJpbmRGcmFtZWJ1ZmZlcjogYmluZEZyYW1lYnVmZmVyLFxuXHRcdGRyYXdCdWZmZXJzOiBkcmF3QnVmZmVycyxcblxuXHRcdHVzZVByb2dyYW06IHVzZVByb2dyYW0sXG5cblx0XHRzZXRCbGVuZGluZzogc2V0QmxlbmRpbmcsXG5cdFx0c2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLFxuXG5cdFx0c2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsXG5cdFx0c2V0Q3VsbEZhY2U6IHNldEN1bGxGYWNlLFxuXG5cdFx0c2V0TGluZVdpZHRoOiBzZXRMaW5lV2lkdGgsXG5cdFx0c2V0UG9seWdvbk9mZnNldDogc2V0UG9seWdvbk9mZnNldCxcblxuXHRcdHNldFNjaXNzb3JUZXN0OiBzZXRTY2lzc29yVGVzdCxcblxuXHRcdGFjdGl2ZVRleHR1cmU6IGFjdGl2ZVRleHR1cmUsXG5cdFx0YmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLFxuXHRcdHVuYmluZFRleHR1cmU6IHVuYmluZFRleHR1cmUsXG5cdFx0Y29tcHJlc3NlZFRleEltYWdlMkQ6IGNvbXByZXNzZWRUZXhJbWFnZTJELFxuXHRcdHRleEltYWdlMkQ6IHRleEltYWdlMkQsXG5cdFx0dGV4SW1hZ2UzRDogdGV4SW1hZ2UzRCxcblxuXHRcdHRleFN0b3JhZ2UyRDogdGV4U3RvcmFnZTJELFxuXHRcdHRleFN0b3JhZ2UzRDogdGV4U3RvcmFnZTNELFxuXHRcdHRleFN1YkltYWdlMkQ6IHRleFN1YkltYWdlMkQsXG5cdFx0dGV4U3ViSW1hZ2UzRDogdGV4U3ViSW1hZ2UzRCxcblx0XHRjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRDogY29tcHJlc3NlZFRleFN1YkltYWdlMkQsXG5cblx0XHRzY2lzc29yOiBzY2lzc29yLFxuXHRcdHZpZXdwb3J0OiB2aWV3cG9ydCxcblxuXHRcdHJlc2V0OiByZXNldFxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblx0Y29uc3QgbWF4VGV4dHVyZXMgPSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXM7XG5cdGNvbnN0IG1heEN1YmVtYXBTaXplID0gY2FwYWJpbGl0aWVzLm1heEN1YmVtYXBTaXplO1xuXHRjb25zdCBtYXhUZXh0dXJlU2l6ZSA9IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZTtcblx0Y29uc3QgbWF4U2FtcGxlcyA9IGNhcGFiaWxpdGllcy5tYXhTYW1wbGVzO1xuXHRjb25zdCBtdWx0aXNhbXBsZWRSVFRFeHQgPSBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA/IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApIDogbnVsbDtcblxuXHRjb25zdCBfdmlkZW9UZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7XG5cdGxldCBfY2FudmFzO1xuXG5cdGNvbnN0IF9zb3VyY2VzID0gbmV3IFdlYWtNYXAoKTsgLy8gbWFwcyBXZWJnbFRleHR1cmUgb2JqZWN0cyB0byBpbnN0YW5jZXMgb2YgU291cmNlXG5cblx0Ly8gY29yZG92YSBpT1MgKGFzIG9mIDUuMCkgc3RpbGwgdXNlcyBVSVdlYlZpZXcsIHdoaWNoIHByb3ZpZGVzIE9mZnNjcmVlbkNhbnZhcyxcblx0Ly8gYWxzbyBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dChcIndlYmdsXCIpLCBidXQgbm90IE9mZnNjcmVlbkNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikhXG5cdC8vIFNvbWUgaW1wbGVtZW50YXRpb25zIG1heSBvbmx5IGltcGxlbWVudCBPZmZzY3JlZW5DYW52YXMgcGFydGlhbGx5IChlLmcuIGxhY2tpbmcgMmQpLlxuXG5cdGxldCB1c2VPZmZzY3JlZW5DYW52YXMgPSBmYWxzZTtcblxuXHR0cnkge1xuXG5cdFx0dXNlT2Zmc2NyZWVuQ2FudmFzID0gdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCdcblx0XHRcdCYmICggbmV3IE9mZnNjcmVlbkNhbnZhcyggMSwgMSApLmdldENvbnRleHQoICcyZCcgKSApICE9PSBudWxsO1xuXG5cdH0gY2F0Y2ggKCBlcnIgKSB7XG5cblx0XHQvLyBJZ25vcmUgYW55IGVycm9yc1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHQvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzXG5cblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cblx0XHRcdG5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltYWdlLCBuZWVkc1Bvd2VyT2ZUd28sIG5lZWRzTmV3Q2FudmFzLCBtYXhTaXplICkge1xuXG5cdFx0bGV0IHNjYWxlID0gMTtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIGlmIHRleHR1cmUgZXhjZWVkcyBtYXggc2l6ZVxuXG5cdFx0aWYgKCBpbWFnZS53aWR0aCA+IG1heFNpemUgfHwgaW1hZ2UuaGVpZ2h0ID4gbWF4U2l6ZSApIHtcblxuXHRcdFx0c2NhbGUgPSBtYXhTaXplIC8gTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHNjYWxlIDwgMSB8fCBuZWVkc1Bvd2VyT2ZUd28gPT09IHRydWUgKSB7XG5cblx0XHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgZm9yIGNlcnRhaW4gaW1hZ2UgdHlwZXNcblxuXHRcdFx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZmxvb3IgPSBuZWVkc1Bvd2VyT2ZUd28gPyBmbG9vclBvd2VyT2ZUd28gOiBNYXRoLmZsb29yO1xuXG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gZmxvb3IoIHNjYWxlICogaW1hZ2Uud2lkdGggKTtcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gZmxvb3IoIHNjYWxlICogaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gY3ViZSB0ZXh0dXJlcyBjYW4ndCByZXVzZSB0aGUgc2FtZSBjYW52YXNcblxuXHRcdFx0XHRjb25zdCBjYW52YXMgPSBuZWVkc05ld0NhbnZhcyA/IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIDogX2NhbnZhcztcblxuXHRcdFx0XHRjYW52YXMud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0Y2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0XHRjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBoYXMgYmVlbiByZXNpemVkIGZyb20gKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpIHRvICgnICsgd2lkdGggKyAneCcgKyBoZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoICdkYXRhJyBpbiBpbWFnZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGltYWdlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGlzUG93ZXJPZlR3byQxKCBpbWFnZSApIHtcblxuXHRcdHJldHVybiBpc1Bvd2VyT2ZUd28oIGltYWdlLndpZHRoICkgJiYgaXNQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApIHtcblxuXHRcdGlmICggaXNXZWJHTDIgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gKCB0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgKSB8fFxuXHRcdFx0KCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICYmIHN1cHBvcnRzTWlwcyAmJlxuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApIHtcblxuXHRcdF9nbC5nZW5lcmF0ZU1pcG1hcCggdGFyZ2V0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBpbnRlcm5hbEZvcm1hdE5hbWUsIGdsRm9ybWF0LCBnbFR5cGUsIGVuY29kaW5nLCBpc1ZpZGVvVGV4dHVyZSA9IGZhbHNlICkge1xuXG5cdFx0aWYgKCBpc1dlYkdMMiA9PT0gZmFsc2UgKSByZXR1cm4gZ2xGb3JtYXQ7XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0TmFtZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBfZ2xbIGludGVybmFsRm9ybWF0TmFtZSBdICE9PSB1bmRlZmluZWQgKSByZXR1cm4gX2dsWyBpbnRlcm5hbEZvcm1hdE5hbWUgXTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byB1c2Ugbm9uLWV4aXN0aW5nIFdlYkdMIGludGVybmFsIGZvcm1hdCBcXCcnICsgaW50ZXJuYWxGb3JtYXROYW1lICsgJ1xcJycgKTtcblxuXHRcdH1cblxuXHRcdGxldCBpbnRlcm5hbEZvcm1hdCA9IGdsRm9ybWF0O1xuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gNjQwMyApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjYgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzI2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMzEgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzI1O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDUxMjEgKSBpbnRlcm5hbEZvcm1hdCA9IDMzMzIxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gMzMzMTkgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyODtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNztcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyMztcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDggKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzNDgzNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzNDg0Mjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgJiYgaXNWaWRlb1RleHR1cmUgPT09IGZhbHNlICkgPyAzNTkwNyA6IDMyODU2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IDMyODE5ICkgaW50ZXJuYWxGb3JtYXQgPSAzMjg1NDtcblx0XHRcdGlmICggZ2xUeXBlID09PSAzMjgyMCApIGludGVybmFsRm9ybWF0ID0gMzI4NTU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0ID09PSAzMzMyNSB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjYgfHxcblx0XHRcdGludGVybmFsRm9ybWF0ID09PSAzMzMyNyB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjggfHxcblx0XHRcdGludGVybmFsRm9ybWF0ID09PSAzNDg0MiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4MzYgKSB7XG5cblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbnRlcm5hbEZvcm1hdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCBpbWFnZSwgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApID09PSB0cnVlIHx8ICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkgKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLmxvZzIoIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICkgKSArIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLm1pcG1hcHMgIT09IHVuZGVmaW5lZCAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gdXNlci1kZWZpbmVkIG1pcG1hcHNcblxuXHRcdFx0cmV0dXJuIHRleHR1cmUubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgJiYgQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICkge1xuXG5cdFx0XHRyZXR1cm4gaW1hZ2UubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB0ZXh0dXJlIHdpdGhvdXQgbWlwbWFwcyAob25seSBiYXNlIGxldmVsKVxuXG5cdFx0XHRyZXR1cm4gMTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gRmFsbGJhY2sgZmlsdGVycyBmb3Igbm9uLXBvd2VyLW9mLTIgdGV4dHVyZXNcblxuXHRmdW5jdGlvbiBmaWx0ZXJGYWxsYmFjayggZiApIHtcblxuXHRcdGlmICggZiA9PT0gTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRyZXR1cm4gOTcyODtcblxuXHRcdH1cblxuXHRcdHJldHVybiA5NzI5O1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5kZWxldGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25SZW5kZXJUYXJnZXREaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHQvLyBjaGVjayBpZiBpdCdzIG5lY2Vzc2FyeSB0byByZW1vdmUgdGhlIFdlYkdMVGV4dHVyZSBvYmplY3RcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRleHR1cmUuc291cmNlO1xuXHRcdGNvbnN0IHdlYmdsVGV4dHVyZXMgPSBfc291cmNlcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCB3ZWJnbFRleHR1cmVzICkge1xuXG5cdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF07XG5cdFx0XHR3ZWJnbFRleHR1cmUudXNlZFRpbWVzIC0tO1xuXG5cdFx0XHQvLyB0aGUgV2ViR0xUZXh0dXJlIG9iamVjdCBpcyBub3QgdXNlZCBhbnltb3JlLCByZW1vdmUgaXRcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUudXNlZFRpbWVzID09PSAwICkge1xuXG5cdFx0XHRcdGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgdGhlIHdlYWsgbWFwIGVudHJ5IGlmIG5vIFdlYkdMVGV4dHVyZSB1c2VzIHRoZSBzb3VyY2UgYW55bW9yZVxuXG5cdFx0XHRpZiAoIE9iamVjdC5rZXlzKCB3ZWJnbFRleHR1cmVzICkubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdF9zb3VyY2VzLmRlbGV0ZSggc291cmNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRjb25zdCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblx0XHRkZWxldGUgd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlWyBpIF0gKTtcblxuXHRcdFx0XHRpZiAoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cHJvcGVydGllcy5yZW1vdmUoIHRleHR1cmVbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZSApO1xuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRsZXQgdGV4dHVyZVVuaXRzID0gMDtcblxuXHRmdW5jdGlvbiByZXNldFRleHR1cmVVbml0cygpIHtcblxuXHRcdHRleHR1cmVVbml0cyA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFsbG9jYXRlVGV4dHVyZVVuaXQoKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0cztcblxuXHRcdGlmICggdGV4dHVyZVVuaXQgPj0gbWF4VGV4dHVyZXMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIG1heFRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHR0ZXh0dXJlVW5pdHMgKz0gMTtcblxuXHRcdHJldHVybiB0ZXh0dXJlVW5pdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VGV4dHVyZUNhY2hlS2V5KCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdGFycmF5LnB1c2goIHRleHR1cmUud3JhcFMgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBUICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5tYWdGaWx0ZXIgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLm1pbkZpbHRlciApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuYW5pc290cm9weSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmZvcm1hdCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUudHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5mbGlwWSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5lbmNvZGluZyApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICYmIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBubyBpbWFnZSBkYXRhIGZvdW5kLicgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU4NjYsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUzRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzMjg3OSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZEN1YmVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRjb25zdCB3cmFwcGluZ1RvR0wgPSB7XG5cdFx0WyBSZXBlYXRXcmFwcGluZyBdOiAxMDQ5Nyxcblx0XHRbIENsYW1wVG9FZGdlV3JhcHBpbmcgXTogMzMwNzEsXG5cdFx0WyBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIF06IDMzNjQ4XG5cdH07XG5cblx0Y29uc3QgZmlsdGVyVG9HTCA9IHtcblx0XHRbIE5lYXJlc3RGaWx0ZXIgXTogOTcyOCxcblx0XHRbIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIF06IDk5ODQsXG5cdFx0WyBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIF06IDk5ODYsXG5cblx0XHRbIExpbmVhckZpbHRlciBdOiA5NzI5LFxuXHRcdFsgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciBdOiA5OTg1LFxuXHRcdFsgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIF06IDk5ODdcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdGlmICggc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQyLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFMgXSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0Mywgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBUIF0gKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlVHlwZSA9PT0gMzI4NzkgfHwgdGV4dHVyZVR5cGUgPT09IDM1ODY2ICkge1xuXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMzI4ODIsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUiBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MCwgZmlsdGVyVG9HTFsgdGV4dHVyZS5tYWdGaWx0ZXIgXSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MSwgZmlsdGVyVG9HTFsgdGV4dHVyZS5taW5GaWx0ZXIgXSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MiwgMzMwNzEgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDMsIDMzMDcxICk7XG5cblx0XHRcdGlmICggdGV4dHVyZVR5cGUgPT09IDMyODc5IHx8IHRleHR1cmVUeXBlID09PSAzNTg2NiApIHtcblxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDMyODgyLCAzMzA3MSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS53cmFwUyBhbmQgVGV4dHVyZS53cmFwVCBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcuJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDAsIGZpbHRlckZhbGxiYWNrKCB0ZXh0dXJlLm1hZ0ZpbHRlciApICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQxLCBmaWx0ZXJGYWxsYmFjayggdGV4dHVyZS5taW5GaWx0ZXIgKSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUubWluRmlsdGVyICE9PSBOZWFyZXN0RmlsdGVyICYmIHRleHR1cmUubWluRmlsdGVyICE9PSBMaW5lYXJGaWx0ZXIgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLm1pbkZpbHRlciBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLk5lYXJlc3RGaWx0ZXIgb3IgVEhSRUUuTGluZWFyRmlsdGVyLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IGZhbHNlICkgcmV0dXJuOyAvLyB2ZXJpZnkgZXh0ZW5zaW9uIGZvciBXZWJHTCAxIGFuZCBXZWJHTCAyXG5cdFx0XHRpZiAoIGlzV2ViR0wyID09PSBmYWxzZSAmJiAoIHRleHR1cmUudHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApID09PSBmYWxzZSApICkgcmV0dXJuOyAvLyB2ZXJpZnkgZXh0ZW5zaW9uIGZvciBXZWJHTCAxIG9ubHlcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmFuaXNvdHJvcHkgPiAxIHx8IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSApIHtcblxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyZiggdGV4dHVyZVR5cGUsIGV4dGVuc2lvbi5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgTWF0aC5taW4oIHRleHR1cmUuYW5pc290cm9weSwgY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKSApICk7XG5cdFx0XHRcdHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX19jdXJyZW50QW5pc290cm9weSA9IHRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKSB7XG5cblx0XHRsZXQgZm9yY2VVcGxvYWQgPSBmYWxzZTtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPSB0cnVlO1xuXG5cdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3JlYXRlIFNvdXJjZSA8LT4gV2ViR0xUZXh0dXJlcyBtYXBwaW5nIGlmIG5lY2Vzc2FyeVxuXG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cdFx0bGV0IHdlYmdsVGV4dHVyZXMgPSBfc291cmNlcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCB3ZWJnbFRleHR1cmVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHdlYmdsVGV4dHVyZXMgPSB7fTtcblx0XHRcdF9zb3VyY2VzLnNldCggc291cmNlLCB3ZWJnbFRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHQvLyBjaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgV2ViR0xUZXh0dXJlIG9iamVjdCBmb3IgdGhlIGdpdmVuIHRleHR1cmUgcGFyYW1ldGVyc1xuXG5cdFx0Y29uc3QgdGV4dHVyZUNhY2hlS2V5ID0gZ2V0VGV4dHVyZUNhY2hlS2V5KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmVDYWNoZUtleSAhPT0gdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSApIHtcblxuXHRcdFx0Ly8gaWYgbm90LCBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgV2ViR0xUZXh0dXJlXG5cblx0XHRcdGlmICggd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBjcmVhdGUgbmV3IGVudHJ5XG5cblx0XHRcdFx0d2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0gPSB7XG5cdFx0XHRcdFx0dGV4dHVyZTogX2dsLmNyZWF0ZVRleHR1cmUoKSxcblx0XHRcdFx0XHR1c2VkVGltZXM6IDBcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdFx0XHQvLyB3aGVuIGEgbmV3IGluc3RhbmNlIG9mIFdlYkdMVGV4dHVyZSB3YXMgY3JlYXRlZCwgYSB0ZXh0dXJlIHVwbG9hZCBpcyByZXF1aXJlZFxuXHRcdFx0XHQvLyBldmVuIGlmIHRoZSBpbWFnZSBjb250ZW50cyBhcmUgaWRlbnRpY2FsXG5cblx0XHRcdFx0Zm9yY2VVcGxvYWQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHdlYmdsVGV4dHVyZXNbIHRleHR1cmVDYWNoZUtleSBdLnVzZWRUaW1lcyArKztcblxuXHRcdFx0Ly8gZXZlcnkgdGltZSB0aGUgdGV4dHVyZSBjYWNoZSBrZXkgY2hhbmdlcywgaXQncyBuZWNlc3NhcnkgdG8gY2hlY2sgaWYgYW4gaW5zdGFuY2Ugb2Zcblx0XHRcdC8vIFdlYkdMVGV4dHVyZSBjYW4gYmUgZGVsZXRlZCBpbiBvcmRlciB0byBhdm9pZCBhIG1lbW9yeSBsZWFrLlxuXG5cdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF07XG5cblx0XHRcdGlmICggd2ViZ2xUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0d2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0XHRpZiAoIHdlYmdsVGV4dHVyZS51c2VkVGltZXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0b3JlIHJlZmVyZW5jZXMgdG8gY2FjaGUga2V5IGFuZCBXZWJHTFRleHR1cmUgb2JqZWN0XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgPSB0ZXh0dXJlQ2FjaGVLZXk7XG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IHdlYmdsVGV4dHVyZXNbIHRleHR1cmVDYWNoZUtleSBdLnRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZm9yY2VVcGxvYWQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0bGV0IHRleHR1cmVUeXBlID0gMzU1MztcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IDM1ODY2O1xuXHRcdGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IDMyODc5O1xuXG5cdFx0Y29uc3QgZm9yY2VVcGxvYWQgPSBpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTtcblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdGlmICggc291cmNlLnZlcnNpb24gIT09IHNvdXJjZS5fX2N1cnJlbnRWZXJzaW9uIHx8IGZvcmNlVXBsb2FkID09PSB0cnVlICkge1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCB0ZXh0dXJlLmZsaXBZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQxLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNywgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDMsIDAgKTtcblxuXHRcdFx0Y29uc3QgbmVlZHNQb3dlck9mVHdvID0gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApICYmIGlzUG93ZXJPZlR3byQxKCB0ZXh0dXJlLmltYWdlICkgPT09IGZhbHNlO1xuXHRcdFx0bGV0IGltYWdlID0gcmVzaXplSW1hZ2UoIHRleHR1cmUuaW1hZ2UsIG5lZWRzUG93ZXJPZlR3bywgZmFsc2UsIG1heFRleHR1cmVTaXplICk7XG5cdFx0XHRpbWFnZSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICk7XG5cblx0XHRcdGNvbnN0IHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byQxKCBpbWFnZSApIHx8IGlzV2ViR0wyLFxuXHRcdFx0XHRnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cblx0XHRcdGxldCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmVuY29kaW5nLCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICk7XG5cblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICk7XG5cblx0XHRcdGxldCBtaXBtYXA7XG5cdFx0XHRjb25zdCBtaXBtYXBzID0gdGV4dHVyZS5taXBtYXBzO1xuXG5cdFx0XHRjb25zdCB1c2VUZXhTdG9yYWdlID0gKCBpc1dlYkdMMiAmJiB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICE9PSB0cnVlICk7XG5cdFx0XHRjb25zdCBhbGxvY2F0ZU1lbW9yeSA9ICggdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID09PSB1bmRlZmluZWQgKTtcblx0XHRcdGNvbnN0IGxldmVscyA9IGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Ly8gcG9wdWxhdGUgZGVwdGggdGV4dHVyZSB3aXRoIGR1bW15IGRhdGFcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gNjQwMjtcblxuXHRcdFx0XHRpZiAoIGlzV2ViR0wyICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM2MDEyO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS50eXBlID09PSBVbnNpZ25lZEludFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzMzE5MDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUudHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzUwNTY7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzMxODk7IC8vIFdlYkdMMiByZXF1aXJlcyBzaXplZCBpbnRlcm5hbGZvcm1hdCBmb3IgZ2xUZXhJbWFnZTJEXG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHTFJlbmRlcmVyOiBGbG9hdGluZyBwb2ludCBkZXB0aCB0ZXh0dXJlIHJlcXVpcmVzIFdlYkdMMi4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHZhbGlkYXRpb24gY2hlY2tzIGZvciBXZWJHTCAxXG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMiApIHtcblxuXHRcdFx0XHRcdC8vIFRoZSBlcnJvciBJTlZBTElEX09QRVJBVElPTiBpcyBnZW5lcmF0ZWQgYnkgdGV4SW1hZ2UyRCBpZiBmb3JtYXQgYW5kIGludGVybmFsZm9ybWF0IGFyZVxuXHRcdFx0XHRcdC8vIERFUFRIX0NPTVBPTkVOVCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfU0hPUlQgb3IgVU5TSUdORURfSU5UXG5cdFx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkU2hvcnRUeXBlICYmIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRTaG9ydFR5cGUgb3IgVW5zaWduZWRJbnRUeXBlIGZvciBEZXB0aEZvcm1hdCBEZXB0aFRleHR1cmUuJyApO1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0XHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMiApIHtcblxuXHRcdFx0XHRcdC8vIERlcHRoIHN0ZW5jaWwgdGV4dHVyZXMgbmVlZCB0aGUgREVQVEhfU1RFTkNJTCBpbnRlcm5hbCBmb3JtYXRcblx0XHRcdFx0XHQvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLylcblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzQwNDE7XG5cblx0XHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0XHQvLyBERVBUSF9TVEVOQ0lMIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9JTlRfMjRfOF9XRUJHTC5cblx0XHRcdFx0XHQvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLylcblx0XHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRJbnQyNDhUeXBlIGZvciBEZXB0aFN0ZW5jaWxGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZS50eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXHRcdFx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vXG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNTUzLCAxLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcblx0XHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIDM1NTMsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwc1sgMCBdLndpZHRoLCBtaXBtYXBzWyAwIF0uaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzU1MywgaSwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzU1MywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzU1MywgMCwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggMzU1MywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCAzNTUzLCBpLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGdsRm9ybWF0LCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzU1MywgaSwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTNEKCAzNTg2NiwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggMzU4NjYsIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIDM1ODY2LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTNEKCAzMjg3OSwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggMzI4NzksIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIDMyODc5LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIDM1NTMsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHJlZ3VsYXIgVGV4dHVyZSAoaW1hZ2UsIHZpZGVvLCBjYW52YXMpXG5cblx0XHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIHN1cHBvcnRzTWlwcyApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNTUzLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM1NTMsIGksIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNTUzLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCAzNTUzLCAwLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0ZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZS5fX2N1cnJlbnRWZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkQ3ViZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCAhPT0gNiApIHJldHVybjtcblxuXHRcdGNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRpZiAoIHNvdXJjZS52ZXJzaW9uICE9PSBzb3VyY2UuX19jdXJyZW50VmVyc2lvbiB8fCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MSwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTcsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQzLCAwICk7XG5cblx0XHRcdGNvbnN0IGlzQ29tcHJlc3NlZCA9ICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlIHx8IHRleHR1cmUuaW1hZ2VbIDAgXS5pc0NvbXByZXNzZWRUZXh0dXJlICk7XG5cdFx0XHRjb25zdCBpc0RhdGFUZXh0dXJlID0gKCB0ZXh0dXJlLmltYWdlWyAwIF0gJiYgdGV4dHVyZS5pbWFnZVsgMCBdLmlzRGF0YVRleHR1cmUgKTtcblxuXHRcdFx0Y29uc3QgY3ViZUltYWdlID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGlzQ29tcHJlc3NlZCAmJiAhIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlWyBpIF0sIGZhbHNlLCB0cnVlLCBtYXhDdWJlbWFwU2l6ZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IGlzRGF0YVRleHR1cmUgPyB0ZXh0dXJlLmltYWdlWyBpIF0uaW1hZ2UgOiB0ZXh0dXJlLmltYWdlWyBpIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gdmVyaWZ5Q29sb3JTcGFjZSggdGV4dHVyZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBpbWFnZSA9IGN1YmVJbWFnZVsgMCBdLFxuXHRcdFx0XHRzdXBwb3J0c01pcHMgPSBpc1Bvd2VyT2ZUd28kMSggaW1hZ2UgKSB8fCBpc1dlYkdMMixcblx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5lbmNvZGluZyApLFxuXHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cblx0XHRcdGNvbnN0IHVzZVRleFN0b3JhZ2UgPSAoIGlzV2ViR0wyICYmIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgIT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGFsbG9jYXRlTWVtb3J5ID0gKCB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPT09IHVuZGVmaW5lZCApO1xuXHRcdFx0bGV0IGxldmVscyA9IGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzQwNjcsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRsZXQgbWlwbWFwcztcblxuXHRcdFx0aWYgKCBpc0NvbXByZXNzZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNDA2NywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtaXBtYXBzID0gY3ViZUltYWdlWyBpIF0ubWlwbWFwcztcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBtaXBtYXAgPSBtaXBtYXBzWyBqIF07XG5cblx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIDM0MDY5ICsgaSwgaiwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCAzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldFRleHR1cmVDdWJlKCknICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIDM0MDY5ICsgaSwgaiwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHQvLyBUT0RPOiBVbmlmb3JtbHkgaGFuZGxlIG1pcG1hcCBkZWZpbml0aW9uc1xuXHRcdFx0XHRcdC8vIE5vcm1hbCB0ZXh0dXJlcyBhbmQgY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIGRlZmluZSBiYXNlIGxldmVsICsgbWlwcyB3aXRoIHRoZWlyIG1pcG1hcCBhcnJheVxuXHRcdFx0XHRcdC8vIFVuY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIHVzZSB0aGVpciBtaXBtYXAgYXJyYXkgb25seSBmb3IgbWlwcyAobm8gYmFzZSBsZXZlbClcblxuXHRcdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkgbGV2ZWxzICsrO1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCAzNDA2NywgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIDAgXS53aWR0aCwgY3ViZUltYWdlWyAwIF0uaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCAzNDA2OSArIGksIDAsIDAsIDAsIGN1YmVJbWFnZVsgaSBdLndpZHRoLCBjdWJlSW1hZ2VbIGkgXS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGN1YmVJbWFnZVsgaSBdLndpZHRoLCBjdWJlSW1hZ2VbIGkgXS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBtaXBtYXAgPSBtaXBtYXBzWyBqIF07XG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1pcG1hcEltYWdlID0gbWlwbWFwLmltYWdlWyBpIF0uaW1hZ2U7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzQwNjkgKyBpLCBqICsgMSwgMCwgMCwgbWlwbWFwSW1hZ2Uud2lkdGgsIG1pcG1hcEltYWdlLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwSW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIGogKyAxLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBJbWFnZS53aWR0aCwgbWlwbWFwSW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXBJbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzQwNjkgKyBpLCAwLCAwLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBtaXBtYXAgPSBtaXBtYXBzWyBqIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggMzQwNjkgKyBpLCBqICsgMSwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdC8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM0MDY3ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c291cmNlLl9fY3VycmVudFZlcnNpb24gPSBzb3VyY2UudmVyc2lvbjtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdH1cblxuXHQvLyBSZW5kZXIgdGFyZ2V0c1xuXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIHRhcmdldCB0ZXh0dXJlIGFuZCBiaW5kIGl0IHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0Y29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggISByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlVGFyZ2V0ID09PSAzMjg3OSB8fCB0ZXh0dXJlVGFyZ2V0ID09PSAzNTg2NiApIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCB0ZXh0dXJlVGFyZ2V0LCAwLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQsIHJlbmRlclRhcmdldC5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIHRleHR1cmVUYXJnZXQsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggMzYxNjAsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIDAsIGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblx0fVxuXG5cblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCAzNjE2MSwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiAhIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRsZXQgZ2xJbnRlcm5hbEZvcm1hdCA9IDMzMTg5O1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgfHwgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlO1xuXG5cdFx0XHRcdGlmICggZGVwdGhUZXh0dXJlICYmIGRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGlmICggZGVwdGhUZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM2MDEyO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZGVwdGhUZXh0dXJlLnR5cGUgPT09IFVuc2lnbmVkSW50VHlwZSApIHtcblxuXHRcdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDMzMTkwO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggMzYxNjEsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzYwOTYsIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciApIHtcblxuXHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgJiYgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggMzYxNjEsIHNhbXBsZXMsIDM1MDU2LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUKCAzNjE2MSwgc2FtcGxlcywgMzUwNTYsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzQwNDEsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzMzMDYsIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgZmlyc3QgdGV4dHVyZSBmb3IgTVJUIHNvIGZhclxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzID09PSB0cnVlID8gcmVuZGVyVGFyZ2V0LnRleHR1cmVbIDAgXSA6IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgJiYgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggMzYxNjEsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgcmVzb3VyY2VzIGZvciBhIERlcHRoIFRleHR1cmUgZm9yIGEgRkJPIChuZWVkcyBhbiBleHRlbnNpb24pXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICk7XG5cdFx0aWYgKCBpc0N1YmUgKSB0aHJvdyBuZXcgRXJyb3IoICdEZXB0aCBUZXh0dXJlIHdpdGggY3ViZSByZW5kZXIgdGFyZ2V0cyBpcyBub3Qgc3VwcG9ydGVkJyApO1xuXG5cdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplXG5cdFx0aWYgKCAhIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0ICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzZXRUZXh0dXJlMkQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdGNvbnN0IHdlYmdsRGVwdGhUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblx0XHRjb25zdCBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHtcblxuXHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCAzNjE2MCwgMzYwOTYsIDM1NTMsIHdlYmdsRGVwdGhUZXh0dXJlLCAwLCBzYW1wbGVzICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwOTYsIDM1NTMsIHdlYmdsRGVwdGhUZXh0dXJlLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCwgc2FtcGxlcyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdVbmtub3duIGRlcHRoVGV4dHVyZSBmb3JtYXQnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldHVwIEdMIHJlc291cmNlcyBmb3IgYSBub24tdGV4dHVyZSBkZXB0aCBidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICYmICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApO1xuXG5cdFx0XHRzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIGZhbHNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyLCByZW5kZXJUYXJnZXQsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gcmViaW5kIGZyYW1lYnVmZmVyIHdpdGggZXh0ZXJuYWwgdGV4dHVyZXNcblx0ZnVuY3Rpb24gcmViaW5kVGV4dHVyZXMoIHJlbmRlclRhcmdldCwgY29sb3JUZXh0dXJlLCBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCBjb2xvclRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHJlbmRlclRhcmdldC50ZXh0dXJlLCAzNjA2NCwgMzU1MyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0XG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cdFx0Y29uc3QgaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlwbGVSZW5kZXJUYXJnZXRzID09PSB0cnVlICk7XG5cdFx0Y29uc3Qgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvJDEoIHJlbmRlclRhcmdldCApIHx8IGlzV2ViR0wyO1xuXG5cdFx0Ly8gU2V0dXAgZnJhbWVidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5kcmF3QnVmZmVycyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0XHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyBjYW4gb25seSBiZSB1c2VkIHdpdGggV2ViR0wyIG9yIFdFQkdMX2RyYXdfYnVmZmVycyBleHRlbnNpb24uJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggKCBpc1dlYkdMMiAmJiByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSAmJiB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblxuXHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cblx0XHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5lbmNvZGluZyApO1xuXHRcdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRcdFx0Y29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmVuY29kaW5nICk7XG5cdFx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggMzYxNjEsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggMzYxNjAsIDM2MDY0LCAzNjE2MSwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgKTtcblx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCBudWxsICk7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRydWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBjb2xvciBidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzQwNjcsIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIDM2MDY0LCAzNDA2OSArIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM0MDY3ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fSBlbHNlIGlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhdHRhY2htZW50ID0gdGV4dHVyZXNbIGkgXTtcblx0XHRcdFx0Y29uc3QgYXR0YWNobWVudFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggYXR0YWNobWVudCApO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNTUzLCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXHRcdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzU1MywgYXR0YWNobWVudCwgc3VwcG9ydHNNaXBzICk7XG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBhdHRhY2htZW50LCAzNjA2NCArIGksIDM1NTMgKTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggYXR0YWNobWVudCwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggMzU1MyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsZXQgZ2xUZXh0dXJlVHlwZSA9IDM1NTM7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0wzRFJlbmRlclRhcmdldCB8fCByZW5kZXJUYXJnZXQuaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdFx0XHRnbFRleHR1cmVUeXBlID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0wzRFJlbmRlclRhcmdldCA/IDMyODc5IDogMzU4NjY7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFRleHR1cmVzOiBUSFJFRS5EYXRhM0RUZXh0dXJlIGFuZCBUSFJFRS5EYXRhQXJyYXlUZXh0dXJlIG9ubHkgc3VwcG9ydGVkIHdpdGggV2ViR0wyLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICk7XG5cdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCwgdGV4dHVyZSwgMzYwNjQsIGdsVGV4dHVyZVR5cGUgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBnbFRleHR1cmVUeXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVyc1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byQxKCByZW5kZXJUYXJnZXQgKSB8fCBpc1dlYkdMMjtcblxuXHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXBsZVJlbmRlclRhcmdldHMgPT09IHRydWUgPyByZW5kZXJUYXJnZXQudGV4dHVyZSA6IFsgcmVuZGVyVGFyZ2V0LnRleHR1cmUgXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHRjb25zdCB0YXJnZXQgPSByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPyAzNDA2NyA6IDM1NTM7XG5cdFx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICkuX193ZWJnbFRleHR1cmU7XG5cblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKTtcblx0XHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoICggaXNXZWJHTDIgJiYgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkgJiYgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnN0IHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0Y29uc3QgaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdGxldCBtYXNrID0gMTYzODQ7XG5cdFx0XHRjb25zdCBpbnZhbGlkYXRpb25BcnJheSA9IFsgMzYwNjQgXTtcblx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IDMzMzA2IDogMzYwOTY7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdGludmFsaWRhdGlvbkFycmF5LnB1c2goIGRlcHRoU3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0Y29uc3QgaWdub3JlRGVwdGhWYWx1ZXMgPSAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19pZ25vcmVEZXB0aFZhbHVlcyAhPT0gdW5kZWZpbmVkICkgPyByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faWdub3JlRGVwdGhWYWx1ZXMgOiBmYWxzZTtcblxuXHRcdFx0aWYgKCBpZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSBtYXNrIHw9IDI1Njtcblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciApIG1hc2sgfD0gMTAyNDtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MDA4LCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCAzNjAwOSwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCBpZ25vcmVEZXB0aFZhbHVlcyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCAzNjAwOCwgWyBkZXB0aFN0eWxlIF0gKTtcblx0XHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggMzYwMDksIFsgZGVwdGhTdHlsZSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLmJsaXRGcmFtZWJ1ZmZlciggMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgbWFzaywgOTcyOCApO1xuXHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggMzYwMDgsIGludmFsaWRhdGlvbkFycmF5ICk7XG5cblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYwMDgsIG51bGwgKTtcblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYwMDksIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHJldHVybiBNYXRoLm1pbiggbWF4U2FtcGxlcywgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGlzV2ViR0wyICYmIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCAmJiBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gdHJ1ZSAmJiByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlUmVuZGVyVG9UZXh0dXJlICE9PSBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTtcblxuXHRcdC8vIENoZWNrIHRoZSBsYXN0IGZyYW1lIHdlIHVwZGF0ZWQgdGhlIFZpZGVvVGV4dHVyZVxuXG5cdFx0aWYgKCBfdmlkZW9UZXh0dXJlcy5nZXQoIHRleHR1cmUgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdF92aWRlb1RleHR1cmVzLnNldCggdGV4dHVyZSwgZnJhbWUgKTtcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICkge1xuXG5cdFx0Y29uc3QgZW5jb2RpbmcgPSB0ZXh0dXJlLmVuY29kaW5nO1xuXHRcdGNvbnN0IGZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuXHRcdGNvbnN0IHR5cGUgPSB0ZXh0dXJlLnR5cGU7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSA9PT0gdHJ1ZSB8fCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlIHx8IHRleHR1cmUuZm9ybWF0ID09PSBfU1JHQkFGb3JtYXQgKSByZXR1cm4gaW1hZ2U7XG5cblx0XHRpZiAoIGVuY29kaW5nICE9PSBMaW5lYXJFbmNvZGluZyApIHtcblxuXHRcdFx0Ly8gc1JHQlxuXG5cdFx0XHRpZiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSB7XG5cblx0XHRcdFx0aWYgKCBpc1dlYkdMMiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHQvLyBpbiBXZWJHTCAxLCB0cnkgdG8gdXNlIEVYVF9zUkdCIGV4dGVuc2lvbiBhbmQgdW5zaXplZCBmb3JtYXRzXG5cblx0XHRcdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3NSR0InICkgPT09IHRydWUgJiYgZm9ybWF0ID09PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IF9TUkdCQUZvcm1hdDtcblxuXHRcdFx0XHRcdFx0Ly8gaXQncyBub3QgcG9zc2libGUgdG8gZ2VuZXJhdGUgbWlwcyBpbiBXZWJHTCAxIHdpdGggdGhpcyBleHRlbnNpb25cblxuXHRcdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cdFx0XHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2xvdyBmYWxsYmFjayAoQ1BVIGRlY29kZSlcblxuXHRcdFx0XHRcdFx0aW1hZ2UgPSBJbWFnZVV0aWxzLnNSR0JUb0xpbmVhciggaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gaW4gV2ViR0wgMiB1bmNvbXByZXNzZWQgdGV4dHVyZXMgY2FuIG9ubHkgYmUgc1JHQiBlbmNvZGVkIGlmIHRoZXkgaGF2ZSB0aGUgUkdCQTggZm9ybWF0XG5cblx0XHRcdFx0XHRpZiAoIGZvcm1hdCAhPT0gUkdCQUZvcm1hdCB8fCB0eXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFRleHR1cmVzOiBzUkdCIGVuY29kZWQgdGV4dHVyZXMgaGF2ZSB0byB1c2UgUkdCQUZvcm1hdCBhbmQgVW5zaWduZWRCeXRlVHlwZS4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFRleHR1cmVzOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIGVuY29kaW5nOicsIGVuY29kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLmFsbG9jYXRlVGV4dHVyZVVuaXQgPSBhbGxvY2F0ZVRleHR1cmVVbml0O1xuXHR0aGlzLnJlc2V0VGV4dHVyZVVuaXRzID0gcmVzZXRUZXh0dXJlVW5pdHM7XG5cblx0dGhpcy5zZXRUZXh0dXJlMkQgPSBzZXRUZXh0dXJlMkQ7XG5cdHRoaXMuc2V0VGV4dHVyZTJEQXJyYXkgPSBzZXRUZXh0dXJlMkRBcnJheTtcblx0dGhpcy5zZXRUZXh0dXJlM0QgPSBzZXRUZXh0dXJlM0Q7XG5cdHRoaXMuc2V0VGV4dHVyZUN1YmUgPSBzZXRUZXh0dXJlQ3ViZTtcblx0dGhpcy5yZWJpbmRUZXh0dXJlcyA9IHJlYmluZFRleHR1cmVzO1xuXHR0aGlzLnNldHVwUmVuZGVyVGFyZ2V0ID0gc2V0dXBSZW5kZXJUYXJnZXQ7XG5cdHRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwO1xuXHR0aGlzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ID0gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQ7XG5cdHRoaXMuc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciA9IHNldHVwRGVwdGhSZW5kZXJidWZmZXI7XG5cdHRoaXMuc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUgPSBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZTtcblx0dGhpcy51c2VNdWx0aXNhbXBsZWRSVFQgPSB1c2VNdWx0aXNhbXBsZWRSVFQ7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xVdGlscyggZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRjb25zdCBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwLCBlbmNvZGluZyA9IG51bGwgKSB7XG5cblx0XHRsZXQgZXh0ZW5zaW9uO1xuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEJ5dGVUeXBlICkgcmV0dXJuIDUxMjE7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgKSByZXR1cm4gMzI4MTk7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0NTU1MVR5cGUgKSByZXR1cm4gMzI4MjA7XG5cblx0XHRpZiAoIHAgPT09IEJ5dGVUeXBlICkgcmV0dXJuIDUxMjA7XG5cdFx0aWYgKCBwID09PSBTaG9ydFR5cGUgKSByZXR1cm4gNTEyMjtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgcmV0dXJuIDUxMjM7XG5cdFx0aWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIDUxMjQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludFR5cGUgKSByZXR1cm4gNTEyNTtcblx0XHRpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiA1MTI2O1xuXG5cdFx0aWYgKCBwID09PSBIYWxmRmxvYXRUeXBlICkge1xuXG5cdFx0XHRpZiAoIGlzV2ViR0wyICkgcmV0dXJuIDUxMzE7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4dGVuc2lvbi5IQUxGX0ZMT0FUX09FUztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBBbHBoYUZvcm1hdCApIHJldHVybiA2NDA2O1xuXHRcdGlmICggcCA9PT0gUkdCQUZvcm1hdCApIHJldHVybiA2NDA4O1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlRm9ybWF0ICkgcmV0dXJuIDY0MDk7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VBbHBoYUZvcm1hdCApIHJldHVybiA2NDEwO1xuXHRcdGlmICggcCA9PT0gRGVwdGhGb3JtYXQgKSByZXR1cm4gNjQwMjtcblx0XHRpZiAoIHAgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHJldHVybiAzNDA0MTtcblx0XHRpZiAoIHAgPT09IFJlZEZvcm1hdCApIHJldHVybiA2NDAzO1xuXG5cdFx0aWYgKCBwID09PSBSR0JGb3JtYXQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRIUkVFLlJHQkZvcm1hdCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuUkdCQUZvcm1hdCBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjMyMjgnICk7XG5cdFx0XHRyZXR1cm4gNjQwODtcblxuXHRcdH1cblxuXHRcdC8vIFdlYkdMIDEgc1JHQiBmYWxsYmFja1xuXG5cdFx0aWYgKCBwID09PSBfU1JHQkFGb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3NSR0InICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb24uU1JHQl9BTFBIQV9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFdlYkdMMiBmb3JtYXRzLlxuXG5cdFx0aWYgKCBwID09PSBSZWRJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIDM2MjQ0O1xuXHRcdGlmICggcCA9PT0gUkdGb3JtYXQgKSByZXR1cm4gMzMzMTk7XG5cdFx0aWYgKCBwID09PSBSR0ludGVnZXJGb3JtYXQgKSByZXR1cm4gMzMzMjA7XG5cdFx0aWYgKCBwID09PSBSR0JBSW50ZWdlckZvcm1hdCApIHJldHVybiAzNjI0OTtcblxuXHRcdC8vIFMzVENcblxuXHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGlmICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApIHtcblxuXHRcdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2InICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFBWUlRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRVRDMVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRVRDMlxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9FVEMyIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCOF9FVEMyO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfRVRDMl9FQUNfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEFTVENcblxuXHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzR4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNHg0X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg0X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDRfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ182eDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDhfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDZfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDZfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCApIHJldHVybiAoIGVuY29kaW5nID09PSBzUkdCRW5jb2RpbmcgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDhfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTBfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSByZXR1cm4gKCBlbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTJfS0hSO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBCUFRDXG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0ICkgcmV0dXJuICggZW5jb2RpbmcgPT09IHNSR0JFbmNvZGluZyApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STV9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0aWYgKCBpc1dlYkdMMiApIHJldHVybiAzNDA0MjtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9kZXB0aF90ZXh0dXJlJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXh0ZW5zaW9uLlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7IGNvbnZlcnQ6IGNvbnZlcnQgfTtcblxufVxuXG5jbGFzcyBBcnJheUNhbWVyYSBleHRlbmRzIFBlcnNwZWN0aXZlQ2FtZXJhIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXkgPSBbXSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmNhbWVyYXMgPSBhcnJheTtcblxuXHR9XG5cbn1cblxuQXJyYXlDYW1lcmEucHJvdG90eXBlLmlzQXJyYXlDYW1lcmEgPSB0cnVlO1xuXG5jbGFzcyBHcm91cCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xuXG5cdH1cblxufVxuXG5Hcm91cC5wcm90b3R5cGUuaXNHcm91cCA9IHRydWU7XG5cbmNvbnN0IF9tb3ZlRXZlbnQgPSB7IHR5cGU6ICdtb3ZlJyB9O1xuXG5jbGFzcyBXZWJYUkNvbnRyb2xsZXIge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5fdGFyZ2V0UmF5ID0gbnVsbDtcblx0XHR0aGlzLl9ncmlwID0gbnVsbDtcblx0XHR0aGlzLl9oYW5kID0gbnVsbDtcblxuXHR9XG5cblx0Z2V0SGFuZFNwYWNlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9oYW5kID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9oYW5kID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl9oYW5kLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2hhbmQudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLl9oYW5kLmpvaW50cyA9IHt9O1xuXHRcdFx0dGhpcy5faGFuZC5pbnB1dFN0YXRlID0geyBwaW5jaGluZzogZmFsc2UgfTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9oYW5kO1xuXG5cdH1cblxuXHRnZXRUYXJnZXRSYXlTcGFjZSgpIHtcblxuXHRcdGlmICggdGhpcy5fdGFyZ2V0UmF5ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90YXJnZXRSYXkgPSBuZXcgR3JvdXAoKTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkubGluZWFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fdGFyZ2V0UmF5O1xuXG5cdH1cblxuXHRnZXRHcmlwU3BhY2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2dyaXAgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2dyaXAgPSBuZXcgR3JvdXAoKTtcblx0XHRcdHRoaXMuX2dyaXAubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9ncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9ncmlwLmxpbmVhclZlbG9jaXR5ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHRoaXMuX2dyaXAuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9ncmlwLmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fZ3JpcDtcblxuXHR9XG5cblx0ZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3RhcmdldFJheSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2dyaXAgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2dyaXAuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5faGFuZCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5faGFuZC5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoIGlucHV0U291cmNlICkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRpZiAoIHRoaXMuX3RhcmdldFJheSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fZ3JpcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZ3JpcC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZSggaW5wdXRTb3VyY2UsIGZyYW1lLCByZWZlcmVuY2VTcGFjZSApIHtcblxuXHRcdGxldCBpbnB1dFBvc2UgPSBudWxsO1xuXHRcdGxldCBncmlwUG9zZSA9IG51bGw7XG5cdFx0bGV0IGhhbmRQb3NlID0gbnVsbDtcblxuXHRcdGNvbnN0IHRhcmdldFJheSA9IHRoaXMuX3RhcmdldFJheTtcblx0XHRjb25zdCBncmlwID0gdGhpcy5fZ3JpcDtcblx0XHRjb25zdCBoYW5kID0gdGhpcy5faGFuZDtcblxuXHRcdGlmICggaW5wdXRTb3VyY2UgJiYgZnJhbWUuc2Vzc2lvbi52aXNpYmlsaXR5U3RhdGUgIT09ICd2aXNpYmxlLWJsdXJyZWQnICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldFJheSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpbnB1dFBvc2UgPSBmcmFtZS5nZXRQb3NlKCBpbnB1dFNvdXJjZS50YXJnZXRSYXlTcGFjZSwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0XHRpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHRhcmdldFJheS5tYXRyaXguZnJvbUFycmF5KCBpbnB1dFBvc2UudHJhbnNmb3JtLm1hdHJpeCApO1xuXHRcdFx0XHRcdHRhcmdldFJheS5tYXRyaXguZGVjb21wb3NlKCB0YXJnZXRSYXkucG9zaXRpb24sIHRhcmdldFJheS5yb3RhdGlvbiwgdGFyZ2V0UmF5LnNjYWxlICk7XG5cblx0XHRcdFx0XHRpZiAoIGlucHV0UG9zZS5saW5lYXJWZWxvY2l0eSApIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRhcmdldFJheS5saW5lYXJWZWxvY2l0eS5jb3B5KCBpbnB1dFBvc2UubGluZWFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBpbnB1dFBvc2UuYW5ndWxhclZlbG9jaXR5ICkge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRhcmdldFJheS5hbmd1bGFyVmVsb2NpdHkuY29weSggaW5wdXRQb3NlLmFuZ3VsYXJWZWxvY2l0eSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5Lmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfbW92ZUV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFuZCAmJiBpbnB1dFNvdXJjZS5oYW5kICkge1xuXG5cdFx0XHRcdGhhbmRQb3NlID0gdHJ1ZTtcblxuXHRcdFx0XHRmb3IgKCBjb25zdCBpbnB1dGpvaW50IG9mIGlucHV0U291cmNlLmhhbmQudmFsdWVzKCkgKSB7XG5cblx0XHRcdFx0XHQvLyBVcGRhdGUgdGhlIGpvaW50cyBncm91cHMgd2l0aCB0aGUgWFJKb2ludCBwb3Nlc1xuXHRcdFx0XHRcdGNvbnN0IGpvaW50UG9zZSA9IGZyYW1lLmdldEpvaW50UG9zZSggaW5wdXRqb2ludCwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gVGhlIHRyYW5zZm9ybSBvZiB0aGlzIGpvaW50IHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBqb2ludCBwb3NlIG9uIGVhY2ggZnJhbWVcblx0XHRcdFx0XHRcdGNvbnN0IGpvaW50ID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRcdFx0XHRqb2ludC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRqb2ludC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRoYW5kLmpvaW50c1sgaW5wdXRqb2ludC5qb2ludE5hbWUgXSA9IGpvaW50O1xuXHRcdFx0XHRcdFx0Ly8gPz9cblx0XHRcdFx0XHRcdGhhbmQuYWRkKCBqb2ludCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3Qgam9pbnQgPSBoYW5kLmpvaW50c1sgaW5wdXRqb2ludC5qb2ludE5hbWUgXTtcblxuXHRcdFx0XHRcdGlmICggam9pbnRQb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRqb2ludC5tYXRyaXguZnJvbUFycmF5KCBqb2ludFBvc2UudHJhbnNmb3JtLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4LmRlY29tcG9zZSggam9pbnQucG9zaXRpb24sIGpvaW50LnJvdGF0aW9uLCBqb2ludC5zY2FsZSApO1xuXHRcdFx0XHRcdFx0am9pbnQuam9pbnRSYWRpdXMgPSBqb2ludFBvc2UucmFkaXVzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0am9pbnQudmlzaWJsZSA9IGpvaW50UG9zZSAhPT0gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3VzdG9tIGV2ZW50c1xuXG5cdFx0XHRcdC8vIENoZWNrIHBpbmNoelxuXHRcdFx0XHRjb25zdCBpbmRleFRpcCA9IGhhbmQuam9pbnRzWyAnaW5kZXgtZmluZ2VyLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgdGh1bWJUaXAgPSBoYW5kLmpvaW50c1sgJ3RodW1iLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBpbmRleFRpcC5wb3NpdGlvbi5kaXN0YW5jZVRvKCB0aHVtYlRpcC5wb3NpdGlvbiApO1xuXG5cdFx0XHRcdGNvbnN0IGRpc3RhbmNlVG9QaW5jaCA9IDAuMDI7XG5cdFx0XHRcdGNvbnN0IHRocmVzaG9sZCA9IDAuMDA1O1xuXG5cdFx0XHRcdGlmICggaGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nICYmIGRpc3RhbmNlID4gZGlzdGFuY2VUb1BpbmNoICsgdGhyZXNob2xkICkge1xuXG5cdFx0XHRcdFx0aGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAncGluY2hlbmQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhIGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyAmJiBkaXN0YW5jZSA8PSBkaXN0YW5jZVRvUGluY2ggLSB0aHJlc2hvbGQgKSB7XG5cblx0XHRcdFx0XHRoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3BpbmNoc3RhcnQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBncmlwICE9PSBudWxsICYmIGlucHV0U291cmNlLmdyaXBTcGFjZSApIHtcblxuXHRcdFx0XHRcdGdyaXBQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UuZ3JpcFNwYWNlLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBncmlwUG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Z3JpcC5tYXRyaXguZnJvbUFycmF5KCBncmlwUG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0XHRncmlwLm1hdHJpeC5kZWNvbXBvc2UoIGdyaXAucG9zaXRpb24sIGdyaXAucm90YXRpb24sIGdyaXAuc2NhbGUgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5saW5lYXJWZWxvY2l0eSApIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0Z3JpcC5saW5lYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5saW5lYXJWZWxvY2l0eSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdyaXAuaGFzTGluZWFyVmVsb2NpdHkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIGdyaXBQb3NlLmFuZ3VsYXJWZWxvY2l0eSApIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGdyaXAuYW5ndWxhclZlbG9jaXR5LmNvcHkoIGdyaXBQb3NlLmFuZ3VsYXJWZWxvY2l0eSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdyaXAuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGFyZ2V0UmF5ICE9PSBudWxsICkge1xuXG5cdFx0XHR0YXJnZXRSYXkudmlzaWJsZSA9ICggaW5wdXRQb3NlICE9PSBudWxsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdyaXAgIT09IG51bGwgKSB7XG5cblx0XHRcdGdyaXAudmlzaWJsZSA9ICggZ3JpcFBvc2UgIT09IG51bGwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggaGFuZCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aGFuZC52aXNpYmxlID0gKCBoYW5kUG9zZSAhPT0gbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIERlcHRoVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCwgaGVpZ2h0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBmb3JtYXQgKSB7XG5cblx0XHRmb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IERlcHRoRm9ybWF0O1xuXG5cdFx0aWYgKCBmb3JtYXQgIT09IERlcHRoRm9ybWF0ICYmIGZvcm1hdCAhPT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRTaG9ydFR5cGU7XG5cdFx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXG5cdFx0c3VwZXIoIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1hZ0ZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHNcdD0gZmFsc2U7XG5cblx0fVxuXG5cbn1cblxuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5pc0RlcHRoVGV4dHVyZSA9IHRydWU7XG5cbmNsYXNzIFdlYlhSTWFuYWdlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyLCBnbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRsZXQgc2Vzc2lvbiA9IG51bGw7XG5cdFx0bGV0IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7XG5cblx0XHRsZXQgcmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXHRcdGxldCByZWZlcmVuY2VTcGFjZVR5cGUgPSAnbG9jYWwtZmxvb3InO1xuXG5cdFx0bGV0IHBvc2UgPSBudWxsO1xuXHRcdGxldCBnbEJpbmRpbmcgPSBudWxsO1xuXHRcdGxldCBnbFByb2pMYXllciA9IG51bGw7XG5cdFx0bGV0IGdsQmFzZUxheWVyID0gbnVsbDtcblx0XHRsZXQgeHJGcmFtZSA9IG51bGw7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cdFx0bGV0IGluaXRpYWxSZW5kZXJUYXJnZXQgPSBudWxsO1xuXHRcdGxldCBuZXdSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0Y29uc3QgY29udHJvbGxlcnMgPSBbXTtcblx0XHRjb25zdCBpbnB1dFNvdXJjZXNNYXAgPSBuZXcgTWFwKCk7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGNhbWVyYUwudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdGNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXHRcdGNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgY2FtZXJhcyA9IFsgY2FtZXJhTCwgY2FtZXJhUiBdO1xuXG5cdFx0Y29uc3QgY2FtZXJhVlIgPSBuZXcgQXJyYXlDYW1lcmEoKTtcblx0XHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMiApO1xuXG5cdFx0bGV0IF9jdXJyZW50RGVwdGhOZWFyID0gbnVsbDtcblx0XHRsZXQgX2N1cnJlbnREZXB0aEZhciA9IG51bGw7XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5jYW1lcmFBdXRvVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0VGFyZ2V0UmF5U3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldENvbnRyb2xsZXJHcmlwID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdFx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTtcblx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb250cm9sbGVyLmdldEdyaXBTcGFjZSgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0SGFuZCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRcdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKCk7XG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRIYW5kU3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHQvL1xuXG5cdFx0ZnVuY3Rpb24gb25TZXNzaW9uRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0XHRjb25zdCBjb250cm9sbGVyID0gaW5wdXRTb3VyY2VzTWFwLmdldCggZXZlbnQuaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBldmVudC50eXBlLCBkYXRhOiBldmVudC5pbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRcdFx0aW5wdXRTb3VyY2VzTWFwLmZvckVhY2goIGZ1bmN0aW9uICggY29udHJvbGxlciwgaW5wdXRTb3VyY2UgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlci5kaXNjb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlucHV0U291cmNlc01hcC5jbGVhcigpO1xuXG5cdFx0XHRfY3VycmVudERlcHRoTmVhciA9IG51bGw7XG5cdFx0XHRfY3VycmVudERlcHRoRmFyID0gbnVsbDtcblxuXHRcdFx0Ly8gcmVzdG9yZSBmcmFtZWJ1ZmZlci9yZW5kZXJpbmcgc3RhdGVcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBpbml0aWFsUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGdsQmFzZUxheWVyID0gbnVsbDtcblx0XHRcdGdsUHJvakxheWVyID0gbnVsbDtcblx0XHRcdGdsQmluZGluZyA9IG51bGw7XG5cdFx0XHRzZXNzaW9uID0gbnVsbDtcblx0XHRcdG5ld1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHRcdC8vXG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHRcdHNjb3BlLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZXNzaW9uZW5kJyB9ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogQ2Fubm90IGNoYW5nZSBmcmFtZWJ1ZmZlciBzY2FsZSB3aGlsZSBwcmVzZW50aW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuc2V0UmVmZXJlbmNlU3BhY2VUeXBlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0cmVmZXJlbmNlU3BhY2VUeXBlID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2NvcGUuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogQ2Fubm90IGNoYW5nZSByZWZlcmVuY2Ugc3BhY2UgdHlwZSB3aGlsZSBwcmVzZW50aW5nLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0UmVmZXJlbmNlU3BhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiByZWZlcmVuY2VTcGFjZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEJhc2VMYXllciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGdsUHJvakxheWVyICE9PSBudWxsID8gZ2xQcm9qTGF5ZXIgOiBnbEJhc2VMYXllcjtcblxuXHRcdH07XG5cblx0XHR0aGlzLmdldEJpbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbEJpbmRpbmc7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHhyRnJhbWU7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRTZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gc2Vzc2lvbjtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpbml0aWFsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBvbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlcy54ckNvbXBhdGlibGUgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRhd2FpdCBnbC5tYWtlWFJDb21wYXRpYmxlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggKCBzZXNzaW9uLnJlbmRlclN0YXRlLmxheWVycyA9PT0gdW5kZWZpbmVkICkgfHwgKCByZW5kZXJlci5jYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IGZhbHNlICkgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBsYXllckluaXQgPSB7XG5cdFx0XHRcdFx0XHRhbnRpYWxpYXM6ICggc2Vzc2lvbi5yZW5kZXJTdGF0ZS5sYXllcnMgPT09IHVuZGVmaW5lZCApID8gYXR0cmlidXRlcy5hbnRpYWxpYXMgOiB0cnVlLFxuXHRcdFx0XHRcdFx0YWxwaGE6IGF0dHJpYnV0ZXMuYWxwaGEsXG5cdFx0XHRcdFx0XHRkZXB0aDogYXR0cmlidXRlcy5kZXB0aCxcblx0XHRcdFx0XHRcdHN0ZW5jaWw6IGF0dHJpYnV0ZXMuc3RlbmNpbCxcblx0XHRcdFx0XHRcdGZyYW1lYnVmZmVyU2NhbGVGYWN0b3I6IGZyYW1lYnVmZmVyU2NhbGVGYWN0b3Jcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Z2xCYXNlTGF5ZXIgPSBuZXcgWFJXZWJHTExheWVyKCBzZXNzaW9uLCBnbCwgbGF5ZXJJbml0ICk7XG5cblx0XHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7IGJhc2VMYXllcjogZ2xCYXNlTGF5ZXIgfSApO1xuXG5cdFx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KFxuXHRcdFx0XHRcdFx0Z2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCxcblx0XHRcdFx0XHRcdGdsQmFzZUxheWVyLmZyYW1lYnVmZmVySGVpZ2h0LFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXQsXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdFx0XHRcdGVuY29kaW5nOiByZW5kZXJlci5vdXRwdXRFbmNvZGluZ1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGxldCBkZXB0aEZvcm1hdCA9IG51bGw7XG5cdFx0XHRcdFx0bGV0IGRlcHRoVHlwZSA9IG51bGw7XG5cdFx0XHRcdFx0bGV0IGdsRGVwdGhGb3JtYXQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGVzLmRlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRnbERlcHRoRm9ybWF0ID0gYXR0cmlidXRlcy5zdGVuY2lsID8gMzUwNTYgOiAzMzE5MDtcblx0XHRcdFx0XHRcdGRlcHRoRm9ybWF0ID0gYXR0cmlidXRlcy5zdGVuY2lsID8gRGVwdGhTdGVuY2lsRm9ybWF0IDogRGVwdGhGb3JtYXQ7XG5cdFx0XHRcdFx0XHRkZXB0aFR5cGUgPSBhdHRyaWJ1dGVzLnN0ZW5jaWwgPyBVbnNpZ25lZEludDI0OFR5cGUgOiBVbnNpZ25lZFNob3J0VHlwZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IHByb2plY3Rpb25sYXllckluaXQgPSB7XG5cdFx0XHRcdFx0XHRjb2xvckZvcm1hdDogKCByZW5kZXJlci5vdXRwdXRFbmNvZGluZyA9PT0gc1JHQkVuY29kaW5nICkgPyAzNTkwNyA6IDMyODU2LFxuXHRcdFx0XHRcdFx0ZGVwdGhGb3JtYXQ6IGdsRGVwdGhGb3JtYXQsXG5cdFx0XHRcdFx0XHRzY2FsZUZhY3RvcjogZnJhbWVidWZmZXJTY2FsZUZhY3RvclxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRnbEJpbmRpbmcgPSBuZXcgWFJXZWJHTEJpbmRpbmcoIHNlc3Npb24sIGdsICk7XG5cblx0XHRcdFx0XHRnbFByb2pMYXllciA9IGdsQmluZGluZy5jcmVhdGVQcm9qZWN0aW9uTGF5ZXIoIHByb2plY3Rpb25sYXllckluaXQgKTtcblxuXHRcdFx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgbGF5ZXJzOiBbIGdsUHJvakxheWVyIF0gfSApO1xuXG5cdFx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0XHRkZXB0aFRleHR1cmU6IG5ldyBEZXB0aFRleHR1cmUoIGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCwgZ2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCwgZGVwdGhUeXBlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkZXB0aEZvcm1hdCApLFxuXHRcdFx0XHRcdFx0XHRzdGVuY2lsQnVmZmVyOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRcdGVuY29kaW5nOiByZW5kZXJlci5vdXRwdXRFbmNvZGluZyxcblx0XHRcdFx0XHRcdFx0c2FtcGxlczogYXR0cmlidXRlcy5hbnRpYWxpYXMgPyA0IDogMFxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHJlbmRlcmVyLnByb3BlcnRpZXMuZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faWdub3JlRGVwdGhWYWx1ZXMgPSBnbFByb2pMYXllci5pZ25vcmVEZXB0aFZhbHVlcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPSB0cnVlOyAvLyBUT0RPIFJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUsIHNlZSAjMjMyNzhcblxuXHRcdFx0XHQvLyBTZXQgZm92ZWF0aW9uIHRvIG1heGltdW0uXG5cdFx0XHRcdHRoaXMuc2V0Rm92ZWF0aW9uKCAxLjAgKTtcblxuXHRcdFx0XHRyZWZlcmVuY2VTcGFjZSA9IGF3YWl0IHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKCByZWZlcmVuY2VTcGFjZVR5cGUgKTtcblxuXHRcdFx0XHRhbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdFx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHRcdFx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gb25JbnB1dFNvdXJjZXNDaGFuZ2UoIGV2ZW50ICkge1xuXG5cdFx0XHRjb25zdCBpbnB1dFNvdXJjZXMgPSBzZXNzaW9uLmlucHV0U291cmNlcztcblxuXHRcdFx0Ly8gQXNzaWduIGlucHV0U291cmNlcyB0byBhdmFpbGFibGUgY29udHJvbGxlcnNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGlucHV0U291cmNlc01hcC5zZXQoIGlucHV0U291cmNlc1sgaSBdLCBjb250cm9sbGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTm90aWZ5IGRpc2Nvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5yZW1vdmVkLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTtcblx0XHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGlucHV0U291cmNlc01hcC5nZXQoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cdFx0XHRcdFx0aW5wdXRTb3VyY2VzTWFwLmRlbGV0ZSggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTm90aWZ5IGNvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5hZGRlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdO1xuXHRcdFx0XHRjb25zdCBjb250cm9sbGVyID0gaW5wdXRTb3VyY2VzTWFwLmdldCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0XHRpZiAoIGNvbnRyb2xsZXIgKSB7XG5cblx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBjYW1lcmFMUG9zID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBjYW1lcmFSUG9zID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFzc3VtZXMgMiBjYW1lcmFzIHRoYXQgYXJlIHBhcmFsbGVsIGFuZCBzaGFyZSBhbiBYLWF4aXMsIGFuZCB0aGF0XG5cdFx0ICogdGhlIGNhbWVyYXMnIHByb2plY3Rpb24gYW5kIHdvcmxkIG1hdHJpY2VzIGhhdmUgYWxyZWFkeSBiZWVuIHNldC5cblx0XHQgKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy5cblx0XHQgKiBWaXN1YWxpemF0aW9uIG9mIHRoaXMgdGVjaG5pcXVlOiBodHRwczovL2NvbXB1dGVyZ3JhcGhpY3Muc3RhY2tleGNoYW5nZS5jb20vYS80NzY1XG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdFx0XHRjYW1lcmFMUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhTC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0Y2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYVIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgaXBkID0gY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBjYW1lcmFSUG9zICk7XG5cblx0XHRcdGNvbnN0IHByb2pMID0gY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXHRcdFx0Y29uc3QgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XG5cblx0XHRcdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcblx0XHRcdC8vIG1vc3QgbGlrZWx5IGlkZW50aWNhbCB0b3AgYW5kIGJvdHRvbSBmcnVzdHVtIGV4dGVudHMuXG5cdFx0XHQvLyBVc2UgdGhlIGxlZnQgY2FtZXJhIGZvciB0aGVzZSB2YWx1ZXMuXG5cdFx0XHRjb25zdCBuZWFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdIC0gMSApO1xuXHRcdFx0Y29uc3QgZmFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdICsgMSApO1xuXHRcdFx0Y29uc3QgdG9wRm92ID0gKCBwcm9qTFsgOSBdICsgMSApIC8gcHJvakxbIDUgXTtcblx0XHRcdGNvbnN0IGJvdHRvbUZvdiA9ICggcHJvakxbIDkgXSAtIDEgKSAvIHByb2pMWyA1IF07XG5cblx0XHRcdGNvbnN0IGxlZnRGb3YgPSAoIHByb2pMWyA4IF0gLSAxICkgLyBwcm9qTFsgMCBdO1xuXHRcdFx0Y29uc3QgcmlnaHRGb3YgPSAoIHByb2pSWyA4IF0gKyAxICkgLyBwcm9qUlsgMCBdO1xuXHRcdFx0Y29uc3QgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92O1xuXHRcdFx0Y29uc3QgcmlnaHQgPSBuZWFyICogcmlnaHRGb3Y7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSB0aGUgbmV3IGNhbWVyYSdzIHBvc2l0aW9uIG9mZnNldCBmcm9tIHRoZVxuXHRcdFx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cblx0XHRcdGNvbnN0IHpPZmZzZXQgPSBpcGQgLyAoIC0gbGVmdEZvdiArIHJpZ2h0Rm92ICk7XG5cdFx0XHRjb25zdCB4T2Zmc2V0ID0gek9mZnNldCAqIC0gbGVmdEZvdjtcblxuXHRcdFx0Ly8gVE9ETzogQmV0dGVyIHdheSB0byBhcHBseSB0aGlzIG9mZnNldD9cblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS50cmFuc2xhdGVYKCB4T2Zmc2V0ICk7XG5cdFx0XHRjYW1lcmEudHJhbnNsYXRlWiggek9mZnNldCApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdFx0Ly8gRmluZCB0aGUgdW5pb24gb2YgdGhlIGZydXN0dW0gdmFsdWVzIG9mIHRoZSBjYW1lcmFzIGFuZCBzY2FsZVxuXHRcdFx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHRcdFx0Ly8gYWx0aG91Z2ggbXVzdCBub3cgYmUgcmVsYXRpdmUgdG8gdGhlIG5ldyB1bmlvbiBjYW1lcmEuXG5cdFx0XHRjb25zdCBuZWFyMiA9IG5lYXIgKyB6T2Zmc2V0O1xuXHRcdFx0Y29uc3QgZmFyMiA9IGZhciArIHpPZmZzZXQ7XG5cdFx0XHRjb25zdCBsZWZ0MiA9IGxlZnQgLSB4T2Zmc2V0O1xuXHRcdFx0Y29uc3QgcmlnaHQyID0gcmlnaHQgKyAoIGlwZCAtIHhPZmZzZXQgKTtcblx0XHRcdGNvbnN0IHRvcDIgPSB0b3BGb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cdFx0XHRjb25zdCBib3R0b20yID0gYm90dG9tRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xuXG5cdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQyLCByaWdodDIsIHRvcDIsIGJvdHRvbTIsIG5lYXIyLCBmYXIyICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiB1cGRhdGVDYW1lcmEoIGNhbWVyYSwgcGFyZW50ICkge1xuXG5cdFx0XHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCBwYXJlbnQubWF0cml4V29ybGQsIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdFx0aWYgKCBzZXNzaW9uID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRjYW1lcmFWUi5uZWFyID0gY2FtZXJhUi5uZWFyID0gY2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRjYW1lcmFWUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdFx0aWYgKCBfY3VycmVudERlcHRoTmVhciAhPT0gY2FtZXJhVlIubmVhciB8fCBfY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFWUi5mYXIgKSB7XG5cblx0XHRcdFx0Ly8gTm90ZSB0aGF0IHRoZSBuZXcgcmVuZGVyU3RhdGUgd29uJ3QgYXBwbHkgdW50aWwgdGhlIG5leHQgZnJhbWUuIFNlZSAjMTgzMjBcblxuXHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7XG5cdFx0XHRcdFx0ZGVwdGhOZWFyOiBjYW1lcmFWUi5uZWFyLFxuXHRcdFx0XHRcdGRlcHRoRmFyOiBjYW1lcmFWUi5mYXJcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdF9jdXJyZW50RGVwdGhOZWFyID0gY2FtZXJhVlIubmVhcjtcblx0XHRcdFx0X2N1cnJlbnREZXB0aEZhciA9IGNhbWVyYVZSLmZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBwYXJlbnQgPSBjYW1lcmEucGFyZW50O1xuXHRcdFx0Y29uc3QgY2FtZXJhcyA9IGNhbWVyYVZSLmNhbWVyYXM7XG5cblx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhVlIsIHBhcmVudCApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR1cGRhdGVDYW1lcmEoIGNhbWVyYXNbIGkgXSwgcGFyZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhVlIubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmFWUi5wb3NpdGlvbiwgY2FtZXJhVlIucXVhdGVybmlvbiwgY2FtZXJhVlIuc2NhbGUgKTtcblxuXHRcdFx0Ly8gdXBkYXRlIHVzZXIgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkoIGNhbWVyYVZSLnBvc2l0aW9uICk7XG5cdFx0XHRjYW1lcmEucXVhdGVybmlvbi5jb3B5KCBjYW1lcmFWUi5xdWF0ZXJuaW9uICk7XG5cdFx0XHRjYW1lcmEuc2NhbGUuY29weSggY2FtZXJhVlIuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS5tYXRyaXguY29weSggY2FtZXJhVlIubWF0cml4ICk7XG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhVlIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSBjYW1lcmEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y2hpbGRyZW5bIGkgXS51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHVwZGF0ZSBwcm9qZWN0aW9uIG1hdHJpeCBmb3IgcHJvcGVyIHZpZXcgZnJ1c3R1bSBjdWxsaW5nXG5cblx0XHRcdGlmICggY2FtZXJhcy5sZW5ndGggPT09IDIgKSB7XG5cblx0XHRcdFx0c2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhVlIsIGNhbWVyYUwsIGNhbWVyYVIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBhc3N1bWUgc2luZ2xlIGNhbWVyYSBzZXR1cCAoQVIpXG5cblx0XHRcdFx0Y2FtZXJhVlIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBjYW1lcmFMLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0Q2FtZXJhID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2FtZXJhVlI7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRGb3ZlYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggZ2xQcm9qTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGdsUHJvakxheWVyLmZpeGVkRm92ZWF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRGb3ZlYXRpb24gPSBmdW5jdGlvbiAoIGZvdmVhdGlvbiApIHtcblxuXHRcdFx0Ly8gMCA9IG5vIGZvdmVhdGlvbiA9IGZ1bGwgcmVzb2x1dGlvblxuXHRcdFx0Ly8gMSA9IG1heGltdW0gZm92ZWF0aW9uID0gdGhlIGVkZ2VzIHJlbmRlciBhdCBsb3dlciByZXNvbHV0aW9uXG5cblx0XHRcdGlmICggZ2xQcm9qTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Z2xQcm9qTGF5ZXIuZml4ZWRGb3ZlYXRpb24gPSBmb3ZlYXRpb247XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCAmJiBnbEJhc2VMYXllci5maXhlZEZvdmVhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uID0gZm92ZWF0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHRcdGxldCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRcdHBvc2UgPSBmcmFtZS5nZXRWaWV3ZXJQb3NlKCByZWZlcmVuY2VTcGFjZSApO1xuXHRcdFx0eHJGcmFtZSA9IGZyYW1lO1xuXG5cdFx0XHRpZiAoIHBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3Qgdmlld3MgPSBwb3NlLnZpZXdzO1xuXG5cdFx0XHRcdGlmICggZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXRGcmFtZWJ1ZmZlciggbmV3UmVuZGVyVGFyZ2V0LCBnbEJhc2VMYXllci5mcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggbmV3UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBjYW1lcmFWUk5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gY2hlY2sgaWYgaXQncyBuZWNlc3NhcnkgdG8gcmVidWlsZCBjYW1lcmFWUidzIGNhbWVyYSBsaXN0XG5cblx0XHRcdFx0aWYgKCB2aWV3cy5sZW5ndGggIT09IGNhbWVyYVZSLmNhbWVyYXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Y2FtZXJhVlIuY2FtZXJhcy5sZW5ndGggPSAwO1xuXHRcdFx0XHRcdGNhbWVyYVZSTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2aWV3ID0gdmlld3NbIGkgXTtcblxuXHRcdFx0XHRcdGxldCB2aWV3cG9ydCA9IG51bGw7XG5cblx0XHRcdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHR2aWV3cG9ydCA9IGdsQmFzZUxheWVyLmdldFZpZXdwb3J0KCB2aWV3ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBnbFN1YkltYWdlID0gZ2xCaW5kaW5nLmdldFZpZXdTdWJJbWFnZSggZ2xQcm9qTGF5ZXIsIHZpZXcgKTtcblx0XHRcdFx0XHRcdHZpZXdwb3J0ID0gZ2xTdWJJbWFnZS52aWV3cG9ydDtcblxuXHRcdFx0XHRcdFx0Ly8gRm9yIHNpZGUtYnktc2lkZSBwcm9qZWN0aW9uLCB3ZSBvbmx5IHByb2R1Y2UgYSBzaW5nbGUgdGV4dHVyZSBmb3IgYm90aCBleWVzLlxuXHRcdFx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldFRleHR1cmVzKFxuXHRcdFx0XHRcdFx0XHRcdG5ld1JlbmRlclRhcmdldCxcblx0XHRcdFx0XHRcdFx0XHRnbFN1YkltYWdlLmNvbG9yVGV4dHVyZSxcblx0XHRcdFx0XHRcdFx0XHRnbFByb2pMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA/IHVuZGVmaW5lZCA6IGdsU3ViSW1hZ2UuZGVwdGhTdGVuY2lsVGV4dHVyZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggbmV3UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGNhbWVyYSA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdGNhbWVyYS5tYXRyaXguZnJvbUFycmF5KCB2aWV3LnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIHZpZXcucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRcdGNhbWVyYS52aWV3cG9ydC5zZXQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Y2FtZXJhVlIubWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggY2FtZXJhVlJOZWVkc1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0Y2FtZXJhVlIuY2FtZXJhcy5wdXNoKCBjYW1lcmEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3QgaW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBpbnB1dFNvdXJjZXNbIGkgXTtcblxuXHRcdFx0XHRjb250cm9sbGVyLnVwZGF0ZSggaW5wdXRTb3VyY2UsIGZyYW1lLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0XHR4ckZyYW1lID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXG5cdFx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRcdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTE1hdGVyaWFscyggcHJvcGVydGllcyApIHtcblxuXHRmdW5jdGlvbiByZWZyZXNoRm9nVW5pZm9ybXMoIHVuaWZvcm1zLCBmb2cgKSB7XG5cblx0XHR1bmlmb3Jtcy5mb2dDb2xvci52YWx1ZS5jb3B5KCBmb2cuY29sb3IgKTtcblxuXHRcdGlmICggZm9nLmlzRm9nICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XG5cdFx0XHR1bmlmb3Jtcy5mb2dGYXIudmFsdWUgPSBmb2cuZmFyO1xuXG5cdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggdW5pZm9ybXMsIG1hdGVyaWFsLCBwaXhlbFJhdGlvLCBoZWlnaHQsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zVG9vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaHlzaWNhbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGVwdGhNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hOb3JtYWxNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc05vcm1hbCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc0xpbmVCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNMaW5lKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc0xpbmVEYXNoZWRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNQb2ludHNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHBpeGVsUmF0aW8sIGhlaWdodCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5jb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsgLy8gIzE1NTgxXG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNvbG9yICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5lbWlzc2l2ZSApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5zcGVjdWxhck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0XHRjb25zdCBlbnZNYXAgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5lbnZNYXA7XG5cblx0XHRpZiAoIGVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gZW52TWFwO1xuXG5cdFx0XHR1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCBlbnZNYXAuaXNDdWJlVGV4dHVyZSAmJiBlbnZNYXAuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLSAxIDogMTtcblxuXHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yO1xuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xuXHRcdFx0dW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllc1xuXHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdC8vIDIuIHNwZWN1bGFyIG1hcFxuXHRcdC8vIDMuIGRpc3BsYWNlbWVudE1hcCBtYXBcblx0XHQvLyA0LiBub3JtYWwgbWFwXG5cdFx0Ly8gNS4gYnVtcCBtYXBcblx0XHQvLyA2LiByb3VnaG5lc3NNYXAgbWFwXG5cdFx0Ly8gNy4gbWV0YWxuZXNzTWFwIG1hcFxuXHRcdC8vIDguIGFscGhhTWFwIG1hcFxuXHRcdC8vIDkuIGVtaXNzaXZlTWFwIG1hcFxuXHRcdC8vIDEwLiBjbGVhcmNvYXQgbWFwXG5cdFx0Ly8gMTEuIGNsZWFyY29hdCBub3JtYWwgbWFwXG5cdFx0Ly8gMTIuIGNsZWFyY29hdCByb3VnaG5lc3NNYXAgbWFwXG5cdFx0Ly8gMTMuIHNwZWN1bGFyIGludGVuc2l0eSBtYXBcblx0XHQvLyAxNC4gc3BlY3VsYXIgdGludCBtYXBcblx0XHQvLyAxNS4gdHJhbnNtaXNzaW9uIG1hcFxuXHRcdC8vIDE2LiB0aGlja25lc3MgbWFwXG5cblx0XHRsZXQgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5idW1wTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC50cmFuc21pc3Npb25NYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50aGlja25lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC50aGlja25lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGlmICggdXZTY2FsZU1hcC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzIGZvciB1djJcblx0XHQvLyAxLiBhbyBtYXBcblx0XHQvLyAyLiBsaWdodCBtYXBcblxuXHRcdGxldCB1djJTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgKSB7XG5cblx0XHRcdHV2MlNjYWxlTWFwID0gbWF0ZXJpYWwuYW9NYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dXYyU2NhbGVNYXAgPSBtYXRlcmlhbC5saWdodE1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXYyU2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGlmICggdXYyU2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHR1djJTY2FsZU1hcCA9IHV2MlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1djJTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2MlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2MlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1djJTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTGluZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplO1xuXHRcdHVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTtcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IGhlaWdodCAqIDAuNTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcblx0XHQvLyAxLiBjb2xvciBtYXBcblx0XHQvLyAyLiBhbHBoYSBtYXBcblxuXHRcdGxldCB1dlNjYWxlTWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlID0gbWF0ZXJpYWwucm90YXRpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG5cdFx0Ly8gMS4gY29sb3IgbWFwXG5cdFx0Ly8gMi4gYWxwaGEgbWFwXG5cblx0XHRsZXQgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhciApO1xuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KCBtYXRlcmlhbC5zaGluaW5lc3MsIDFlLTQgKTsgLy8gdG8gcHJldmVudCBwb3coIDAuMCwgMC4wIClcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZ3JhZGllbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmdyYWRpZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMucm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVudk1hcCA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmVudk1hcDtcblxuXHRcdGlmICggZW52TWFwICkge1xuXG5cdFx0XHQvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yOyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc2hlZW5Db2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zaGVlbkNvbG9yICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLnNoZWVuICk7XG5cblx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2hlZW5Db2xvck1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5zaGVlbkNvbG9yTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0O1xuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXRNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7XG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbi52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbjtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJNYXAudmFsdWUgPSB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnZhbHVlLnNldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LndpZHRoLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbk1hcC52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy50aGlja25lc3MudmFsdWUgPSBtYXRlcmlhbC50aGlja25lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRoaWNrbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5hdHRlbnVhdGlvbkRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRcdHVuaWZvcm1zLmF0dGVudWF0aW9uQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciApO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eTtcblx0XHR1bmlmb3Jtcy5zcGVjdWxhckNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKTtcblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5TWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyQ29sb3JNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnJlZmVyZW5jZVBvc2l0aW9uLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdFx0dW5pZm9ybXMubmVhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwubmVhckRpc3RhbmNlO1xuXHRcdHVuaWZvcm1zLmZhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuZmFyRGlzdGFuY2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc05vcm1hbCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlZnJlc2hGb2dVbmlmb3JtczogcmVmcmVzaEZvZ1VuaWZvcm1zLFxuXHRcdHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zOiByZWZyZXNoTWF0ZXJpYWxVbmlmb3Jtc1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0VsZW1lbnQoKSB7XG5cblx0Y29uc3QgY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXHRjYW52YXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdHJldHVybiBjYW52YXM7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJlciggcGFyYW1ldGVycyA9IHt9ICkge1xuXG5cdGNvbnN0IF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBjcmVhdGVDYW52YXNFbGVtZW50KCksXG5cdFx0X2NvbnRleHQgPSBwYXJhbWV0ZXJzLmNvbnRleHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuY29udGV4dCA6IG51bGwsXG5cblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcblx0XHRfc3RlbmNpbCA9IHBhcmFtZXRlcnMuc3RlbmNpbCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5zdGVuY2lsIDogdHJ1ZSxcblx0XHRfYW50aWFsaWFzID0gcGFyYW1ldGVycy5hbnRpYWxpYXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYW50aWFsaWFzIDogZmFsc2UsXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXG5cdFx0X3ByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA6IGZhbHNlLFxuXHRcdF9wb3dlclByZWZlcmVuY2UgPSBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgOiAnZGVmYXVsdCcsXG5cdFx0X2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCA6IGZhbHNlO1xuXG5cdGxldCBfYWxwaGE7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmNvbnRleHQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9hbHBoYSA9IF9jb250ZXh0LmdldENvbnRleHRBdHRyaWJ1dGVzKCkuYWxwaGE7XG5cblx0fSBlbHNlIHtcblxuXHRcdF9hbHBoYSA9IHBhcmFtZXRlcnMuYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYWxwaGEgOiBmYWxzZTtcblxuXHR9XG5cblx0bGV0IGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0bGV0IGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0Ly8gcmVuZGVyKCkgY2FuIGJlIGNhbGxlZCBmcm9tIHdpdGhpbiBhIGNhbGxiYWNrIHRyaWdnZXJlZCBieSBhbm90aGVyIHJlbmRlci5cblx0Ly8gV2UgdHJhY2sgdGhpcyBzbyB0aGF0IHRoZSBuZXN0ZWQgcmVuZGVyIGNhbGwgZ2V0cyBpdHMgbGlzdCBhbmQgc3RhdGUgaXNvbGF0ZWQgZnJvbSB0aGUgcGFyZW50IHJlbmRlciBjYWxsLlxuXG5cdGNvbnN0IHJlbmRlckxpc3RTdGFjayA9IFtdO1xuXHRjb25zdCByZW5kZXJTdGF0ZVN0YWNrID0gW107XG5cblx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHR0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzO1xuXG5cdC8vIERlYnVnIGNvbmZpZ3VyYXRpb24gY29udGFpbmVyXG5cdHRoaXMuZGVidWcgPSB7XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGVzIGVycm9yIGNoZWNraW5nIGFuZCByZXBvcnRpbmcgd2hlbiBzaGFkZXIgcHJvZ3JhbXMgYXJlIGJlaW5nIGNvbXBpbGVkXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0Y2hlY2tTaGFkZXJFcnJvcnM6IHRydWVcblx0fTtcblxuXHQvLyBjbGVhcmluZ1xuXG5cdHRoaXMuYXV0b0NsZWFyID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJDb2xvciA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhclN0ZW5jaWwgPSB0cnVlO1xuXG5cdC8vIHNjZW5lIGdyYXBoXG5cblx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XG5cblx0Ly8gdXNlci1kZWZpbmVkIGNsaXBwaW5nXG5cblx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IFtdO1xuXHR0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0Ly8gcGh5c2ljYWxseSBiYXNlZCBzaGFkaW5nXG5cblx0dGhpcy5vdXRwdXRFbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXG5cdC8vIHBoeXNpY2FsIGxpZ2h0c1xuXG5cdHRoaXMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSBmYWxzZTtcblxuXHQvLyB0b25lIG1hcHBpbmdcblxuXHR0aGlzLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHRjb25zdCBfdGhpcyA9IHRoaXM7XG5cblx0bGV0IF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0Ly8gaW50ZXJuYWwgc3RhdGUgY2FjaGVcblxuXHRsZXQgX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDA7XG5cdGxldCBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0bGV0IF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0bGV0IF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMTtcblxuXHRsZXQgX2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdGNvbnN0IF9jdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXHRjb25zdCBfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRsZXQgX2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGw7XG5cblx0Ly9cblxuXHRsZXQgX3dpZHRoID0gX2NhbnZhcy53aWR0aDtcblx0bGV0IF9oZWlnaHQgPSBfY2FudmFzLmhlaWdodDtcblxuXHRsZXQgX3BpeGVsUmF0aW8gPSAxO1xuXHRsZXQgX29wYXF1ZVNvcnQgPSBudWxsO1xuXHRsZXQgX3RyYW5zcGFyZW50U29ydCA9IG51bGw7XG5cblx0Y29uc3QgX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRjb25zdCBfc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKTtcblx0bGV0IF9zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdC8vIGZydXN0dW1cblxuXHRjb25zdCBfZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cblx0Ly8gY2xpcHBpbmdcblxuXHRsZXQgX2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXHRsZXQgX2xvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cblx0Ly8gdHJhbnNtaXNzaW9uXG5cblx0bGV0IF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdGNvbnN0IF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRjb25zdCBfdmVjdG9yMiA9IG5ldyBWZWN0b3IyKCk7XG5cdGNvbnN0IF92ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRjb25zdCBfZW1wdHlTY2VuZSA9IHsgYmFja2dyb3VuZDogbnVsbCwgZm9nOiBudWxsLCBlbnZpcm9ubWVudDogbnVsbCwgb3ZlcnJpZGVNYXRlcmlhbDogbnVsbCwgaXNTY2VuZTogdHJ1ZSB9O1xuXG5cdGZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgPyBfcGl4ZWxSYXRpbyA6IDE7XG5cblx0fVxuXG5cdC8vIGluaXRpYWxpemVcblxuXHRsZXQgX2dsID0gX2NvbnRleHQ7XG5cblx0ZnVuY3Rpb24gZ2V0Q29udGV4dCggY29udGV4dE5hbWVzLCBjb250ZXh0QXR0cmlidXRlcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRleHROYW1lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNvbnRleHROYW1lID0gY29udGV4dE5hbWVzWyBpIF07XG5cdFx0XHRjb25zdCBjb250ZXh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KCBjb250ZXh0TmFtZSwgY29udGV4dEF0dHJpYnV0ZXMgKTtcblx0XHRcdGlmICggY29udGV4dCAhPT0gbnVsbCApIHJldHVybiBjb250ZXh0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdHRyeSB7XG5cblx0XHRjb25zdCBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0ZGVwdGg6IF9kZXB0aCxcblx0XHRcdHN0ZW5jaWw6IF9zdGVuY2lsLFxuXHRcdFx0YW50aWFsaWFzOiBfYW50aWFsaWFzLFxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBfcHJlbXVsdGlwbGllZEFscGhhLFxuXHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyOiBfcHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBfcG93ZXJQcmVmZXJlbmNlLFxuXHRcdFx0ZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXRcblx0XHR9O1xuXG5cdFx0Ly8gT2Zmc2NyZWVuQ2FudmFzIGRvZXMgbm90IGhhdmUgc2V0QXR0cmlidXRlLCBzZWUgIzIyODExXG5cdFx0aWYgKCAnc2V0QXR0cmlidXRlJyBpbiBfY2FudmFzICkgX2NhbnZhcy5zZXRBdHRyaWJ1dGUoICdkYXRhLWVuZ2luZScsIGB0aHJlZS5qcyByJHtSRVZJU0lPTn1gICk7XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnMgbXVzdCBiZSByZWdpc3RlcmVkIGJlZm9yZSBXZWJHTCBjb250ZXh0IGlzIGNyZWF0ZWQsIHNlZSAjMTI3NTNcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cblx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgY29udGV4dE5hbWVzID0gWyAnd2ViZ2wyJywgJ3dlYmdsJywgJ2V4cGVyaW1lbnRhbC13ZWJnbCcgXTtcblxuXHRcdFx0aWYgKCBfdGhpcy5pc1dlYkdMMVJlbmRlcmVyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnRleHROYW1lcy5zaGlmdCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbCA9IGdldENvbnRleHQoIGNvbnRleHROYW1lcywgY29udGV4dEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBfZ2wgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBnZXRDb250ZXh0KCBjb250ZXh0TmFtZXMgKSApIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgZXhwZXJpbWVudGFsLXdlYmdsIGltcGxlbWVudGF0aW9ucyBkbyBub3QgaGF2ZSBnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXRcblxuXHRcdGlmICggX2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cblx0fVxuXG5cdGxldCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvO1xuXHRsZXQgcHJvcGVydGllcywgdGV4dHVyZXMsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBhdHRyaWJ1dGVzLCBnZW9tZXRyaWVzLCBvYmplY3RzO1xuXHRsZXQgcHJvZ3JhbUNhY2hlLCBtYXRlcmlhbHMsIHJlbmRlckxpc3RzLCByZW5kZXJTdGF0ZXMsIGNsaXBwaW5nLCBzaGFkb3dNYXA7XG5cblx0bGV0IGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblxuXHRsZXQgdXRpbHMsIGJpbmRpbmdTdGF0ZXM7XG5cblx0ZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHtcblxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblxuXHRcdGNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggX2dsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRleHRlbnNpb25zLmluaXQoIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0dXRpbHMgPSBuZXcgV2ViR0xVdGlscyggX2dsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblxuXHRcdHN0YXRlID0gbmV3IFdlYkdMU3RhdGUoIF9nbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRpbmZvID0gbmV3IFdlYkdMSW5mbyggX2dsICk7XG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWJHTFByb3BlcnRpZXMoKTtcblx0XHR0ZXh0dXJlcyA9IG5ldyBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICk7XG5cdFx0Y3ViZW1hcHMgPSBuZXcgV2ViR0xDdWJlTWFwcyggX3RoaXMgKTtcblx0XHRjdWJldXZtYXBzID0gbmV3IFdlYkdMQ3ViZVVWTWFwcyggX3RoaXMgKTtcblx0XHRhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRiaW5kaW5nU3RhdGVzID0gbmV3IFdlYkdMQmluZGluZ1N0YXRlcyggX2dsLCBleHRlbnNpb25zLCBhdHRyaWJ1dGVzLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyggX2dsLCBhdHRyaWJ1dGVzLCBpbmZvLCBiaW5kaW5nU3RhdGVzICk7XG5cdFx0b2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoIF9nbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApO1xuXHRcdG1vcnBodGFyZ2V0cyA9IG5ldyBXZWJHTE1vcnBodGFyZ2V0cyggX2dsLCBjYXBhYmlsaXRpZXMsIHRleHR1cmVzICk7XG5cdFx0Y2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZyggcHJvcGVydGllcyApO1xuXHRcdHByb2dyYW1DYWNoZSA9IG5ldyBXZWJHTFByb2dyYW1zKCBfdGhpcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKTtcblx0XHRtYXRlcmlhbHMgPSBuZXcgV2ViR0xNYXRlcmlhbHMoIHByb3BlcnRpZXMgKTtcblx0XHRyZW5kZXJMaXN0cyA9IG5ldyBXZWJHTFJlbmRlckxpc3RzKCk7XG5cdFx0cmVuZGVyU3RhdGVzID0gbmV3IFdlYkdMUmVuZGVyU3RhdGVzKCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRiYWNrZ3JvdW5kID0gbmV3IFdlYkdMQmFja2dyb3VuZCggX3RoaXMsIGN1YmVtYXBzLCBzdGF0ZSwgb2JqZWN0cywgX2FscGhhLCBfcHJlbXVsdGlwbGllZEFscGhhICk7XG5cdFx0c2hhZG93TWFwID0gbmV3IFdlYkdMU2hhZG93TWFwKCBfdGhpcywgb2JqZWN0cywgY2FwYWJpbGl0aWVzICk7XG5cblx0XHRidWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApO1xuXHRcdGluZGV4ZWRCdWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKTtcblxuXHRcdGluZm8ucHJvZ3JhbXMgPSBwcm9ncmFtQ2FjaGUucHJvZ3JhbXM7XG5cblx0XHRfdGhpcy5jYXBhYmlsaXRpZXMgPSBjYXBhYmlsaXRpZXM7XG5cdFx0X3RoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cdFx0X3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG5cdFx0X3RoaXMucmVuZGVyTGlzdHMgPSByZW5kZXJMaXN0cztcblx0XHRfdGhpcy5zaGFkb3dNYXAgPSBzaGFkb3dNYXA7XG5cdFx0X3RoaXMuc3RhdGUgPSBzdGF0ZTtcblx0XHRfdGhpcy5pbmZvID0gaW5mbztcblxuXHR9XG5cblx0aW5pdEdMQ29udGV4dCgpO1xuXG5cdC8vIHhyXG5cblx0Y29uc3QgeHIgPSBuZXcgV2ViWFJNYW5hZ2VyKCBfdGhpcywgX2dsICk7XG5cblx0dGhpcy54ciA9IHhyO1xuXG5cdC8vIEFQSVxuXG5cdHRoaXMuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2w7XG5cblx0fTtcblxuXHR0aGlzLmdldENvbnRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9nbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xuXG5cdH07XG5cblx0dGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ubG9zZUNvbnRleHQoKTtcblxuXHR9O1xuXG5cdHRoaXMuZm9yY2VDb250ZXh0UmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLnJlc3RvcmVDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmdldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX3BpeGVsUmF0aW87XG5cblx0fTtcblxuXHR0aGlzLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdHRoaXMuc2V0U2l6ZSggX3dpZHRoLCBfaGVpZ2h0LCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggX3dpZHRoLCBfaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlICkge1xuXG5cdFx0aWYgKCB4ci5pc1ByZXNlbnRpbmcgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENhblxcJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdF9jYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCB3aWR0aCAqIF9waXhlbFJhdGlvICk7XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBfcGl4ZWxSYXRpbyApO1xuXG5cdFx0aWYgKCB1cGRhdGVTdHlsZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdF9jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG5cdFx0XHRfY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggX3dpZHRoICogX3BpeGVsUmF0aW8sIF9oZWlnaHQgKiBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvICkge1xuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdF9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcblxuXHRcdF9jYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCB3aWR0aCAqIHBpeGVsUmF0aW8gKTtcblx0XHRfY2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoIGhlaWdodCAqIHBpeGVsUmF0aW8gKTtcblxuXHRcdHRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q3VycmVudFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9jdXJyZW50Vmlld3BvcnQgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggX3ZpZXdwb3J0ICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0X3ZpZXdwb3J0LnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfdmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggX3NjaXNzb3IgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvciA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdF9zY2lzc29yLnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfc2Npc3Nvci5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCkgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX3NjaXNzb3JUZXN0O1xuXG5cdH07XG5cblx0dGhpcy5zZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfc2Npc3NvclRlc3QgPSBib29sZWFuICk7XG5cblx0fTtcblxuXHR0aGlzLnNldE9wYXF1ZVNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdF9vcGFxdWVTb3J0ID0gbWV0aG9kO1xuXG5cdH07XG5cblx0dGhpcy5zZXRUcmFuc3BhcmVudFNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdF90cmFuc3BhcmVudFNvcnQgPSBtZXRob2Q7XG5cblx0fTtcblxuXHQvLyBDbGVhcmluZ1xuXG5cdHRoaXMuZ2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKSApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0YmFja2dyb3VuZC5zZXRDbGVhckNvbG9yLmFwcGx5KCBiYWNrZ3JvdW5kLCBhcmd1bWVudHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQWxwaGEoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJBbHBoYS5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCBjb2xvciA9IHRydWUsIGRlcHRoID0gdHJ1ZSwgc3RlbmNpbCA9IHRydWUgKSB7XG5cblx0XHRsZXQgYml0cyA9IDA7XG5cblx0XHRpZiAoIGNvbG9yICkgYml0cyB8PSAxNjM4NDtcblx0XHRpZiAoIGRlcHRoICkgYml0cyB8PSAyNTY7XG5cdFx0aWYgKCBzdGVuY2lsICkgYml0cyB8PSAxMDI0O1xuXG5cdFx0X2dsLmNsZWFyKCBiaXRzICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCB0cnVlLCBmYWxzZSwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJEZXB0aCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIGZhbHNlLCB0cnVlLCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhclN0ZW5jaWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0X2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlICk7XG5cdFx0X2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApO1xuXG5cdFx0cmVuZGVyTGlzdHMuZGlzcG9zZSgpO1xuXHRcdHJlbmRlclN0YXRlcy5kaXNwb3NlKCk7XG5cdFx0cHJvcGVydGllcy5kaXNwb3NlKCk7XG5cdFx0Y3ViZW1hcHMuZGlzcG9zZSgpO1xuXHRcdGN1YmV1dm1hcHMuZGlzcG9zZSgpO1xuXHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXHRcdGJpbmRpbmdTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdHByb2dyYW1DYWNoZS5kaXNwb3NlKCk7XG5cblx0XHR4ci5kaXNwb3NlKCk7XG5cblx0XHR4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbnN0YXJ0Jywgb25YUlNlc3Npb25TdGFydCApO1xuXHRcdHhyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZXNzaW9uZW5kJywgb25YUlNlc3Npb25FbmQgKTtcblxuXHRcdGlmICggX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0X3RyYW5zbWlzc2lvblJlbmRlclRhcmdldC5kaXNwb3NlKCk7XG5cdFx0XHRfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0fTtcblxuXHQvLyBFdmVudHNcblxuXHRmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgTG9zdC4nICk7XG5cblx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dFJlc3RvcmUoIC8qIGV2ZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHRjb25zdCBpbmZvQXV0b1Jlc2V0ID0gaW5mby5hdXRvUmVzZXQ7XG5cdFx0Y29uc3Qgc2hhZG93TWFwRW5hYmxlZCA9IHNoYWRvd01hcC5lbmFibGVkO1xuXHRcdGNvbnN0IHNoYWRvd01hcEF1dG9VcGRhdGUgPSBzaGFkb3dNYXAuYXV0b1VwZGF0ZTtcblx0XHRjb25zdCBzaGFkb3dNYXBOZWVkc1VwZGF0ZSA9IHNoYWRvd01hcC5uZWVkc1VwZGF0ZTtcblx0XHRjb25zdCBzaGFkb3dNYXBUeXBlID0gc2hhZG93TWFwLnR5cGU7XG5cblx0XHRpbml0R0xDb250ZXh0KCk7XG5cblx0XHRpbmZvLmF1dG9SZXNldCA9IGluZm9BdXRvUmVzZXQ7XG5cdFx0c2hhZG93TWFwLmVuYWJsZWQgPSBzaGFkb3dNYXBFbmFibGVkO1xuXHRcdHNoYWRvd01hcC5hdXRvVXBkYXRlID0gc2hhZG93TWFwQXV0b1VwZGF0ZTtcblx0XHRzaGFkb3dNYXAubmVlZHNVcGRhdGUgPSBzaGFkb3dNYXBOZWVkc1VwZGF0ZTtcblx0XHRzaGFkb3dNYXAudHlwZSA9IHNoYWRvd01hcFR5cGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTWF0ZXJpYWxEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0bWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvLyBCdWZmZXIgZGVhbGxvY2F0aW9uXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApIHtcblxuXHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzKCBtYXRlcmlhbCApO1xuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIG1hdGVyaWFsICk7XG5cblx0fVxuXG5cblx0ZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgcHJvZ3JhbXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5wcm9ncmFtcztcblxuXHRcdGlmICggcHJvZ3JhbXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbXMuZm9yRWFjaCggZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0XHRcdHByb2dyYW1DYWNoZS5yZWxlYXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIEJ1ZmZlciByZW5kZXJpbmdcblxuXHR0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCA9IGZ1bmN0aW9uICggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICkge1xuXG5cdFx0aWYgKCBzY2VuZSA9PT0gbnVsbCApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHJlbmRlckJ1ZmZlckRpcmVjdCBzZWNvbmQgcGFyYW1ldGVyIHVzZWQgdG8gYmUgZm9nIChjb3VsZCBiZSBudWxsKVxuXG5cdFx0Y29uc3QgZnJvbnRGYWNlQ1cgPSAoIG9iamVjdC5pc01lc2ggJiYgb2JqZWN0Lm1hdHJpeFdvcmxkLmRldGVybWluYW50KCkgPCAwICk7XG5cblx0XHRjb25zdCBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgKTtcblxuXHRcdHN0YXRlLnNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKTtcblxuXHRcdC8vXG5cblx0XHRsZXQgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBpbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uLmNvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0fSBlbHNlIGlmICggaW5kZXguY291bnQgPT09IDAgKSB7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRsZXQgcmFuZ2VGYWN0b3IgPSAxO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSB7XG5cblx0XHRcdGluZGV4ID0gZ2VvbWV0cmllcy5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cdFx0XHRyYW5nZUZhY3RvciA9IDI7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nU3RhdGVzLnNldHVwKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSwgaW5kZXggKTtcblxuXHRcdGxldCBhdHRyaWJ1dGU7XG5cdFx0bGV0IHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggaW5kZXggKTtcblxuXHRcdFx0cmVuZGVyZXIgPSBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cdFx0XHRyZW5kZXJlci5zZXRJbmRleCggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgZGF0YUNvdW50ID0gKCBpbmRleCAhPT0gbnVsbCApID8gaW5kZXguY291bnQgOiBwb3NpdGlvbi5jb3VudDtcblxuXHRcdGNvbnN0IHJhbmdlU3RhcnQgPSBnZW9tZXRyeS5kcmF3UmFuZ2Uuc3RhcnQgKiByYW5nZUZhY3Rvcjtcblx0XHRjb25zdCByYW5nZUNvdW50ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50ICogcmFuZ2VGYWN0b3I7XG5cblx0XHRjb25zdCBncm91cFN0YXJ0ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5zdGFydCAqIHJhbmdlRmFjdG9yIDogMDtcblx0XHRjb25zdCBncm91cENvdW50ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5jb3VudCAqIHJhbmdlRmFjdG9yIDogSW5maW5pdHk7XG5cblx0XHRjb25zdCBkcmF3U3RhcnQgPSBNYXRoLm1heCggcmFuZ2VTdGFydCwgZ3JvdXBTdGFydCApO1xuXHRcdGNvbnN0IGRyYXdFbmQgPSBNYXRoLm1pbiggZGF0YUNvdW50LCByYW5nZVN0YXJ0ICsgcmFuZ2VDb3VudCwgZ3JvdXBTdGFydCArIGdyb3VwQ291bnQgKSAtIDE7XG5cblx0XHRjb25zdCBkcmF3Q291bnQgPSBNYXRoLm1heCggMCwgZHJhd0VuZCAtIGRyYXdTdGFydCArIDEgKTtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggb2JqZWN0LmlzTWVzaCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZSApIHtcblxuXHRcdFx0bGV0IGxpbmVXaWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGggPT09IHVuZGVmaW5lZCApIGxpbmVXaWR0aCA9IDE7IC8vIE5vdCB1c2luZyBMaW5lKk1hdGVyaWFsXG5cblx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbGluZVdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzTGluZVNlZ21lbnRzICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDEgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAwICk7XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCApIHtcblxuXHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zdCBpbnN0YW5jZUNvdW50ID0gTWF0aC5taW4oIGdlb21ldHJ5Lmluc3RhbmNlQ291bnQsIGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyggZHJhd1N0YXJ0LCBkcmF3Q291bnQsIGluc3RhbmNlQ291bnQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlciggZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8vIENvbXBpbGVcblxuXHR0aGlzLmNvbXBpbGUgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XG5cblx0XHRyZW5kZXJTdGF0ZVN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJTdGF0ZSApO1xuXG5cdFx0c2NlbmUudHJhdmVyc2VWaXNpYmxlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCAmJiBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKSApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBfdGhpcy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyApO1xuXG5cdFx0c2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXRlcmlhbC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsMiA9IG1hdGVyaWFsWyBpIF07XG5cblx0XHRcdFx0XHRcdGdldFByb2dyYW0oIG1hdGVyaWFsMiwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdFx0cmVuZGVyU3RhdGVTdGFjay5wb3AoKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdH07XG5cblx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lICkge1xuXG5cdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25YUlNlc3Npb25TdGFydCgpIHtcblxuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uWFJTZXNzaW9uRW5kKCkge1xuXG5cdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0fVxuXG5cdGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdGlmICggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgKSBhbmltYXRpb24uc2V0Q29udGV4dCggd2luZG93ICk7XG5cblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHhyLnNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICk7XG5cblx0XHQoIGNhbGxiYWNrID09PSBudWxsICkgPyBhbmltYXRpb24uc3RvcCgpIDogYW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0fTtcblxuXHR4ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbnN0YXJ0Jywgb25YUlNlc3Npb25TdGFydCApO1xuXHR4ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0Ly8gUmVuZGVyaW5nXG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIGNhbWVyYSAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYS5pc0NhbWVyYSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIF9pc0NvbnRleHRMb3N0ID09PSB0cnVlICkgcmV0dXJuO1xuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIHhyLmVuYWJsZWQgPT09IHRydWUgJiYgeHIuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHhyLmNhbWVyYUF1dG9VcGRhdGUgPT09IHRydWUgKSB4ci51cGRhdGVDYW1lcmEoIGNhbWVyYSApO1xuXG5cdFx0XHRjYW1lcmEgPSB4ci5nZXRDYW1lcmEoKTsgLy8gdXNlIFhSIGNhbWVyYSBmb3IgcmVuZGVyaW5nXG5cblx0XHR9XG5cblx0XHQvL1xuXHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XG5cblx0XHRyZW5kZXJTdGF0ZVN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJTdGF0ZSApO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRfZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IGNsaXBwaW5nLmluaXQoIHRoaXMuY2xpcHBpbmdQbGFuZXMsIF9sb2NhbENsaXBwaW5nRW5hYmxlZCwgY2FtZXJhICk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RzLmdldCggc2NlbmUsIHJlbmRlckxpc3RTdGFjay5sZW5ndGggKTtcblx0XHRjdXJyZW50UmVuZGVyTGlzdC5pbml0KCk7XG5cblx0XHRyZW5kZXJMaXN0U3RhY2sucHVzaCggY3VycmVudFJlbmRlckxpc3QgKTtcblxuXHRcdHByb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIDAsIF90aGlzLnNvcnRPYmplY3RzICk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdC5maW5pc2goKTtcblxuXHRcdGlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoIF9vcGFxdWVTb3J0LCBfdHJhbnNwYXJlbnRTb3J0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHRjb25zdCBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0c2hhZG93TWFwLnJlbmRlciggc2hhZG93c0FycmF5LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ID09PSB0cnVlICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHQvL1xuXG5cdFx0YmFja2dyb3VuZC5yZW5kZXIoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSApO1xuXG5cdFx0Ly8gcmVuZGVyIHNjZW5lXG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIF90aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzICk7XG5cblx0XHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkge1xuXG5cdFx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjYW1lcmEyID0gY2FtZXJhc1sgaSBdO1xuXG5cdFx0XHRcdHJlbmRlclNjZW5lKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYTIsIGNhbWVyYTIudmlld3BvcnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gcmVzb2x2ZSBtdWx0aXNhbXBsZSByZW5kZXJidWZmZXJzIHRvIGEgc2luZ2xlLXNhbXBsZSB0ZXh0dXJlIGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Ly8gR2VuZXJhdGUgbWlwbWFwIGlmIHdlJ3JlIHVzaW5nIGFueSBraW5kIG9mIG1pcG1hcCBmaWx0ZXJpbmdcblxuXHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlc2V0RGVmYXVsdFN0YXRlKCk7XG5cdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxO1xuXHRcdF9jdXJyZW50Q2FtZXJhID0gbnVsbDtcblxuXHRcdHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cblx0XHRpZiAoIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVTdGFja1sgcmVuZGVyU3RhdGVTdGFjay5sZW5ndGggLSAxIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyTGlzdFN0YWNrLnBvcCgpO1xuXG5cdFx0aWYgKCByZW5kZXJMaXN0U3RhY2subGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3QgPSByZW5kZXJMaXN0U3RhY2tbIHJlbmRlckxpc3RTdGFjay5sZW5ndGggLSAxIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNvbnN0IHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNHcm91cCApIHtcblxuXHRcdFx0XHRncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIG9iamVjdC51cGRhdGUoIGNhbWVyYSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRcdFx0Ly8gdXBkYXRlIHNrZWxldG9uIG9ubHkgb25jZSBpbiBhIGZyYW1lXG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5za2VsZXRvbi5mcmFtZSAhPT0gaW5mby5yZW5kZXIuZnJhbWUgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5za2VsZXRvbi51cGRhdGUoKTtcblx0XHRcdFx0XHRcdG9iamVjdC5za2VsZXRvbi5mcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgZ3JvdXBNYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyU2NlbmUoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCB2aWV3cG9ydCApIHtcblxuXHRcdGNvbnN0IG9wYXF1ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC5vcGFxdWU7XG5cdFx0Y29uc3QgdHJhbnNtaXNzaXZlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zbWlzc2l2ZTtcblx0XHRjb25zdCB0cmFuc3BhcmVudE9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc3BhcmVudDtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApO1xuXG5cdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJUcmFuc21pc3Npb25QYXNzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIHZpZXdwb3J0ICkgc3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggdmlld3BvcnQgKSApO1xuXG5cdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc21pc3NpdmVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudE9iamVjdHMubGVuZ3RoID4gMCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyVHJhbnNtaXNzaW9uUGFzcyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdFx0aWYgKCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCAxLCAxLCB7XG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwczogdHJ1ZSxcblx0XHRcdFx0dHlwZTogdXRpbHMuY29udmVydCggSGFsZkZsb2F0VHlwZSApICE9PSBudWxsID8gSGFsZkZsb2F0VHlwZSA6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdG1pbkZpbHRlcjogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuXHRcdFx0XHRzYW1wbGVzOiAoIGlzV2ViR0wyICYmIF9hbnRpYWxpYXMgPT09IHRydWUgKSA/IDQgOiAwXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRfdGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSggX3ZlY3RvcjIgKTtcblxuXHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdF90cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuc2V0U2l6ZSggX3ZlY3RvcjIueCwgX3ZlY3RvcjIueSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RyYW5zbWlzc2lvblJlbmRlclRhcmdldC5zZXRTaXplKCBmbG9vclBvd2VyT2ZUd28oIF92ZWN0b3IyLnggKSwgZmxvb3JQb3dlck9mVHdvKCBfdmVjdG9yMi55ICkgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gX3RoaXMuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cdFx0X3RoaXMuY2xlYXIoKTtcblxuXHRcdC8vIFR1cm4gb2ZmIHRoZSBmZWF0dXJlcyB3aGljaCBjYW4gYWZmZWN0IHRoZSBmcmFnIGNvbG9yIGZvciBvcGFxdWUgb2JqZWN0cyBwYXNzLlxuXHRcdC8vIE90aGVyd2lzZSB0aGV5IGFyZSBhcHBsaWVkIHR3aWNlIGluIG9wYXF1ZSBvYmplY3RzIHBhc3MgYW5kIHRyYW5zbWlzc2lvbiBvYmplY3RzIHBhc3MuXG5cdFx0Y29uc3QgY3VycmVudFRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7XG5cdFx0X3RoaXMudG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0cmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0X3RoaXMudG9uZU1hcHBpbmcgPSBjdXJyZW50VG9uZU1hcHBpbmc7XG5cblx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCApO1xuXG5cdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdHMoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBvdmVycmlkZU1hdGVyaWFsID0gc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSA/IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgOiBudWxsO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJJdGVtID0gcmVuZGVyTGlzdFsgaSBdO1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDtcblx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb3ZlcnJpZGVNYXRlcmlhbCA9PT0gbnVsbCA/IHJlbmRlckl0ZW0ubWF0ZXJpYWwgOiBvdmVycmlkZU1hdGVyaWFsO1xuXHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXG5cdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKSB7XG5cblx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXHRcdG9iamVjdC5ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBvYmplY3QubW9kZWxWaWV3TWF0cml4ICk7XG5cblx0XHRtYXRlcmlhbC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgKSB7XG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgIT09IHRydWUgKSBzY2VuZSA9IF9lbXB0eVNjZW5lOyAvLyBzY2VuZSBjb3VsZCBiZSBhIE1lc2gsIExpbmUsIFBvaW50cywgLi4uXG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cdFx0Y29uc3Qgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdGNvbnN0IGxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0cy5zdGF0ZS52ZXJzaW9uO1xuXG5cdFx0Y29uc3QgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLnN0YXRlLCBzaGFkb3dzQXJyYXksIHNjZW5lLCBvYmplY3QgKTtcblx0XHRjb25zdCBwcm9ncmFtQ2FjaGVLZXkgPSBwcm9ncmFtQ2FjaGUuZ2V0UHJvZ3JhbUNhY2hlS2V5KCBwYXJhbWV0ZXJzICk7XG5cblx0XHRsZXQgcHJvZ3JhbXMgPSBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXM7XG5cblx0XHQvLyBhbHdheXMgdXBkYXRlIGVudmlyb25tZW50IGFuZCBmb2cgLSBjaGFuZ2luZyB0aGVzZSB0cmlnZ2VyIGFuIGdldFByb2dyYW0gY2FsbCwgYnV0IGl0J3MgcG9zc2libGUgdGhhdCB0aGUgcHJvZ3JhbSBkb2Vzbid0IGNoYW5nZVxuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ID0gbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IHNjZW5lLmVudmlyb25tZW50IDogbnVsbDtcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZm9nID0gc2NlbmUuZm9nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgKTtcblxuXHRcdGlmICggcHJvZ3JhbXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbmV3IG1hdGVyaWFsXG5cblx0XHRcdG1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdFx0cHJvZ3JhbXMgPSBuZXcgTWFwKCk7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxuXHRcdH1cblxuXHRcdGxldCBwcm9ncmFtID0gcHJvZ3JhbXMuZ2V0KCBwcm9ncmFtQ2FjaGVLZXkgKTtcblxuXHRcdGlmICggcHJvZ3JhbSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBlYXJseSBvdXQgaWYgcHJvZ3JhbSBhbmQgbGlnaHQgc3RhdGUgaXMgaWRlbnRpY2FsXG5cblx0XHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmN1cnJlbnRQcm9ncmFtID09PSBwcm9ncmFtICYmIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gPT09IGxpZ2h0c1N0YXRlVmVyc2lvbiApIHtcblxuXHRcdFx0XHR1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdFx0cmV0dXJuIHByb2dyYW07XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBhcmFtZXRlcnMudW5pZm9ybXMgPSBwcm9ncmFtQ2FjaGUuZ2V0VW5pZm9ybXMoIG1hdGVyaWFsICk7XG5cblx0XHRcdG1hdGVyaWFsLm9uQnVpbGQoIG9iamVjdCwgcGFyYW1ldGVycywgX3RoaXMgKTtcblxuXHRcdFx0bWF0ZXJpYWwub25CZWZvcmVDb21waWxlKCBwYXJhbWV0ZXJzLCBfdGhpcyApO1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBwYXJhbWV0ZXJzLCBwcm9ncmFtQ2FjaGVLZXkgKTtcblx0XHRcdHByb2dyYW1zLnNldCggcHJvZ3JhbUNhY2hlS2V5LCBwcm9ncmFtICk7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyA9IHBhcmFtZXRlcnMudW5pZm9ybXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdGlmICggKCAhIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsICkgfHwgbWF0ZXJpYWwuY2xpcHBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNsaXBwaW5nUGxhbmVzID0gY2xpcHBpbmcudW5pZm9ybTtcblxuXHRcdH1cblxuXHRcdHVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTtcblxuXHRcdC8vIHN0b3JlIHRoZSBsaWdodCBzZXR1cCBpdCB3YXMgY3JlYXRlZCBmb3JcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyA9IG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICk7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjtcblxuXHRcdGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzICkge1xuXG5cdFx0XHQvLyB3aXJlIHVwIHRoZSBtYXRlcmlhbCB0byB0aGlzIHJlbmRlcmVyJ3MgbGlnaHRpbmcgc3RhdGVcblxuXHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWUgPSBsaWdodHMuc3RhdGUuYW1iaWVudDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0UHJvYmUudmFsdWUgPSBsaWdodHMuc3RhdGUucHJvYmU7XG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93O1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90O1xuXHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93O1xuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XG5cdFx0XHR1bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzE7XG5cdFx0XHR1bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzI7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludDtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93O1xuXHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pO1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hdHJpeDtcblx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcblxuXHRcdH1cblxuXHRcdGNvbnN0IHByb2dVbmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKTtcblx0XHRjb25zdCB1bmlmb3Jtc0xpc3QgPSBXZWJHTFVuaWZvcm1zLnNlcVdpdGhWYWx1ZSggcHJvZ1VuaWZvcm1zLnNlcSwgdW5pZm9ybXMgKTtcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IHVuaWZvcm1zTGlzdDtcblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0RW5jb2RpbmcgPSBwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9IHBhcmFtZXRlcnMuc2tpbm5pbmc7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0cyA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaE5vcm1hbHMgPSBwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhDb2xvcnMgPSBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHNDb3VudCA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQ7XG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhBbHBoYXMgPSBwYXJhbWV0ZXJzLnZlcnRleEFscGhhcztcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4VGFuZ2VudHMgPSBwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzO1xuXHRcdG1hdGVyaWFsUHJvcGVydGllcy50b25lTWFwcGluZyA9IHBhcmFtZXRlcnMudG9uZU1hcHBpbmc7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0ICkge1xuXG5cdFx0aWYgKCBzY2VuZS5pc1NjZW5lICE9PSB0cnVlICkgc2NlbmUgPSBfZW1wdHlTY2VuZTsgLy8gc2NlbmUgY291bGQgYmUgYSBNZXNoLCBMaW5lLCBQb2ludHMsIC4uLlxuXG5cdFx0dGV4dHVyZXMucmVzZXRUZXh0dXJlVW5pdHMoKTtcblxuXHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRjb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cdFx0Y29uc3QgZW5jb2RpbmcgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyBfdGhpcy5vdXRwdXRFbmNvZGluZyA6ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSA/IF9jdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuZW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZyApO1xuXHRcdGNvbnN0IGVudk1hcCA9ICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICk7XG5cdFx0Y29uc3QgdmVydGV4QWxwaGFzID0gbWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSB0cnVlICYmICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5pdGVtU2l6ZSA9PT0gNDtcblx0XHRjb25zdCB2ZXJ0ZXhUYW5nZW50cyA9ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQ7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoTm9ybWFscyA9ICEhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWw7XG5cdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSAhISBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgdG9uZU1hcHBpbmcgPSBtYXRlcmlhbC50b25lTWFwcGVkID8gX3RoaXMudG9uZU1hcHBpbmcgOiBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblx0XHRjb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSB8fCBjYW1lcmEgIT09IF9jdXJyZW50Q2FtZXJhICkge1xuXG5cdFx0XHRcdGNvbnN0IHVzZUNhY2hlID1cblx0XHRcdFx0XHRjYW1lcmEgPT09IF9jdXJyZW50Q2FtZXJhICYmXG5cdFx0XHRcdFx0bWF0ZXJpYWwuaWQgPT09IF9jdXJyZW50TWF0ZXJpYWxJZDtcblxuXHRcdFx0XHQvLyB3ZSBtaWdodCB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHNvbWUgQ2xpcHBpbmdHcm91cFxuXHRcdFx0XHQvLyBvYmplY3QgaW5zdGVhZCBvZiB0aGUgbWF0ZXJpYWwsIG9uY2UgaXQgYmVjb21lcyBmZWFzaWJsZVxuXHRcdFx0XHQvLyAoIzg0NjUsICM4Mzc5KVxuXHRcdFx0XHRjbGlwcGluZy5zZXRTdGF0ZSggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGxldCBuZWVkc1Byb2dyYW1DaGFuZ2UgPSBmYWxzZTtcblxuXHRcdGlmICggbWF0ZXJpYWwudmVyc2lvbiA9PT0gbWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgJiYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHMuc3RhdGUudmVyc2lvbiApICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5vdXRwdXRFbmNvZGluZyAhPT0gZW5jb2RpbmcgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudk1hcCAhPT0gZW52TWFwICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdFx0KCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IGNsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBjbGlwcGluZy5udW1JbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4QWxwaGFzICE9PSB2ZXJ0ZXhBbHBoYXMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnZlcnRleFRhbmdlbnRzICE9PSB2ZXJ0ZXhUYW5nZW50cyApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzICE9PSBtb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyAhPT0gbW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaENvbG9ycyAhPT0gbW9ycGhDb2xvcnMgKSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLnRvbmVNYXBwaW5nICE9PSB0b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IHRydWUgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0c0NvdW50ICE9PSBtb3JwaFRhcmdldHNDb3VudCApIHtcblxuXHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IG1hdGVyaWFsLnZlcnNpb247XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0bGV0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRpZiAoIG5lZWRzUHJvZ3JhbUNoYW5nZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRsZXQgcmVmcmVzaFByb2dyYW0gPSBmYWxzZTtcblx0XHRsZXQgcmVmcmVzaE1hdGVyaWFsID0gZmFsc2U7XG5cdFx0bGV0IHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdGNvbnN0IHBfdW5pZm9ybXMgPSBwcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHRtX3VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zO1xuXG5cdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0cmVmcmVzaFByb2dyYW0gPSB0cnVlO1xuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pZCAhPT0gX2N1cnJlbnRNYXRlcmlhbElkICkge1xuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncHJvamVjdGlvbk1hdHJpeCcsIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0Mi4wIC8gKCBNYXRoLmxvZyggY2FtZXJhLmZhciArIDEuMCApIC8gTWF0aC5MTjIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHRfY3VycmVudENhbWVyYSA9IGNhbWVyYTtcblxuXHRcdFx0XHQvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZVxuXHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHQvLyB0aGUgbmV4dCBtYXRlcmlhbCB0aGF0IGRvZXMgZ2V0cyBhY3RpdmF0ZWQ6XG5cblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGxvYWQgbWF0ZXJpYWwgc3BlY2lmaWMgdW5pZm9ybXNcblx0XHRcdC8vIChzaGFkZXIgbWF0ZXJpYWwgYWxzbyBnZXRzIHRoZW0gZm9yIHRoZSBzYWtlIG9mIGdlbmVyaWNpdHkpXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0XHRjb25zdCB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247XG5cblx0XHRcdFx0aWYgKCB1Q2FtUG9zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR1Q2FtUG9zLnNldFZhbHVlKCBfZ2wsXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoTGFtYmVydE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2lzT3J0aG9ncmFwaGljJywgY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhID09PSB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fFxuXHRcdFx0XHRvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBza2lubmluZyBhbmQgbW9ycGggdGFyZ2V0IHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZVxuXHRcdC8vIGF1dG8tc2V0dGluZyBvZiB0ZXh0dXJlIHVuaXQgZm9yIGJvbmUgYW5kIG1vcnBoIHRleHR1cmUgbXVzdCBnbyBiZWZvcmUgb3RoZXIgdGV4dHVyZXNcblx0XHQvLyBvdGhlcndpc2UgdGV4dHVyZXMgdXNlZCBmb3Igc2tpbm5pbmcgYW5kIG1vcnBoaW5nIGNhbiB0YWtlIG92ZXIgdGV4dHVyZSB1bml0cyByZXNlcnZlZCBmb3Igb3RoZXIgbWF0ZXJpYWwgdGV4dHVyZXNcblxuXHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7XG5cblx0XHRcdGNvbnN0IHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRpZiAoIHNrZWxldG9uICkge1xuXG5cdFx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSBudWxsICkgc2tlbGV0b24uY29tcHV0ZUJvbmVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JvbmVUZXh0dXJlU2l6ZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIHNrZWxldG9uLCAnYm9uZU1hdHJpY2VzJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCB8fCBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgfHwgKCBtb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCAmJiBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IHRydWUgKSApIHtcblxuXHRcdFx0bW9ycGh0YXJnZXRzLnVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXG5cdFx0aWYgKCByZWZyZXNoTWF0ZXJpYWwgfHwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgIT09IG9iamVjdC5yZWNlaXZlU2hhZG93ICkge1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyA9IG9iamVjdC5yZWNlaXZlU2hhZG93O1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7XG5cblx0XHRcdFx0Ly8gdGhlIGN1cnJlbnQgbWF0ZXJpYWwgcmVxdWlyZXMgbGlnaHRpbmcgaW5mb1xuXG5cdFx0XHRcdC8vIG5vdGU6IGFsbCBsaWdodGluZyB1bmlmb3JtcyBhcmUgYWx3YXlzIHNldCBjb3JyZWN0bHlcblx0XHRcdFx0Ly8gdGhleSBzaW1wbHkgcmVmZXJlbmNlIHRoZSByZW5kZXJlcidzIHN0YXRlIGZvciB0aGVpclxuXHRcdFx0XHQvLyB2YWx1ZXNcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gdXNlIHRoZSBjdXJyZW50IG1hdGVyaWFsJ3MgLm5lZWRzVXBkYXRlIGZsYWdzIHRvIHNldFxuXHRcdFx0XHQvLyB0aGUgR0wgc3RhdGUgd2hlbiByZXF1aXJlZFxuXG5cdFx0XHRcdG1hcmtVbmlmb3Jtc0xpZ2h0c05lZWRzVXBkYXRlKCBtX3VuaWZvcm1zLCByZWZyZXNoTGlnaHRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVmcmVzaCB1bmlmb3JtcyBjb21tb24gdG8gc2V2ZXJhbCBtYXRlcmlhbHNcblxuXHRcdFx0aWYgKCBmb2cgJiYgbWF0ZXJpYWwuZm9nICkge1xuXG5cdFx0XHRcdG1hdGVyaWFscy5yZWZyZXNoRm9nVW5pZm9ybXMoIG1fdW5pZm9ybXMsIGZvZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFscy5yZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggbV91bmlmb3JtcywgbWF0ZXJpYWwsIF9waXhlbFJhdGlvLCBfaGVpZ2h0LCBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0LCBtX3VuaWZvcm1zLCB0ZXh0dXJlcyApO1xuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmlzU3ByaXRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cblxuXHRmdW5jdGlvbiBtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggdW5pZm9ybXMsIHZhbHVlICkge1xuXG5cdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5saWdodFByb2JlLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnNwb3RMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICkge1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsIHx8XG5cdFx0XHQoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwubGlnaHRzID09PSB0cnVlICk7XG5cblx0fVxuXG5cdHRoaXMuZ2V0QWN0aXZlQ3ViZUZhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVDdWJlRmFjZTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbDtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0O1xuXG5cdH07XG5cblx0dGhpcy5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBjb2xvclRleHR1cmUsIGRlcHRoVGV4dHVyZSApIHtcblxuXHRcdHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlID0gY29sb3JUZXh0dXJlO1xuXHRcdHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSBkZXB0aFRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19oYXNFeHRlcm5hbFRleHR1cmVzID0gdHJ1ZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2hhc0V4dGVybmFsVGV4dHVyZXMgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19hdXRvQWxsb2NhdGVEZXB0aEJ1ZmZlciA9IGRlcHRoVGV4dHVyZSA9PT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoICEgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdC8vIFRoZSBtdWx0aXNhbXBsZV9yZW5kZXJfdG9fdGV4dHVyZSBleHRlbnNpb24gZG9lc24ndCB3b3JrIHByb3Blcmx5IGlmIHRoZXJlXG5cdFx0XHRcdC8vIGFyZSBtaWRmcmFtZSBmbHVzaGVzIGFuZCBhbiBleHRlcm5hbCBkZXB0aCBidWZmZXIuIERpc2FibGUgdXNlIG9mIHRoZSBleHRlbnNpb24uXG5cdFx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBSZW5kZXItdG8tdGV4dHVyZSBleHRlbnNpb24gd2FzIGRpc2FibGVkIGJlY2F1c2UgYW4gZXh0ZXJuYWwgdGV4dHVyZSB3YXMgcHJvdmlkZWQnICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZVJlbmRlclRvVGV4dHVyZSA9IGZhbHNlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5zZXRSZW5kZXJUYXJnZXRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBkZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gZGVmYXVsdEZyYW1lYnVmZmVyO1xuXHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBkZWZhdWx0RnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlID0gMCwgYWN0aXZlTWlwbWFwTGV2ZWwgPSAwICkge1xuXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlO1xuXHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSBhY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdGxldCB1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSB0cnVlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRvIHJlYmluZCB0aGUgZnJhbWVidWZmZXIuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIG51bGwgKTtcblx0XHRcdFx0dXNlRGVmYXVsdEZyYW1lYnVmZmVyID0gZmFsc2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0XHQvLyBDb2xvciBhbmQgZGVwdGggdGV4dHVyZSBtdXN0IGJlIHJlYm91bmQgaW4gb3JkZXIgZm9yIHRoZSBzd2FwY2hhaW4gdG8gdXBkYXRlLlxuXHRcdFx0XHR0ZXh0dXJlcy5yZWJpbmRUZXh0dXJlcyggcmVuZGVyVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXQgZnJhbWVidWZmZXIgPSBudWxsO1xuXHRcdGxldCBpc0N1YmUgPSBmYWxzZTtcblx0XHRsZXQgaXNSZW5kZXJUYXJnZXQzRCA9IGZhbHNlO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRpc1JlbmRlclRhcmdldDNEID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBfX3dlYmdsRnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXTtcblx0XHRcdFx0aXNDdWJlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgJiYgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkgJiYgdGV4dHVyZXMudXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IF9zY2lzc29yVGVzdDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGZyYW1lYnVmZmVyQm91bmQgPSBzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlckJvdW5kICYmIGNhcGFiaWxpdGllcy5kcmF3QnVmZmVycyAmJiB1c2VEZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdHN0YXRlLmRyYXdCdWZmZXJzKCByZW5kZXJUYXJnZXQsIGZyYW1lYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydCApO1xuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3NvciApO1xuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfY3VycmVudFNjaXNzb3JUZXN0ICk7XG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDM2MDY0LCAzNDA2OSArIGFjdGl2ZUN1YmVGYWNlLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGlzUmVuZGVyVGFyZ2V0M0QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRjb25zdCBsYXllciA9IGFjdGl2ZUN1YmVGYWNlIHx8IDA7XG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIDM2MTYwLCAzNjA2NCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGFjdGl2ZU1pcG1hcExldmVsIHx8IDAsIGxheWVyICk7XG5cblx0XHR9XG5cblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7IC8vIHJlc2V0IGN1cnJlbnQgbWF0ZXJpYWwgdG8gZW5zdXJlIGNvcnJlY3QgdW5pZm9ybSBiaW5kaW5nc1xuXG5cdH07XG5cblx0dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCApIHtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGxldCBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCAmJiBhY3RpdmVDdWJlRmFjZUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlSW5kZXggXTtcblxuXHRcdH1cblxuXHRcdGlmICggZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0XHRjb25zdCB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdGNvbnN0IHRleHR1cmVUeXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZUZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICkgIT09IF9nbC5nZXRQYXJhbWV0ZXIoIDM1NzM5ICkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuJyApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQgPSAoIHRleHR1cmVUeXBlID09PSBIYWxmRmxvYXRUeXBlICkgJiYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSB8fCAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiAmJiBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZVR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzggKSAmJiAvLyBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcblx0XHRcdFx0XHQhIGhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0ICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIF9nbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKCAzNjE2MCApID09PSAzNjA1MyApIHtcblxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50IGVuc3VyZXMgdmFsaWQgcmVhZCByZXF1ZXN0cyAobm8gb3V0LW9mLWJvdW5kcyBwaXhlbHMsIHNlZSAjODYwNClcblxuXHRcdFx0XHRcdGlmICggKCB4ID49IDAgJiYgeCA8PSAoIHJlbmRlclRhcmdldC53aWR0aCAtIHdpZHRoICkgKSAmJiAoIHkgPj0gMCAmJiB5IDw9ICggcmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCApICkgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlRm9ybWF0ICksIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICksIGJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZWFkUGl4ZWxzIGZyb20gcmVuZGVyVGFyZ2V0IGZhaWxlZC4gRnJhbWVidWZmZXIgbm90IGNvbXBsZXRlLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZmluYWxseSB7XG5cblx0XHRcdFx0Ly8gcmVzdG9yZSBmcmFtZWJ1ZmZlciBvZiBjdXJyZW50IHJlbmRlciB0YXJnZXQgaWYgbmVjZXNzYXJ5XG5cblx0XHRcdFx0Y29uc3QgZnJhbWVidWZmZXIgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgPyBwcm9wZXJ0aWVzLmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgOiBudWxsO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLmNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSA9IGZ1bmN0aW9uICggcG9zaXRpb24sIHRleHR1cmUsIGxldmVsID0gMCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IGNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSgpIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBGcmFtZWJ1ZmZlclRleHR1cmUuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbGV2ZWxTY2FsZSA9IE1hdGgucG93KCAyLCAtIGxldmVsICk7XG5cdFx0Y29uc3Qgd2lkdGggPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApO1xuXHRcdGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoIHRleHR1cmUuaW1hZ2UuaGVpZ2h0ICogbGV2ZWxTY2FsZSApO1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCAwICk7XG5cblx0XHRfZ2wuY29weVRleFN1YkltYWdlMkQoIDM1NTMsIGxldmVsLCAwLCAwLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0fTtcblxuXHR0aGlzLmNvcHlUZXh0dXJlVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgbGV2ZWwgPSAwICkge1xuXG5cdFx0Y29uc3Qgd2lkdGggPSBzcmNUZXh0dXJlLmltYWdlLndpZHRoO1xuXHRcdGNvbnN0IGhlaWdodCA9IHNyY1RleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS5mb3JtYXQgKTtcblx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLnR5cGUgKTtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggZHN0VGV4dHVyZSwgMCApO1xuXG5cdFx0Ly8gQXMgYW5vdGhlciB0ZXh0dXJlIHVwbG9hZCBtYXkgaGF2ZSBjaGFuZ2VkIHBpeGVsU3RvcmVpXG5cdFx0Ly8gcGFyYW1ldGVycywgbWFrZSBzdXJlIHRoZXkgYXJlIGNvcnJlY3QgZm9yIHRoZSBkc3RUZXh0dXJlXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgZHN0VGV4dHVyZS5mbGlwWSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDEsIGRzdFRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNywgZHN0VGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIHNyY1RleHR1cmUuaW1hZ2UuZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0X2dsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCAzNTUzLCBsZXZlbCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgc3JjVGV4dHVyZS5taXBtYXBzWyAwIF0ud2lkdGgsIHNyY1RleHR1cmUubWlwbWFwc1sgMCBdLmhlaWdodCwgZ2xGb3JtYXQsIHNyY1RleHR1cmUubWlwbWFwc1sgMCBdLmRhdGEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIGdsRm9ybWF0LCBnbFR5cGUsIHNyY1RleHR1cmUuaW1hZ2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gR2VuZXJhdGUgbWlwbWFwcyBvbmx5IHdoZW4gY29weWluZyBsZXZlbCAwXG5cdFx0aWYgKCBsZXZlbCA9PT0gMCAmJiBkc3RUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApIF9nbC5nZW5lcmF0ZU1pcG1hcCggMzU1MyApO1xuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0dGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEID0gZnVuY3Rpb24gKCBzb3VyY2VCb3gsIHBvc2l0aW9uLCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBsZXZlbCA9IDAgKSB7XG5cblx0XHRpZiAoIF90aGlzLmlzV2ViR0wxUmVuZGVyZXIgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXIuY29weVRleHR1cmVUb1RleHR1cmUzRDogY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMi4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCB3aWR0aCA9IHNvdXJjZUJveC5tYXgueCAtIHNvdXJjZUJveC5taW4ueCArIDE7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gc291cmNlQm94Lm1heC55IC0gc291cmNlQm94Lm1pbi55ICsgMTtcblx0XHRjb25zdCBkZXB0aCA9IHNvdXJjZUJveC5tYXgueiAtIHNvdXJjZUJveC5taW4ueiArIDE7XG5cdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIGRzdFRleHR1cmUudHlwZSApO1xuXHRcdGxldCBnbFRhcmdldDtcblxuXHRcdGlmICggZHN0VGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUzRCggZHN0VGV4dHVyZSwgMCApO1xuXHRcdFx0Z2xUYXJnZXQgPSAzMjg3OTtcblxuXHRcdH0gZWxzZSBpZiAoIGRzdFRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggZHN0VGV4dHVyZSwgMCApO1xuXHRcdFx0Z2xUYXJnZXQgPSAzNTg2NjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXIuY29weVRleHR1cmVUb1RleHR1cmUzRDogb25seSBzdXBwb3J0cyBUSFJFRS5EYXRhVGV4dHVyZTNEIGFuZCBUSFJFRS5EYXRhVGV4dHVyZTJEQXJyYXkuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MCwgZHN0VGV4dHVyZS5mbGlwWSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDEsIGRzdFRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNywgZHN0VGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdGNvbnN0IHVucGFja1Jvd0xlbiA9IF9nbC5nZXRQYXJhbWV0ZXIoIDMzMTQgKTtcblx0XHRjb25zdCB1bnBhY2tJbWFnZUhlaWdodCA9IF9nbC5nZXRQYXJhbWV0ZXIoIDMyODc4ICk7XG5cdFx0Y29uc3QgdW5wYWNrU2tpcFBpeGVscyA9IF9nbC5nZXRQYXJhbWV0ZXIoIDMzMTYgKTtcblx0XHRjb25zdCB1bnBhY2tTa2lwUm93cyA9IF9nbC5nZXRQYXJhbWV0ZXIoIDMzMTUgKTtcblx0XHRjb25zdCB1bnBhY2tTa2lwSW1hZ2VzID0gX2dsLmdldFBhcmFtZXRlciggMzI4NzcgKTtcblxuXHRcdGNvbnN0IGltYWdlID0gc3JjVGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlID8gc3JjVGV4dHVyZS5taXBtYXBzWyAwIF0gOiBzcmNUZXh0dXJlLmltYWdlO1xuXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE0LCBpbWFnZS53aWR0aCApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzI4NzgsIGltYWdlLmhlaWdodCApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNiwgc291cmNlQm94Lm1pbi54ICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE1LCBzb3VyY2VCb3gubWluLnkgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMyODc3LCBzb3VyY2VCb3gubWluLnogKTtcblxuXHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlIHx8IHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGxldmVsLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5jb3B5VGV4dHVyZVRvVGV4dHVyZTNEOiB1bnRlc3RlZCBzdXBwb3J0IGZvciBjb21wcmVzc2VkIHNyY1RleHR1cmUuJyApO1xuXHRcdFx0XHRfZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBsZXZlbCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBsZXZlbCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdF9nbC5waXhlbFN0b3JlaSggMzMxNCwgdW5wYWNrUm93TGVuICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMjg3OCwgdW5wYWNrSW1hZ2VIZWlnaHQgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTYsIHVucGFja1NraXBQaXhlbHMgKTtcblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDMzMTUsIHVucGFja1NraXBSb3dzICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMjg3NywgdW5wYWNrU2tpcEltYWdlcyApO1xuXG5cdFx0Ly8gR2VuZXJhdGUgbWlwbWFwcyBvbmx5IHdoZW4gY29weWluZyBsZXZlbCAwXG5cdFx0aWYgKCBsZXZlbCA9PT0gMCAmJiBkc3RUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApIF9nbC5nZW5lcmF0ZU1pcG1hcCggZ2xUYXJnZXQgKTtcblxuXHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHR9O1xuXG5cdHRoaXMuaW5pdFRleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmUgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHR9O1xuXG5cdHRoaXMucmVzZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSAwO1xuXHRcdF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPSAwO1xuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdHN0YXRlLnJlc2V0KCk7XG5cdFx0YmluZGluZ1N0YXRlcy5yZXNldCgpO1xuXG5cdH07XG5cblx0aWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7XG5cblx0fVxuXG59XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJlciA9IHRydWU7XG5cbmNsYXNzIFdlYkdMMVJlbmRlcmVyIGV4dGVuZHMgV2ViR0xSZW5kZXJlciB7fVxuXG5XZWJHTDFSZW5kZXJlci5wcm90b3R5cGUuaXNXZWJHTDFSZW5kZXJlciA9IHRydWU7XG5cbmNsYXNzIEZvZ0V4cDIge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgZGVuc2l0eSA9IDAuMDAwMjUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdFx0dGhpcy5kZW5zaXR5ID0gZGVuc2l0eTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvZ0V4cDIoIHRoaXMuY29sb3IsIHRoaXMuZGVuc2l0eSApO1xuXG5cdH1cblxuXHR0b0pTT04oIC8qIG1ldGEgKi8gKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ0ZvZ0V4cDInLFxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0XHRkZW5zaXR5OiB0aGlzLmRlbnNpdHlcblx0XHR9O1xuXG5cdH1cblxufVxuXG5Gb2dFeHAyLnByb3RvdHlwZS5pc0ZvZ0V4cDIgPSB0cnVlO1xuXG5jbGFzcyBGb2cge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgbmVhciA9IDEsIGZhciA9IDEwMDAgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXHRcdHRoaXMuZmFyID0gZmFyO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgRm9nKCB0aGlzLmNvbG9yLCB0aGlzLm5lYXIsIHRoaXMuZmFyICk7XG5cblx0fVxuXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiAnRm9nJyxcblx0XHRcdGNvbG9yOiB0aGlzLmNvbG9yLmdldEhleCgpLFxuXHRcdFx0bmVhcjogdGhpcy5uZWFyLFxuXHRcdFx0ZmFyOiB0aGlzLmZhclxuXHRcdH07XG5cblx0fVxuXG59XG5cbkZvZy5wcm90b3R5cGUuaXNGb2cgPSB0cnVlO1xuXG5jbGFzcyBTY2VuZSBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2NlbmUnO1xuXG5cdFx0dGhpcy5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHR0aGlzLmVudmlyb25tZW50ID0gbnVsbDtcblx0XHR0aGlzLmZvZyA9IG51bGw7XG5cblx0XHR0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTsgLy8gY2hlY2tlZCBieSB0aGUgcmVuZGVyZXJcblxuXHRcdGlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdGlmICggc291cmNlLmJhY2tncm91bmQgIT09IG51bGwgKSB0aGlzLmJhY2tncm91bmQgPSBzb3VyY2UuYmFja2dyb3VuZC5jbG9uZSgpO1xuXHRcdGlmICggc291cmNlLmVudmlyb25tZW50ICE9PSBudWxsICkgdGhpcy5lbnZpcm9ubWVudCA9IHNvdXJjZS5lbnZpcm9ubWVudC5jbG9uZSgpO1xuXHRcdGlmICggc291cmNlLmZvZyAhPT0gbnVsbCApIHRoaXMuZm9nID0gc291cmNlLmZvZy5jbG9uZSgpO1xuXG5cdFx0aWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuZm9nICE9PSBudWxsICkgZGF0YS5vYmplY3QuZm9nID0gdGhpcy5mb2cudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuU2NlbmUucHJvdG90eXBlLmlzU2NlbmUgPSB0cnVlO1xuXG5jbGFzcyBJbnRlcmxlYXZlZEJ1ZmZlciB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBzdHJpZGUgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cdFx0dGhpcy5zdHJpZGUgPSBzdHJpZGU7XG5cdFx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBzdHJpZGUgOiAwO1xuXG5cdFx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblx0XHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblxuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHR9XG5cblx0b25VcGxvYWRDYWxsYmFjaygpIHt9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdHNldFVzYWdlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudXNhZ2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5QXQoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7XG5cblx0XHRpbmRleDEgKj0gdGhpcy5zdHJpZGU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5zdHJpZGU7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnN0cmlkZTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldCggdmFsdWUsIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVycyA9IHt9O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9IHRoaXMuYXJyYXkuc2xpY2UoIDAgKS5idWZmZXI7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhcnJheSA9IG5ldyB0aGlzLmFycmF5LmNvbnN0cnVjdG9yKCBkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSApO1xuXG5cdFx0Y29uc3QgaWIgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvciggYXJyYXksIHRoaXMuc3RyaWRlICk7XG5cdFx0aWIuc2V0VXNhZ2UoIHRoaXMudXNhZ2UgKTtcblxuXHRcdHJldHVybiBpYjtcblxuXHR9XG5cblx0b25VcGxvYWQoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVycyA9IHt9O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgVVVJRCBmb3IgYXJyYXkgYnVmZmVyIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBuZXcgVWludDMyQXJyYXkoIHRoaXMuYXJyYXkuYnVmZmVyICkgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0YnVmZmVyOiB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCxcblx0XHRcdHR5cGU6IHRoaXMuYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdHN0cmlkZTogdGhpcy5zdHJpZGVcblx0XHR9O1xuXG5cdH1cblxufVxuXG5JbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuaXNJbnRlcmxlYXZlZEJ1ZmZlciA9IHRydWU7XG5cbmNvbnN0IF92ZWN0b3IkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBpbnRlcmxlYXZlZEJ1ZmZlciwgaXRlbVNpemUsIG9mZnNldCwgbm9ybWFsaXplZCA9IGZhbHNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHR0aGlzLmRhdGEgPSBpbnRlcmxlYXZlZEJ1ZmZlcjtcblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdFx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkID09PSB0cnVlO1xuXG5cdH1cblxuXHRnZXQgY291bnQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmNvdW50O1xuXG5cdH1cblxuXHRnZXQgYXJyYXkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5O1xuXG5cdH1cblxuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5kYXRhLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuZGF0YS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNi54ID0gdGhpcy5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yJDYueSA9IHRoaXMuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3RvciQ2LnogPSB0aGlzLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ2LmFwcGx5TWF0cml4NCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ2LngsIF92ZWN0b3IkNi55LCBfdmVjdG9yJDYueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNi54ID0gdGhpcy5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yJDYueSA9IHRoaXMuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3RvciQ2LnogPSB0aGlzLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ2LmFwcGx5Tm9ybWFsTWF0cml4KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDYueCwgX3ZlY3RvciQ2LnksIF92ZWN0b3IkNi56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNi54ID0gdGhpcy5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yJDYueSA9IHRoaXMuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3RvciQ2LnogPSB0aGlzLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ2LnRyYW5zZm9ybURpcmVjdGlvbiggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ2LngsIF92ZWN0b3IkNi55LCBfdmVjdG9yJDYueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCBpbmRleCwgeSApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFooIGluZGV4LCB6ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0VyggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRYKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07XG5cblx0fVxuXG5cdGdldFkoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF07XG5cblx0fVxuXG5cdGdldFooIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XG5cblx0fVxuXG5cdGdldFcoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07XG5cblx0fVxuXG5cdHNldFhZKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYWVooIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWlcoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuY2xvbmUoKTogQ2xvbmluZyBhbiBpbnRlcmxhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUgd2lsbCBkZWludGVybGVhdmUgYnVmZmVyIGRhdGEuJyApO1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmNvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0aGlzLml0ZW1TaXplOyBqICsrICkge1xuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggdGhpcy5kYXRhLmFycmF5WyBpbmRleCArIGogXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IoIGFycmF5ICksIHRoaXMuaXRlbVNpemUsIHRoaXMubm9ybWFsaXplZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID0ge307XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID0gdGhpcy5kYXRhLmNsb25lKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0sIHRoaXMuaXRlbVNpemUsIHRoaXMub2Zmc2V0LCB0aGlzLm5vcm1hbGl6ZWQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUudG9KU09OKCk6IFNlcmlhbGl6aW5nIGFuIGludGVybGF2ZWQgYnVmZmVyIGF0dHJpYnV0ZSB3aWxsIGRlaW50ZXJsZWF2ZSBidWZmZXIgZGF0YS4nICk7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHRoaXMuaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheS5wdXNoKCB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgaiBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlaW50ZXJsZWF2ZSBkYXRhIGFuZCBzYXZlIGl0IGFzIGFuIG9yZGluYXJ5IGJ1ZmZlciBhdHRyaWJ1dGUgZm9yIG5vd1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHNhdmUgYXMgdHJ1ZSBpbnRlcmxhdmVkIGF0dHJpYnR1ZVxuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnMgPSB7fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0gPSB0aGlzLmRhdGEudG9KU09OKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0aXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcblx0XHRcdFx0aXRlbVNpemU6IHRoaXMuaXRlbVNpemUsXG5cdFx0XHRcdGRhdGE6IHRoaXMuZGF0YS51dWlkLFxuXHRcdFx0XHRvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuXHRcdFx0XHRub3JtYWxpemVkOiB0aGlzLm5vcm1hbGl6ZWRcblx0XHRcdH07XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuLyoqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgcm90YXRpb246IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5jbGFzcyBTcHJpdGVNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5pc1Nwcml0ZU1hdGVyaWFsID0gdHJ1ZTtcblxubGV0IF9nZW9tZXRyeTtcblxuY29uc3QgX2ludGVyc2VjdFBvaW50ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3dvcmxkU2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbXZQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2FsaWduZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF9yb3RhdGVkUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdmlld1dvcmxkTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jb25zdCBfdkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF91dkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3V2QyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcblxuY2xhc3MgU3ByaXRlIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlJztcblxuXHRcdGlmICggX2dlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0XHRjb25zdCBmbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBbXG5cdFx0XHRcdC0gMC41LCAtIDAuNSwgMCwgMCwgMCxcblx0XHRcdFx0MC41LCAtIDAuNSwgMCwgMSwgMCxcblx0XHRcdFx0MC41LCAwLjUsIDAsIDEsIDEsXG5cdFx0XHRcdC0gMC41LCAwLjUsIDAsIDAsIDFcblx0XHRcdF0gKTtcblxuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0XHRfZ2VvbWV0cnkuc2V0SW5kZXgoIFsgMCwgMSwgMixcdDAsIDIsIDMgXSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IF9nZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gKCBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbCA6IG5ldyBTcHJpdGVNYXRlcmlhbCgpO1xuXG5cdFx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMC41LCAwLjUgKTtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0aWYgKCByYXljYXN0ZXIuY2FtZXJhID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3ByaXRlOiBcIlJheWNhc3Rlci5jYW1lcmFcIiBuZWVkcyB0byBiZSBzZXQgaW4gb3JkZXIgdG8gcmF5Y2FzdCBhZ2FpbnN0IHNwcml0ZXMuJyApO1xuXG5cdFx0fVxuXG5cdFx0X3dvcmxkU2NhbGUuc2V0RnJvbU1hdHJpeFNjYWxlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRfdmlld1dvcmxkTWF0cml4LmNvcHkoIHJheWNhc3Rlci5jYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHR0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCByYXljYXN0ZXIuY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X212UG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIuY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgJiYgdGhpcy5tYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IGZhbHNlICkge1xuXG5cdFx0XHRfd29ybGRTY2FsZS5tdWx0aXBseVNjYWxhciggLSBfbXZQb3NpdGlvbi56ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCByb3RhdGlvbiA9IHRoaXMubWF0ZXJpYWwucm90YXRpb247XG5cdFx0bGV0IHNpbiwgY29zO1xuXG5cdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0Y29zID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0XHRzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkIuc2V0KCAwLjUsIC0gMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdHRyYW5zZm9ybVZlcnRleCggX3ZDLnNldCggMC41LCAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cblx0XHRfdXZBLnNldCggMCwgMCApO1xuXHRcdF91dkIuc2V0KCAxLCAwICk7XG5cdFx0X3V2Qy5zZXQoIDEsIDEgKTtcblxuXHRcdC8vIGNoZWNrIGZpcnN0IHRyaWFuZ2xlXG5cdFx0bGV0IGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZCLCBfdkMsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHQvLyBjaGVjayBzZWNvbmQgdHJpYW5nbGVcblx0XHRcdHRyYW5zZm9ybVZlcnRleCggX3ZCLnNldCggLSAwLjUsIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdF91dkIuc2V0KCAwLCAxICk7XG5cblx0XHRcdGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZDLCBfdkIsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0dXY6IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0UG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKSxcblx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBzb3VyY2UubWF0ZXJpYWw7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuU3ByaXRlLnByb3RvdHlwZS5pc1Nwcml0ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVZlcnRleCggdmVydGV4UG9zaXRpb24sIG12UG9zaXRpb24sIGNlbnRlciwgc2NhbGUsIHNpbiwgY29zICkge1xuXG5cdC8vIGNvbXB1dGUgcG9zaXRpb24gaW4gY2FtZXJhIHNwYWNlXG5cdF9hbGlnbmVkUG9zaXRpb24uc3ViVmVjdG9ycyggdmVydGV4UG9zaXRpb24sIGNlbnRlciApLmFkZFNjYWxhciggMC41ICkubXVsdGlwbHkoIHNjYWxlICk7XG5cblx0Ly8gdG8gY2hlY2sgaWYgcm90YXRpb24gaXMgbm90IHplcm9cblx0aWYgKCBzaW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9yb3RhdGVkUG9zaXRpb24ueCA9ICggY29zICogX2FsaWduZWRQb3NpdGlvbi54ICkgLSAoIHNpbiAqIF9hbGlnbmVkUG9zaXRpb24ueSApO1xuXHRcdF9yb3RhdGVkUG9zaXRpb24ueSA9ICggc2luICogX2FsaWduZWRQb3NpdGlvbi54ICkgKyAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRfcm90YXRlZFBvc2l0aW9uLmNvcHkoIF9hbGlnbmVkUG9zaXRpb24gKTtcblxuXHR9XG5cblxuXHR2ZXJ0ZXhQb3NpdGlvbi5jb3B5KCBtdlBvc2l0aW9uICk7XG5cdHZlcnRleFBvc2l0aW9uLnggKz0gX3JvdGF0ZWRQb3NpdGlvbi54O1xuXHR2ZXJ0ZXhQb3NpdGlvbi55ICs9IF9yb3RhdGVkUG9zaXRpb24ueTtcblxuXHQvLyB0cmFuc2Zvcm0gdG8gd29ybGQgc3BhY2Vcblx0dmVydGV4UG9zaXRpb24uYXBwbHlNYXRyaXg0KCBfdmlld1dvcmxkTWF0cml4ICk7XG5cbn1cblxuY29uc3QgX3YxJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTE9EIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2N1cnJlbnRMZXZlbCA9IDA7XG5cblx0XHR0aGlzLnR5cGUgPSAnTE9EJztcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0XHRsZXZlbHM6IHtcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IFtdXG5cdFx0XHR9LFxuXHRcdFx0aXNMT0Q6IHtcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gc291cmNlLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZExldmVsKCBvYmplY3QsIGRpc3RhbmNlID0gMCApIHtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGxldCBsO1xuXG5cdFx0Zm9yICggbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q3VycmVudExldmVsKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRMZXZlbDtcblxuXHR9XG5cblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsZXQgaSwgbDtcblxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxldmVsc1sgaSAtIDEgXS5vYmplY3Q7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRfdjEkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfdjEkMiApO1xuXG5cdFx0XHR0aGlzLmdldE9iamVjdEZvckRpc3RhbmNlKCBkaXN0YW5jZSApLnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGUoIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0aWYgKCBsZXZlbHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0X3YxJDIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHRcdF92MiQxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IF92MSQyLmRpc3RhbmNlVG8oIF92MiQxICkgLyBjYW1lcmEuem9vbTtcblxuXHRcdFx0bGV2ZWxzWyAwIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRsZXQgaSwgbDtcblxuXHRcdFx0Zm9yICggaSA9IDEsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGRpc3RhbmNlID49IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0bGV2ZWxzWyBpIC0gMSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cdFx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3VycmVudExldmVsID0gaSAtIDE7XG5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBkYXRhLm9iamVjdC5hdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHRkYXRhLm9iamVjdC5sZXZlbHMgPSBbXTtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxldmVsID0gbGV2ZWxzWyBpIF07XG5cblx0XHRcdGRhdGEub2JqZWN0LmxldmVscy5wdXNoKCB7XG5cdFx0XHRcdG9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsXG5cdFx0XHRcdGRpc3RhbmNlOiBsZXZlbC5kaXN0YW5jZVxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9iYXNlUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9za2luSW5kZXggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5jb25zdCBfc2tpbldlaWdodCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTtcblxuY29uc3QgX3ZlY3RvciQ1ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY2xhc3MgU2tpbm5lZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcblxuXHRcdHRoaXMuYmluZE1vZGUgPSAnYXR0YWNoZWQnO1xuXHRcdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5iaW5kTW9kZSA9IHNvdXJjZS5iaW5kTW9kZTtcblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggc291cmNlLmJpbmRNYXRyaXggKTtcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0dGhpcy5za2VsZXRvbiA9IHNvdXJjZS5za2VsZXRvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRiaW5kKCBza2VsZXRvbiwgYmluZE1hdHJpeCApIHtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBza2VsZXRvbjtcblxuXHRcdGlmICggYmluZE1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHRcdFx0YmluZE1hdHJpeCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJpbmRNYXRyaXguY29weSggYmluZE1hdHJpeCApO1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggYmluZE1hdHJpeCApLmludmVydCgpO1xuXG5cdH1cblxuXHRwb3NlKCkge1xuXG5cdFx0dGhpcy5za2VsZXRvbi5wb3NlKCk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZVNraW5XZWlnaHRzKCkge1xuXG5cdFx0Y29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IHNraW5XZWlnaHQgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNraW5XZWlnaHQuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2ZWN0b3IueCA9IHNraW5XZWlnaHQuZ2V0WCggaSApO1xuXHRcdFx0dmVjdG9yLnkgPSBza2luV2VpZ2h0LmdldFkoIGkgKTtcblx0XHRcdHZlY3Rvci56ID0gc2tpbldlaWdodC5nZXRaKCBpICk7XG5cdFx0XHR2ZWN0b3IudyA9IHNraW5XZWlnaHQuZ2V0VyggaSApO1xuXG5cdFx0XHRjb25zdCBzY2FsZSA9IDEuMCAvIHZlY3Rvci5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHRcdFx0aWYgKCBzY2FsZSAhPT0gSW5maW5pdHkgKSB7XG5cblx0XHRcdFx0dmVjdG9yLm11bHRpcGx5U2NhbGFyKCBzY2FsZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZlY3Rvci5zZXQoIDEsIDAsIDAsIDAgKTsgLy8gZG8gc29tZXRoaW5nIHJlYXNvbmFibGVcblxuXHRcdFx0fVxuXG5cdFx0XHRza2luV2VpZ2h0LnNldFhZWlcoIGksIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnosIHZlY3Rvci53ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0aWYgKCB0aGlzLmJpbmRNb2RlID09PSAnYXR0YWNoZWQnICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuYmluZE1vZGUgPT09ICdkZXRhY2hlZCcgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggdGhpcy5iaW5kTWF0cml4ICkuaW52ZXJ0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRib25lVHJhbnNmb3JtKCBpbmRleCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdF9za2luSW5kZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luSW5kZXgsIGluZGV4ICk7XG5cdFx0X3NraW5XZWlnaHQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0LCBpbmRleCApO1xuXG5cdFx0X2Jhc2VQb3NpdGlvbi5jb3B5KCB0YXJnZXQgKS5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeCApO1xuXG5cdFx0dGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgd2VpZ2h0ID0gX3NraW5XZWlnaHQuZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdGlmICggd2VpZ2h0ICE9PSAwICkge1xuXG5cdFx0XHRcdGNvbnN0IGJvbmVJbmRleCA9IF9za2luSW5kZXguZ2V0Q29tcG9uZW50KCBpICk7XG5cblx0XHRcdFx0X21hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBza2VsZXRvbi5ib25lc1sgYm9uZUluZGV4IF0ubWF0cml4V29ybGQsIHNrZWxldG9uLmJvbmVJbnZlcnNlc1sgYm9uZUluZGV4IF0gKTtcblxuXHRcdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBfdmVjdG9yJDUuY29weSggX2Jhc2VQb3NpdGlvbiApLmFwcGx5TWF0cml4NCggX21hdHJpeCApLCB3ZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeEludmVyc2UgKTtcblxuXHR9XG5cbn1cblxuU2tpbm5lZE1lc2gucHJvdG90eXBlLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuXG5jbGFzcyBCb25lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb25lJztcblxuXHR9XG5cbn1cblxuQm9uZS5wcm90b3R5cGUuaXNCb25lID0gdHJ1ZTtcblxuY2xhc3MgRGF0YVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIG1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFx0c3VwZXIoIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHRcdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR9XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlLmlzRGF0YVRleHR1cmUgPSB0cnVlO1xuXG5jb25zdCBfb2Zmc2V0TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2lkZW50aXR5TWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jbGFzcyBTa2VsZXRvbiB7XG5cblx0Y29uc3RydWN0b3IoIGJvbmVzID0gW10sIGJvbmVJbnZlcnNlcyA9IFtdICkge1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLmJvbmVzID0gYm9uZXMuc2xpY2UoIDAgKTtcblx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IGJvbmVJbnZlcnNlcztcblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG51bGw7XG5cblx0XHR0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLmJvbmVUZXh0dXJlU2l6ZSA9IDA7XG5cblx0XHR0aGlzLmZyYW1lID0gLSAxO1xuXG5cdFx0dGhpcy5pbml0KCk7XG5cblx0fVxuXG5cdGluaXQoKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIGJvbmVzLmxlbmd0aCAqIDE2ICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgaW52ZXJzZSBib25lIG1hdHJpY2VzIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCBib25lSW52ZXJzZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlXG5cblx0XHRcdGlmICggYm9uZXMubGVuZ3RoICE9PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiBOdW1iZXIgb2YgaW52ZXJzZSBib25lIG1hdHJpY2VzIGRvZXMgbm90IG1hdGNoIGFtb3VudCBvZiBib25lcy4nICk7XG5cblx0XHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y2FsY3VsYXRlSW52ZXJzZXMoKSB7XG5cblx0XHR0aGlzLmJvbmVJbnZlcnNlcy5sZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRpZiAoIHRoaXMuYm9uZXNbIGkgXSApIHtcblxuXHRcdFx0XHRpbnZlcnNlLmNvcHkoIHRoaXMuYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIGludmVyc2UgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cG9zZSgpIHtcblxuXHRcdC8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMuYm9uZUludmVyc2VzWyBpIF0gKS5pbnZlcnQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdFx0XHRcdGJvbmUubWF0cml4Lm11bHRpcGx5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXguZGVjb21wb3NlKCBib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cdFx0Y29uc3QgYm9uZU1hdHJpY2VzID0gdGhpcy5ib25lTWF0cmljZXM7XG5cdFx0Y29uc3QgYm9uZVRleHR1cmUgPSB0aGlzLmJvbmVUZXh0dXJlO1xuXG5cdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgdGhlIG9mZnNldCBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGUgb3JpZ2luYWwgdHJhbnNmb3JtXG5cblx0XHRcdGNvbnN0IG1hdHJpeCA9IGJvbmVzWyBpIF0gPyBib25lc1sgaSBdLm1hdHJpeFdvcmxkIDogX2lkZW50aXR5TWF0cml4O1xuXG5cdFx0XHRfb2Zmc2V0TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgYm9uZUludmVyc2VzWyBpIF0gKTtcblx0XHRcdF9vZmZzZXRNYXRyaXgudG9BcnJheSggYm9uZU1hdHJpY2VzLCBpICogMTYgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYm9uZVRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xuXG5cdH1cblxuXHRjb21wdXRlQm9uZVRleHR1cmUoKSB7XG5cblx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXG5cdFx0Ly8gICAgICBSR0JBIFJHQkEgUkdCQSBSR0JBICg9PiBjb2x1bW4xLCBjb2x1bW4yLCBjb2x1bW4zLCBjb2x1bW40KVxuXHRcdC8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgYm9uZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpXG5cdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBib25lcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXG5cdFx0Ly8gICAgICAgMzJ4MzIgcGl4ZWwgdGV4dHVyZSBtYXggIDI1NiBib25lcyAqIDQgcGl4ZWxzID0gKDMyICogMzIpXG5cdFx0Ly8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBib25lcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpXG5cblx0XHRsZXQgc2l6ZSA9IE1hdGguc3FydCggdGhpcy5ib25lcy5sZW5ndGggKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXhcblx0XHRzaXplID0gY2VpbFBvd2VyT2ZUd28oIHNpemUgKTtcblx0XHRzaXplID0gTWF0aC5tYXgoIHNpemUsIDQgKTtcblxuXHRcdGNvbnN0IGJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHNpemUgKiBzaXplICogNCApOyAvLyA0IGZsb2F0cyBwZXIgUkdCQSBwaXhlbFxuXHRcdGJvbmVNYXRyaWNlcy5zZXQoIHRoaXMuYm9uZU1hdHJpY2VzICk7IC8vIGNvcHkgY3VycmVudCB2YWx1ZXNcblxuXHRcdGNvbnN0IGJvbmVUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCBib25lTWF0cmljZXMsIHNpemUsIHNpemUsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSApO1xuXHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHRoaXMuYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xuXHRcdHRoaXMuYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcblx0XHR0aGlzLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Qm9uZUJ5TmFtZSggbmFtZSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cblx0ZGlzcG9zZSggKSB7XG5cblx0XHRpZiAoIHRoaXMuYm9uZVRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm9uZVRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHR0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24sIGJvbmVzICkge1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5ib25lcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1dWlkID0ganNvbi5ib25lc1sgaSBdO1xuXHRcdFx0bGV0IGJvbmUgPSBib25lc1sgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogTm8gYm9uZSBmb3VuZCB3aXRoIFVVSUQ6JywgdXVpZCApO1xuXHRcdFx0XHRib25lID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJvbmVzLnB1c2goIGJvbmUgKTtcblx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCBqc29uLmJvbmVJbnZlcnNlc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuaW5pdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdTa2VsZXRvbicsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ1NrZWxldG9uLnRvSlNPTidcblx0XHRcdH0sXG5cdFx0XHRib25lczogW10sXG5cdFx0XHRib25lSW52ZXJzZXM6IFtdXG5cdFx0fTtcblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblxuXHRcdGNvbnN0IGJvbmVzID0gdGhpcy5ib25lcztcblx0XHRjb25zdCBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGJvbmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSBib25lc1sgaSBdO1xuXHRcdFx0ZGF0YS5ib25lcy5wdXNoKCBib25lLnV1aWQgKTtcblxuXHRcdFx0Y29uc3QgYm9uZUludmVyc2UgPSBib25lSW52ZXJzZXNbIGkgXTtcblx0XHRcdGRhdGEuYm9uZUludmVyc2VzLnB1c2goIGJvbmVJbnZlcnNlLnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmNsYXNzIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBub3JtYWxpemVkID09PSAnbnVtYmVyJyApIHtcblxuXHRcdFx0bWVzaFBlckF0dHJpYnV0ZSA9IG5vcm1hbGl6ZWQ7XG5cblx0XHRcdG5vcm1hbGl6ZWQgPSBmYWxzZTtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTogVGhlIGNvbnN0cnVjdG9yIG5vdyBleHBlY3RzIG5vcm1hbGl6ZWQgYXMgdGhlIHRoaXJkIGFyZ3VtZW50LicgKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0ZGF0YS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cbmNvbnN0IF9pbnN0YW5jZUxvY2FsTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2luc3RhbmNlV29ybGRNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmNvbnN0IF9pbnN0YW5jZUludGVyc2VjdHMgPSBbXTtcblxuY29uc3QgX21lc2ggPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoKCk7XG5cbmNsYXNzIEluc3RhbmNlZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnksIG1hdGVyaWFsLCBjb3VudCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXggPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBjb3VudCAqIDE2ICksIDE2ICk7XG5cdFx0dGhpcy5pbnN0YW5jZUNvbG9yID0gbnVsbDtcblxuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VNYXRyaXguY29weSggc291cmNlLmluc3RhbmNlTWF0cml4ICk7XG5cblx0XHRpZiAoIHNvdXJjZS5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgdGhpcy5pbnN0YW5jZUNvbG9yID0gc291cmNlLmluc3RhbmNlQ29sb3IuY2xvbmUoKTtcblxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0Q29sb3JBdCggaW5kZXgsIGNvbG9yICkge1xuXG5cdFx0Y29sb3IuZnJvbUFycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHRnZXRNYXRyaXhBdCggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7XG5cblx0XHRfbWVzaC5nZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0X21lc2gubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0aWYgKCBfbWVzaC5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Zm9yICggbGV0IGluc3RhbmNlSWQgPSAwOyBpbnN0YW5jZUlkIDwgcmF5Y2FzdFRpbWVzOyBpbnN0YW5jZUlkICsrICkge1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHdvcmxkIG1hdHJpeCBmb3IgZWFjaCBpbnN0YW5jZVxuXG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHRfaW5zdGFuY2VXb3JsZE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZCwgX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcblxuXHRcdFx0Ly8gdGhlIG1lc2ggcmVwcmVzZW50cyB0aGlzIHNpbmdsZSBpbnN0YW5jZVxuXG5cdFx0XHRfbWVzaC5tYXRyaXhXb3JsZCA9IF9pbnN0YW5jZVdvcmxkTWF0cml4O1xuXG5cdFx0XHRfbWVzaC5yYXljYXN0KCByYXljYXN0ZXIsIF9pbnN0YW5jZUludGVyc2VjdHMgKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyB0aGUgcmVzdWx0IG9mIHJheWNhc3RcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gX2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IF9pbnN0YW5jZUludGVyc2VjdHNbIGkgXTtcblx0XHRcdFx0aW50ZXJzZWN0Lmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkO1xuXHRcdFx0XHRpbnRlcnNlY3Qub2JqZWN0ID0gdGhpcztcblx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfaW5zdGFuY2VJbnRlcnNlY3RzLmxlbmd0aCA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldENvbG9yQXQoIGluZGV4LCBjb2xvciApIHtcblxuXHRcdGlmICggdGhpcy5pbnN0YW5jZUNvbG9yID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmNvdW50ICogMyApLCAzICk7XG5cblx0XHR9XG5cblx0XHRjb2xvci50b0FycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHRzZXRNYXRyaXhBdCggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC50b0FycmF5KCB0aGlzLmluc3RhbmNlTWF0cml4LmFycmF5LCBpbmRleCAqIDE2ICk7XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufVxuXG5JbnN0YW5jZWRNZXNoLnByb3RvdHlwZS5pc0luc3RhbmNlZE1lc2ggPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGxpbmV3aWR0aDogPGZsb2F0PixcbiAqICBsaW5lY2FwOiBcInJvdW5kXCIsXG4gKiAgbGluZWpvaW46IFwicm91bmRcIlxuICogfVxuICovXG5cbmNsYXNzIExpbmVCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdMaW5lQmFzaWNNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdFx0dGhpcy5saW5ld2lkdGggPSAxO1xuXHRcdHRoaXMubGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy5saW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubGluZXdpZHRoID0gc291cmNlLmxpbmV3aWR0aDtcblx0XHR0aGlzLmxpbmVjYXAgPSBzb3VyY2UubGluZWNhcDtcblx0XHR0aGlzLmxpbmVqb2luID0gc291cmNlLmxpbmVqb2luO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc0xpbmVCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuY29uc3QgX3N0YXJ0JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZW5kJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfaW52ZXJzZU1hdHJpeCQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3JheSQxID0gLypAX19QVVJFX18qLyBuZXcgUmF5KCk7XG5jb25zdCBfc3BoZXJlJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcblxuY2xhc3MgTGluZSBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZSc7XG5cblx0XHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLm1hdGVyaWFsID0gc291cmNlLm1hdGVyaWFsO1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdC8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0Y29uc3QgbGluZURpc3RhbmNlcyA9IFsgMCBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdF9zdGFydCQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpIC0gMSApO1xuXHRcdFx0XHRcdF9lbmQkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gKz0gX3N0YXJ0JDEuZGlzdGFuY2VUbyggX2VuZCQxICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHRjb25zdCB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLkxpbmUudGhyZXNob2xkO1xuXHRcdGNvbnN0IGRyYXdSYW5nZSA9IGdlb21ldHJ5LmRyYXdSYW5nZTtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZSQxLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZSQxLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRfc3BoZXJlJDEucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDEgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0X2ludmVyc2VNYXRyaXgkMS5jb3B5KCBtYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdF9yYXkkMS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCQxICk7XG5cblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTtcblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZFNxID0gbG9jYWxUaHJlc2hvbGQgKiBsb2NhbFRocmVzaG9sZDtcblxuXHRcdGNvbnN0IHZTdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgdkVuZCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgaW50ZXJTZWdtZW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBpbnRlclJheSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgc3RlcCA9IHRoaXMuaXNMaW5lU2VnbWVudHMgPyAyIDogMTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cblx0XHRcdFx0XHR2U3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGEgKTtcblx0XHRcdFx0XHR2RW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBiICk7XG5cblx0XHRcdFx0XHRjb25zdCBkaXN0U3EgPSBfcmF5JDEuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IGxvY2FsVGhyZXNob2xkU3EgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb25BdHRyaWJ1dGUuY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRcdHZTdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRcdHZFbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7XG5cblx0XHRcdFx0XHRjb25zdCBkaXN0U3EgPSBfcmF5JDEuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IGxvY2FsVGhyZXNob2xkU3EgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJSYXkgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxuXHRcdFx0XHRcdFx0cG9pbnQ6IGludGVyU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxuXHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTGluZS5yYXljYXN0KCkgbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXHRcdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxpbmUudXBkYXRlTW9ycGhUYXJnZXRzKCkgZG9lcyBub3Qgc3VwcG9ydCBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkxpbmUucHJvdG90eXBlLmlzTGluZSA9IHRydWU7XG5cbmNvbnN0IF9zdGFydCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9lbmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIExpbmVTZWdtZW50cyBleHRlbmRzIExpbmUge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZVNlZ21lbnRzJztcblxuXHR9XG5cblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdC8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0Y29uc3QgbGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdFx0X3N0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XG5cdFx0XHRcdFx0X2VuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSArIDEgKTtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSArIDEgXSA9IGxpbmVEaXN0YW5jZXNbIGkgXSArIF9zdGFydC5kaXN0YW5jZVRvKCBfZW5kICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lU2VnbWVudHMuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxpbmVTZWdtZW50cy5jb21wdXRlTGluZURpc3RhbmNlcygpIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkxpbmVTZWdtZW50cy5wcm90b3R5cGUuaXNMaW5lU2VnbWVudHMgPSB0cnVlO1xuXG5jbGFzcyBMaW5lTG9vcCBleHRlbmRzIExpbmUge1xuXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUxvb3AnO1xuXG5cdH1cblxufVxuXG5MaW5lTG9vcC5wcm90b3R5cGUuaXNMaW5lTG9vcCA9IHRydWU7XG5cbi8qKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNpemU6IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqXG4gKiB9XG4gKi9cblxuY2xhc3MgUG9pbnRzTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvaW50c01hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuc2l6ZSA9IDE7XG5cdFx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuc2l6ZSA9IHNvdXJjZS5zaXplO1xuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gc291cmNlLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuaXNQb2ludHNNYXRlcmlhbCA9IHRydWU7XG5cbmNvbnN0IF9pbnZlcnNlTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3JheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFJheSgpO1xuY29uc3QgX3NwaGVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuY29uc3QgX3Bvc2l0aW9uJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNsYXNzIFBvaW50cyBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgUG9pbnRzTWF0ZXJpYWwoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRzJztcblxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBzb3VyY2UubWF0ZXJpYWw7XG5cdFx0dGhpcy5nZW9tZXRyeSA9IHNvdXJjZS5nZW9tZXRyeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHRocmVzaG9sZCA9IHJheWNhc3Rlci5wYXJhbXMuUG9pbnRzLnRocmVzaG9sZDtcblx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cblx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRfc3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRfc3BoZXJlLnJhZGl1cyArPSB0aHJlc2hvbGQ7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRfaW52ZXJzZU1hdHJpeC5jb3B5KCBtYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXggKTtcblxuXHRcdGNvbnN0IGxvY2FsVGhyZXNob2xkID0gdGhyZXNob2xkIC8gKCAoIHRoaXMuc2NhbGUueCArIHRoaXMuc2NhbGUueSArIHRoaXMuc2NhbGUueiApIC8gMyApO1xuXHRcdGNvbnN0IGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaSApO1xuXG5cdFx0XHRcdFx0X3Bvc2l0aW9uJDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGEgKTtcblxuXHRcdFx0XHRcdHRlc3RQb2ludCggX3Bvc2l0aW9uJDIsIGEsIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRoaXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGwgPSBlbmQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0X3Bvc2l0aW9uJDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdHRlc3RQb2ludCggX3Bvc2l0aW9uJDIsIGksIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRoaXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qb2ludHMucmF5Y2FzdCgpIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyggbW9ycGhBdHRyaWJ1dGVzICk7XG5cblx0XHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgbSA9IDAsIG1sID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBuYW1lIF0gPSBtO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qb2ludHMudXBkYXRlTW9ycGhUYXJnZXRzKCkgZG9lcyBub3Qgc3VwcG9ydCBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblBvaW50cy5wcm90b3R5cGUuaXNQb2ludHMgPSB0cnVlO1xuXG5mdW5jdGlvbiB0ZXN0UG9pbnQoIHBvaW50LCBpbmRleCwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgb2JqZWN0ICkge1xuXG5cdGNvbnN0IHJheVBvaW50RGlzdGFuY2VTcSA9IF9yYXkuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICk7XG5cblx0aWYgKCByYXlQb2ludERpc3RhbmNlU3EgPCBsb2NhbFRocmVzaG9sZFNxICkge1xuXG5cdFx0Y29uc3QgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0X3JheS5jbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRpbnRlcnNlY3RQb2ludC5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyc2VjdFBvaW50ICk7XG5cblx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuO1xuXG5cdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdGRpc3RhbmNlVG9SYXk6IE1hdGguc3FydCggcmF5UG9pbnREaXN0YW5jZVNxICksXG5cdFx0XHRwb2ludDogaW50ZXJzZWN0UG9pbnQsXG5cdFx0XHRpbmRleDogaW5kZXgsXG5cdFx0XHRmYWNlOiBudWxsLFxuXHRcdFx0b2JqZWN0OiBvYmplY3RcblxuXHRcdH0gKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVmlkZW9UZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0XHRzdXBlciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0XHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVZpZGVvKCkge1xuXG5cdFx0XHRzY29wZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHR2aWRlby5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKCB1cGRhdGVWaWRlbyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAncmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjaycgaW4gdmlkZW8gKSB7XG5cblx0XHRcdHZpZGVvLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2soIHVwZGF0ZVZpZGVvICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmltYWdlICkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCB2aWRlbyA9IHRoaXMuaW1hZ2U7XG5cdFx0Y29uc3QgaGFzVmlkZW9GcmFtZUNhbGxiYWNrID0gJ3JlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2snIGluIHZpZGVvO1xuXG5cdFx0aWYgKCBoYXNWaWRlb0ZyYW1lQ2FsbGJhY2sgPT09IGZhbHNlICYmIHZpZGVvLnJlYWR5U3RhdGUgPj0gdmlkZW8uSEFWRV9DVVJSRU5UX0RBVEEgKSB7XG5cblx0XHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5WaWRlb1RleHR1cmUucHJvdG90eXBlLmlzVmlkZW9UZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgRnJhbWVidWZmZXJUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCApIHtcblxuXHRcdHN1cGVyKCB7IHdpZHRoLCBoZWlnaHQgfSApO1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cblx0XHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5GcmFtZWJ1ZmZlclRleHR1cmUucHJvdG90eXBlLmlzRnJhbWVidWZmZXJUZXh0dXJlID0gdHJ1ZTtcblxuY2xhc3MgQ29tcHJlc3NlZFRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRcdHN1cGVyKCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0XHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG5cdFx0dGhpcy5taXBtYXBzID0gbWlwbWFwcztcblxuXHRcdC8vIG5vIGZsaXBwaW5nIGZvciBjdWJlIHRleHR1cmVzXG5cdFx0Ly8gKGFsc28gZmxpcHBpbmcgZG9lc24ndCB3b3JrIGZvciBjb21wcmVzc2VkIHRleHR1cmVzIClcblxuXHRcdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxuXHRcdC8vIGNhbid0IGdlbmVyYXRlIG1pcG1hcHMgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXNcblx0XHQvLyBtaXBzIG11c3QgYmUgZW1iZWRkZWQgaW4gRERTIGZpbGVzXG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdH1cblxufVxuXG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUuaXNDb21wcmVzc2VkVGV4dHVyZSA9IHRydWU7XG5cbmNsYXNzIENhbnZhc1RleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHRjb25zdHJ1Y3RvciggY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0XHRzdXBlciggY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZS5pc0NhbnZhc1RleHR1cmUgPSB0cnVlO1xuXG5jbGFzcyBDaXJjbGVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgc2VnbWVudHMgPSA4LCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdC8vIGNlbnRlciBwb2ludFxuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXHRcdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdFx0Zm9yICggbGV0IHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0XHRjb25zdCBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0Ly8gdXZzXG5cblx0XHRcdHV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0dXYueSA9ICggdmVydGljZXNbIGkgKyAxIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDaXJjbGVHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuc2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDeWxpbmRlckdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXNUb3AgPSAxLCByYWRpdXNCb3R0b20gPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGhlaWdodFNlZ21lbnRzID0gMSwgb3BlbkVuZGVkID0gZmFsc2UsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcblx0XHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXHRcdGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCBpbmRleCA9IDA7XG5cdFx0Y29uc3QgaW5kZXhBcnJheSA9IFtdO1xuXHRcdGNvbnN0IGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcblxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0XHRnZW5lcmF0ZVRvcnNvKCk7XG5cblx0XHRpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0XHRpZiAoIHJhZGl1c0JvdHRvbSA+IDAgKSBnZW5lcmF0ZUNhcCggZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVUb3JzbygpIHtcblxuXHRcdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcblx0XHRcdGNvbnN0IHNsb3BlID0gKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSAvIGhlaWdodDtcblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPD0gaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXhSb3cgPSBbXTtcblxuXHRcdFx0XHRjb25zdCB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjdXJyZW50IHJvd1xuXG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHRjb25zdCB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdFx0XHRjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHRcdFx0dmVydGV4LnkgPSAtIHYgKiBoZWlnaHQgKyBoYWxmSGVpZ2h0O1xuXHRcdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0XHQvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvd1xuXG5cdFx0XHRcdFx0aW5kZXhSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbm93IHNhdmUgdmVydGljZXMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcblxuXHRcdFx0XHRpbmRleEFycmF5LnB1c2goIGluZGV4Um93ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPCBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0XHRcdC8vIHdlIHVzZSB0aGUgaW5kZXggYXJyYXkgdG8gYWNjZXNzIHRoZSBjb3JyZWN0IGluZGljZXNcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleEFycmF5WyB5IF1bIHggXTtcblx0XHRcdFx0XHRjb25zdCBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4ICsgMSBdO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSBpbmRleEFycmF5WyB5IF1bIHggKyAxIF07XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0XHQvLyB1cGRhdGUgZ3JvdXAgY291bnRlclxuXG5cdFx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgMCApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVDYXAoIHRvcCApIHtcblxuXHRcdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNlbnRlciB2ZXJ0ZXhcblx0XHRcdGNvbnN0IGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcblxuXHRcdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0XHRjb25zdCByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tO1xuXHRcdFx0Y29uc3Qgc2lnbiA9ICggdG9wID09PSB0cnVlICkgPyAxIDogLSAxO1xuXG5cdFx0XHQvLyBmaXJzdCB3ZSBnZW5lcmF0ZSB0aGUgY2VudGVyIHZlcnRleCBkYXRhIG9mIHRoZSBjYXAuXG5cdFx0XHQvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSxcblx0XHRcdC8vIHdlIG11c3QgZ2VuZXJhdGUgYSBjZW50ZXIgdmVydGV4IHBlciBmYWNlL3NlZ21lbnRcblxuXHRcdFx0Zm9yICggbGV0IHggPSAxOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggMC41LCAwLjUgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRcdGluZGV4ICsrO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGNlbnRlciB2ZXJ0ZXhcblx0XHRcdGNvbnN0IGNlbnRlckluZGV4RW5kID0gaW5kZXg7XG5cblx0XHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblx0XHRcdFx0Y29uc3QgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0XHRcdGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcblx0XHRcdFx0dmVydGV4LnkgPSBoYWxmSGVpZ2h0ICogc2lnbjtcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXYueCA9ICggY29zVGhldGEgKiAwLjUgKSArIDAuNTtcblx0XHRcdFx0dXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7XG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcblxuXHRcdFx0XHRpbmRleCArKztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGMgPSBjZW50ZXJJbmRleFN0YXJ0ICsgeDtcblx0XHRcdFx0Y29uc3QgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcblxuXHRcdFx0XHRpZiAoIHRvcCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIGZhY2UgdG9wXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGZhY2UgYm90dG9tXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgdG9wID09PSB0cnVlID8gMSA6IDIgKTtcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDeWxpbmRlckdlb21ldHJ5KCBkYXRhLnJhZGl1c1RvcCwgZGF0YS5yYWRpdXNCb3R0b20sIGRhdGEuaGVpZ2h0LCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzLCBkYXRhLm9wZW5FbmRlZCwgZGF0YS50aGV0YVN0YXJ0LCBkYXRhLnRoZXRhTGVuZ3RoICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIENvbmVHZW9tZXRyeSBleHRlbmRzIEN5bGluZGVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGhlaWdodFNlZ21lbnRzID0gMSwgb3BlbkVuZGVkID0gZmFsc2UsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDb25lR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxuXHRcdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgQ29uZUdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5oZWlnaHQsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMsIGRhdGEub3BlbkVuZGVkLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgUG9seWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCB2ZXJ0aWNlcyA9IFtdLCBpbmRpY2VzID0gW10sIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvbHloZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0XHRpbmRpY2VzOiBpbmRpY2VzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0XHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXG5cblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXIgPSBbXTtcblx0XHRjb25zdCB1dkJ1ZmZlciA9IFtdO1xuXG5cdFx0Ly8gdGhlIHN1YmRpdmlzaW9uIGNyZWF0ZXMgdGhlIHZlcnRleCBidWZmZXIgZGF0YVxuXG5cdFx0c3ViZGl2aWRlKCBkZXRhaWwgKTtcblxuXHRcdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xuXG5cdFx0YXBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdFx0Ly8gZmluYWxseSwgY3JlYXRlIHRoZSB1diBkYXRhXG5cblx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGV4QnVmZmVyLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIuc2xpY2UoKSwgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0XHRpZiAoIGRldGFpbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpOyAvLyBmbGF0IG5vcm1hbHNcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpOyAvLyBzbW9vdGggbm9ybWFsc1xuXG5cdFx0fVxuXG5cdFx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlKCBkZXRhaWwgKSB7XG5cblx0XHRcdGNvbnN0IGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIGFsbCBmYWNlcyBhbmQgYXBwbHkgYSBzdWJkaXZpc29uIHdpdGggdGhlIGdpdmVuIGRldGFpbCB2YWx1ZVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdC8vIGdldCB0aGUgdmVydGljZXMgb2YgdGhlIGZhY2VcblxuXHRcdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KCBpbmRpY2VzWyBpICsgMCBdLCBhICk7XG5cdFx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDIgXSwgYyApO1xuXG5cdFx0XHRcdC8vIHBlcmZvcm0gc3ViZGl2aXNpb25cblxuXHRcdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0XHRjb25zdCBjb2xzID0gZGV0YWlsICsgMTtcblxuXHRcdFx0Ly8gd2UgdXNlIHRoaXMgbXVsdGlkaW1lbnNpb25hbCBhcnJheSBhcyBhIGRhdGEgc3RydWN0dXJlIGZvciBjcmVhdGluZyB0aGUgc3ViZGl2aXNpb25cblxuXHRcdFx0Y29uc3QgdiA9IFtdO1xuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gY29sczsgaSArKyApIHtcblxuXHRcdFx0XHR2WyBpIF0gPSBbXTtcblxuXHRcdFx0XHRjb25zdCBhaiA9IGEuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXHRcdFx0XHRjb25zdCBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHRcdGNvbnN0IHJvd3MgPSBjb2xzIC0gaTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcm93czsgaiArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb2xzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDIgKiAoIGNvbHMgLSBpICkgLSAxOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0XHRpZiAoIGogJSAyID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrIF0gKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhcHBseVJhZGl1cyggcmFkaXVzICkge1xuXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgdGhlIGVudGlyZSBidWZmZXIgYW5kIGFwcGx5IHRoZSByYWRpdXMgdG8gZWFjaCB2ZXJ0ZXhcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0gPSB2ZXJ0ZXgueDtcblx0XHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMSBdID0gdmVydGV4Lnk7XG5cdFx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0Y29uc3QgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHRcdGNvbnN0IHYgPSBpbmNsaW5hdGlvbiggdmVydGV4ICkgLyBNYXRoLlBJICsgMC41O1xuXHRcdFx0XHR1dkJ1ZmZlci5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvcnJlY3RVVnMoKTtcblxuXHRcdFx0Y29ycmVjdFNlYW0oKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RTZWFtKCkge1xuXG5cdFx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdFx0Ly8gdXYgZGF0YSBvZiBhIHNpbmdsZSBmYWNlXG5cblx0XHRcdFx0Y29uc3QgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdFx0Y29uc3QgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcblx0XHRcdFx0Y29uc3QgeDIgPSB1dkJ1ZmZlclsgaSArIDQgXTtcblxuXHRcdFx0XHRjb25zdCBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggeDAsIHgxLCB4MiApO1xuXG5cdFx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0XHRpZiAoIG1heCA+IDAuOSAmJiBtaW4gPCAwLjEgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHgwIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAwIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgyIDwgMC4yICkgdXZCdWZmZXJbIGkgKyA0IF0gKz0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHZlcnRleCApIHtcblxuXHRcdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoIGluZGV4LCB2ZXJ0ZXggKSB7XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IGluZGV4ICogMztcblxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMiBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdFx0Y29uc3QgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRjb25zdCBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGNvbnN0IHV2QSA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0XHRjb25zdCB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRcdGEuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0sIHZlcnRleEJ1ZmZlclsgaSArIDEgXSwgdmVydGV4QnVmZmVyWyBpICsgMiBdICk7XG5cdFx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XG5cdFx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdFx0dXZBLnNldCggdXZCdWZmZXJbIGogKyAwIF0sIHV2QnVmZmVyWyBqICsgMSBdICk7XG5cdFx0XHRcdHV2Qi5zZXQoIHV2QnVmZmVyWyBqICsgMiBdLCB1dkJ1ZmZlclsgaiArIDMgXSApO1xuXHRcdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0XHRjZW50cm9pZC5jb3B5KCBhICkuYWRkKCBiICkuYWRkKCBjICkuZGl2aWRlU2NhbGFyKCAzICk7XG5cblx0XHRcdFx0Y29uc3QgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QSwgaiArIDAsIGEsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdFx0aWYgKCAoIGF6aW11dGggPCAwICkgJiYgKCB1di54ID09PSAxICkgKSB7XG5cblx0XHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gdXYueCAtIDE7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAoIHZlY3Rvci54ID09PSAwICkgJiYgKCB2ZWN0b3IueiA9PT0gMCApICkge1xuXG5cdFx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IGF6aW11dGggLyAyIC8gTWF0aC5QSSArIDAuNTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLlxuXG5cdFx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5hdGFuMiggdmVjdG9yLnosIC0gdmVjdG9yLnggKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdFx0ZnVuY3Rpb24gaW5jbGluYXRpb24oIHZlY3RvciApIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUG9seWhlZHJvbkdlb21ldHJ5KCBkYXRhLnZlcnRpY2VzLCBkYXRhLmluZGljZXMsIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbHMgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgRG9kZWNhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXHRcdGNvbnN0IHIgPSAxIC8gdDtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXG5cdFx0XHQvLyAowrExLCDCsTEsIMKxMSlcblx0XHRcdC0gMSwgLSAxLCAtIDEsXHQtIDEsIC0gMSwgMSxcblx0XHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXG5cdFx0XHQxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLFxuXHRcdFx0MSwgMSwgLSAxLCAxLCAxLCAxLFxuXG5cdFx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxuXHRcdFx0MCwgLSByLCAtIHQsIDAsIC0gciwgdCxcblx0XHRcdDAsIHIsIC0gdCwgMCwgciwgdCxcblxuXHRcdFx0Ly8gKMKxMS/PhiwgwrHPhiwgMClcblx0XHRcdC0gciwgLSB0LCAwLCAtIHIsIHQsIDAsXG5cdFx0XHRyLCAtIHQsIDAsIHIsIHQsIDAsXG5cblx0XHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXG5cdFx0XHQtIHQsIDAsIC0gciwgdCwgMCwgLSByLFxuXHRcdFx0LSB0LCAwLCByLCB0LCAwLCByXG5cdFx0XTtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXG5cdFx0XHQzLCAxMSwgNywgXHQzLCA3LCAxNSwgXHQzLCAxNSwgMTMsXG5cdFx0XHQ3LCAxOSwgMTcsIFx0NywgMTcsIDYsIFx0NywgNiwgMTUsXG5cdFx0XHQxNywgNCwgOCwgXHQxNywgOCwgMTAsIFx0MTcsIDEwLCA2LFxuXHRcdFx0OCwgMCwgMTYsIFx0OCwgMTYsIDIsIFx0OCwgMiwgMTAsXG5cdFx0XHQwLCAxMiwgMSwgXHQwLCAxLCAxOCwgXHQwLCAxOCwgMTYsXG5cdFx0XHQ2LCAxMCwgMiwgXHQ2LCAyLCAxMywgXHQ2LCAxMywgMTUsXG5cdFx0XHQyLCAxNiwgMTgsIFx0MiwgMTgsIDMsIFx0MiwgMywgMTMsXG5cdFx0XHQxOCwgMSwgOSwgXHQxOCwgOSwgMTEsIFx0MTgsIDExLCAzLFxuXHRcdFx0NCwgMTQsIDEyLCBcdDQsIDEyLCAwLCBcdDQsIDAsIDgsXG5cdFx0XHQxMSwgOSwgNSwgXHQxMSwgNSwgMTksIFx0MTEsIDE5LCA3LFxuXHRcdFx0MTksIDUsIDE0LCBcdDE5LCAxNCwgNCwgXHQxOSwgNCwgMTcsXG5cdFx0XHQxLCAxMiwgMTQsIFx0MSwgMTQsIDUsIFx0MSwgNSwgOVxuXHRcdF07XG5cblx0XHRzdXBlciggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgRG9kZWNhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjAgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YxJDEgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHJpYW5nbGUgPSBuZXcgVHJpYW5nbGUoKTtcblxuY2xhc3MgRWRnZXNHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsLCB0aHJlc2hvbGRBbmdsZSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdFZGdlc0dlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcblx0XHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxuXHRcdH07XG5cblx0XHRpZiAoIGdlb21ldHJ5ICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBwcmVjaXNpb25Qb2ludHMgPSA0O1xuXHRcdFx0Y29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTtcblx0XHRcdGNvbnN0IHRocmVzaG9sZERvdCA9IE1hdGguY29zKCBERUcyUkFEICogdGhyZXNob2xkQW5nbGUgKTtcblxuXHRcdFx0Y29uc3QgaW5kZXhBdHRyID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcblx0XHRcdGNvbnN0IHBvc2l0aW9uQXR0ciA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHRcdFx0Y29uc3QgaW5kZXhDb3VudCA9IGluZGV4QXR0ciA/IGluZGV4QXR0ci5jb3VudCA6IHBvc2l0aW9uQXR0ci5jb3VudDtcblxuXHRcdFx0Y29uc3QgaW5kZXhBcnIgPSBbIDAsIDAsIDAgXTtcblx0XHRcdGNvbnN0IHZlcnRLZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cdFx0XHRjb25zdCBoYXNoZXMgPSBuZXcgQXJyYXkoIDMgKTtcblxuXHRcdFx0Y29uc3QgZWRnZURhdGEgPSB7fTtcblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRleENvdW50OyBpICs9IDMgKSB7XG5cblx0XHRcdFx0aWYgKCBpbmRleEF0dHIgKSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaW5kZXhBdHRyLmdldFgoIGkgKTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGluZGV4QXR0ci5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmRleEFyclsgMCBdID0gaTtcblx0XHRcdFx0XHRpbmRleEFyclsgMSBdID0gaSArIDE7XG5cdFx0XHRcdFx0aW5kZXhBcnJbIDIgXSA9IGkgKyAyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB7IGEsIGIsIGMgfSA9IF90cmlhbmdsZTtcblx0XHRcdFx0YS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAwIF0gKTtcblx0XHRcdFx0Yi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAxIF0gKTtcblx0XHRcdFx0Yy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4QXJyWyAyIF0gKTtcblx0XHRcdFx0X3RyaWFuZ2xlLmdldE5vcm1hbCggX25vcm1hbCApO1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBoYXNoZXMgZm9yIHRoZSBlZGdlIGZyb20gdGhlIHZlcnRpY2VzXG5cdFx0XHRcdGhhc2hlc1sgMCBdID0gYCR7IE1hdGgucm91bmQoIGEueCAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYS55ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBhLnogKiBwcmVjaXNpb24gKSB9YDtcblx0XHRcdFx0aGFzaGVzWyAxIF0gPSBgJHsgTWF0aC5yb3VuZCggYi54ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBiLnkgKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGIueiAqIHByZWNpc2lvbiApIH1gO1xuXHRcdFx0XHRoYXNoZXNbIDIgXSA9IGAkeyBNYXRoLnJvdW5kKCBjLnggKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGMueSAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYy56ICogcHJlY2lzaW9uICkgfWA7XG5cblx0XHRcdFx0Ly8gc2tpcCBkZWdlbmVyYXRlIHRyaWFuZ2xlc1xuXHRcdFx0XHRpZiAoIGhhc2hlc1sgMCBdID09PSBoYXNoZXNbIDEgXSB8fCBoYXNoZXNbIDEgXSA9PT0gaGFzaGVzWyAyIF0gfHwgaGFzaGVzWyAyIF0gPT09IGhhc2hlc1sgMCBdICkge1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGl0ZXJhdGUgb3ZlciBldmVyeSBlZGdlXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHQvLyBnZXQgdGhlIGZpcnN0IGFuZCBuZXh0IHZlcnRleCBtYWtpbmcgdXAgdGhlIGVkZ2Vcblx0XHRcdFx0XHRjb25zdCBqTmV4dCA9ICggaiArIDEgKSAlIDM7XG5cdFx0XHRcdFx0Y29uc3QgdmVjSGFzaDAgPSBoYXNoZXNbIGogXTtcblx0XHRcdFx0XHRjb25zdCB2ZWNIYXNoMSA9IGhhc2hlc1sgak5leHQgXTtcblx0XHRcdFx0XHRjb25zdCB2MCA9IF90cmlhbmdsZVsgdmVydEtleXNbIGogXSBdO1xuXHRcdFx0XHRcdGNvbnN0IHYxID0gX3RyaWFuZ2xlWyB2ZXJ0S2V5c1sgak5leHQgXSBdO1xuXG5cdFx0XHRcdFx0Y29uc3QgaGFzaCA9IGAkeyB2ZWNIYXNoMCB9XyR7IHZlY0hhc2gxIH1gO1xuXHRcdFx0XHRcdGNvbnN0IHJldmVyc2VIYXNoID0gYCR7IHZlY0hhc2gxIH1fJHsgdmVjSGFzaDAgfWA7XG5cblx0XHRcdFx0XHRpZiAoIHJldmVyc2VIYXNoIGluIGVkZ2VEYXRhICYmIGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdICkge1xuXG5cdFx0XHRcdFx0XHQvLyBpZiB3ZSBmb3VuZCBhIHNpYmxpbmcgZWRnZSBhZGQgaXQgaW50byB0aGUgdmVydGV4IGFycmF5IGlmXG5cdFx0XHRcdFx0XHQvLyBpdCBtZWV0cyB0aGUgYW5nbGUgdGhyZXNob2xkIGFuZCBkZWxldGUgdGhlIGVkZ2UgZnJvbSB0aGUgbWFwLlxuXHRcdFx0XHRcdFx0aWYgKCBfbm9ybWFsLmRvdCggZWRnZURhdGFbIHJldmVyc2VIYXNoIF0ubm9ybWFsICkgPD0gdGhyZXNob2xkRG90ICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHYwLngsIHYwLnksIHYwLnogKTtcblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVkZ2VEYXRhWyByZXZlcnNlSGFzaCBdID0gbnVsbDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEgKCBoYXNoIGluIGVkZ2VEYXRhICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGVkZ2UgaGVyZSB0aGVuIHNraXAgYWRkaW5nIGEgbmV3IG9uZVxuXHRcdFx0XHRcdFx0ZWRnZURhdGFbIGhhc2ggXSA9IHtcblxuXHRcdFx0XHRcdFx0XHRpbmRleDA6IGluZGV4QXJyWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGluZGV4MTogaW5kZXhBcnJbIGpOZXh0IF0sXG5cdFx0XHRcdFx0XHRcdG5vcm1hbDogX25vcm1hbC5jbG9uZSgpLFxuXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIHJlbWFpbmluZywgdW5tYXRjaGVkIGVkZ2VzIGFuZCBhZGQgdGhlbSB0byB0aGUgdmVydGV4IGFycmF5XG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gZWRnZURhdGEgKSB7XG5cblx0XHRcdFx0aWYgKCBlZGdlRGF0YVsga2V5IF0gKSB7XG5cblx0XHRcdFx0XHRjb25zdCB7IGluZGV4MCwgaW5kZXgxIH0gPSBlZGdlRGF0YVsga2V5IF07XG5cdFx0XHRcdFx0X3YwLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXgwICk7XG5cdFx0XHRcdFx0X3YxJDEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyLCBpbmRleDEgKTtcblxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIF92MC54LCBfdjAueSwgX3YwLnogKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBfdjEkMS54LCBfdjEkMS55LCBfdjEkMS56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vKipcbiAqIEV4dGVuc2libGUgY3VydmUgb2JqZWN0LlxuICpcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCApXG4gKiAuZ2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKVxuICogLmdldFBvaW50cygpLCAuZ2V0U3BhY2VkUG9pbnRzKClcbiAqIC5nZXRMZW5ndGgoKVxuICogLnVwZGF0ZUFyY0xlbmd0aHMoKVxuICpcbiAqIFRoaXMgZm9sbG93aW5nIGN1cnZlcyBpbmhlcml0IGZyb20gVEhSRUUuQ3VydmU6XG4gKlxuICogLS0gMkQgY3VydmVzIC0tXG4gKiBUSFJFRS5BcmNDdXJ2ZVxuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuRWxsaXBzZUN1cnZlXG4gKiBUSFJFRS5MaW5lQ3VydmVcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlXG4gKiBUSFJFRS5TcGxpbmVDdXJ2ZVxuICpcbiAqIC0tIDNEIGN1cnZlcyAtLVxuICogVEhSRUUuQ2F0bXVsbFJvbUN1cnZlM1xuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTNcbiAqIFRIUkVFLkxpbmVDdXJ2ZTNcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlM1xuICpcbiAqIEEgc2VyaWVzIG9mIGN1cnZlcyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBUSFJFRS5DdXJ2ZVBhdGguXG4gKlxuICoqL1xuXG5jbGFzcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7XG5cblx0fVxuXG5cdC8vIFZpcnR1YWwgYmFzZSBjbGFzcyBtZXRob2QgdG8gb3ZlcndyaXRlIGFuZCBpbXBsZW1lbnQgaW4gc3ViY2xhc3Nlc1xuXHQvL1x0LSB0IFswIC4uIDFdXG5cblx0Z2V0UG9pbnQoIC8qIHQsIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5nZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZC4nICk7XG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxuXHQvLyAtIHUgWzAgLi4gMV1cblxuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnQoIHQgKVxuXG5cdGdldFBvaW50cyggZGl2aXNpb25zID0gNSApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1IClcblxuXHRnZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50QXQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Ly8gR2V0IHRvdGFsIGN1cnZlIGFyYyBsZW5ndGhcblxuXHRnZXRMZW5ndGgoKSB7XG5cblx0XHRjb25zdCBsZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cdFx0cmV0dXJuIGxlbmd0aHNbIGxlbmd0aHMubGVuZ3RoIC0gMSBdO1xuXG5cdH1cblxuXHQvLyBHZXQgbGlzdCBvZiBjdW11bGF0aXZlIHNlZ21lbnQgbGVuZ3Roc1xuXG5cdGdldExlbmd0aHMoIGRpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxuXHRcdFx0KCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJlxuXHRcdFx0ISB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRjb25zdCBjYWNoZSA9IFtdO1xuXHRcdGxldCBjdXJyZW50LCBsYXN0ID0gdGhpcy5nZXRQb2ludCggMCApO1xuXHRcdGxldCBzdW0gPSAwO1xuXG5cdFx0Y2FjaGUucHVzaCggMCApO1xuXG5cdFx0Zm9yICggbGV0IHAgPSAxOyBwIDw9IGRpdmlzaW9uczsgcCArKyApIHtcblxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcblx0XHRcdHN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTtcblx0XHRcdGNhY2hlLnB1c2goIHN1bSApO1xuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xuXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cblxuXHR9XG5cblx0dXBkYXRlQXJjTGVuZ3RocygpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH1cblxuXHQvLyBHaXZlbiB1ICggMCAuLiAxICksIGdldCBhIHQgdG8gZmluZCBwLiBUaGlzIGdpdmVzIHlvdSBwb2ludHMgd2hpY2ggYXJlIGVxdWlkaXN0YW50XG5cblx0Z2V0VXRvVG1hcHBpbmcoIHUsIGRpc3RhbmNlICkge1xuXG5cdFx0Y29uc3QgYXJjTGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdFx0bGV0IGkgPSAwO1xuXHRcdGNvbnN0IGlsID0gYXJjTGVuZ3Rocy5sZW5ndGg7XG5cblx0XHRsZXQgdGFyZ2V0QXJjTGVuZ3RoOyAvLyBUaGUgdGFyZ2V0ZWQgdSBkaXN0YW5jZSB2YWx1ZSB0byBnZXRcblxuXHRcdGlmICggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gdSAqIGFyY0xlbmd0aHNbIGlsIC0gMSBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYmluYXJ5IHNlYXJjaCBmb3IgdGhlIGluZGV4IHdpdGggbGFyZ2VzdCB2YWx1ZSBzbWFsbGVyIHRoYW4gdGFyZ2V0IHUgZGlzdGFuY2VcblxuXHRcdGxldCBsb3cgPSAwLCBoaWdoID0gaWwgLSAxLCBjb21wYXJpc29uO1xuXG5cdFx0d2hpbGUgKCBsb3cgPD0gaGlnaCApIHtcblxuXHRcdFx0aSA9IE1hdGguZmxvb3IoIGxvdyArICggaGlnaCAtIGxvdyApIC8gMiApOyAvLyBsZXNzIGxpa2VseSB0byBvdmVyZmxvdywgdGhvdWdoIHByb2JhYmx5IG5vdCBpc3N1ZSBoZXJlLCBKUyBkb2Vzbid0IHJlYWxseSBoYXZlIGludGVnZXJzLCBhbGwgbnVtYmVycyBhcmUgZmxvYXRzXG5cblx0XHRcdGNvbXBhcmlzb24gPSBhcmNMZW5ndGhzWyBpIF0gLSB0YXJnZXRBcmNMZW5ndGg7XG5cblx0XHRcdGlmICggY29tcGFyaXNvbiA8IDAgKSB7XG5cblx0XHRcdFx0bG93ID0gaSArIDE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBhcmlzb24gPiAwICkge1xuXG5cdFx0XHRcdGhpZ2ggPSBpIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRoaWdoID0gaTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gRE9ORVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpID0gaGlnaDtcblxuXHRcdGlmICggYXJjTGVuZ3Roc1sgaSBdID09PSB0YXJnZXRBcmNMZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiBpIC8gKCBpbCAtIDEgKTtcblxuXHRcdH1cblxuXHRcdC8vIHdlIGNvdWxkIGdldCBmaW5lciBncmFpbiBhdCBsZW5ndGhzLCBvciB1c2Ugc2ltcGxlIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcG9pbnRzXG5cblx0XHRjb25zdCBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07XG5cdFx0Y29uc3QgbGVuZ3RoQWZ0ZXIgPSBhcmNMZW5ndGhzWyBpICsgMSBdO1xuXG5cdFx0Y29uc3Qgc2VnbWVudExlbmd0aCA9IGxlbmd0aEFmdGVyIC0gbGVuZ3RoQmVmb3JlO1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHdoZXJlIHdlIGFyZSBiZXR3ZWVuIHRoZSAnYmVmb3JlJyBhbmQgJ2FmdGVyJyBwb2ludHNcblxuXHRcdGNvbnN0IHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuXG5cdFx0Y29uc3QgdCA9ICggaSArIHNlZ21lbnRGcmFjdGlvbiApIC8gKCBpbCAtIDEgKTtcblxuXHRcdHJldHVybiB0O1xuXG5cdH1cblxuXHQvLyBSZXR1cm5zIGEgdW5pdCB2ZWN0b3IgdGFuZ2VudCBhdCB0XG5cdC8vIEluIGNhc2UgYW55IHN1YiBjdXJ2ZSBkb2VzIG5vdCBpbXBsZW1lbnQgaXRzIHRhbmdlbnQgZGVyaXZhdGlvbixcblx0Ly8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnRcblx0Ly8gd2hpY2ggc2VlbXMgdG8gZ2l2ZSBhIHJlYXNvbmFibGUgYXBwcm94aW1hdGlvblxuXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZGVsdGEgPSAwLjAwMDE7XG5cdFx0bGV0IHQxID0gdCAtIGRlbHRhO1xuXHRcdGxldCB0MiA9IHQgKyBkZWx0YTtcblxuXHRcdC8vIENhcHBpbmcgaW4gY2FzZSBvZiBkYW5nZXJcblxuXHRcdGlmICggdDEgPCAwICkgdDEgPSAwO1xuXHRcdGlmICggdDIgPiAxICkgdDIgPSAxO1xuXG5cdFx0Y29uc3QgcHQxID0gdGhpcy5nZXRQb2ludCggdDEgKTtcblx0XHRjb25zdCBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IG9wdGlvbmFsVGFyZ2V0IHx8ICggKCBwdDEuaXNWZWN0b3IyICkgPyBuZXcgVmVjdG9yMigpIDogbmV3IFZlY3RvcjMoKSApO1xuXG5cdFx0dGFuZ2VudC5jb3B5KCBwdDIgKS5zdWIoIHB0MSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRhbmdlbnQ7XG5cblx0fVxuXG5cdGdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGNvbXB1dGVGcmVuZXRGcmFtZXMoIHNlZ21lbnRzLCBjbG9zZWQgKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5jcy5pbmRpYW5hLmVkdS9wdWIvdGVjaHJlcG9ydHMvVFI0MjUucGRmXG5cblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgdGFuZ2VudHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgYmlub3JtYWxzID0gW107XG5cblx0XHRjb25zdCB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG1hdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1LCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgYW4gaW5pdGlhbCBub3JtYWwgdmVjdG9yIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yLFxuXHRcdC8vIGFuZCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtaW5pbXVtIHRhbmdlbnQgeHl6IGNvbXBvbmVudFxuXG5cdFx0bm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRiaW5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0Y29uc3QgdHggPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS54ICk7XG5cdFx0Y29uc3QgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0Y29uc3QgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7XG5cblx0XHRpZiAoIHR4IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHg7XG5cdFx0XHRub3JtYWwuc2V0KCAxLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHk7XG5cdFx0XHRub3JtYWwuc2V0KCAwLCAxLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR6IDw9IG1pbiApIHtcblxuXHRcdFx0bm9ybWFsLnNldCggMCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsICkubm9ybWFsaXplKCk7XG5cblx0XHRub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTtcblx0XHRiaW5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbHNbIDAgXSApO1xuXG5cblx0XHQvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRjb25zdCB0aGV0YSA9IE1hdGguYWNvcyggY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzXG5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHZlYywgdGhldGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgY3VydmUgaXMgY2xvc2VkLCBwb3N0cHJvY2VzcyB0aGUgdmVjdG9ycyBzbyB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9ybWFsIHZlY3RvcnMgYXJlIHRoZSBzYW1lXG5cblx0XHRpZiAoIGNsb3NlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bGV0IHRoZXRhID0gTWF0aC5hY29zKCBjbGFtcCggbm9ybWFsc1sgMCBdLmRvdCggbm9ybWFsc1sgc2VnbWVudHMgXSApLCAtIDEsIDEgKSApO1xuXHRcdFx0dGhldGEgLz0gc2VnbWVudHM7XG5cblx0XHRcdGlmICggdGFuZ2VudHNbIDAgXS5kb3QoIHZlYy5jcm9zc1ZlY3RvcnMoIG5vcm1hbHNbIDAgXSwgbm9ybWFsc1sgc2VnbWVudHMgXSApICkgPiAwICkge1xuXG5cdFx0XHRcdHRoZXRhID0gLSB0aGV0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gdHdpc3QgYSBsaXR0bGUuLi5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHRhbmdlbnRzWyBpIF0sIHRoZXRhICogaSApICk7XG5cdFx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0YW5nZW50czogdGFuZ2VudHMsXG5cdFx0XHRub3JtYWxzOiBub3JtYWxzLFxuXHRcdFx0Ymlub3JtYWxzOiBiaW5vcm1hbHNcblx0XHR9O1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdDdXJ2ZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0N1cnZlLnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZGF0YS5hcmNMZW5ndGhEaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IGpzb24uYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIEVsbGlwc2VDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggYVggPSAwLCBhWSA9IDAsIHhSYWRpdXMgPSAxLCB5UmFkaXVzID0gMSwgYVN0YXJ0QW5nbGUgPSAwLCBhRW5kQW5nbGUgPSBNYXRoLlBJICogMiwgYUNsb2Nrd2lzZSA9IGZhbHNlLCBhUm90YXRpb24gPSAwICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdFbGxpcHNlQ3VydmUnO1xuXG5cdFx0dGhpcy5hWCA9IGFYO1xuXHRcdHRoaXMuYVkgPSBhWTtcblxuXHRcdHRoaXMueFJhZGl1cyA9IHhSYWRpdXM7XG5cdFx0dGhpcy55UmFkaXVzID0geVJhZGl1cztcblxuXHRcdHRoaXMuYVN0YXJ0QW5nbGUgPSBhU3RhcnRBbmdsZTtcblx0XHR0aGlzLmFFbmRBbmdsZSA9IGFFbmRBbmdsZTtcblxuXHRcdHRoaXMuYUNsb2Nrd2lzZSA9IGFDbG9ja3dpc2U7XG5cblx0XHR0aGlzLmFSb3RhdGlvbiA9IGFSb3RhdGlvbjtcblxuXHR9XG5cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdFx0Y29uc3QgdHdvUGkgPSBNYXRoLlBJICogMjtcblx0XHRsZXQgZGVsdGFBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlIC0gdGhpcy5hU3RhcnRBbmdsZTtcblx0XHRjb25zdCBzYW1lUG9pbnRzID0gTWF0aC5hYnMoIGRlbHRhQW5nbGUgKSA8IE51bWJlci5FUFNJTE9OO1xuXG5cdFx0Ly8gZW5zdXJlcyB0aGF0IGRlbHRhQW5nbGUgaXMgMCAuLiAyIFBJXG5cdFx0d2hpbGUgKCBkZWx0YUFuZ2xlIDwgMCApIGRlbHRhQW5nbGUgKz0gdHdvUGk7XG5cdFx0d2hpbGUgKCBkZWx0YUFuZ2xlID4gdHdvUGkgKSBkZWx0YUFuZ2xlIC09IHR3b1BpO1xuXG5cdFx0aWYgKCBkZWx0YUFuZ2xlIDwgTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdGlmICggc2FtZVBvaW50cyApIHtcblxuXHRcdFx0XHRkZWx0YUFuZ2xlID0gMDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkZWx0YUFuZ2xlID0gdHdvUGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hQ2xvY2t3aXNlID09PSB0cnVlICYmICEgc2FtZVBvaW50cyApIHtcblxuXHRcdFx0aWYgKCBkZWx0YUFuZ2xlID09PSB0d29QaSApIHtcblxuXHRcdFx0XHRkZWx0YUFuZ2xlID0gLSB0d29QaTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkZWx0YUFuZ2xlID0gZGVsdGFBbmdsZSAtIHR3b1BpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBhbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGUgKyB0ICogZGVsdGFBbmdsZTtcblx0XHRsZXQgeCA9IHRoaXMuYVggKyB0aGlzLnhSYWRpdXMgKiBNYXRoLmNvcyggYW5nbGUgKTtcblx0XHRsZXQgeSA9IHRoaXMuYVkgKyB0aGlzLnlSYWRpdXMgKiBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdGlmICggdGhpcy5hUm90YXRpb24gIT09IDAgKSB7XG5cblx0XHRcdGNvbnN0IGNvcyA9IE1hdGguY29zKCB0aGlzLmFSb3RhdGlvbiApO1xuXHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHRoaXMuYVJvdGF0aW9uICk7XG5cblx0XHRcdGNvbnN0IHR4ID0geCAtIHRoaXMuYVg7XG5cdFx0XHRjb25zdCB0eSA9IHkgLSB0aGlzLmFZO1xuXG5cdFx0XHQvLyBSb3RhdGUgdGhlIHBvaW50IGFib3V0IHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuXG5cdFx0XHR4ID0gdHggKiBjb3MgLSB0eSAqIHNpbiArIHRoaXMuYVg7XG5cdFx0XHR5ID0gdHggKiBzaW4gKyB0eSAqIGNvcyArIHRoaXMuYVk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnQuc2V0KCB4LCB5ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5hWCA9IHNvdXJjZS5hWDtcblx0XHR0aGlzLmFZID0gc291cmNlLmFZO1xuXG5cdFx0dGhpcy54UmFkaXVzID0gc291cmNlLnhSYWRpdXM7XG5cdFx0dGhpcy55UmFkaXVzID0gc291cmNlLnlSYWRpdXM7XG5cblx0XHR0aGlzLmFTdGFydEFuZ2xlID0gc291cmNlLmFTdGFydEFuZ2xlO1xuXHRcdHRoaXMuYUVuZEFuZ2xlID0gc291cmNlLmFFbmRBbmdsZTtcblxuXHRcdHRoaXMuYUNsb2Nrd2lzZSA9IHNvdXJjZS5hQ2xvY2t3aXNlO1xuXG5cdFx0dGhpcy5hUm90YXRpb24gPSBzb3VyY2UuYVJvdGF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEuYVggPSB0aGlzLmFYO1xuXHRcdGRhdGEuYVkgPSB0aGlzLmFZO1xuXG5cdFx0ZGF0YS54UmFkaXVzID0gdGhpcy54UmFkaXVzO1xuXHRcdGRhdGEueVJhZGl1cyA9IHRoaXMueVJhZGl1cztcblxuXHRcdGRhdGEuYVN0YXJ0QW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlO1xuXHRcdGRhdGEuYUVuZEFuZ2xlID0gdGhpcy5hRW5kQW5nbGU7XG5cblx0XHRkYXRhLmFDbG9ja3dpc2UgPSB0aGlzLmFDbG9ja3dpc2U7XG5cblx0XHRkYXRhLmFSb3RhdGlvbiA9IHRoaXMuYVJvdGF0aW9uO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMuYVggPSBqc29uLmFYO1xuXHRcdHRoaXMuYVkgPSBqc29uLmFZO1xuXG5cdFx0dGhpcy54UmFkaXVzID0ganNvbi54UmFkaXVzO1xuXHRcdHRoaXMueVJhZGl1cyA9IGpzb24ueVJhZGl1cztcblxuXHRcdHRoaXMuYVN0YXJ0QW5nbGUgPSBqc29uLmFTdGFydEFuZ2xlO1xuXHRcdHRoaXMuYUVuZEFuZ2xlID0ganNvbi5hRW5kQW5nbGU7XG5cblx0XHR0aGlzLmFDbG9ja3dpc2UgPSBqc29uLmFDbG9ja3dpc2U7XG5cblx0XHR0aGlzLmFSb3RhdGlvbiA9IGpzb24uYVJvdGF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuaXNFbGxpcHNlQ3VydmUgPSB0cnVlO1xuXG5jbGFzcyBBcmNDdXJ2ZSBleHRlbmRzIEVsbGlwc2VDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHN1cGVyKCBhWCwgYVksIGFSYWRpdXMsIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdBcmNDdXJ2ZSc7XG5cblx0fVxuXG59XG5cbkFyY0N1cnZlLnByb3RvdHlwZS5pc0FyY0N1cnZlID0gdHJ1ZTtcblxuLyoqXG4gKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxuICpcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxuICovXG5cblxuLypcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG4gLSBodHRwOi8vaWRlb25lLmNvbS9Ob0ViVk1cblxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXG4qL1xuXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XG5cblx0bGV0IGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDtcblxuXHQvKlxuXHQgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xuXHQgKiBzdWNoIHRoYXRcblx0ICogICBwKDApID0geDAsIHAoMSkgPSB4MVxuXHQgKiAgYW5kXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cblx0ICovXG5cdGZ1bmN0aW9uIGluaXQoIHgwLCB4MSwgdDAsIHQxICkge1xuXG5cdFx0YzAgPSB4MDtcblx0XHRjMSA9IHQwO1xuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0bGV0IHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdGxldCB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0Y29uc3QgdDIgPSB0ICogdDtcblx0XHRcdGNvbnN0IHQzID0gdDIgKiB0O1xuXHRcdFx0cmV0dXJuIGMwICsgYzEgKiB0ICsgYzIgKiB0MiArIGMzICogdDM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vL1xuXG5jb25zdCB0bXAgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgcHggPSBuZXcgQ3ViaWNQb2x5KCksIHB5ID0gbmV3IEN1YmljUG9seSgpLCBweiA9IG5ldyBDdWJpY1BvbHkoKTtcblxuY2xhc3MgQ2F0bXVsbFJvbUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggcG9pbnRzID0gW10sIGNsb3NlZCA9IGZhbHNlLCBjdXJ2ZVR5cGUgPSAnY2VudHJpcGV0YWwnLCB0ZW5zaW9uID0gMC41ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDYXRtdWxsUm9tQ3VydmUzJztcblxuXHRcdHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXHRcdHRoaXMuY2xvc2VkID0gY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IHRlbnNpb247XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0Y29uc3QgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0XHRjb25zdCBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XG5cdFx0bGV0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGxldCB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkICkge1xuXG5cdFx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XG5cblx0XHR9IGVsc2UgaWYgKCB3ZWlnaHQgPT09IDAgJiYgaW50UG9pbnQgPT09IGwgLSAxICkge1xuXG5cdFx0XHRpbnRQb2ludCA9IGwgLSAyO1xuXHRcdFx0d2VpZ2h0ID0gMTtcblxuXHRcdH1cblxuXHRcdGxldCBwMCwgcDM7IC8vIDQgcG9pbnRzIChwMSAmIHAyIGRlZmluZWQgYmVsb3cpXG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCApIHtcblxuXHRcdFx0cDAgPSBwb2ludHNbICggaW50UG9pbnQgLSAxICkgJSBsIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBmaXJzdCBwb2ludFxuXHRcdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcblx0XHRcdHAwID0gdG1wO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50ICUgbCBdO1xuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyAoIGludFBvaW50ICsgMSApICUgbCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkge1xuXG5cdFx0XHRwMyA9IHBvaW50c1sgKCBpbnRQb2ludCArIDIgKSAlIGwgXTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XG5cdFx0XHRwMyA9IHRtcDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHtcblxuXHRcdFx0Ly8gaW5pdCBDZW50cmlwZXRhbCAvIENob3JkYWwgQ2F0bXVsbC1Sb21cblx0XHRcdGNvbnN0IHBvdyA9IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgPyAwLjUgOiAwLjI1O1xuXHRcdFx0bGV0IGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7XG5cdFx0XHRsZXQgZHQxID0gTWF0aC5wb3coIHAxLmRpc3RhbmNlVG9TcXVhcmVkKCBwMiApLCBwb3cgKTtcblx0XHRcdGxldCBkdDIgPSBNYXRoLnBvdyggcDIuZGlzdGFuY2VUb1NxdWFyZWQoIHAzICksIHBvdyApO1xuXG5cdFx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIHJlcGVhdGVkIHBvaW50c1xuXHRcdFx0aWYgKCBkdDEgPCAxZS00ICkgZHQxID0gMS4wO1xuXHRcdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xuXHRcdFx0aWYgKCBkdDIgPCAxZS00ICkgZHQyID0gZHQxO1xuXG5cdFx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdFx0cHouaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCBkdDAsIGR0MSwgZHQyICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkge1xuXG5cdFx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRweS5pbml0Q2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRwei5pbml0Q2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgdGhpcy50ZW5zaW9uICk7XG5cblx0XHR9XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRweC5jYWxjKCB3ZWlnaHQgKSxcblx0XHRcdHB5LmNhbGMoIHdlaWdodCApLFxuXHRcdFx0cHouY2FsYyggd2VpZ2h0IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBzb3VyY2UuY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IHNvdXJjZS50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHRcdH1cblxuXHRcdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG5cdFx0ZGF0YS5jdXJ2ZVR5cGUgPSB0aGlzLmN1cnZlVHlwZTtcblx0XHRkYXRhLnRlbnNpb24gPSB0aGlzLnRlbnNpb247XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7XG5cdFx0dGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cbi8qKlxuICogQmV6aWVyIEN1cnZlcyBmb3JtdWxhcyBvYnRhaW5lZCBmcm9tXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CJUMzJUE5emllcl9jdXJ2ZVxuICovXG5cbmZ1bmN0aW9uIENhdG11bGxSb20oIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdGNvbnN0IHYwID0gKCBwMiAtIHAwICkgKiAwLjU7XG5cdGNvbnN0IHYxID0gKCBwMyAtIHAxICkgKiAwLjU7XG5cdGNvbnN0IHQyID0gdCAqIHQ7XG5cdGNvbnN0IHQzID0gdCAqIHQyO1xuXHRyZXR1cm4gKCAyICogcDEgLSAyICogcDIgKyB2MCArIHYxICkgKiB0MyArICggLSAzICogcDEgKyAzICogcDIgLSAyICogdjAgLSB2MSApICogdDIgKyB2MCAqIHQgKyBwMTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcCApIHtcblxuXHRjb25zdCBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDIgKiAoIDEgLSB0ICkgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMiggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllciggdCwgcDAsIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAwICkgKyBRdWFkcmF0aWNCZXppZXJQMSggdCwgcDEgKSArXG5cdFx0UXVhZHJhdGljQmV6aWVyUDIoIHQsIHAyICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMCggdCwgcCApIHtcblxuXHRjb25zdCBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIGsgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0Y29uc3QgayA9IDEgLSB0O1xuXHRyZXR1cm4gMyAqIGsgKiBrICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMiggdCwgcCApIHtcblxuXHRyZXR1cm4gMyAqICggMSAtIHQgKSAqIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAzKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHRyZXR1cm4gQ3ViaWNCZXppZXJQMCggdCwgcDAgKSArIEN1YmljQmV6aWVyUDEoIHQsIHAxICkgKyBDdWJpY0JlemllclAyKCB0LCBwMiApICtcblx0XHRDdWJpY0JlemllclAzKCB0LCBwMyApO1xuXG59XG5cbmNsYXNzIEN1YmljQmV6aWVyQ3VydmUgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjIoKSwgdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCksIHYzID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZSc7XG5cblx0XHR0aGlzLnYwID0gdjA7XG5cdFx0dGhpcy52MSA9IHYxO1xuXHRcdHRoaXMudjIgPSB2Mjtcblx0XHR0aGlzLnYzID0gdjM7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXHRcdHRoaXMudjMuY29weSggc291cmNlLnYzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cdFx0ZGF0YS52MyA9IHRoaXMudjMudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXHRcdHRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuY2xhc3MgQ3ViaWNCZXppZXJDdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjMoKSwgdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCksIHYzID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZTMnO1xuXG5cdFx0dGhpcy52MCA9IHYwO1xuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cdFx0dGhpcy52MyA9IHYzO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRcdHBvaW50LnNldChcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApLFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnosIHYzLnogKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdFx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdFx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlMyA9IHRydWU7XG5cbmNsYXNzIExpbmVDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZSc7XG5cblx0XHR0aGlzLnYxID0gdjE7XG5cdFx0dGhpcy52MiA9IHYyO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGlmICggdCA9PT0gMSApIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Ly8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cdGdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR0YW5nZW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKS5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB0YW5nZW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5MaW5lQ3VydmUucHJvdG90eXBlLmlzTGluZUN1cnZlID0gdHJ1ZTtcblxuY2xhc3MgTGluZUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZTMnO1xuXHRcdHRoaXMuaXNMaW5lQ3VydmUzID0gdHJ1ZTtcblxuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGlmICggdCA9PT0gMSApIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cdC8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggdjAgPSBuZXcgVmVjdG9yMigpLCB2MSA9IG5ldyBWZWN0b3IyKCksIHYyID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUnO1xuXG5cdFx0dGhpcy52MCA9IHYwO1xuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRcdHBvaW50LnNldChcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdFx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuY2xhc3MgUXVhZHJhdGljQmV6aWVyQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IzKCksIHYxID0gbmV3IFZlY3RvcjMoKSwgdjIgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZTMnO1xuXG5cdFx0dGhpcy52MCA9IHYwO1xuXHRcdHRoaXMudjEgPSB2MTtcblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRcdHBvaW50LnNldChcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCApLFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55ICksXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnogKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlMyA9IHRydWU7XG5cbmNsYXNzIFNwbGluZUN1cnZlIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgPSBbXSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BsaW5lQ3VydmUnO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBwb2ludHM7XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0Y29uc3QgcCA9ICggcG9pbnRzLmxlbmd0aCAtIDEgKSAqIHQ7XG5cblx0XHRjb25zdCBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0XHRjb25zdCB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0XHRjb25zdCBwMCA9IHBvaW50c1sgaW50UG9pbnQgPT09IDAgPyBpbnRQb2ludCA6IGludFBvaW50IC0gMSBdO1xuXHRcdGNvbnN0IHAxID0gcG9pbnRzWyBpbnRQb2ludCBdO1xuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDEgXTtcblx0XHRjb25zdCBwMyA9IHBvaW50c1sgaW50UG9pbnQgPiBwb2ludHMubGVuZ3RoIC0gMyA/IHBvaW50cy5sZW5ndGggLSAxIDogaW50UG9pbnQgKyAyIF07XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLngsIHAxLngsIHAyLngsIHAzLnggKSxcblx0XHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueSwgcDEueSwgcDIueSwgcDMueSApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNTcGxpbmVDdXJ2ZSA9IHRydWU7XG5cbnZhciBDdXJ2ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0QXJjQ3VydmU6IEFyY0N1cnZlLFxuXHRDYXRtdWxsUm9tQ3VydmUzOiBDYXRtdWxsUm9tQ3VydmUzLFxuXHRDdWJpY0JlemllckN1cnZlOiBDdWJpY0JlemllckN1cnZlLFxuXHRDdWJpY0JlemllckN1cnZlMzogQ3ViaWNCZXppZXJDdXJ2ZTMsXG5cdEVsbGlwc2VDdXJ2ZTogRWxsaXBzZUN1cnZlLFxuXHRMaW5lQ3VydmU6IExpbmVDdXJ2ZSxcblx0TGluZUN1cnZlMzogTGluZUN1cnZlMyxcblx0UXVhZHJhdGljQmV6aWVyQ3VydmU6IFF1YWRyYXRpY0JlemllckN1cnZlLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMyxcblx0U3BsaW5lQ3VydmU6IFNwbGluZUN1cnZlXG59KTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0Q3VydmVkIFBhdGggLSBhIGN1cnZlIHBhdGggaXMgc2ltcGx5IGEgYXJyYXkgb2YgY29ubmVjdGVkXG4gKiAgY3VydmVzLCBidXQgcmV0YWlucyB0aGUgYXBpIG9mIGEgY3VydmVcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY2xhc3MgQ3VydmVQYXRoIGV4dGVuZHMgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnO1xuXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblx0XHR0aGlzLmF1dG9DbG9zZSA9IGZhbHNlOyAvLyBBdXRvbWF0aWNhbGx5IGNsb3NlcyB0aGUgcGF0aFxuXG5cdH1cblxuXHRhZGQoIGN1cnZlICkge1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHR9XG5cblx0Y2xvc2VQYXRoKCkge1xuXG5cdFx0Ly8gQWRkIGEgbGluZSBjdXJ2ZSBpZiBzdGFydCBhbmQgZW5kIG9mIGxpbmVzIGFyZSBub3QgY29ubmVjdGVkXG5cdFx0Y29uc3Qgc3RhcnRQb2ludCA9IHRoaXMuY3VydmVzWyAwIF0uZ2V0UG9pbnQoIDAgKTtcblx0XHRjb25zdCBlbmRQb2ludCA9IHRoaXMuY3VydmVzWyB0aGlzLmN1cnZlcy5sZW5ndGggLSAxIF0uZ2V0UG9pbnQoIDEgKTtcblxuXHRcdGlmICggISBzdGFydFBvaW50LmVxdWFscyggZW5kUG9pbnQgKSApIHtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IExpbmVDdXJ2ZSggZW5kUG9pbnQsIHN0YXJ0UG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBUbyBnZXQgYWNjdXJhdGUgcG9pbnQgd2l0aCByZWZlcmVuY2UgdG9cblx0Ly8gZW50aXJlIHBhdGggZGlzdGFuY2UgYXQgdGltZSB0LFxuXHQvLyBmb2xsb3dpbmcgaGFzIHRvIGJlIGRvbmU6XG5cblx0Ly8gMS4gTGVuZ3RoIG9mIGVhY2ggc3ViIHBhdGggaGF2ZSB0byBiZSBrbm93blxuXHQvLyAyLiBMb2NhdGUgYW5kIGlkZW50aWZ5IHR5cGUgb2YgY3VydmVcblx0Ly8gMy4gR2V0IHQgZm9yIHRoZSBjdXJ2ZVxuXHQvLyA0LiBSZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCh0JylcblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBkID0gdCAqIHRoaXMuZ2V0TGVuZ3RoKCk7XG5cdFx0Y29uc3QgY3VydmVMZW5ndGhzID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRsZXQgaSA9IDA7XG5cblx0XHQvLyBUbyB0aGluayBhYm91dCBib3VuZGFyaWVzIHBvaW50cy5cblxuXHRcdHdoaWxlICggaSA8IGN1cnZlTGVuZ3Rocy5sZW5ndGggKSB7XG5cblx0XHRcdGlmICggY3VydmVMZW5ndGhzWyBpIF0gPj0gZCApIHtcblxuXHRcdFx0XHRjb25zdCBkaWZmID0gY3VydmVMZW5ndGhzWyBpIF0gLSBkO1xuXHRcdFx0XHRjb25zdCBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xuXHRcdFx0XHRjb25zdCB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHRcdFx0cmV0dXJuIGN1cnZlLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aSArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdFx0Ly8gbG9vcCB3aGVyZSBzdW0gIT0gMCwgc3VtID4gZCAsIHN1bSsxIDxkXG5cblx0fVxuXG5cdC8vIFdlIGNhbm5vdCB1c2UgdGhlIGRlZmF1bHQgVEhSRUUuQ3VydmUgZ2V0UG9pbnQoKSB3aXRoIGdldExlbmd0aCgpIGJlY2F1c2UgaW5cblx0Ly8gVEhSRUUuQ3VydmUsIGdldExlbmd0aCgpIGRlcGVuZHMgb24gZ2V0UG9pbnQoKSBidXQgaW4gVEhSRUUuQ3VydmVQYXRoXG5cdC8vIGdldFBvaW50KCkgZGVwZW5kcyBvbiBnZXRMZW5ndGhcblxuXHRnZXRMZW5ndGgoKSB7XG5cblx0XHRjb25zdCBsZW5zID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuc1sgbGVucy5sZW5ndGggLSAxIF07XG5cblx0fVxuXG5cdC8vIGNhY2hlTGVuZ3RocyBtdXN0IGJlIHJlY2FsY3VsYXRlZC5cblx0dXBkYXRlQXJjTGVuZ3RocygpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbnVsbDtcblx0XHR0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXG5cdH1cblxuXHQvLyBDb21wdXRlIGxlbmd0aHMgYW5kIGNhY2hlIHRoZW1cblx0Ly8gV2UgY2Fubm90IG92ZXJ3cml0ZSBnZXRMZW5ndGhzKCkgYmVjYXVzZSBVdG9UIG1hcHBpbmcgdXNlcyBpdC5cblxuXHRnZXRDdXJ2ZUxlbmd0aHMoKSB7XG5cblx0XHQvLyBXZSB1c2UgY2FjaGUgdmFsdWVzIGlmIGN1cnZlcyBhbmQgY2FjaGUgYXJyYXkgYXJlIHNhbWUgbGVuZ3RoXG5cblx0XHRpZiAoIHRoaXMuY2FjaGVMZW5ndGhzICYmIHRoaXMuY2FjaGVMZW5ndGhzLmxlbmd0aCA9PT0gdGhpcy5jdXJ2ZXMubGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM7XG5cblx0XHR9XG5cblx0XHQvLyBHZXQgbGVuZ3RoIG9mIHN1Yi1jdXJ2ZVxuXHRcdC8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheVxuXG5cdFx0Y29uc3QgbGVuZ3RocyA9IFtdO1xuXHRcdGxldCBzdW1zID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHN1bXMgKz0gdGhpcy5jdXJ2ZXNbIGkgXS5nZXRMZW5ndGgoKTtcblx0XHRcdGxlbmd0aHMucHVzaCggc3VtcyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBsZW5ndGhzO1xuXG5cdFx0cmV0dXJuIGxlbmd0aHM7XG5cblx0fVxuXG5cdGdldFNwYWNlZFBvaW50cyggZGl2aXNpb25zID0gNDAgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBkaXZpc2lvbnM7IGkgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBpIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Z2V0UG9pbnRzKCBkaXZpc2lvbnMgPSAxMiApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXHRcdGxldCBsYXN0O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBjdXJ2ZXMgPSB0aGlzLmN1cnZlczsgaSA8IGN1cnZlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGN1cnZlID0gY3VydmVzWyBpIF07XG5cdFx0XHRjb25zdCByZXNvbHV0aW9uID0gY3VydmUuaXNFbGxpcHNlQ3VydmUgPyBkaXZpc2lvbnMgKiAyXG5cdFx0XHRcdDogKCBjdXJ2ZS5pc0xpbmVDdXJ2ZSB8fCBjdXJ2ZS5pc0xpbmVDdXJ2ZTMgKSA/IDFcblx0XHRcdFx0XHQ6IGN1cnZlLmlzU3BsaW5lQ3VydmUgPyBkaXZpc2lvbnMgKiBjdXJ2ZS5wb2ludHMubGVuZ3RoXG5cdFx0XHRcdFx0XHQ6IGRpdmlzaW9ucztcblxuXHRcdFx0Y29uc3QgcHRzID0gY3VydmUuZ2V0UG9pbnRzKCByZXNvbHV0aW9uICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHB0cy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcG9pbnQgPSBwdHNbIGogXTtcblxuXHRcdFx0XHRpZiAoIGxhc3QgJiYgbGFzdC5lcXVhbHMoIHBvaW50ICkgKSBjb250aW51ZTsgLy8gZW5zdXJlcyBubyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIGR1cGxpY2F0ZXNcblxuXHRcdFx0XHRwb2ludHMucHVzaCggcG9pbnQgKTtcblx0XHRcdFx0bGFzdCA9IHBvaW50O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICYmIHBvaW50cy5sZW5ndGggPiAxICYmICEgcG9pbnRzWyBwb2ludHMubGVuZ3RoIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGN1cnZlID0gc291cmNlLmN1cnZlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IHNvdXJjZS5hdXRvQ2xvc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5hdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZTtcblx0XHRkYXRhLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xuXHRcdFx0ZGF0YS5jdXJ2ZXMucHVzaCggY3VydmUudG9KU09OKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IGpzb24uYXV0b0Nsb3NlO1xuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IGpzb24uY3VydmVzWyBpIF07XG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBuZXcgQ3VydmVzWyBjdXJ2ZS50eXBlIF0oKS5mcm9tSlNPTiggY3VydmUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIFBhdGggZXh0ZW5kcyBDdXJ2ZVBhdGgge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdQYXRoJztcblxuXHRcdHRoaXMuY3VycmVudFBvaW50ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdGlmICggcG9pbnRzICkge1xuXG5cdFx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1vdmVUbyggcG9pbnRzWyAwIF0ueCwgcG9pbnRzWyAwIF0ueSApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZVRvKCBwb2ludHNbIGkgXS54LCBwb2ludHNbIGkgXS55ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bW92ZVRvKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7IC8vIFRPRE8gY29uc2lkZXIgcmVmZXJlbmNpbmcgdmVjdG9ycyBpbnN0ZWFkIG9mIGNvcHlpbmc/XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGluZVRvKCB4LCB5ICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgTGluZUN1cnZlKCB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLCBuZXcgVmVjdG9yMiggeCwgeSApICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IFF1YWRyYXRpY0JlemllckN1cnZlKFxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1B4LCBhQ1B5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YmV6aWVyQ3VydmVUbyggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApIHtcblxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IEN1YmljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUDF4LCBhQ1AxeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUDJ4LCBhQ1AyeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFYLCBhWSApXG5cdFx0KTtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIGFYLCBhWSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNwbGluZVRocnUoIHB0cyAvKkFycmF5IG9mIFZlY3RvciovICkge1xuXG5cdFx0Y29uc3QgbnB0cyA9IFsgdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSBdLmNvbmNhdCggcHRzICk7XG5cblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBTcGxpbmVDdXJ2ZSggbnB0cyApO1xuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBwdHNbIHB0cy5sZW5ndGggLSAxIF0gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcmMoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdGNvbnN0IHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHRjb25zdCB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2FyYyggYVggKyB4MCwgYVkgKyB5MCwgYVJhZGl1cyxcblx0XHRcdGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhYnNhcmMoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZWxsaXBzZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0XHRjb25zdCB4MCA9IHRoaXMuY3VycmVudFBvaW50Lng7XG5cdFx0Y29uc3QgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCArIHgwLCBhWSArIHkwLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhYnNlbGxpcHNlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRcdGNvbnN0IGN1cnZlID0gbmV3IEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHRcdGlmICggdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gaWYgYSBwcmV2aW91cyBjdXJ2ZSBpcyBwcmVzZW50LCBhdHRlbXB0IHRvIGpvaW5cblx0XHRcdGNvbnN0IGZpcnN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMCApO1xuXG5cdFx0XHRpZiAoICEgZmlyc3RQb2ludC5lcXVhbHMoIHRoaXMuY3VycmVudFBvaW50ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5saW5lVG8oIGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHRjb25zdCBsYXN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMSApO1xuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIGxhc3RQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggc291cmNlLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEuY3VycmVudFBvaW50ID0gdGhpcy5jdXJyZW50UG9pbnQudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmZyb21BcnJheSgganNvbi5jdXJyZW50UG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBTaGFwZSBleHRlbmRzIFBhdGgge1xuXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XG5cblx0XHRzdXBlciggcG9pbnRzICk7XG5cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFwZSc7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0fVxuXG5cdGdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zdCBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fVxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdGV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcblxuXHRcdH07XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGhvbGUgPSBzb3VyY2UuaG9sZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24uaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcblx0XHRcdHRoaXMuaG9sZXMucHVzaCggbmV3IFBhdGgoKS5mcm9tSlNPTiggaG9sZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBQb3J0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9lYXJjdXQgKHYyLjIuMilcbiAqL1xuXG5jb25zdCBFYXJjdXQgPSB7XG5cblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSA9IDIgKSB7XG5cblx0XHRjb25zdCBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcblx0XHRjb25zdCBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxldCBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KCBkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlICk7XG5cdFx0Y29uc3QgdHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldiApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHRsZXQgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XG5cblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVsgMCBdO1xuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XG5cblx0XHRcdGZvciAoIGxldCBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltICkge1xuXG5cdFx0XHRcdHggPSBkYXRhWyBpIF07XG5cdFx0XHRcdHkgPSBkYXRhWyBpICsgMSBdO1xuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcblxuXHRcdH1cblxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlcztcblxuXHR9XG5cbn07XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0bGV0IGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyggc3RhcnQsIGVuZCApIHtcblxuXHRpZiAoICEgc3RhcnQgKSByZXR1cm4gc3RhcnQ7XG5cdGlmICggISBlbmQgKSBlbmQgPSBzdGFydDtcblxuXHRsZXQgcCA9IHN0YXJ0LFxuXHRcdGFnYWluO1xuXHRkbyB7XG5cblx0XHRhZ2FpbiA9IGZhbHNlO1xuXG5cdFx0aWYgKCAhIHAuc3RlaW5lciAmJiAoIGVxdWFscyggcCwgcC5uZXh0ICkgfHwgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA9PT0gMCApICkge1xuXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRwID0gZW5kID0gcC5wcmV2O1xuXHRcdFx0aWYgKCBwID09PSBwLm5leHQgKSBicmVhaztcblx0XHRcdGFnYWluID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHAgPSBwLm5leHQ7XG5cblx0XHR9XG5cblx0fSB3aGlsZSAoIGFnYWluIHx8IHAgIT09IGVuZCApO1xuXG5cdHJldHVybiBlbmQ7XG5cbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XG5cblx0aWYgKCAhIGVhciApIHJldHVybjtcblxuXHQvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRsZXQgc3RvcCA9IGVhcixcblx0XHRwcmV2LCBuZXh0O1xuXG5cdC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcblx0XHRcdGVhciA9IG5leHQubmV4dDtcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XG5cblx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0fVxuXG5cdFx0ZWFyID0gbmV4dDtcblxuXHRcdC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cdFx0XHRpZiAoICEgcGFzcyApIHtcblxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGZpbHRlclBvaW50cyggZWFyICksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHtcblxuXHRcdFx0XHRlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBmaWx0ZXJQb2ludHMoIGVhciApLCB0cmlhbmdsZXMsIGRpbSApO1xuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIgKTtcblxuXHRcdFx0XHQvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBwYXNzID09PSAyICkge1xuXG5cdFx0XHRcdHNwbGl0RWFyY3V0KCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuZnVuY3Rpb24gaXNFYXIoIGVhciApIHtcblxuXHRjb25zdCBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuXHRsZXQgcCA9IGVhci5uZXh0Lm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBlYXIucHJldiApIHtcblxuXHRcdGlmICggcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHRjb25zdCBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuXHRjb25zdCBtaW5UWCA9IGEueCA8IGIueCA/ICggYS54IDwgYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA8IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1pblRZID0gYS55IDwgYi55ID8gKCBhLnkgPCBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55IDwgYy55ID8gYi55IDogYy55ICksXG5cdFx0bWF4VFggPSBhLnggPiBiLnggPyAoIGEueCA+IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPiBjLnggPyBiLnggOiBjLnggKSxcblx0XHRtYXhUWSA9IGEueSA+IGIueSA/ICggYS55ID4gYy55ID8gYS55IDogYy55ICkgOiAoIGIueSA+IGMueSA/IGIueSA6IGMueSApO1xuXG5cdC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG5cdGNvbnN0IG1pblogPSB6T3JkZXIoIG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdGxldCBwID0gZWFyLnByZXZaLFxuXHRcdG4gPSBlYXIubmV4dFo7XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0XHRpZiAoIG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55ICkgJiZcblx0XHRcdGFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRuID0gbi5uZXh0WjtcblxuXHR9XG5cblx0Ly8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcblx0d2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cdHdoaWxlICggbiAmJiBuLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggbiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkgKSAmJlxuXHRcdFx0YXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdG4gPSBuLm5leHRaO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkge1xuXG5cdGxldCBwID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdGNvbnN0IGEgPSBwLnByZXYsXG5cdFx0XHRiID0gcC5uZXh0Lm5leHQ7XG5cblx0XHRpZiAoICEgZXF1YWxzKCBhLCBiICkgJiYgaW50ZXJzZWN0cyggYSwgcCwgcC5uZXh0LCBiICkgJiYgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSApIHtcblxuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGEuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIHAuaSAvIGRpbSApO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2goIGIuaSAvIGRpbSApO1xuXG5cdFx0XHQvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRyZW1vdmVOb2RlKCBwLm5leHQgKTtcblxuXHRcdFx0cCA9IHN0YXJ0ID0gYjtcblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0YXJ0ICk7XG5cblx0cmV0dXJuIGZpbHRlclBvaW50cyggcCApO1xuXG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG5cdGxldCBhID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdGxldCBiID0gYS5uZXh0Lm5leHQ7XG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XG5cblx0XHRcdGlmICggYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKCBhLCBiICkgKSB7XG5cblx0XHRcdFx0Ly8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuXHRcdFx0XHRsZXQgYyA9IHNwbGl0UG9seWdvbiggYSwgYiApO1xuXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cdFx0XHRcdGEgPSBmaWx0ZXJQb2ludHMoIGEsIGEubmV4dCApO1xuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcblxuXHRcdFx0XHQvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGIgPSBiLm5leHQ7XG5cblx0XHR9XG5cblx0XHRhID0gYS5uZXh0O1xuXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xuXG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKSB7XG5cblx0Y29uc3QgcXVldWUgPSBbXTtcblx0bGV0IGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuXHRmb3IgKCBpID0gMCwgbGVuID0gaG9sZUluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpICsrICkge1xuXG5cdFx0c3RhcnQgPSBob2xlSW5kaWNlc1sgaSBdICogZGltO1xuXHRcdGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbIGkgKyAxIF0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcblx0XHRsaXN0ID0gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBmYWxzZSApO1xuXHRcdGlmICggbGlzdCA9PT0gbGlzdC5uZXh0ICkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcblx0XHRxdWV1ZS5wdXNoKCBnZXRMZWZ0bW9zdCggbGlzdCApICk7XG5cblx0fVxuXG5cdHF1ZXVlLnNvcnQoIGNvbXBhcmVYICk7XG5cblx0Ly8gcHJvY2VzcyBob2xlcyBmcm9tIGxlZnQgdG8gcmlnaHRcblx0Zm9yICggaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRlbGltaW5hdGVIb2xlKCBxdWV1ZVsgaSBdLCBvdXRlck5vZGUgKTtcblx0XHRvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMoIG91dGVyTm9kZSwgb3V0ZXJOb2RlLm5leHQgKTtcblxuXHR9XG5cblx0cmV0dXJuIG91dGVyTm9kZTtcblxufVxuXG5mdW5jdGlvbiBjb21wYXJlWCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS54IC0gYi54O1xuXG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdG91dGVyTm9kZSA9IGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKTtcblx0aWYgKCBvdXRlck5vZGUgKSB7XG5cblx0XHRjb25zdCBiID0gc3BsaXRQb2x5Z29uKCBvdXRlck5vZGUsIGhvbGUgKTtcblxuXHRcdC8vIGZpbHRlciBjb2xsaW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuXHRcdGZpbHRlclBvaW50cyggb3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCApO1xuXHRcdGZpbHRlclBvaW50cyggYiwgYi5uZXh0ICk7XG5cblx0fVxuXG59XG5cbi8vIERhdmlkIEViZXJseSdzIGFsZ29yaXRobSBmb3IgZmluZGluZyBhIGJyaWRnZSBiZXR3ZWVuIGhvbGUgYW5kIG91dGVyIHBvbHlnb25cbmZ1bmN0aW9uIGZpbmRIb2xlQnJpZGdlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0bGV0IHAgPSBvdXRlck5vZGU7XG5cdGNvbnN0IGh4ID0gaG9sZS54O1xuXHRjb25zdCBoeSA9IGhvbGUueTtcblx0bGV0IHF4ID0gLSBJbmZpbml0eSwgbTtcblxuXHQvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XG5cdC8vIHNlZ21lbnQncyBlbmRwb2ludCB3aXRoIGxlc3NlciB4IHdpbGwgYmUgcG90ZW50aWFsIGNvbm5lY3Rpb24gcG9pbnRcblx0ZG8ge1xuXG5cdFx0aWYgKCBoeSA8PSBwLnkgJiYgaHkgPj0gcC5uZXh0LnkgJiYgcC5uZXh0LnkgIT09IHAueSApIHtcblxuXHRcdFx0Y29uc3QgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTtcblx0XHRcdGlmICggeCA8PSBoeCAmJiB4ID4gcXggKSB7XG5cblx0XHRcdFx0cXggPSB4O1xuXHRcdFx0XHRpZiAoIHggPT09IGh4ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC55ICkgcmV0dXJuIHA7XG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC5uZXh0LnkgKSByZXR1cm4gcC5uZXh0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBvdXRlck5vZGUgKTtcblxuXHRpZiAoICEgbSApIHJldHVybiBudWxsO1xuXG5cdGlmICggaHggPT09IHF4ICkgcmV0dXJuIG07IC8vIGhvbGUgdG91Y2hlcyBvdXRlciBzZWdtZW50OyBwaWNrIGxlZnRtb3N0IGVuZHBvaW50XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuXHQvLyBpZiB0aGVyZSBhcmUgbm8gcG9pbnRzIGZvdW5kLCB3ZSBoYXZlIGEgdmFsaWQgY29ubmVjdGlvbjtcblx0Ly8gb3RoZXJ3aXNlIGNob29zZSB0aGUgcG9pbnQgb2YgdGhlIG1pbmltdW0gYW5nbGUgd2l0aCB0aGUgcmF5IGFzIGNvbm5lY3Rpb24gcG9pbnRcblxuXHRjb25zdCBzdG9wID0gbSxcblx0XHRteCA9IG0ueCxcblx0XHRteSA9IG0ueTtcblx0bGV0IHRhbk1pbiA9IEluZmluaXR5LCB0YW47XG5cblx0cCA9IG07XG5cblx0ZG8ge1xuXG5cdFx0aWYgKCBoeCA+PSBwLnggJiYgcC54ID49IG14ICYmIGh4ICE9PSBwLnggJiZcblx0XHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBoeSA8IG15ID8gaHggOiBxeCwgaHksIG14LCBteSwgaHkgPCBteSA/IHF4IDogaHgsIGh5LCBwLngsIHAueSApICkge1xuXG5cdFx0XHR0YW4gPSBNYXRoLmFicyggaHkgLSBwLnkgKSAvICggaHggLSBwLnggKTsgLy8gdGFuZ2VudGlhbFxuXG5cdFx0XHRpZiAoIGxvY2FsbHlJbnNpZGUoIHAsIGhvbGUgKSAmJiAoIHRhbiA8IHRhbk1pbiB8fCAoIHRhbiA9PT0gdGFuTWluICYmICggcC54ID4gbS54IHx8ICggcC54ID09PSBtLnggJiYgc2VjdG9yQ29udGFpbnNTZWN0b3IoIG0sIHAgKSApICkgKSApICkge1xuXG5cdFx0XHRcdG0gPSBwO1xuXHRcdFx0XHR0YW5NaW4gPSB0YW47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IHN0b3AgKTtcblxuXHRyZXR1cm4gbTtcblxufVxuXG4vLyB3aGV0aGVyIHNlY3RvciBpbiB2ZXJ0ZXggbSBjb250YWlucyBzZWN0b3IgaW4gdmVydGV4IHAgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZXNcbmZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKCBtLCBwICkge1xuXG5cdHJldHVybiBhcmVhKCBtLnByZXYsIG0sIHAucHJldiApIDwgMCAmJiBhcmVhKCBwLm5leHQsIG0sIG0ubmV4dCApIDwgMDtcblxufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5mdW5jdGlvbiBpbmRleEN1cnZlKCBzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHRsZXQgcCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRpZiAoIHAueiA9PT0gbnVsbCApIHAueiA9IHpPcmRlciggcC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRwLnByZXZaID0gcC5wcmV2O1xuXHRcdHAubmV4dFogPSBwLm5leHQ7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRwLnByZXZaLm5leHRaID0gbnVsbDtcblx0cC5wcmV2WiA9IG51bGw7XG5cblx0c29ydExpbmtlZCggcCApO1xuXG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHtcblxuXHRsZXQgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG5cdFx0aW5TaXplID0gMTtcblxuXHRkbyB7XG5cblx0XHRwID0gbGlzdDtcblx0XHRsaXN0ID0gbnVsbDtcblx0XHR0YWlsID0gbnVsbDtcblx0XHRudW1NZXJnZXMgPSAwO1xuXG5cdFx0d2hpbGUgKCBwICkge1xuXG5cdFx0XHRudW1NZXJnZXMgKys7XG5cdFx0XHRxID0gcDtcblx0XHRcdHBTaXplID0gMDtcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaW5TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdHBTaXplICsrO1xuXHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0aWYgKCAhIHEgKSBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRxU2l6ZSA9IGluU2l6ZTtcblxuXHRcdFx0d2hpbGUgKCBwU2l6ZSA+IDAgfHwgKCBxU2l6ZSA+IDAgJiYgcSApICkge1xuXG5cdFx0XHRcdGlmICggcFNpemUgIT09IDAgJiYgKCBxU2l6ZSA9PT0gMCB8fCAhIHEgfHwgcC56IDw9IHEueiApICkge1xuXG5cdFx0XHRcdFx0ZSA9IHA7XG5cdFx0XHRcdFx0cCA9IHAubmV4dFo7XG5cdFx0XHRcdFx0cFNpemUgLS07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGUgPSBxO1xuXHRcdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRcdHFTaXplIC0tO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhaWwgKSB0YWlsLm5leHRaID0gZTtcblx0XHRcdFx0ZWxzZSBsaXN0ID0gZTtcblxuXHRcdFx0XHRlLnByZXZaID0gdGFpbDtcblx0XHRcdFx0dGFpbCA9IGU7XG5cblx0XHRcdH1cblxuXHRcdFx0cCA9IHE7XG5cblx0XHR9XG5cblx0XHR0YWlsLm5leHRaID0gbnVsbDtcblx0XHRpblNpemUgKj0gMjtcblxuXHR9IHdoaWxlICggbnVtTWVyZ2VzID4gMSApO1xuXG5cdHJldHVybiBsaXN0O1xuXG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuZnVuY3Rpb24gek9yZGVyKCB4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2Vcblx0eCA9IDMyNzY3ICogKCB4IC0gbWluWCApICogaW52U2l6ZTtcblx0eSA9IDMyNzY3ICogKCB5IC0gbWluWSApICogaW52U2l6ZTtcblxuXHR4ID0gKCB4IHwgKCB4IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eCA9ICggeCB8ICggeCA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHggPSAoIHggfCAoIHggPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHR5ID0gKCB5IHwgKCB5IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eSA9ICggeSB8ICggeSA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHRyZXR1cm4geCB8ICggeSA8PCAxICk7XG5cbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3QoIHN0YXJ0ICkge1xuXG5cdGxldCBwID0gc3RhcnQsXG5cdFx0bGVmdG1vc3QgPSBzdGFydDtcblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnggPCBsZWZ0bW9zdC54IHx8ICggcC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkgKSApIGxlZnRtb3N0ID0gcDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBsZWZ0bW9zdDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSApIHtcblxuXHRyZXR1cm4gKCBjeCAtIHB4ICkgKiAoIGF5IC0gcHkgKSAtICggYXggLSBweCApICogKCBjeSAtIHB5ICkgPj0gMCAmJlxuXHRcdFx0KCBheCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSAtICggYnggLSBweCApICogKCBheSAtIHB5ICkgPj0gMCAmJlxuXHRcdFx0KCBieCAtIHB4ICkgKiAoIGN5IC0gcHkgKSAtICggY3ggLSBweCApICogKCBieSAtIHB5ICkgPj0gMDtcblxufVxuXG4vLyBjaGVjayBpZiBhIGRpYWdvbmFsIGJldHdlZW4gdHdvIHBvbHlnb24gbm9kZXMgaXMgdmFsaWQgKGxpZXMgaW4gcG9seWdvbiBpbnRlcmlvcilcbmZ1bmN0aW9uIGlzVmFsaWREaWFnb25hbCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICEgaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSAmJiAvLyBkb25lcyd0IGludGVyc2VjdCBvdGhlciBlZGdlc1xuXHRcdCggbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSAmJiBtaWRkbGVJbnNpZGUoIGEsIGIgKSAmJiAvLyBsb2NhbGx5IHZpc2libGVcblx0XHQoIGFyZWEoIGEucHJldiwgYSwgYi5wcmV2ICkgfHwgYXJlYSggYSwgYi5wcmV2LCBiICkgKSB8fCAvLyBkb2VzIG5vdCBjcmVhdGUgb3Bwb3NpdGUtZmFjaW5nIHNlY3RvcnNcblx0XHRlcXVhbHMoIGEsIGIgKSAmJiBhcmVhKCBhLnByZXYsIGEsIGEubmV4dCApID4gMCAmJiBhcmVhKCBiLnByZXYsIGIsIGIubmV4dCApID4gMCApOyAvLyBzcGVjaWFsIHplcm8tbGVuZ3RoIGNhc2VcblxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKCBwLCBxLCByICkge1xuXG5cdHJldHVybiAoIHEueSAtIHAueSApICogKCByLnggLSBxLnggKSAtICggcS54IC0gcC54ICkgKiAoIHIueSAtIHEueSApO1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMoIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMoIHAxLCBxMSwgcDIsIHEyICkge1xuXG5cdGNvbnN0IG8xID0gc2lnbiggYXJlYSggcDEsIHExLCBwMiApICk7XG5cdGNvbnN0IG8yID0gc2lnbiggYXJlYSggcDEsIHExLCBxMiApICk7XG5cdGNvbnN0IG8zID0gc2lnbiggYXJlYSggcDIsIHEyLCBwMSApICk7XG5cdGNvbnN0IG80ID0gc2lnbiggYXJlYSggcDIsIHEyLCBxMSApICk7XG5cblx0aWYgKCBvMSAhPT0gbzIgJiYgbzMgIT09IG80ICkgcmV0dXJuIHRydWU7IC8vIGdlbmVyYWwgY2FzZVxuXG5cdGlmICggbzEgPT09IDAgJiYgb25TZWdtZW50KCBwMSwgcDIsIHExICkgKSByZXR1cm4gdHJ1ZTsgLy8gcDEsIHExIGFuZCBwMiBhcmUgY29sbGluZWFyIGFuZCBwMiBsaWVzIG9uIHAxcTFcblx0aWYgKCBvMiA9PT0gMCAmJiBvblNlZ21lbnQoIHAxLCBxMiwgcTEgKSApIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHEyIGFyZSBjb2xsaW5lYXIgYW5kIHEyIGxpZXMgb24gcDFxMVxuXHRpZiAoIG8zID09PSAwICYmIG9uU2VnbWVudCggcDIsIHAxLCBxMiApICkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcDEgYXJlIGNvbGxpbmVhciBhbmQgcDEgbGllcyBvbiBwMnEyXG5cdGlmICggbzQgPT09IDAgJiYgb25TZWdtZW50KCBwMiwgcTEsIHEyICkgKSByZXR1cm4gdHJ1ZTsgLy8gcDIsIHEyIGFuZCBxMSBhcmUgY29sbGluZWFyIGFuZCBxMSBsaWVzIG9uIHAycTJcblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuLy8gZm9yIGNvbGxpbmVhciBwb2ludHMgcCwgcSwgciwgY2hlY2sgaWYgcG9pbnQgcSBsaWVzIG9uIHNlZ21lbnQgcHJcbmZ1bmN0aW9uIG9uU2VnbWVudCggcCwgcSwgciApIHtcblxuXHRyZXR1cm4gcS54IDw9IE1hdGgubWF4KCBwLngsIHIueCApICYmIHEueCA+PSBNYXRoLm1pbiggcC54LCByLnggKSAmJiBxLnkgPD0gTWF0aC5tYXgoIHAueSwgci55ICkgJiYgcS55ID49IE1hdGgubWluKCBwLnksIHIueSApO1xuXG59XG5cbmZ1bmN0aW9uIHNpZ24oIG51bSApIHtcblxuXHRyZXR1cm4gbnVtID4gMCA/IDEgOiBudW0gPCAwID8gLSAxIDogMDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xuZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSB7XG5cblx0bGV0IHAgPSBhO1xuXHRkbyB7XG5cblx0XHRpZiAoIHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuXHRcdFx0XHRpbnRlcnNlY3RzKCBwLCBwLm5leHQsIGEsIGIgKSApIHJldHVybiB0cnVlO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcblxuXHRyZXR1cm4gZmFsc2U7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGxvY2FsbHkgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBsb2NhbGx5SW5zaWRlKCBhLCBiICkge1xuXG5cdHJldHVybiBhcmVhKCBhLnByZXYsIGEsIGEubmV4dCApIDwgMCA/XG5cdFx0YXJlYSggYSwgYiwgYS5uZXh0ICkgPj0gMCAmJiBhcmVhKCBhLCBhLnByZXYsIGIgKSA+PSAwIDpcblx0XHRhcmVhKCBhLCBiLCBhLnByZXYgKSA8IDAgfHwgYXJlYSggYSwgYS5uZXh0LCBiICkgPCAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIHRoZSBtaWRkbGUgcG9pbnQgb2YgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbWlkZGxlSW5zaWRlKCBhLCBiICkge1xuXG5cdGxldCBwID0gYSxcblx0XHRpbnNpZGUgPSBmYWxzZTtcblx0Y29uc3QgcHggPSAoIGEueCArIGIueCApIC8gMixcblx0XHRweSA9ICggYS55ICsgYi55ICkgLyAyO1xuXHRkbyB7XG5cblx0XHRpZiAoICggKCBwLnkgPiBweSApICE9PSAoIHAubmV4dC55ID4gcHkgKSApICYmIHAubmV4dC55ICE9PSBwLnkgJiZcblx0XHRcdFx0KCBweCA8ICggcC5uZXh0LnggLSBwLnggKSAqICggcHkgLSBwLnkgKSAvICggcC5uZXh0LnkgLSBwLnkgKSArIHAueCApIClcblx0XHRcdGluc2lkZSA9ICEgaW5zaWRlO1xuXHRcdHAgPSBwLm5leHQ7XG5cblx0fSB3aGlsZSAoIHAgIT09IGEgKTtcblxuXHRyZXR1cm4gaW5zaWRlO1xuXG59XG5cbi8vIGxpbmsgdHdvIHBvbHlnb24gdmVydGljZXMgd2l0aCBhIGJyaWRnZTsgaWYgdGhlIHZlcnRpY2VzIGJlbG9uZyB0byB0aGUgc2FtZSByaW5nLCBpdCBzcGxpdHMgcG9seWdvbiBpbnRvIHR3bztcbi8vIGlmIG9uZSBiZWxvbmdzIHRvIHRoZSBvdXRlciByaW5nIGFuZCBhbm90aGVyIHRvIGEgaG9sZSwgaXQgbWVyZ2VzIGl0IGludG8gYSBzaW5nbGUgcmluZ1xuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKCBhLCBiICkge1xuXG5cdGNvbnN0IGEyID0gbmV3IE5vZGUoIGEuaSwgYS54LCBhLnkgKSxcblx0XHRiMiA9IG5ldyBOb2RlKCBiLmksIGIueCwgYi55ICksXG5cdFx0YW4gPSBhLm5leHQsXG5cdFx0YnAgPSBiLnByZXY7XG5cblx0YS5uZXh0ID0gYjtcblx0Yi5wcmV2ID0gYTtcblxuXHRhMi5uZXh0ID0gYW47XG5cdGFuLnByZXYgPSBhMjtcblxuXHRiMi5uZXh0ID0gYTI7XG5cdGEyLnByZXYgPSBiMjtcblxuXHRicC5uZXh0ID0gYjI7XG5cdGIyLnByZXYgPSBicDtcblxuXHRyZXR1cm4gYjI7XG5cbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGluc2VydE5vZGUoIGksIHgsIHksIGxhc3QgKSB7XG5cblx0Y29uc3QgcCA9IG5ldyBOb2RlKCBpLCB4LCB5ICk7XG5cblx0aWYgKCAhIGxhc3QgKSB7XG5cblx0XHRwLnByZXYgPSBwO1xuXHRcdHAubmV4dCA9IHA7XG5cblx0fSBlbHNlIHtcblxuXHRcdHAubmV4dCA9IGxhc3QubmV4dDtcblx0XHRwLnByZXYgPSBsYXN0O1xuXHRcdGxhc3QubmV4dC5wcmV2ID0gcDtcblx0XHRsYXN0Lm5leHQgPSBwO1xuXG5cdH1cblxuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKCBwICkge1xuXG5cdHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuXHRwLnByZXYubmV4dCA9IHAubmV4dDtcblxuXHRpZiAoIHAucHJldlogKSBwLnByZXZaLm5leHRaID0gcC5uZXh0Wjtcblx0aWYgKCBwLm5leHRaICkgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG5cbn1cblxuZnVuY3Rpb24gTm9kZSggaSwgeCwgeSApIHtcblxuXHQvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcblx0dGhpcy5pID0gaTtcblxuXHQvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcblx0dGhpcy54ID0geDtcblx0dGhpcy55ID0geTtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcblx0dGhpcy5wcmV2ID0gbnVsbDtcblx0dGhpcy5uZXh0ID0gbnVsbDtcblxuXHQvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG5cdHRoaXMueiA9IG51bGw7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuXHR0aGlzLnByZXZaID0gbnVsbDtcblx0dGhpcy5uZXh0WiA9IG51bGw7XG5cblx0Ly8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcblx0dGhpcy5zdGVpbmVyID0gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkge1xuXG5cdGxldCBzdW0gPSAwO1xuXHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHtcblxuXHRcdHN1bSArPSAoIGRhdGFbIGogXSAtIGRhdGFbIGkgXSApICogKCBkYXRhWyBpICsgMSBdICsgZGF0YVsgaiArIDEgXSApO1xuXHRcdGogPSBpO1xuXG5cdH1cblxuXHRyZXR1cm4gc3VtO1xuXG59XG5cbmNsYXNzIFNoYXBlVXRpbHMge1xuXG5cdC8vIGNhbGN1bGF0ZSBhcmVhIG9mIHRoZSBjb250b3VyIHBvbHlnb25cblxuXHRzdGF0aWMgYXJlYSggY29udG91ciApIHtcblxuXHRcdGNvbnN0IG4gPSBjb250b3VyLmxlbmd0aDtcblx0XHRsZXQgYSA9IDAuMDtcblxuXHRcdGZvciAoIGxldCBwID0gbiAtIDEsIHEgPSAwOyBxIDwgbjsgcCA9IHEgKysgKSB7XG5cblx0XHRcdGEgKz0gY29udG91clsgcCBdLnggKiBjb250b3VyWyBxIF0ueSAtIGNvbnRvdXJbIHEgXS54ICogY29udG91clsgcCBdLnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYSAqIDAuNTtcblxuXHR9XG5cblx0c3RhdGljIGlzQ2xvY2tXaXNlKCBwdHMgKSB7XG5cblx0XHRyZXR1cm4gU2hhcGVVdGlscy5hcmVhKCBwdHMgKSA8IDA7XG5cblx0fVxuXG5cdHN0YXRpYyB0cmlhbmd1bGF0ZVNoYXBlKCBjb250b3VyLCBob2xlcyApIHtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107IC8vIGZsYXQgYXJyYXkgb2YgdmVydGljZXMgbGlrZSBbIHgwLHkwLCB4MSx5MSwgeDIseTIsIC4uLiBdXG5cdFx0Y29uc3QgaG9sZUluZGljZXMgPSBbXTsgLy8gYXJyYXkgb2YgaG9sZSBpbmRpY2VzXG5cdFx0Y29uc3QgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cblxuXHRcdHJlbW92ZUR1cEVuZFB0cyggY29udG91ciApO1xuXHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7XG5cblx0XHQvL1xuXG5cdFx0bGV0IGhvbGVJbmRleCA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0aG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVJbmRpY2VzLnB1c2goIGhvbGVJbmRleCApO1xuXHRcdFx0aG9sZUluZGV4ICs9IGhvbGVzWyBpIF0ubGVuZ3RoO1xuXHRcdFx0YWRkQ29udG91ciggdmVydGljZXMsIGhvbGVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCB0cmlhbmdsZXMgPSBFYXJjdXQudHJpYW5ndWxhdGUoIHZlcnRpY2VzLCBob2xlSW5kaWNlcyApO1xuXG5cdFx0Ly9cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0ZmFjZXMucHVzaCggdHJpYW5nbGVzLnNsaWNlKCBpLCBpICsgMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFjZXM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cEVuZFB0cyggcG9pbnRzICkge1xuXG5cdGNvbnN0IGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdGlmICggbCA+IDIgJiYgcG9pbnRzWyBsIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdHBvaW50cy5wb3AoKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKSB7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udG91ci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueCApO1xuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBleHRydWRlZCBnZW9tZXRyeSBmcm9tIGEgcGF0aCBzaGFwZS5cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXG4gKiAgc3RlcHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIGZvciB6LXNpZGUgZXh0cnVzaW9ucyAvIHVzZWQgZm9yIHN1YmRpdmlkaW5nIHNlZ21lbnRzIG9mIGV4dHJ1ZGUgc3BsaW5lIHRvb1xuICogIGRlcHRoOiA8ZmxvYXQ+LCAvLyBEZXB0aCB0byBleHRydWRlIHRoZSBzaGFwZVxuICpcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxuICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRoZSBvcmlnaW5hbCBzaGFwZSBiZXZlbCBnb2VzXG4gKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbFxuICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSBkb2VzIGJldmVsIHN0YXJ0XG4gKiAgYmV2ZWxTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBiZXZlbCBsYXllcnNcbiAqXG4gKiAgZXh0cnVkZVBhdGg6IDxUSFJFRS5DdXJ2ZT4gLy8gY3VydmUgdG8gZXh0cnVkZSBzaGFwZSBhbG9uZ1xuICpcbiAqICBVVkdlbmVyYXRvcjogPE9iamVjdD4gLy8gb2JqZWN0IHRoYXQgcHJvdmlkZXMgVVYgZ2VuZXJhdG9yIGZ1bmN0aW9uc1xuICpcbiAqIH1cbiAqL1xuXG5jbGFzcyBFeHRydWRlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHNoYXBlcyA9IG5ldyBTaGFwZSggWyBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0gMC41LCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0gMC41LCAtIDAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAtIDAuNSApIF0gKSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdFeHRydWRlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0XHRvcHRpb25zOiBvcHRpb25zXG5cdFx0fTtcblxuXHRcdHNoYXBlcyA9IEFycmF5LmlzQXJyYXkoIHNoYXBlcyApID8gc2hhcGVzIDogWyBzaGFwZXMgXTtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IHZlcnRpY2VzQXJyYXkgPSBbXTtcblx0XHRjb25zdCB1dkFycmF5ID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblx0XHRcdGFkZFNoYXBlKCBzaGFwZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXNBcnJheSwgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkFycmF5LCAyICkgKTtcblxuXHRcdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuXHRcdC8vIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gYWRkU2hhcGUoIHNoYXBlICkge1xuXG5cdFx0XHRjb25zdCBwbGFjZWhvbGRlciA9IFtdO1xuXG5cdFx0XHQvLyBvcHRpb25zXG5cblx0XHRcdGNvbnN0IGN1cnZlU2VnbWVudHMgPSBvcHRpb25zLmN1cnZlU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY3VydmVTZWdtZW50cyA6IDEyO1xuXHRcdFx0Y29uc3Qgc3RlcHMgPSBvcHRpb25zLnN0ZXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnN0ZXBzIDogMTtcblx0XHRcdGxldCBkZXB0aCA9IG9wdGlvbnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGggOiAxO1xuXG5cdFx0XHRsZXQgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcblx0XHRcdGxldCBiZXZlbFRoaWNrbmVzcyA9IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgOiAwLjI7XG5cdFx0XHRsZXQgYmV2ZWxTaXplID0gb3B0aW9ucy5iZXZlbFNpemUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTaXplIDogYmV2ZWxUaGlja25lc3MgLSAwLjE7XG5cdFx0XHRsZXQgYmV2ZWxPZmZzZXQgPSBvcHRpb25zLmJldmVsT2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsT2Zmc2V0IDogMDtcblx0XHRcdGxldCBiZXZlbFNlZ21lbnRzID0gb3B0aW9ucy5iZXZlbFNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2VnbWVudHMgOiAzO1xuXG5cdFx0XHRjb25zdCBleHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGg7XG5cblx0XHRcdGNvbnN0IHV2Z2VuID0gb3B0aW9ucy5VVkdlbmVyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5VVkdlbmVyYXRvciA6IFdvcmxkVVZHZW5lcmF0b3I7XG5cblx0XHRcdC8vIGRlcHJlY2F0ZWQgb3B0aW9uc1xuXG5cdFx0XHRpZiAoIG9wdGlvbnMuYW1vdW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiBhbW91bnQgaGFzIGJlZW4gcmVuYW1lZCB0byBkZXB0aC4nICk7XG5cdFx0XHRcdGRlcHRoID0gb3B0aW9ucy5hbW91bnQ7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IGV4dHJ1ZGVQdHMsIGV4dHJ1ZGVCeVBhdGggPSBmYWxzZTtcblx0XHRcdGxldCBzcGxpbmVUdWJlLCBiaW5vcm1hbCwgbm9ybWFsLCBwb3NpdGlvbjI7XG5cblx0XHRcdGlmICggZXh0cnVkZVBhdGggKSB7XG5cblx0XHRcdFx0ZXh0cnVkZVB0cyA9IGV4dHJ1ZGVQYXRoLmdldFNwYWNlZFBvaW50cyggc3RlcHMgKTtcblxuXHRcdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcblx0XHRcdFx0YmV2ZWxFbmFibGVkID0gZmFsc2U7IC8vIGJldmVscyBub3Qgc3VwcG9ydGVkIGZvciBwYXRoIGV4dHJ1c2lvblxuXG5cdFx0XHRcdC8vIFNFVFVQIFROQiB2YXJpYWJsZXNcblxuXHRcdFx0XHQvLyBUT0RPMSAtIGhhdmUgYSAuaXNDbG9zZWQgaW4gc3BsaW5lP1xuXG5cdFx0XHRcdHNwbGluZVR1YmUgPSBleHRydWRlUGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCBzdGVwcywgZmFsc2UgKTtcblxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhzcGxpbmVUdWJlLCAnc3BsaW5lVHViZScsIHNwbGluZVR1YmUubm9ybWFscy5sZW5ndGgsICdzdGVwcycsIHN0ZXBzLCAnZXh0cnVkZVB0cycsIGV4dHJ1ZGVQdHMubGVuZ3RoKTtcblxuXHRcdFx0XHRiaW5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRcdG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRcdHBvc2l0aW9uMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2FmZWd1YXJkcyBpZiBiZXZlbHMgYXJlIG5vdCBlbmFibGVkXG5cblx0XHRcdGlmICggISBiZXZlbEVuYWJsZWQgKSB7XG5cblx0XHRcdFx0YmV2ZWxTZWdtZW50cyA9IDA7XG5cdFx0XHRcdGJldmVsVGhpY2tuZXNzID0gMDtcblx0XHRcdFx0YmV2ZWxTaXplID0gMDtcblx0XHRcdFx0YmV2ZWxPZmZzZXQgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFZhcmlhYmxlcyBpbml0aWFsaXphdGlvblxuXG5cdFx0XHRjb25zdCBzaGFwZVBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoIGN1cnZlU2VnbWVudHMgKTtcblxuXHRcdFx0bGV0IHZlcnRpY2VzID0gc2hhcGVQb2ludHMuc2hhcGU7XG5cdFx0XHRjb25zdCBob2xlcyA9IHNoYXBlUG9pbnRzLmhvbGVzO1xuXG5cdFx0XHRjb25zdCByZXZlcnNlID0gISBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCB2ZXJ0aWNlcyApO1xuXG5cdFx0XHRpZiAoIHJldmVyc2UgKSB7XG5cblx0XHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHRcdFx0Ly8gTWF5YmUgd2Ugc2hvdWxkIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGp1c3QgdG8gYmUgc2FmZSAuLi5cblxuXHRcdFx0XHRmb3IgKCBsZXQgaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIGFob2xlICkgKSB7XG5cblx0XHRcdFx0XHRcdGhvbGVzWyBoIF0gPSBhaG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblxuXHRcdFx0Y29uc3QgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoIHZlcnRpY2VzLCBob2xlcyApO1xuXG5cdFx0XHQvKiBWZXJ0aWNlcyAqL1xuXG5cdFx0XHRjb25zdCBjb250b3VyID0gdmVydGljZXM7IC8vIHZlcnRpY2VzIGhhcyBhbGwgcG9pbnRzIGJ1dCBjb250b3VyIGhhcyBvbmx5IHBvaW50cyBvZiBjaXJjdW1mZXJlbmNlXG5cblx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5jb25jYXQoIGFob2xlICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRmdW5jdGlvbiBzY2FsZVB0MiggcHQsIHZlYywgc2l6ZSApIHtcblxuXHRcdFx0XHRpZiAoICEgdmVjICkgY29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogdmVjIGRvZXMgbm90IGV4aXN0JyApO1xuXG5cdFx0XHRcdHJldHVybiB2ZWMuY2xvbmUoKS5tdWx0aXBseVNjYWxhciggc2l6ZSApLmFkZCggcHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB2bGVuID0gdmVydGljZXMubGVuZ3RoLCBmbGVuID0gZmFjZXMubGVuZ3RoO1xuXG5cblx0XHRcdC8vIEZpbmQgZGlyZWN0aW9ucyBmb3IgcG9pbnQgbW92ZW1lbnRcblxuXG5cdFx0XHRmdW5jdGlvbiBnZXRCZXZlbFZlYyggaW5QdCwgaW5QcmV2LCBpbk5leHQgKSB7XG5cblx0XHRcdFx0Ly8gY29tcHV0ZXMgZm9yIGluUHQgdGhlIGNvcnJlc3BvbmRpbmcgcG9pbnQgaW5QdCcgb24gYSBuZXcgY29udG91clxuXHRcdFx0XHQvLyAgIHNoaWZ0ZWQgYnkgMSB1bml0IChsZW5ndGggb2Ygbm9ybWFsaXplZCB2ZWN0b3IpIHRvIHRoZSBsZWZ0XG5cdFx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyBpblB0JyBpcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gbGluZXMgcGFyYWxsZWwgdG8gdGhlIHR3b1xuXHRcdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxuXG5cdFx0XHRcdGxldCB2X3RyYW5zX3gsIHZfdHJhbnNfeSwgc2hyaW5rX2J5OyAvLyByZXN1bHRpbmcgdHJhbnNsYXRpb24gdmVjdG9yIGZvciBpblB0XG5cblx0XHRcdFx0Ly8gZ29vZCByZWFkaW5nIGZvciBnZW9tZXRyeSBhbGdvcml0aG1zIChoZXJlOiBsaW5lLWxpbmUgaW50ZXJzZWN0aW9uKVxuXHRcdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxuXG5cdFx0XHRcdGNvbnN0IHZfcHJldl94ID0gaW5QdC54IC0gaW5QcmV2LngsXG5cdFx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcblx0XHRcdFx0Y29uc3Qgdl9uZXh0X3ggPSBpbk5leHQueCAtIGluUHQueCxcblx0XHRcdFx0XHR2X25leHRfeSA9IGluTmV4dC55IC0gaW5QdC55O1xuXG5cdFx0XHRcdGNvbnN0IHZfcHJldl9sZW5zcSA9ICggdl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kgKTtcblxuXHRcdFx0XHQvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzXG5cdFx0XHRcdGNvbnN0IGNvbGxpbmVhcjAgPSAoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggY29sbGluZWFyMCApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHQvLyBub3QgY29sbGluZWFyXG5cblx0XHRcdFx0XHQvLyBsZW5ndGggb2YgdmVjdG9ycyBmb3Igbm9ybWFsaXppbmdcblxuXHRcdFx0XHRcdGNvbnN0IHZfcHJldl9sZW4gPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXHRcdFx0XHRcdGNvbnN0IHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XG5cblx0XHRcdFx0XHQvLyBzaGlmdCBhZGphY2VudCBwb2ludHMgYnkgdW5pdCB2ZWN0b3JzIHRvIHRoZSBsZWZ0XG5cblx0XHRcdFx0XHRjb25zdCBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApO1xuXHRcdFx0XHRcdGNvbnN0IHB0UHJldlNoaWZ0X3kgPSAoIGluUHJldi55ICsgdl9wcmV2X3ggLyB2X3ByZXZfbGVuICk7XG5cblx0XHRcdFx0XHRjb25zdCBwdE5leHRTaGlmdF94ID0gKCBpbk5leHQueCAtIHZfbmV4dF95IC8gdl9uZXh0X2xlbiApO1xuXHRcdFx0XHRcdGNvbnN0IHB0TmV4dFNoaWZ0X3kgPSAoIGluTmV4dC55ICsgdl9uZXh0X3ggLyB2X25leHRfbGVuICk7XG5cblx0XHRcdFx0XHQvLyBzY2FsaW5nIGZhY3RvciBmb3Igdl9wcmV2IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdFx0Y29uc3Qgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cblx0XHRcdFx0XHRcdFx0KCBwdE5leHRTaGlmdF95IC0gcHRQcmV2U2hpZnRfeSApICogdl9uZXh0X3ggKSAvXG5cdFx0XHRcdFx0XHQoIHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94ICk7XG5cblx0XHRcdFx0XHQvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdFx0dl90cmFuc194ID0gKCBwdFByZXZTaGlmdF94ICsgdl9wcmV2X3ggKiBzZiAtIGluUHQueCApO1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9ICggcHRQcmV2U2hpZnRfeSArIHZfcHJldl95ICogc2YgLSBpblB0LnkgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XG5cdFx0XHRcdFx0Ly8gIGJ1dCBwcmV2ZW50IGNyYXp5IHNwaWtlc1xuXHRcdFx0XHRcdGNvbnN0IHZfdHJhbnNfbGVuc3EgPSAoIHZfdHJhbnNfeCAqIHZfdHJhbnNfeCArIHZfdHJhbnNfeSAqIHZfdHJhbnNfeSApO1xuXHRcdFx0XHRcdGlmICggdl90cmFuc19sZW5zcSA8PSAyICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCwgdl90cmFuc195ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfdHJhbnNfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgY29sbGluZWFyIGVkZ2VzXG5cblx0XHRcdFx0XHRsZXQgZGlyZWN0aW9uX2VxID0gZmFsc2U7IC8vIGFzc3VtZXM6IG9wcG9zaXRlXG5cblx0XHRcdFx0XHRpZiAoIHZfcHJldl94ID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHZfbmV4dF94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggTWF0aC5zaWduKCB2X3ByZXZfeSApID09PSBNYXRoLnNpZ24oIHZfbmV4dF95ICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBkaXJlY3Rpb25fZXEgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc2VxdWVuY2VcIik7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3ggPSAtIHZfcHJldl95O1xuXHRcdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzcGlrZVwiKTtcblx0XHRcdFx0XHRcdHZfdHJhbnNfeCA9IHZfcHJldl94O1xuXHRcdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQoIHZfcHJldl9sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IyKCB2X3RyYW5zX3ggLyBzaHJpbmtfYnksIHZfdHJhbnNfeSAvIHNocmlua19ieSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Y29uc3QgY29udG91ck1vdmVtZW50cyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ksaixrJywgaSwgaiAsIGspXG5cblx0XHRcdFx0Y29udG91ck1vdmVtZW50c1sgaSBdID0gZ2V0QmV2ZWxWZWMoIGNvbnRvdXJbIGkgXSwgY29udG91clsgaiBdLCBjb250b3VyWyBrIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBob2xlc01vdmVtZW50cyA9IFtdO1xuXHRcdFx0bGV0IG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcblxuXHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRcdFx0aWYgKCBrID09PSBpbCApIGsgPSAwO1xuXG5cdFx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBhaG9sZVsgaSBdLCBhaG9sZVsgaiBdLCBhaG9sZVsgayBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGhvbGVzTW92ZW1lbnRzLnB1c2goIG9uZUhvbGVNb3ZlbWVudHMgKTtcblx0XHRcdFx0dmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdC8vIExvb3AgYmV2ZWxTZWdtZW50cywgMSBmb3IgdGhlIGZyb250LCAxIGZvciB0aGUgYmFja1xuXG5cdFx0XHRmb3IgKCBsZXQgYiA9IDA7IGIgPCBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xuXG5cdFx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xuXG5cdFx0XHRcdGNvbnN0IHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdFx0Y29uc3QgeiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xuXHRcdFx0XHRjb25zdCBicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGNvbnRvdXJbIGkgXSwgY29udG91ck1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBleHBhbmQgaG9sZXNcblxuXHRcdFx0XHRmb3IgKCBsZXQgaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBzY2FsZVB0MiggYWhvbGVbIGkgXSwgb25lSG9sZU1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdC8vIEJhY2sgZmFjaW5nIHZlcnRpY2VzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAwICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgMCBdLnksIGV4dHJ1ZGVQdHNbIDAgXS54ICk7XG5cblx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyAwIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi5cblx0XHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdFx0Zm9yICggbGV0IHMgPSAxOyBzIDw9IHN0ZXBzOyBzICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCAvIHN0ZXBzICogcyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xuXG5cdFx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgcyBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHRcdC8vZm9yICggYiA9IDE7IGIgPD0gYmV2ZWxTZWdtZW50czsgYiArKyApIHtcblx0XHRcdGZvciAoIGxldCBiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYiAtLSApIHtcblxuXHRcdFx0XHRjb25zdCB0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHRcdGNvbnN0IHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdFx0Y29uc3QgYnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICkgKyBiZXZlbE9mZnNldDtcblxuXHRcdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnggKyB6ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0LyogRmFjZXMgKi9cblxuXHRcdFx0Ly8gVG9wIGFuZCBib3R0b20gZmFjZXNcblxuXHRcdFx0YnVpbGRMaWRGYWNlcygpO1xuXG5cdFx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0XHRidWlsZFNpZGVGYWNlcygpO1xuXG5cblx0XHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcblxuXHRcdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblxuXHRcdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRcdGxldCBsYXllciA9IDA7IC8vIHN0ZXBzICsgMVxuXHRcdFx0XHRcdGxldCBvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAwIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxheWVyID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcblx0XHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAyIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMSBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAyIF0gKyB2bGVuICogc3RlcHMgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENyZWF0ZSBmYWNlcyBmb3IgdGhlIHotc2lkZXMgb2YgdGhlIHNoYXBlXG5cblx0XHRcdGZ1bmN0aW9uIGJ1aWxkU2lkZUZhY2VzKCkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0XHRsZXQgbGF5ZXJvZmZzZXQgPSAwO1xuXHRcdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdFx0Ly8sIHRydWVcblx0XHRcdFx0XHRsYXllcm9mZnNldCArPSBhaG9sZS5sZW5ndGg7XG5cblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMSApO1xuXG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0XHRsZXQgaSA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaiA9IGk7XG5cdFx0XHRcdFx0bGV0IGsgPSBpIC0gMTtcblx0XHRcdFx0XHRpZiAoIGsgPCAwICkgayA9IGNvbnRvdXIubGVuZ3RoIC0gMTtcblxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IHMgPSAwLCBzbCA9ICggc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMiApOyBzIDwgc2w7IHMgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHNsZW4xID0gdmxlbiAqIHM7XG5cdFx0XHRcdFx0XHRjb25zdCBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGEgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMSxcblx0XHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0XHRjID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsXG5cdFx0XHRcdFx0XHRcdGQgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMjtcblxuXHRcdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gdiggeCwgeSwgeiApIHtcblxuXHRcdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB4ICk7XG5cdFx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeiApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlVG9wVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdFx0YWRkVVYoIHV2c1sgMCBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlU2lkZVdhbGxVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAwIF0gKTtcblx0XHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMSBdICk7XG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVVYoIHZlY3RvcjIgKSB7XG5cblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXHRcdGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBhcmFtZXRlcnMub3B0aW9ucztcblxuXHRcdHJldHVybiB0b0pTT04kMSggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSwgc2hhcGVzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlTaGFwZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGV4dHJ1ZGVQYXRoID0gZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBuZXcgQ3VydmVzWyBleHRydWRlUGF0aC50eXBlIF0oKS5mcm9tSlNPTiggZXh0cnVkZVBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KCBnZW9tZXRyeVNoYXBlcywgZGF0YS5vcHRpb25zICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IFdvcmxkVVZHZW5lcmF0b3IgPSB7XG5cblx0Z2VuZXJhdGVUb3BVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMgKSB7XG5cblx0XHRjb25zdCBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdGNvbnN0IGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0Y29uc3QgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0Y29uc3QgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRuZXcgVmVjdG9yMiggYV94LCBhX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIGJfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgY195IClcblx0XHRdO1xuXG5cdH0sXG5cblx0Z2VuZXJhdGVTaWRlV2FsbFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QywgaW5kZXhEICkge1xuXG5cdFx0Y29uc3QgYV94ID0gdmVydGljZXNbIGluZGV4QSAqIDMgXTtcblx0XHRjb25zdCBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHRjb25zdCBhX3ogPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDIgXTtcblx0XHRjb25zdCBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdGNvbnN0IGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGJfeiA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMiBdO1xuXHRcdGNvbnN0IGNfeCA9IHZlcnRpY2VzWyBpbmRleEMgKiAzIF07XG5cdFx0Y29uc3QgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cdFx0Y29uc3QgY196ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAyIF07XG5cdFx0Y29uc3QgZF94ID0gdmVydGljZXNbIGluZGV4RCAqIDMgXTtcblx0XHRjb25zdCBkX3kgPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDEgXTtcblx0XHRjb25zdCBkX3ogPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDIgXTtcblxuXHRcdGlmICggTWF0aC5hYnMoIGFfeSAtIGJfeSApIDwgTWF0aC5hYnMoIGFfeCAtIGJfeCApICkge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV94LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3gsIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeCwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF94LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRuZXcgVmVjdG9yMiggYV95LCAxIC0gYV96ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBiX3ksIDEgLSBiX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGNfeSwgMSAtIGNfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggZF95LCAxIC0gZF96IClcblx0XHRcdF07XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG5mdW5jdGlvbiB0b0pTT04kMSggc2hhcGVzLCBvcHRpb25zLCBkYXRhICkge1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdGlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aC50b0pTT04oKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG5jbGFzcyBJY29zYWhlZHJvbkdlb21ldHJ5IGV4dGVuZHMgUG9seWhlZHJvbkdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdGNvbnN0IHQgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0LSAxLCB0LCAwLCBcdDEsIHQsIDAsIFx0LSAxLCAtIHQsIDAsIFx0MSwgLSB0LCAwLFxuXHRcdFx0MCwgLSAxLCB0LCBcdDAsIDEsIHQsXHQwLCAtIDEsIC0gdCwgXHQwLCAxLCAtIHQsXG5cdFx0XHR0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDAsIDExLCA1LCBcdDAsIDUsIDEsIFx0MCwgMSwgNywgXHQwLCA3LCAxMCwgXHQwLCAxMCwgMTEsXG5cdFx0XHQxLCA1LCA5LCBcdDUsIDExLCA0LFx0MTEsIDEwLCAyLFx0MTAsIDcsIDYsXHQ3LCAxLCA4LFxuXHRcdFx0MywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxuXHRcdFx0NCwgOSwgNSwgXHQyLCA0LCAxMSxcdDYsIDIsIDEwLFx0OCwgNiwgNyxcdDksIDgsIDFcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRkZXRhaWw6IGRldGFpbFxuXHRcdH07XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgSWNvc2FoZWRyb25HZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlsICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIExhdGhlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFsgbmV3IFZlY3RvcjIoIDAsIDAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAwICksIG5ldyBWZWN0b3IyKCAwLCAtIDAuNSApIF0sIHNlZ21lbnRzID0gMTIsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xhdGhlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHRcdH07XG5cblx0XHRzZWdtZW50cyA9IE1hdGguZmxvb3IoIHNlZ21lbnRzICk7XG5cblx0XHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXG5cblx0XHRwaGlMZW5ndGggPSBjbGFtcCggcGhpTGVuZ3RoLCAwLCBNYXRoLlBJICogMiApO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cdFx0Y29uc3QgaW5pdE5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGN1ck5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgcHJldk5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IGR4ID0gMDtcblx0XHRsZXQgZHkgPSAwO1xuXG5cdFx0Ly8gcHJlLWNvbXB1dGUgbm9ybWFscyBmb3IgaW5pdGlhbCBcIm1lcmlkaWFuXCJcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdHN3aXRjaCAoIGogKSB7XG5cblx0XHRcdFx0Y2FzZSAwOlx0XHRcdFx0Ly8gc3BlY2lhbCBoYW5kbGluZyBmb3IgMXN0IHZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRwcmV2Tm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXG5cdFx0XHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdFx0aW5pdE5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAoIHBvaW50cy5sZW5ndGggLSAxICk6XHQvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBsYXN0IFZlcnRleCBvbiBwYXRoXG5cblx0XHRcdFx0XHRpbml0Tm9ybWFscy5wdXNoKCBwcmV2Tm9ybWFsLngsIHByZXZOb3JtYWwueSwgcHJldk5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0Olx0XHRcdC8vIGRlZmF1bHQgaGFuZGxpbmcgZm9yIGFsbCB2ZXJ0aWNlcyBpbiBiZXR3ZWVuXG5cblx0XHRcdFx0XHRkeCA9IHBvaW50c1sgaiArIDEgXS54IC0gcG9pbnRzWyBqIF0ueDtcblx0XHRcdFx0XHRkeSA9IHBvaW50c1sgaiArIDEgXS55IC0gcG9pbnRzWyBqIF0ueTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ID0gZHkgKiAxLjA7XG5cdFx0XHRcdFx0bm9ybWFsLnkgPSAtIGR4O1xuXHRcdFx0XHRcdG5vcm1hbC56ID0gZHkgKiAwLjA7XG5cblx0XHRcdFx0XHRjdXJOb3JtYWwuY29weSggbm9ybWFsICk7XG5cblx0XHRcdFx0XHRub3JtYWwueCArPSBwcmV2Tm9ybWFsLng7XG5cdFx0XHRcdFx0bm9ybWFsLnkgKz0gcHJldk5vcm1hbC55O1xuXHRcdFx0XHRcdG5vcm1hbC56ICs9IHByZXZOb3JtYWwuejtcblxuXHRcdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRcdGluaXROb3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHRcdHByZXZOb3JtYWwuY29weSggY3VyTm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCB1dnMgYW5kIG5vcm1hbHNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xuXG5cdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbiggcGhpICk7XG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSBwb2ludHNbIGogXS54ICogc2luO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHRcdHZlcnRleC56ID0gcG9pbnRzWyBqIF0ueCAqIGNvcztcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1di54ID0gaSAvIHNlZ21lbnRzO1xuXHRcdFx0XHR1di55ID0gaiAvICggcG9pbnRzLmxlbmd0aCAtIDEgKTtcblxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdGNvbnN0IHggPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBzaW47XG5cdFx0XHRcdGNvbnN0IHkgPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAxIF07XG5cdFx0XHRcdGNvbnN0IHogPSBpbml0Tm9ybWFsc1sgMyAqIGogKyAwIF0gKiBjb3M7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCB4LCB5LCB6ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDtcblxuXHRcdFx0XHRjb25zdCBhID0gYmFzZTtcblx0XHRcdFx0Y29uc3QgYiA9IGJhc2UgKyBwb2ludHMubGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBjID0gYmFzZSArIHBvaW50cy5sZW5ndGggKyAxO1xuXHRcdFx0XHRjb25zdCBkID0gYmFzZSArIDE7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBjLCBkLCBiICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExhdGhlR2VvbWV0cnkoIGRhdGEucG9pbnRzLCBkYXRhLnNlZ21lbnRzLCBkYXRhLnBoaVN0YXJ0LCBkYXRhLnBoaUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBPY3RhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQxLCAwLCAwLCBcdC0gMSwgMCwgMCxcdDAsIDEsIDAsXG5cdFx0XHQwLCAtIDEsIDAsIFx0MCwgMCwgMSxcdDAsIDAsIC0gMVxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdFx0MCwgNSwgMixcdDEsIDIsIDUsXHQxLCA1LCAzLFxuXHRcdFx0MSwgMywgNCxcdDEsIDQsIDJcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBPY3RhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBSaW5nR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIGlubmVyUmFkaXVzID0gMC41LCBvdXRlclJhZGl1cyA9IDEsIHRoZXRhU2VnbWVudHMgPSA4LCBwaGlTZWdtZW50cyA9IDEsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKiAyICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdSaW5nR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxuXHRcdFx0dGhldGFTZWdtZW50czogdGhldGFTZWdtZW50cyxcblx0XHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0XHR9O1xuXG5cdFx0dGhldGFTZWdtZW50cyA9IE1hdGgubWF4KCAzLCB0aGV0YVNlZ21lbnRzICk7XG5cdFx0cGhpU2VnbWVudHMgPSBNYXRoLm1heCggMSwgcGhpU2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIHNvbWUgaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0bGV0IHJhZGl1cyA9IGlubmVyUmFkaXVzO1xuXHRcdGNvbnN0IHJhZGl1c1N0ZXAgPSAoICggb3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cyApIC8gcGhpU2VnbWVudHMgKTtcblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gdmFsdWVzIGFyZSBnZW5lcmF0ZSBmcm9tIHRoZSBpbnNpZGUgb2YgdGhlIHJpbmcgdG8gdGhlIG91dHNpZGVcblxuXHRcdFx0XHRjb25zdCBzZWdtZW50ID0gdGhldGFTdGFydCArIGkgLyB0aGV0YVNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXYueCA9ICggdmVydGV4LnggLyBvdXRlclJhZGl1cyArIDEgKSAvIDI7XG5cdFx0XHRcdHV2LnkgPSAoIHZlcnRleC55IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5jcmVhc2UgdGhlIHJhZGl1cyBmb3IgbmV4dCByb3cgb2YgdmVydGljZXNcblxuXHRcdFx0cmFkaXVzICs9IHJhZGl1c1N0ZXA7XG5cblx0XHR9XG5cblx0XHQvLyBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Y29uc3QgdGhldGFTZWdtZW50TGV2ZWwgPSBqICogKCB0aGV0YVNlZ21lbnRzICsgMSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHNlZ21lbnQgPSBpICsgdGhldGFTZWdtZW50TGV2ZWw7XG5cblx0XHRcdFx0Y29uc3QgYSA9IHNlZ21lbnQ7XG5cdFx0XHRcdGNvbnN0IGIgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDE7XG5cdFx0XHRcdGNvbnN0IGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7XG5cdFx0XHRcdGNvbnN0IGQgPSBzZWdtZW50ICsgMTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0fVxuXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUmluZ0dlb21ldHJ5KCBkYXRhLmlubmVyUmFkaXVzLCBkYXRhLm91dGVyUmFkaXVzLCBkYXRhLnRoZXRhU2VnbWVudHMsIGRhdGEucGhpU2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBTaGFwZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCBzaGFwZXMgPSBuZXcgU2hhcGUoIFsgbmV3IFZlY3RvcjIoIDAsIDAuNSApLCBuZXcgVmVjdG9yMiggLSAwLjUsIC0gMC41ICksIG5ldyBWZWN0b3IyKCAwLjUsIC0gMC41ICkgXSApLCBjdXJ2ZVNlZ21lbnRzID0gMTIgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdTaGFwZUdlb21ldHJ5JztcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHNoYXBlczogc2hhcGVzLFxuXHRcdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xuXHRcdH07XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRsZXQgZ3JvdXBTdGFydCA9IDA7XG5cdFx0bGV0IGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0Ly8gYWxsb3cgc2luZ2xlIGFuZCBhcnJheSB2YWx1ZXMgZm9yIFwic2hhcGVzXCIgcGFyYW1ldGVyXG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0YWRkU2hhcGUoIHNoYXBlcyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc2hhcGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRhZGRTaGFwZSggc2hhcGVzWyBpIF0gKTtcblxuXHRcdFx0XHR0aGlzLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCBpICk7IC8vIGVuYWJsZXMgTXVsdGlNYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXHRcdFx0XHRncm91cENvdW50ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblxuXHRcdC8vIGhlbHBlciBmdW5jdGlvbnNcblxuXHRcdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXhPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xuXHRcdFx0Y29uc3QgcG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0XHRsZXQgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcblx0XHRcdGNvbnN0IHNoYXBlSG9sZXMgPSBwb2ludHMuaG9sZXM7XG5cblx0XHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlVmVydGljZXMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0c2hhcGVWZXJ0aWNlcyA9IHNoYXBlVmVydGljZXMucmV2ZXJzZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlSG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZUhvbGUgPSBzaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZUhvbGUgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHNoYXBlSG9sZXNbIGkgXSA9IHNoYXBlSG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZhY2VzID0gU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKCBzaGFwZVZlcnRpY2VzLCBzaGFwZUhvbGVzICk7XG5cblx0XHRcdC8vIGpvaW4gdmVydGljZXMgb2YgaW5uZXIgYW5kIG91dGVyIHBhdGhzIHRvIGEgc2luZ2xlIGFycmF5XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlSG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZUhvbGUgPSBzaGFwZUhvbGVzWyBpIF07XG5cdFx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gdmVydGljZXMsIG5vcm1hbHMsIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzaGFwZVZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdmVydGV4ID0gc2hhcGVWZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgMCApO1xuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0XHRcdFx0dXZzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSApOyAvLyB3b3JsZCB1dnNcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbmNpZGVzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdFx0Y29uc3QgYSA9IGZhY2VbIDAgXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBiID0gZmFjZVsgMSBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGMgPSBmYWNlWyAyIF0gKyBpbmRleE9mZnNldDtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGMgKTtcblx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0XHRyZXR1cm4gdG9KU09OKCBzaGFwZXMsIGRhdGEgKTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KCBnZW9tZXRyeVNoYXBlcywgZGF0YS5jdXJ2ZVNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHRvSlNPTiggc2hhcGVzLCBkYXRhICkge1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbmNsYXNzIFNwaGVyZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCB3aWR0aFNlZ21lbnRzID0gMzIsIGhlaWdodFNlZ21lbnRzID0gMTYsIHBoaVN0YXJ0ID0gMCwgcGhpTGVuZ3RoID0gTWF0aC5QSSAqIDIsIHRoZXRhU3RhcnQgPSAwLCB0aGV0YUxlbmd0aCA9IE1hdGguUEkgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdTcGhlcmVHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0XHR9O1xuXG5cdFx0d2lkdGhTZWdtZW50cyA9IE1hdGgubWF4KCAzLCBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgKTtcblx0XHRoZWlnaHRTZWdtZW50cyA9IE1hdGgubWF4KCAyLCBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApICk7XG5cblx0XHRjb25zdCB0aGV0YUVuZCA9IE1hdGgubWluKCB0aGV0YVN0YXJ0ICsgdGhldGFMZW5ndGgsIE1hdGguUEkgKTtcblxuXHRcdGxldCBpbmRleCA9IDA7XG5cdFx0Y29uc3QgZ3JpZCA9IFtdO1xuXG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gYnVmZmVyc1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtdO1xuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IHV2cyA9IFtdO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPD0gaGVpZ2h0U2VnbWVudHM7IGl5ICsrICkge1xuXG5cdFx0XHRjb25zdCB2ZXJ0aWNlc1JvdyA9IFtdO1xuXG5cdFx0XHRjb25zdCB2ID0gaXkgLyBoZWlnaHRTZWdtZW50cztcblxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlIGZvciB0aGUgcG9sZXNcblxuXHRcdFx0bGV0IHVPZmZzZXQgPSAwO1xuXG5cdFx0XHRpZiAoIGl5ID09IDAgJiYgdGhldGFTdGFydCA9PSAwICkge1xuXG5cdFx0XHRcdHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpeSA9PSBoZWlnaHRTZWdtZW50cyAmJiB0aGV0YUVuZCA9PSBNYXRoLlBJICkge1xuXG5cdFx0XHRcdHVPZmZzZXQgPSAtIDAuNSAvIHdpZHRoU2VnbWVudHM7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPD0gd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdSA9IGl4IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IC0gcmFkaXVzICogTWF0aC5jb3MoIHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCApICogTWF0aC5zaW4oIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC5jb3B5KCB2ZXJ0ZXggKS5ub3JtYWxpemUoKTtcblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggdSArIHVPZmZzZXQsIDEgLSB2ICk7XG5cblx0XHRcdFx0dmVydGljZXNSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XG5cblx0XHR9XG5cblx0XHQvLyBpbmRpY2VzXG5cblx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCB3aWR0aFNlZ21lbnRzOyBpeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gZ3JpZFsgaXkgXVsgaXggKyAxIF07XG5cdFx0XHRcdGNvbnN0IGIgPSBncmlkWyBpeSBdWyBpeCBdO1xuXHRcdFx0XHRjb25zdCBjID0gZ3JpZFsgaXkgKyAxIF1bIGl4IF07XG5cdFx0XHRcdGNvbnN0IGQgPSBncmlkWyBpeSArIDEgXVsgaXggKyAxIF07XG5cblx0XHRcdFx0aWYgKCBpeSAhPT0gMCB8fCB0aGV0YVN0YXJ0ID4gMCApIGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNwaGVyZUdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS53aWR0aFNlZ21lbnRzLCBkYXRhLmhlaWdodFNlZ21lbnRzLCBkYXRhLnBoaVN0YXJ0LCBkYXRhLnBoaUxlbmd0aCwgZGF0YS50aGV0YVN0YXJ0LCBkYXRhLnRoZXRhTGVuZ3RoICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFRldHJhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQxLCAxLCAxLCBcdC0gMSwgLSAxLCAxLCBcdC0gMSwgMSwgLSAxLCBcdDEsIC0gMSwgLSAxXG5cdFx0XTtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXG5cdFx0XHQyLCAxLCAwLCBcdDAsIDMsIDIsXHQxLCAzLCAwLFx0MiwgMywgMVxuXHRcdF07XG5cblx0XHRzdXBlciggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25HZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBUZXRyYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgVG9ydXNHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgdHViZSA9IDAuNCwgcmFkaWFsU2VnbWVudHMgPSA4LCB0dWJ1bGFyU2VnbWVudHMgPSA2LCBhcmMgPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy50eXBlID0gJ1RvcnVzR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR0dWJlOiB0dWJlLFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRhcmM6IGFyY1xuXHRcdH07XG5cblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XG5cdFx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIGFyYztcblx0XHRcdFx0Y29uc3QgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRjZW50ZXIueCA9IHJhZGl1cyAqIE1hdGguY29zKCB1ICk7XG5cdFx0XHRcdGNlbnRlci55ID0gcmFkaXVzICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdFx0Y29uc3QgYSA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGkgLSAxO1xuXHRcdFx0XHRjb25zdCBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTtcblx0XHRcdFx0Y29uc3QgYyA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblx0XHRcdFx0Y29uc3QgZCA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGk7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFRvcnVzR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLnR1YmUsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEudHVidWxhclNlZ21lbnRzLCBkYXRhLmFyYyApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBUb3J1c0tub3RHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgdHViZSA9IDAuNCwgdHVidWxhclNlZ21lbnRzID0gNjQsIHJhZGlhbFNlZ21lbnRzID0gOCwgcCA9IDIsIHEgPSAzICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR0dWJlOiB0dWJlLFxuXHRcdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRwOiBwLFxuXHRcdFx0cTogcVxuXHRcdH07XG5cblx0XHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRjb25zdCBQMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgUDIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgQiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgVCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgTiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArKyBpICkge1xuXG5cdFx0XHQvLyB0aGUgcmFkaWFuIFwidVwiIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmUgb2YgdGhlIGN1cnJlbnQgdHVidWxhciBzZWdlbWVudFxuXG5cdFx0XHRjb25zdCB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0Ly8gbm93IHdlIGNhbGN1bGF0ZSB0d28gcG9pbnRzLiBQMSBpcyBvdXIgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmUsIFAyIGlzIGEgbGl0dGxlIGZhcnRoZXIgYWhlYWQuXG5cdFx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXG5cblx0XHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdFx0Y2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1ICsgMC4wMSwgcCwgcSwgcmFkaXVzLCBQMiApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcblxuXHRcdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRcdE4uYWRkVmVjdG9ycyggUDIsIFAxICk7XG5cdFx0XHRCLmNyb3NzVmVjdG9ycyggVCwgTiApO1xuXHRcdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdFx0Ly8gbm9ybWFsaXplIEIsIE4uIFQgY2FuIGJlIGlnbm9yZWQsIHdlIGRvbid0IHVzZSBpdFxuXG5cdFx0XHRCLm5vcm1hbGl6ZSgpO1xuXHRcdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHRcdC8vIG5vdyBjYWxjdWxhdGUgdGhlIHZlcnRpY2VzLiB0aGV5IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhbiBleHRydXNpb24gb2YgdGhlIHRvcnVzIGN1cnZlLlxuXHRcdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cdFx0XHRcdGNvbnN0IGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdFx0Y29uc3QgY3kgPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHRcdC8vIGZpcnN0IHdlIG9yaWVudCB0aGUgZXh0cnVzaW9uIHdpdGggb3VyIGJhc2lzIHZlY3RvcywgdGhlbiB3ZSBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlXG5cblx0XHRcdFx0dmVydGV4LnggPSBQMS54ICsgKCBjeCAqIE4ueCArIGN5ICogQi54ICk7XG5cdFx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IFAxLnogKyAoIGN4ICogTi56ICsgY3kgKiBCLnogKTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxuXG5cdFx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKCB2ZXJ0ZXgsIFAxICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdFx0Y29uc3QgYSA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyAoIGkgLSAxICk7XG5cdFx0XHRcdGNvbnN0IGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0Y29uc3QgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0Y29uc3QgZCA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRcdC8vIHRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmVcblxuXHRcdGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHtcblxuXHRcdFx0Y29uc3QgY3UgPSBNYXRoLmNvcyggdSApO1xuXHRcdFx0Y29uc3Qgc3UgPSBNYXRoLnNpbiggdSApO1xuXHRcdFx0Y29uc3QgcXVPdmVyUCA9IHEgLyBwICogdTtcblx0XHRcdGNvbnN0IGNzID0gTWF0aC5jb3MoIHF1T3ZlclAgKTtcblxuXHRcdFx0cG9zaXRpb24ueCA9IHJhZGl1cyAqICggMiArIGNzICkgKiAwLjUgKiBjdTtcblx0XHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoIDIgKyBjcyApICogc3UgKiAwLjU7XG5cdFx0XHRwb3NpdGlvbi56ID0gcmFkaXVzICogTWF0aC5zaW4oIHF1T3ZlclAgKSAqIDAuNTtcblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBUb3J1c0tub3RHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEudHViZSwgZGF0YS50dWJ1bGFyU2VnbWVudHMsIGRhdGEucmFkaWFsU2VnbWVudHMsIGRhdGEucCwgZGF0YS5xICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIFR1YmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggcGF0aCA9IG5ldyBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMoIG5ldyBWZWN0b3IzKCAtIDEsIC0gMSwgMCApLCBuZXcgVmVjdG9yMyggLSAxLCAxLCAwICksIG5ldyBWZWN0b3IzKCAxLCAxLCAwICkgKSwgdHVidWxhclNlZ21lbnRzID0gNjQsIHJhZGl1cyA9IDEsIHJhZGlhbFNlZ21lbnRzID0gOCwgY2xvc2VkID0gZmFsc2UgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMudHlwZSA9ICdUdWJlR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cGF0aDogcGF0aCxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRjbG9zZWQ6IGNsb3NlZFxuXHRcdH07XG5cblx0XHRjb25zdCBmcmFtZXMgPSBwYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHR1YnVsYXJTZWdtZW50cywgY2xvc2VkICk7XG5cblx0XHQvLyBleHBvc2UgaW50ZXJuYWxzXG5cblx0XHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHRcdHRoaXMubm9ybWFscyA9IGZyYW1lcy5ub3JtYWxzO1xuXHRcdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0bGV0IFAgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gYnVmZmVyXG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cblx0XHQvLyBjcmVhdGUgYnVmZmVyIGRhdGFcblxuXHRcdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHQvLyBmdW5jdGlvbnNcblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlQnVmZmVyRGF0YSgpIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBub3QgY2xvc2VkLCBnZW5lcmF0ZSB0aGUgbGFzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHNcblx0XHRcdC8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoXG5cdFx0XHQvL1xuXHRcdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgZHVwbGljYXRlIHRoZSBmaXJzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHMgKHV2cyB3aWxsIGRpZmZlcilcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcblxuXHRcdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHRcdC8vIHRoaXMgbWFrZXMgaXQgZWFzeSBjb21wdXRlIGNvcnJlY3QgdmFsdWVzIGZvciBjbG9zZWQgZ2VvbWV0cmllc1xuXG5cdFx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0XHRnZW5lcmF0ZUluZGljZXMoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdFx0Ly8gd2UgdXNlIGdldFBvaW50QXQgdG8gc2FtcGxlIGV2ZW5seSBkaXN0cmlidXRlZCBwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gcGF0aFxuXG5cdFx0XHRQID0gcGF0aC5nZXRQb2ludEF0KCBpIC8gdHVidWxhclNlZ21lbnRzLCBQICk7XG5cblx0XHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0XHRjb25zdCBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcblx0XHRcdGNvbnN0IEIgPSBmcmFtZXMuYmlub3JtYWxzWyBpIF07XG5cblx0XHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdFx0Y29uc3QgY29zID0gLSBNYXRoLmNvcyggdiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC54ID0gKCBjb3MgKiBOLnggKyBzaW4gKiBCLnggKTtcblx0XHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xuXHRcdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IFAueCArIHJhZGl1cyAqIG5vcm1hbC54O1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVJbmRpY2VzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0XHRjb25zdCBjID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlVVZzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRcdHV2LnggPSBpIC8gdHVidWxhclNlZ21lbnRzO1xuXHRcdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnBhdGggPSB0aGlzLnBhcmFtZXRlcnMucGF0aC50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHQvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGJ1aWx0LWluIGN1cnZlcyAoZS5nLiBDYXRtdWxsUm9tQ3VydmUzKS5cblx0XHQvLyBVc2VyIGRlZmluZWQgY3VydmVzIG9yIGluc3RhbmNlcyBvZiBDdXJ2ZVBhdGggd2lsbCBub3QgYmUgZGVzZXJpYWxpemVkLlxuXHRcdHJldHVybiBuZXcgVHViZUdlb21ldHJ5KFxuXHRcdFx0bmV3IEN1cnZlc1sgZGF0YS5wYXRoLnR5cGUgXSgpLmZyb21KU09OKCBkYXRhLnBhdGggKSxcblx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxuXHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0ZGF0YS5jbG9zZWRcblx0XHQpO1xuXG5cdH1cblxufVxuXG5jbGFzcyBXaXJlZnJhbWVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnR5cGUgPSAnV2lyZWZyYW1lR2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5XG5cdFx0fTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IG51bGwgKSB7XG5cblx0XHRcdC8vIGJ1ZmZlclxuXG5cdFx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdFx0Y29uc3QgZWRnZXMgPSBuZXcgU2V0KCk7XG5cblx0XHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgZW5kID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHRjb25zdCBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdGxldCBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdFx0aWYgKCBncm91cHMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdFx0Z3JvdXBzID0gWyB7IHN0YXJ0OiAwLCBjb3VudDogaW5kaWNlcy5jb3VudCwgbWF0ZXJpYWxJbmRleDogMCB9IF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdFx0Zm9yICggbGV0IG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBvIF07XG5cblx0XHRcdFx0XHRjb25zdCBncm91cFN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBDb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBncm91cFN0YXJ0LCBsID0gKCBncm91cFN0YXJ0ICsgZ3JvdXBDb3VudCApOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MSA9IGluZGljZXMuZ2V0WCggaSArIGogKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gaW5kaWNlcy5nZXRYKCBpICsgKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHN0YXJ0LngsIHN0YXJ0LnksIHN0YXJ0LnogKTtcblx0XHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBlbmQueCwgZW5kLnksIGVuZC56ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gdGhyZWUgZWRnZXMgcGVyIHRyaWFuZ2xlLCBhbiBlZGdlIGlzIHJlcHJlc2VudGVkIGFzIChpbmRleDEsIGluZGV4Milcblx0XHRcdFx0XHRcdC8vIGUuZy4gdGhlIGZpcnN0IHRyaWFuZ2xlIGhhcyB0aGUgZm9sbG93aW5nIGVkZ2VzOiAoMCwxKSwoMSwyKSwoMiwwKVxuXG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBzdGFydC54LCBzdGFydC55LCBzdGFydC56ICk7XG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIGVuZC54LCBlbmQueSwgZW5kLnogKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gaXNVbmlxdWVFZGdlKCBzdGFydCwgZW5kLCBlZGdlcyApIHtcblxuXHRjb25zdCBoYXNoMSA9IGAke3N0YXJ0Lnh9LCR7c3RhcnQueX0sJHtzdGFydC56fS0ke2VuZC54fSwke2VuZC55fSwke2VuZC56fWA7XG5cdGNvbnN0IGhhc2gyID0gYCR7ZW5kLnh9LCR7ZW5kLnl9LCR7ZW5kLnp9LSR7c3RhcnQueH0sJHtzdGFydC55fSwke3N0YXJ0Lnp9YDsgLy8gY29pbmNpZGVudCBlZGdlXG5cblx0aWYgKCBlZGdlcy5oYXMoIGhhc2gxICkgPT09IHRydWUgfHwgZWRnZXMuaGFzKCBoYXNoMiApID09PSB0cnVlICkge1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRlZGdlcy5hZGQoIGhhc2gxICk7XG5cdFx0ZWRnZXMuYWRkKCBoYXNoMiApO1xuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxufVxuXG52YXIgR2VvbWV0cmllcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRCb3hHZW9tZXRyeTogQm94R2VvbWV0cnksXG5cdEJveEJ1ZmZlckdlb21ldHJ5OiBCb3hHZW9tZXRyeSxcblx0Q2lyY2xlR2VvbWV0cnk6IENpcmNsZUdlb21ldHJ5LFxuXHRDaXJjbGVCdWZmZXJHZW9tZXRyeTogQ2lyY2xlR2VvbWV0cnksXG5cdENvbmVHZW9tZXRyeTogQ29uZUdlb21ldHJ5LFxuXHRDb25lQnVmZmVyR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcblx0Q3lsaW5kZXJHZW9tZXRyeTogQ3lsaW5kZXJHZW9tZXRyeSxcblx0Q3lsaW5kZXJCdWZmZXJHZW9tZXRyeTogQ3lsaW5kZXJHZW9tZXRyeSxcblx0RG9kZWNhaGVkcm9uR2VvbWV0cnk6IERvZGVjYWhlZHJvbkdlb21ldHJ5LFxuXHREb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeTogRG9kZWNhaGVkcm9uR2VvbWV0cnksXG5cdEVkZ2VzR2VvbWV0cnk6IEVkZ2VzR2VvbWV0cnksXG5cdEV4dHJ1ZGVHZW9tZXRyeTogRXh0cnVkZUdlb21ldHJ5LFxuXHRFeHRydWRlQnVmZmVyR2VvbWV0cnk6IEV4dHJ1ZGVHZW9tZXRyeSxcblx0SWNvc2FoZWRyb25HZW9tZXRyeTogSWNvc2FoZWRyb25HZW9tZXRyeSxcblx0SWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeTogSWNvc2FoZWRyb25HZW9tZXRyeSxcblx0TGF0aGVHZW9tZXRyeTogTGF0aGVHZW9tZXRyeSxcblx0TGF0aGVCdWZmZXJHZW9tZXRyeTogTGF0aGVHZW9tZXRyeSxcblx0T2N0YWhlZHJvbkdlb21ldHJ5OiBPY3RhaGVkcm9uR2VvbWV0cnksXG5cdE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTogT2N0YWhlZHJvbkdlb21ldHJ5LFxuXHRQbGFuZUdlb21ldHJ5OiBQbGFuZUdlb21ldHJ5LFxuXHRQbGFuZUJ1ZmZlckdlb21ldHJ5OiBQbGFuZUdlb21ldHJ5LFxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBQb2x5aGVkcm9uR2VvbWV0cnksXG5cdFJpbmdHZW9tZXRyeTogUmluZ0dlb21ldHJ5LFxuXHRSaW5nQnVmZmVyR2VvbWV0cnk6IFJpbmdHZW9tZXRyeSxcblx0U2hhcGVHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcblx0U2hhcGVCdWZmZXJHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcblx0U3BoZXJlR2VvbWV0cnk6IFNwaGVyZUdlb21ldHJ5LFxuXHRTcGhlcmVCdWZmZXJHZW9tZXRyeTogU3BoZXJlR2VvbWV0cnksXG5cdFRldHJhaGVkcm9uR2VvbWV0cnk6IFRldHJhaGVkcm9uR2VvbWV0cnksXG5cdFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IFRldHJhaGVkcm9uR2VvbWV0cnksXG5cdFRvcnVzR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXG5cdFRvcnVzQnVmZmVyR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXG5cdFRvcnVzS25vdEdlb21ldHJ5OiBUb3J1c0tub3RHZW9tZXRyeSxcblx0VG9ydXNLbm90QnVmZmVyR2VvbWV0cnk6IFRvcnVzS25vdEdlb21ldHJ5LFxuXHRUdWJlR2VvbWV0cnk6IFR1YmVHZW9tZXRyeSxcblx0VHViZUJ1ZmZlckdlb21ldHJ5OiBUdWJlR2VvbWV0cnksXG5cdFdpcmVmcmFtZUdlb21ldHJ5OiBXaXJlZnJhbWVHZW9tZXRyeVxufSk7XG5cbi8qKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPFRIUkVFLkNvbG9yPlxuICogfVxuICovXG5cbmNsYXNzIFNoYWRvd01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRvd01hdGVyaWFsID0gdHJ1ZTtcblxuY2xhc3MgUmF3U2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVycyApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1Jhd1NoYWRlck1hdGVyaWFsJztcblxuXHR9XG5cbn1cblxuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIHJvdWdobmVzczogPGZsb2F0PixcbiAqICBtZXRhbG5lc3M6IDxmbG9hdD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXG4gKlxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHJvdWdobmVzc01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbWV0YWxuZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZW52TWFwOiBuZXcgVEhSRUUuQ3ViZVRleHR1cmUoIFtwb3N4LCBuZWd4LCBwb3N5LCBuZWd5LCBwb3N6LCBuZWd6XSApLFxuICogIGVudk1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICByZWZyYWN0aW9uUmF0aW86IDxmbG9hdD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgZmxhdFNoYWRpbmc6IDxib29sPlxuICogfVxuICovXG5cbmNsYXNzIE1lc2hTdGFuZGFyZE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cdFx0dGhpcy5yb3VnaG5lc3MgPSAxLjA7XG5cdFx0dGhpcy5tZXRhbG5lc3MgPSAwLjA7XG5cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0dGhpcy5yb3VnaG5lc3NNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdTVEFOREFSRCc6ICcnIH07XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMucm91Z2huZXNzID0gc291cmNlLnJvdWdobmVzcztcblx0XHR0aGlzLm1ldGFsbmVzcyA9IHNvdXJjZS5tZXRhbG5lc3M7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IHNvdXJjZS5yb3VnaG5lc3NNYXA7XG5cblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IHNvdXJjZS5tZXRhbG5lc3NNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gc291cmNlLmVudk1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY2xlYXJjb2F0OiA8ZmxvYXQ+LFxuICogIGNsZWFyY29hdE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBjbGVhcmNvYXRSb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgY2xlYXJjb2F0Um91Z2huZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGNsZWFyY29hdE5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKiAgY2xlYXJjb2F0Tm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBpb3I6IDxmbG9hdD4sXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBzaGVlbjogPGZsb2F0PixcbiAqICBzaGVlbkNvbG9yOiA8Q29sb3I+LFxuICogIHNoZWVuQ29sb3JNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgc2hlZW5Sb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgc2hlZW5Sb3VnaG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHRyYW5zbWlzc2lvbjogPGZsb2F0PixcbiAqICB0cmFuc21pc3Npb25NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHRoaWNrbmVzczogPGZsb2F0PixcbiAqICB0aGlja25lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYXR0ZW51YXRpb25EaXN0YW5jZTogPGZsb2F0PixcbiAqICBhdHRlbnVhdGlvbkNvbG9yOiA8Q29sb3I+LFxuICpcbiAqICBzcGVjdWxhckludGVuc2l0eTogPGZsb2F0PixcbiAqICBzcGVjdWxhckludGVuc2l0eU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBzcGVjdWxhckNvbG9yOiA8Q29sb3I+LFxuICogIHNwZWN1bGFyQ29sb3JNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+IClcbiAqIH1cbiAqL1xuXG5jbGFzcyBNZXNoUGh5c2ljYWxNYXRlcmlhbCBleHRlbmRzIE1lc2hTdGFuZGFyZE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7XG5cblx0XHRcdCdTVEFOREFSRCc6ICcnLFxuXHRcdFx0J1BIWVNJQ0FMJzogJydcblxuXHRcdH07XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jbGVhcmNvYXRNYXAgPSBudWxsO1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzID0gMC4wO1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gbnVsbDtcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmlvciA9IDEuNTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3JlZmxlY3Rpdml0eScsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHJldHVybiAoIGNsYW1wKCAyLjUgKiAoIHRoaXMuaW9yIC0gMSApIC8gKCB0aGlzLmlvciArIDEgKSwgMCwgMSApICk7XG5cblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggcmVmbGVjdGl2aXR5ICkge1xuXG5cdFx0XHRcdHRoaXMuaW9yID0gKCAxICsgMC40ICogcmVmbGVjdGl2aXR5ICkgLyAoIDEgLSAwLjQgKiByZWZsZWN0aXZpdHkgKTtcblxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdHRoaXMuc2hlZW5Db2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLnNoZWVuQ29sb3JNYXAgPSBudWxsO1xuXHRcdHRoaXMuc2hlZW5Sb3VnaG5lc3MgPSAxLjA7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0XHR0aGlzLnRyYW5zbWlzc2lvbk1hcCA9IG51bGw7XG5cblx0XHR0aGlzLnRoaWNrbmVzcyA9IDA7XG5cdFx0dGhpcy50aGlja25lc3NNYXAgPSBudWxsO1xuXHRcdHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZSA9IDAuMDtcblx0XHR0aGlzLmF0dGVudWF0aW9uQ29sb3IgPSBuZXcgQ29sb3IoIDEsIDEsIDEgKTtcblxuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHkgPSAxLjA7XG5cdFx0dGhpcy5zcGVjdWxhckludGVuc2l0eU1hcCA9IG51bGw7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yID0gbmV3IENvbG9yKCAxLCAxLCAxICk7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuX3NoZWVuID0gMC4wO1xuXHRcdHRoaXMuX2NsZWFyY29hdCA9IDA7XG5cdFx0dGhpcy5fdHJhbnNtaXNzaW9uID0gMDtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGdldCBzaGVlbigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9zaGVlbjtcblxuXHR9XG5cblx0c2V0IHNoZWVuKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fc2hlZW4gPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX3NoZWVuID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBjbGVhcmNvYXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fY2xlYXJjb2F0O1xuXG5cdH1cblxuXHRzZXQgY2xlYXJjb2F0KCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fY2xlYXJjb2F0ID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9jbGVhcmNvYXQgPSB2YWx1ZTtcblxuXHR9XG5cblx0Z2V0IHRyYW5zbWlzc2lvbigpIHtcblxuXHRcdHJldHVybiB0aGlzLl90cmFuc21pc3Npb247XG5cblx0fVxuXG5cdHNldCB0cmFuc21pc3Npb24oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl90cmFuc21pc3Npb24gPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX3RyYW5zbWlzc2lvbiA9IHZhbHVlO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcblxuXHRcdFx0J1NUQU5EQVJEJzogJycsXG5cdFx0XHQnUEhZU0lDQUwnOiAnJ1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuY2xlYXJjb2F0ID0gc291cmNlLmNsZWFyY29hdDtcblx0XHR0aGlzLmNsZWFyY29hdE1hcCA9IHNvdXJjZS5jbGVhcmNvYXRNYXA7XG5cdFx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzO1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gc291cmNlLmNsZWFyY29hdFJvdWdobmVzc01hcDtcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCA9IHNvdXJjZS5jbGVhcmNvYXROb3JtYWxNYXA7XG5cdFx0dGhpcy5jbGVhcmNvYXROb3JtYWxTY2FsZS5jb3B5KCBzb3VyY2UuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuaW9yID0gc291cmNlLmlvcjtcblxuXHRcdHRoaXMuc2hlZW4gPSBzb3VyY2Uuc2hlZW47XG5cdFx0dGhpcy5zaGVlbkNvbG9yLmNvcHkoIHNvdXJjZS5zaGVlbkNvbG9yICk7XG5cdFx0dGhpcy5zaGVlbkNvbG9yTWFwID0gc291cmNlLnNoZWVuQ29sb3JNYXA7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IHNvdXJjZS5zaGVlblJvdWdobmVzcztcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTWFwID0gc291cmNlLnNoZWVuUm91Z2huZXNzTWFwO1xuXG5cdFx0dGhpcy50cmFuc21pc3Npb24gPSBzb3VyY2UudHJhbnNtaXNzaW9uO1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gc291cmNlLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdHRoaXMudGhpY2tuZXNzID0gc291cmNlLnRoaWNrbmVzcztcblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IHNvdXJjZS50aGlja25lc3NNYXA7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gc291cmNlLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkNvbG9yLmNvcHkoIHNvdXJjZS5hdHRlbnVhdGlvbkNvbG9yICk7XG5cblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5ID0gc291cmNlLnNwZWN1bGFySW50ZW5zaXR5O1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBzb3VyY2Uuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yLmNvcHkoIHNvdXJjZS5zcGVjdWxhckNvbG9yICk7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gc291cmNlLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIHNwZWN1bGFyOiA8aGV4PixcbiAqICBzaGluaW5lc3M6IDxmbG9hdD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXG4gKlxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZW52TWFwOiBuZXcgVEhSRUUuQ3ViZVRleHR1cmUoIFtwb3N4LCBuZWd4LCBwb3N5LCBuZWd5LCBwb3N6LCBuZWd6XSApLFxuICogIGNvbWJpbmU6IFRIUkVFLk11bHRpcGx5T3BlcmF0aW9uLFxuICogIHJlZmxlY3Rpdml0eTogPGZsb2F0PixcbiAqICByZWZyYWN0aW9uUmF0aW86IDxmbG9hdD4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgZmxhdFNoYWRpbmc6IDxib29sPlxuICogfVxuICovXG5cbmNsYXNzIE1lc2hQaG9uZ01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cdFx0dGhpcy5zcGVjdWxhciA9IG5ldyBDb2xvciggMHgxMTExMTEgKTtcblx0XHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IG51bGw7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdHRoaXMuYW9NYXAgPSBudWxsO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdFx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0XHR0aGlzLnNoaW5pbmVzcyA9IHNvdXJjZS5zaGluaW5lc3M7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbi8qKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBncmFkaWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgZW1pc3NpdmU6IDxoZXg+LFxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqIH1cbiAqL1xuXG5jbGFzcyBNZXNoVG9vbk1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hUb29uTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblx0XHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cdFx0dGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaFRvb25NYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoVG9vbk1hdGVyaWFsID0gdHJ1ZTtcblxuLyoqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqXG4gKiAgZmxhdFNoYWRpbmc6IDxib29sPlxuICogfVxuICovXG5cbmNsYXNzIE1lc2hOb3JtYWxNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaE5vcm1hbE1hdGVyaWFsJztcblxuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHR0aGlzLmZvZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hOb3JtYWxNYXRlcmlhbCA9IHRydWU7XG5cbi8qKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqIH1cbiAqL1xuXG5jbGFzcyBNZXNoTGFtYmVydE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTGFtYmVydE1hdGVyaWFsJztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdFx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHRcdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdFx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgPSB0cnVlO1xuXG4vKipcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hdGNhcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGZsYXRTaGFkaW5nOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5jbGFzcyBNZXNoTWF0Y2FwTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnTUFUQ0FQJzogJycgfTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoTWF0Y2FwTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdFx0dGhpcy5tYXRjYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWF0Y2FwID0gc291cmNlLm1hdGNhcDtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5NZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTtcblxuLyoqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNjYWxlOiA8ZmxvYXQ+LFxuICogIGRhc2hTaXplOiA8ZmxvYXQ+LFxuICogIGdhcFNpemU6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5jbGFzcyBMaW5lRGFzaGVkTWF0ZXJpYWwgZXh0ZW5kcyBMaW5lQmFzaWNNYXRlcmlhbCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVEYXNoZWRNYXRlcmlhbCc7XG5cblx0XHR0aGlzLnNjYWxlID0gMTtcblx0XHR0aGlzLmRhc2hTaXplID0gMztcblx0XHR0aGlzLmdhcFNpemUgPSAxO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnNjYWxlID0gc291cmNlLnNjYWxlO1xuXHRcdHRoaXMuZGFzaFNpemUgPSBzb3VyY2UuZGFzaFNpemU7XG5cdFx0dGhpcy5nYXBTaXplID0gc291cmNlLmdhcFNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5pc0xpbmVEYXNoZWRNYXRlcmlhbCA9IHRydWU7XG5cbmNvbnN0IG1hdGVyaWFsTGliID0ge1xuXHRTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWwsXG5cdFJhd1NoYWRlck1hdGVyaWFsLFxuXHRTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWwsXG5cdE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWwsXG5cdE1lc2hUb29uTWF0ZXJpYWwsXG5cdE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWwsXG5cdE1lc2hEaXN0YW5jZU1hdGVyaWFsLFxuXHRNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsLFxuXHRMaW5lRGFzaGVkTWF0ZXJpYWwsXG5cdExpbmVCYXNpY01hdGVyaWFsLFxuXHRNYXRlcmlhbFxufTtcblxuTWF0ZXJpYWwuZnJvbVR5cGUgPSBmdW5jdGlvbiAoIHR5cGUgKSB7XG5cblx0cmV0dXJuIG5ldyBtYXRlcmlhbExpYlsgdHlwZSBdKCk7XG5cbn07XG5cbmNvbnN0IEFuaW1hdGlvblV0aWxzID0ge1xuXG5cdC8vIHNhbWUgYXMgQXJyYXkucHJvdG90eXBlLnNsaWNlLCBidXQgYWxzbyB3b3JrcyBvbiB0eXBlZCBhcnJheXNcblx0YXJyYXlTbGljZTogZnVuY3Rpb24gKCBhcnJheSwgZnJvbSwgdG8gKSB7XG5cblx0XHRpZiAoIEFuaW1hdGlvblV0aWxzLmlzVHlwZWRBcnJheSggYXJyYXkgKSApIHtcblxuXHRcdFx0Ly8gaW4gaW9zOSBhcnJheS5zdWJhcnJheShmcm9tLCB1bmRlZmluZWQpIHdpbGwgcmV0dXJuIGVtcHR5IGFycmF5XG5cdFx0XHQvLyBidXQgYXJyYXkuc3ViYXJyYXkoZnJvbSkgb3IgYXJyYXkuc3ViYXJyYXkoZnJvbSwgbGVuKSBpcyBjb3JyZWN0XG5cdFx0XHRyZXR1cm4gbmV3IGFycmF5LmNvbnN0cnVjdG9yKCBhcnJheS5zdWJhcnJheSggZnJvbSwgdG8gIT09IHVuZGVmaW5lZCA/IHRvIDogYXJyYXkubGVuZ3RoICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheS5zbGljZSggZnJvbSwgdG8gKTtcblxuXHR9LFxuXG5cdC8vIGNvbnZlcnRzIGFuIGFycmF5IHRvIGEgc3BlY2lmaWMgdHlwZVxuXHRjb252ZXJ0QXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIHR5cGUsIGZvcmNlQ2xvbmUgKSB7XG5cblx0XHRpZiAoICEgYXJyYXkgfHwgLy8gbGV0ICd1bmRlZmluZWQnIGFuZCAnbnVsbCcgcGFzc1xuXHRcdFx0ISBmb3JjZUNsb25lICYmIGFycmF5LmNvbnN0cnVjdG9yID09PSB0eXBlICkgcmV0dXJuIGFycmF5O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgdHlwZSggYXJyYXkgKTsgLy8gY3JlYXRlIHR5cGVkIGFycmF5XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFycmF5ICk7IC8vIGNyZWF0ZSBBcnJheVxuXG5cdH0sXG5cblx0aXNUeXBlZEFycmF5OiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoIG9iamVjdCApICYmXG5cdFx0XHQhICggb2JqZWN0IGluc3RhbmNlb2YgRGF0YVZpZXcgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybnMgYW4gYXJyYXkgYnkgd2hpY2ggdGltZXMgYW5kIHZhbHVlcyBjYW4gYmUgc29ydGVkXG5cdGdldEtleWZyYW1lT3JkZXI6IGZ1bmN0aW9uICggdGltZXMgKSB7XG5cblx0XHRmdW5jdGlvbiBjb21wYXJlVGltZSggaSwgaiApIHtcblxuXHRcdFx0cmV0dXJuIHRpbWVzWyBpIF0gLSB0aW1lc1sgaiBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbiA9IHRpbWVzLmxlbmd0aDtcblx0XHRjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoIG4gKTtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSByZXN1bHRbIGkgXSA9IGk7XG5cblx0XHRyZXN1bHQuc29ydCggY29tcGFyZVRpbWUgKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGFcblx0c29ydGVkQXJyYXk6IGZ1bmN0aW9uICggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdFx0Y29uc3QgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IHZhbHVlcy5jb25zdHJ1Y3RvciggblZhbHVlcyApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBkc3RPZmZzZXQgPSAwOyBkc3RPZmZzZXQgIT09IG5WYWx1ZXM7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHNyY09mZnNldCA9IG9yZGVyWyBpIF0gKiBzdHJpZGU7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHJlc3VsdFsgZHN0T2Zmc2V0ICsrIF0gPSB2YWx1ZXNbIHNyY09mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9LFxuXG5cdC8vIGZ1bmN0aW9uIGZvciBwYXJzaW5nIEFPUyBrZXlmcmFtZSBmb3JtYXRzXG5cdGZsYXR0ZW5KU09OOiBmdW5jdGlvbiAoIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcblxuXHRcdGxldCBpID0gMSwga2V5ID0ganNvbktleXNbIDAgXTtcblxuXHRcdHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgJiYga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHRsZXQgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoLmFwcGx5KCB2YWx1ZXMsIHZhbHVlICk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzXG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWUudG9BcnJheSggdmFsdWVzLCB2YWx1ZXMubGVuZ3RoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHB1c2ggYXMtaXNcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0c3ViY2xpcDogZnVuY3Rpb24gKCBzb3VyY2VDbGlwLCBuYW1lLCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgZnBzID0gMzAgKSB7XG5cblx0XHRjb25zdCBjbGlwID0gc291cmNlQ2xpcC5jbG9uZSgpO1xuXG5cdFx0Y2xpcC5uYW1lID0gbmFtZTtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB0cmFjayA9IGNsaXAudHJhY2tzWyBpIF07XG5cdFx0XHRjb25zdCB2YWx1ZVNpemUgPSB0cmFjay5nZXRWYWx1ZVNpemUoKTtcblxuXHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCB0cmFjay50aW1lcy5sZW5ndGg7ICsrIGogKSB7XG5cblx0XHRcdFx0Y29uc3QgZnJhbWUgPSB0cmFjay50aW1lc1sgaiBdICogZnBzO1xuXG5cdFx0XHRcdGlmICggZnJhbWUgPCBzdGFydEZyYW1lIHx8IGZyYW1lID49IGVuZEZyYW1lICkgY29udGludWU7XG5cblx0XHRcdFx0dGltZXMucHVzaCggdHJhY2sudGltZXNbIGogXSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBrID0gMDsgayA8IHZhbHVlU2l6ZTsgKysgayApIHtcblxuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB0cmFjay52YWx1ZXNbIGogKiB2YWx1ZVNpemUgKyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0dHJhY2sudGltZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHRpbWVzLCB0cmFjay50aW1lcy5jb25zdHJ1Y3RvciApO1xuXHRcdFx0dHJhY2sudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB2YWx1ZXMsIHRyYWNrLnZhbHVlcy5jb25zdHJ1Y3RvciApO1xuXG5cdFx0XHR0cmFja3MucHVzaCggdHJhY2sgKTtcblxuXHRcdH1cblxuXHRcdGNsaXAudHJhY2tzID0gdHJhY2tzO1xuXG5cdFx0Ly8gZmluZCBtaW5pbXVtIC50aW1lcyB2YWx1ZSBhY3Jvc3MgYWxsIHRyYWNrcyBpbiB0aGUgdHJpbW1lZCBjbGlwXG5cblx0XHRsZXQgbWluU3RhcnRUaW1lID0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggbWluU3RhcnRUaW1lID4gY2xpcC50cmFja3NbIGkgXS50aW1lc1sgMCBdICkge1xuXG5cdFx0XHRcdG1pblN0YXJ0VGltZSA9IGNsaXAudHJhY2tzWyBpIF0udGltZXNbIDAgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gc2hpZnQgYWxsIHRyYWNrcyBzdWNoIHRoYXQgY2xpcCBiZWdpbnMgYXQgdD0wXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGNsaXAudHJhY2tzWyBpIF0uc2hpZnQoIC0gMSAqIG1pblN0YXJ0VGltZSApO1xuXG5cdFx0fVxuXG5cdFx0Y2xpcC5yZXNldER1cmF0aW9uKCk7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9LFxuXG5cdG1ha2VDbGlwQWRkaXRpdmU6IGZ1bmN0aW9uICggdGFyZ2V0Q2xpcCwgcmVmZXJlbmNlRnJhbWUgPSAwLCByZWZlcmVuY2VDbGlwID0gdGFyZ2V0Q2xpcCwgZnBzID0gMzAgKSB7XG5cblx0XHRpZiAoIGZwcyA8PSAwICkgZnBzID0gMzA7XG5cblx0XHRjb25zdCBudW1UcmFja3MgPSByZWZlcmVuY2VDbGlwLnRyYWNrcy5sZW5ndGg7XG5cdFx0Y29uc3QgcmVmZXJlbmNlVGltZSA9IHJlZmVyZW5jZUZyYW1lIC8gZnBzO1xuXG5cdFx0Ly8gTWFrZSBlYWNoIHRyYWNrJ3MgdmFsdWVzIHJlbGF0aXZlIHRvIHRoZSB2YWx1ZXMgYXQgdGhlIHJlZmVyZW5jZSBmcmFtZVxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG51bVRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgcmVmZXJlbmNlVHJhY2sgPSByZWZlcmVuY2VDbGlwLnRyYWNrc1sgaSBdO1xuXHRcdFx0Y29uc3QgcmVmZXJlbmNlVHJhY2tUeXBlID0gcmVmZXJlbmNlVHJhY2suVmFsdWVUeXBlTmFtZTtcblxuXHRcdFx0Ly8gU2tpcCB0aGlzIHRyYWNrIGlmIGl0J3Mgbm9uLW51bWVyaWNcblx0XHRcdGlmICggcmVmZXJlbmNlVHJhY2tUeXBlID09PSAnYm9vbCcgfHwgcmVmZXJlbmNlVHJhY2tUeXBlID09PSAnc3RyaW5nJyApIGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBGaW5kIHRoZSB0cmFjayBpbiB0aGUgdGFyZ2V0IGNsaXAgd2hvc2UgbmFtZSBhbmQgdHlwZSBtYXRjaGVzIHRoZSByZWZlcmVuY2UgdHJhY2tcblx0XHRcdGNvbnN0IHRhcmdldFRyYWNrID0gdGFyZ2V0Q2xpcC50cmFja3MuZmluZCggZnVuY3Rpb24gKCB0cmFjayApIHtcblxuXHRcdFx0XHRyZXR1cm4gdHJhY2submFtZSA9PT0gcmVmZXJlbmNlVHJhY2submFtZVxuXHRcdFx0XHRcdCYmIHRyYWNrLlZhbHVlVHlwZU5hbWUgPT09IHJlZmVyZW5jZVRyYWNrVHlwZTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiAoIHRhcmdldFRyYWNrID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0bGV0IHJlZmVyZW5jZU9mZnNldCA9IDA7XG5cdFx0XHRjb25zdCByZWZlcmVuY2VWYWx1ZVNpemUgPSByZWZlcmVuY2VUcmFjay5nZXRWYWx1ZVNpemUoKTtcblxuXHRcdFx0aWYgKCByZWZlcmVuY2VUcmFjay5jcmVhdGVJbnRlcnBvbGFudC5pc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSApIHtcblxuXHRcdFx0XHRyZWZlcmVuY2VPZmZzZXQgPSByZWZlcmVuY2VWYWx1ZVNpemUgLyAzO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCB0YXJnZXRPZmZzZXQgPSAwO1xuXHRcdFx0Y29uc3QgdGFyZ2V0VmFsdWVTaXplID0gdGFyZ2V0VHJhY2suZ2V0VmFsdWVTaXplKCk7XG5cblx0XHRcdGlmICggdGFyZ2V0VHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgKSB7XG5cblx0XHRcdFx0dGFyZ2V0T2Zmc2V0ID0gdGFyZ2V0VmFsdWVTaXplIC8gMztcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBsYXN0SW5kZXggPSByZWZlcmVuY2VUcmFjay50aW1lcy5sZW5ndGggLSAxO1xuXHRcdFx0bGV0IHJlZmVyZW5jZVZhbHVlO1xuXG5cdFx0XHQvLyBGaW5kIHRoZSB2YWx1ZSB0byBzdWJ0cmFjdCBvdXQgb2YgdGhlIHRyYWNrXG5cdFx0XHRpZiAoIHJlZmVyZW5jZVRpbWUgPD0gcmVmZXJlbmNlVHJhY2sudGltZXNbIDAgXSApIHtcblxuXHRcdFx0XHQvLyBSZWZlcmVuY2UgZnJhbWUgaXMgZWFybGllciB0aGFuIHRoZSBmaXJzdCBrZXlmcmFtZSwgc28ganVzdCB1c2UgdGhlIGZpcnN0IGtleWZyYW1lXG5cdFx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGVuZEluZGV4ID0gcmVmZXJlbmNlVmFsdWVTaXplIC0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0XHRyZWZlcmVuY2VWYWx1ZSA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHJlZmVyZW5jZVRyYWNrLnZhbHVlcywgc3RhcnRJbmRleCwgZW5kSW5kZXggKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcmVmZXJlbmNlVGltZSA+PSByZWZlcmVuY2VUcmFjay50aW1lc1sgbGFzdEluZGV4IF0gKSB7XG5cblx0XHRcdFx0Ly8gUmVmZXJlbmNlIGZyYW1lIGlzIGFmdGVyIHRoZSBsYXN0IGtleWZyYW1lLCBzbyBqdXN0IHVzZSB0aGUgbGFzdCBrZXlmcmFtZVxuXHRcdFx0XHRjb25zdCBzdGFydEluZGV4ID0gbGFzdEluZGV4ICogcmVmZXJlbmNlVmFsdWVTaXplICsgcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyByZWZlcmVuY2VWYWx1ZVNpemUgLSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRcdHJlZmVyZW5jZVZhbHVlID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggcmVmZXJlbmNlVHJhY2sudmFsdWVzLCBzdGFydEluZGV4LCBlbmRJbmRleCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEludGVycG9sYXRlIHRvIHRoZSByZWZlcmVuY2UgdmFsdWVcblx0XHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSByZWZlcmVuY2VUcmFjay5jcmVhdGVJbnRlcnBvbGFudCgpO1xuXHRcdFx0XHRjb25zdCBzdGFydEluZGV4ID0gcmVmZXJlbmNlT2Zmc2V0O1xuXHRcdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdFx0aW50ZXJwb2xhbnQuZXZhbHVhdGUoIHJlZmVyZW5jZVRpbWUgKTtcblx0XHRcdFx0cmVmZXJlbmNlVmFsdWUgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCBpbnRlcnBvbGFudC5yZXN1bHRCdWZmZXIsIHN0YXJ0SW5kZXgsIGVuZEluZGV4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29uanVnYXRlIHRoZSBxdWF0ZXJuaW9uXG5cdFx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3F1YXRlcm5pb24nICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlZmVyZW5jZVF1YXQgPSBuZXcgUXVhdGVybmlvbigpLmZyb21BcnJheSggcmVmZXJlbmNlVmFsdWUgKS5ub3JtYWxpemUoKS5jb25qdWdhdGUoKTtcblx0XHRcdFx0cmVmZXJlbmNlUXVhdC50b0FycmF5KCByZWZlcmVuY2VWYWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1YnRyYWN0IHRoZSByZWZlcmVuY2UgdmFsdWUgZnJvbSBhbGwgb2YgdGhlIHRyYWNrIHZhbHVlc1xuXG5cdFx0XHRjb25zdCBudW1UaW1lcyA9IHRhcmdldFRyYWNrLnRpbWVzLmxlbmd0aDtcblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG51bVRpbWVzOyArKyBqICkge1xuXG5cdFx0XHRcdGNvbnN0IHZhbHVlU3RhcnQgPSBqICogdGFyZ2V0VmFsdWVTaXplICsgdGFyZ2V0T2Zmc2V0O1xuXG5cdFx0XHRcdGlmICggcmVmZXJlbmNlVHJhY2tUeXBlID09PSAncXVhdGVybmlvbicgKSB7XG5cblx0XHRcdFx0XHQvLyBNdWx0aXBseSB0aGUgY29uanVnYXRlIGZvciBxdWF0ZXJuaW9uIHRyYWNrIHR5cGVzXG5cdFx0XHRcdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdChcblx0XHRcdFx0XHRcdHRhcmdldFRyYWNrLnZhbHVlcyxcblx0XHRcdFx0XHRcdHZhbHVlU3RhcnQsXG5cdFx0XHRcdFx0XHRyZWZlcmVuY2VWYWx1ZSxcblx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXMsXG5cdFx0XHRcdFx0XHR2YWx1ZVN0YXJ0XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWVFbmQgPSB0YXJnZXRWYWx1ZVNpemUgLSB0YXJnZXRPZmZzZXQgKiAyO1xuXG5cdFx0XHRcdFx0Ly8gU3VidHJhY3QgZWFjaCB2YWx1ZSBmb3IgYWxsIG90aGVyIG51bWVyaWMgdHJhY2sgdHlwZXNcblx0XHRcdFx0XHRmb3IgKCBsZXQgayA9IDA7IGsgPCB2YWx1ZUVuZDsgKysgayApIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0VHJhY2sudmFsdWVzWyB2YWx1ZVN0YXJ0ICsgayBdIC09IHJlZmVyZW5jZVZhbHVlWyBrIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0YXJnZXRDbGlwLmJsZW5kTW9kZSA9IEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlO1xuXG5cdFx0cmV0dXJuIHRhcmdldENsaXA7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3Mgb2YgaW50ZXJwb2xhbnRzIG92ZXIgcGFyYW1ldHJpYyBzYW1wbGVzLlxuICpcbiAqIFRoZSBwYXJhbWV0ZXIgZG9tYWluIGlzIG9uZSBkaW1lbnNpb25hbCwgdHlwaWNhbGx5IHRoZSB0aW1lIG9yIGEgcGF0aFxuICogYWxvbmcgYSBjdXJ2ZSBkZWZpbmVkIGJ5IHRoZSBkYXRhLlxuICpcbiAqIFRoZSBzYW1wbGUgdmFsdWVzIGNhbiBoYXZlIGFueSBkaW1lbnNpb25hbGl0eSBhbmQgZGVyaXZlZCBjbGFzc2VzIG1heVxuICogYXBwbHkgc3BlY2lhbCBpbnRlcnByZXRhdGlvbnMgdG8gdGhlIGRhdGEuXG4gKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyB0aGUgaW50ZXJ2YWwgc2VlayBpbiBhIFRlbXBsYXRlIE1ldGhvZCwgZGVmZXJyaW5nXG4gKiB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gdG8gZGVyaXZlZCBjbGFzc2VzLlxuICpcbiAqIFRpbWUgY29tcGxleGl0eSBpcyBPKDEpIGZvciBsaW5lYXIgYWNjZXNzIGNyb3NzaW5nIGF0IG1vc3QgdHdvIHBvaW50c1xuICogYW5kIE8obG9nIE4pIGZvciByYW5kb20gYWNjZXNzLCB3aGVyZSBOIGlzIHRoZSBudW1iZXIgb2YgcG9zaXRpb25zLlxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKlxuICogXHRcdGh0dHA6Ly93d3cub29kZXNpZ24uY29tL3RlbXBsYXRlLW1ldGhvZC1wYXR0ZXJuLmh0bWxcbiAqXG4gKi9cblxuY2xhc3MgSW50ZXJwb2xhbnQge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMgPSBwYXJhbWV0ZXJQb3NpdGlvbnM7XG5cdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXG5cdFx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXN1bHRCdWZmZXIgOiBuZXcgc2FtcGxlVmFsdWVzLmNvbnN0cnVjdG9yKCBzYW1wbGVTaXplICk7XG5cdFx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XG5cdFx0dGhpcy52YWx1ZVNpemUgPSBzYW1wbGVTaXplO1xuXG5cdFx0dGhpcy5zZXR0aW5ncyA9IG51bGw7XG5cdFx0dGhpcy5EZWZhdWx0U2V0dGluZ3NfID0ge307XG5cblx0fVxuXG5cdGV2YWx1YXRlKCB0ICkge1xuXG5cdFx0Y29uc3QgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucztcblx0XHRsZXQgaTEgPSB0aGlzLl9jYWNoZWRJbmRleCxcblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHRsZXQgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQsIHQwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHRjb25zdCB0MWdsb2JhbCA9IHBwWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggdCA8IHQxZ2xvYmFsICkge1xuXG5cdFx0XHRcdFx0XHRcdGkxID0gMjsgLy8gKyAxLCB1c2luZyB0aGUgc2NhbiBmb3IgdGhlIGRldGFpbHNcblx0XHRcdFx0XHRcdFx0dDAgPSB0MWdsb2JhbDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBsaW5lYXIgcmV2ZXJzZSBzY2FuXG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBnaXZlVXBBdCA9IGkxIC0gMjsgOyApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBiZWZvcmUgc3RhcnRcblxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5iZWZvcmVTdGFydF8oIDAsIHQsIHQxICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQxID0gdDA7XG5cdFx0XHRcdFx0XHRcdHQwID0gcHBbIC0tIGkxIC0gMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA+PSB0MCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYXJyaXZlZCBhdCB0aGUgc291Z2h0IGludGVydmFsXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWsgc2VlaztcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBiaW5hcnkgc2VhcmNoIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IGkxO1xuXHRcdFx0XHRcdFx0aTEgPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0aGUgaW50ZXJ2YWwgaXMgdmFsaWRcblxuXHRcdFx0XHRcdGJyZWFrIHZhbGlkYXRlX2ludGVydmFsO1xuXG5cdFx0XHRcdH0gLy8gbGluZWFyIHNjYW5cblxuXHRcdFx0XHQvLyBiaW5hcnkgc2VhcmNoXG5cblx0XHRcdFx0d2hpbGUgKCBpMSA8IHJpZ2h0ICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7XG5cblx0XHRcdFx0XHRpZiAoIHQgPCBwcFsgbWlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0MSA9IHBwWyBpMSBdO1xuXHRcdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdFx0XHQvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW5cblxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0MCwgdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSAvLyBzZWVrXG5cblx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApO1xuXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICk7XG5cblx0fVxuXG5cdGdldFNldHRpbmdzXygpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldHRpbmdzIHx8IHRoaXMuRGVmYXVsdFNldHRpbmdzXztcblxuXHR9XG5cblx0Y29weVNhbXBsZVZhbHVlXyggaW5kZXggKSB7XG5cblx0XHQvLyBjb3BpZXMgYSBzYW1wbGUgdmFsdWUgdG8gdGhlIHJlc3VsdCBidWZmZXJcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGluZGV4ICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHQvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6XG5cblx0aW50ZXJwb2xhdGVfKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7XG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxuXG5cdH1cblxuXHRpbnRlcnZhbENoYW5nZWRfKCAvKiBpMSwgdDAsIHQxICovICkge1xuXG5cdFx0Ly8gZW1wdHlcblxuXHR9XG5cbn1cblxuLy8gQUxJQVMgREVGSU5JVElPTlNcblxuSW50ZXJwb2xhbnQucHJvdG90eXBlLmJlZm9yZVN0YXJ0XyA9IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfO1xuSW50ZXJwb2xhbnQucHJvdG90eXBlLmFmdGVyRW5kXyA9IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfO1xuXG4vKipcbiAqIEZhc3QgYW5kIHNpbXBsZSBjdWJpYyBzcGxpbmUgaW50ZXJwb2xhbnQuXG4gKlxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxuICogYXQgZWFjaCBzYW1wbGUgcG9zaXRpb24gdG8gdGhlIGxpbmVhciBzbG9wZSBiZXR3ZWVuIG5laWdoYm9yaW5nIHBvc2l0aW9uc1xuICogb3ZlciB0aGVpciBwYXJhbWV0ZXIgaW50ZXJ2YWwuXG4gKi9cblxuY2xhc3MgQ3ViaWNJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcblxuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gLSAwO1xuXHRcdHRoaXMuX29mZnNldFByZXYgPSAtIDA7XG5cdFx0dGhpcy5fd2VpZ2h0TmV4dCA9IC0gMDtcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gLSAwO1xuXG5cdFx0dGhpcy5EZWZhdWx0U2V0dGluZ3NfID0ge1xuXG5cdFx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0fTtcblxuXHR9XG5cblx0aW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApIHtcblxuXHRcdGNvbnN0IHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnM7XG5cdFx0bGV0IGlQcmV2ID0gaTEgLSAyLFxuXHRcdFx0aU5leHQgPSBpMSArIDEsXG5cblx0XHRcdHRQcmV2ID0gcHBbIGlQcmV2IF0sXG5cdFx0XHR0TmV4dCA9IHBwWyBpTmV4dCBdO1xuXG5cdFx0aWYgKCB0UHJldiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ1N0YXJ0ICkge1xuXG5cdFx0XHRcdGNhc2UgWmVyb1Nsb3BlRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gZicodDApID0gMFxuXHRcdFx0XHRcdGlQcmV2ID0gaTE7XG5cdFx0XHRcdFx0dFByZXYgPSAyICogdDAgLSB0MTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcblxuXHRcdFx0XHRcdC8vIHVzZSB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjdXJ2ZVxuXHRcdFx0XHRcdGlQcmV2ID0gcHAubGVuZ3RoIC0gMjtcblx0XHRcdFx0XHR0UHJldiA9IHQwICsgcHBbIGlQcmV2IF0gLSBwcFsgaVByZXYgKyAxIF07XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHRcdFx0XHQvLyBmJycodDApID0gMCBhLmsuYS4gTmF0dXJhbCBTcGxpbmVcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xuXHRcdFx0XHRcdHRQcmV2ID0gdDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdE5leHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdFbmQgKSB7XG5cblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyBmJyh0TikgPSAwXG5cdFx0XHRcdFx0aU5leHQgPSBpMTtcblx0XHRcdFx0XHR0TmV4dCA9IDIgKiB0MSAtIHQwO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0aU5leHQgPSAxO1xuXHRcdFx0XHRcdHROZXh0ID0gdDEgKyBwcFsgMSBdIC0gcHBbIDAgXTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdFx0XHRcdC8vIGYnJyh0TikgPSAwLCBhLmsuYS4gTmF0dXJhbCBTcGxpbmVcblx0XHRcdFx0XHRpTmV4dCA9IGkxIC0gMTtcblx0XHRcdFx0XHR0TmV4dCA9IHQwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBoYWxmRHQgPSAoIHQxIC0gdDAgKSAqIDAuNSxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IGhhbGZEdCAvICggdDAgLSB0UHJldiApO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSBoYWxmRHQgLyAoIHROZXh0IC0gdDEgKTtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IGlOZXh0ICogc3RyaWRlO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG8xID0gaTEgKiBzdHJpZGUsXHRcdG8wID0gbzEgLSBzdHJpZGUsXG5cdFx0XHRvUCA9IHRoaXMuX29mZnNldFByZXYsIFx0b04gPSB0aGlzLl9vZmZzZXROZXh0LFxuXHRcdFx0d1AgPSB0aGlzLl93ZWlnaHRQcmV2LFx0d04gPSB0aGlzLl93ZWlnaHROZXh0LFxuXG5cdFx0XHRwID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0cHAgPSBwICogcCxcblx0XHRcdHBwcCA9IHBwICogcDtcblxuXHRcdC8vIGV2YWx1YXRlIHBvbHlub21pYWxzXG5cblx0XHRjb25zdCBzUCA9IC0gd1AgKiBwcHAgKyAyICogd1AgKiBwcCAtIHdQICogcDtcblx0XHRjb25zdCBzMCA9ICggMSArIHdQICkgKiBwcHAgKyAoIC0gMS41IC0gMiAqIHdQICkgKiBwcCArICggLSAwLjUgKyB3UCApICogcCArIDE7XG5cdFx0Y29uc3QgczEgPSAoIC0gMSAtIHdOICkgKiBwcHAgKyAoIDEuNSArIHdOICkgKiBwcCArIDAuNSAqIHA7XG5cdFx0Y29uc3Qgc04gPSB3TiAqIHBwcCAtIHdOICogcHA7XG5cblx0XHQvLyBjb21iaW5lIGRhdGEgbGluZWFybHlcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9XG5cdFx0XHRcdFx0c1AgKiB2YWx1ZXNbIG9QICsgaSBdICtcblx0XHRcdFx0XHRzMCAqIHZhbHVlc1sgbzAgKyBpIF0gK1xuXHRcdFx0XHRcdHMxICogdmFsdWVzWyBvMSArIGkgXSArXG5cdFx0XHRcdFx0c04gKiB2YWx1ZXNbIG9OICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn1cblxuY2xhc3MgTGluZWFySW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9mZnNldDEgPSBpMSAqIHN0cmlkZSxcblx0XHRcdG9mZnNldDAgPSBvZmZzZXQxIC0gc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQxID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApLFxuXHRcdFx0d2VpZ2h0MCA9IDEgLSB3ZWlnaHQxO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDAgKyBpIF0gKiB3ZWlnaHQwICtcblx0XHRcdFx0XHR2YWx1ZXNbIG9mZnNldDEgKyBpIF0gKiB3ZWlnaHQxO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKlxuICogSW50ZXJwb2xhbnQgdGhhdCBldmFsdWF0ZXMgdG8gdGhlIHNhbXBsZSB2YWx1ZSBhdCB0aGUgcG9zaXRpb24gcHJlY2VlZGluZ1xuICogdGhlIHBhcmFtZXRlci5cbiAqL1xuXG5jbGFzcyBEaXNjcmV0ZUludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xuXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSAvKiwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEtleWZyYW1lVHJhY2sge1xuXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0XHRpZiAoIHRpbWVzID09PSB1bmRlZmluZWQgfHwgdGltZXMubGVuZ3RoID09PSAwICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogbm8ga2V5ZnJhbWVzIGluIHRyYWNrIG5hbWVkICcgKyBuYW1lICk7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSApO1xuXG5cdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCBpbnRlcnBvbGF0aW9uIHx8IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24gKTtcblxuXHR9XG5cblx0Ly8gU2VyaWFsaXphdGlvbiAoaW4gc3RhdGljIGNvbnRleHQsIGJlY2F1c2Ugb2YgY29uc3RydWN0b3IgaW52b2NhdGlvblxuXHQvLyBhbmQgYXV0b21hdGljIGludm9jYXRpb24gb2YgLnRvSlNPTik6XG5cblx0c3RhdGljIHRvSlNPTiggdHJhY2sgKSB7XG5cblx0XHRjb25zdCB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcblxuXHRcdGxldCBqc29uO1xuXG5cdFx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgdG9KU09OIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnRvSlNPTiAhPT0gdGhpcy50b0pTT04gKSB7XG5cblx0XHRcdGpzb24gPSB0cmFja1R5cGUudG9KU09OKCB0cmFjayApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIHRoZSBkYXRhIGNhbiBiZSBzZXJpYWxpemVkIGFzLWlzXG5cdFx0XHRqc29uID0ge1xuXG5cdFx0XHRcdCduYW1lJzogdHJhY2submFtZSxcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay50aW1lcywgQXJyYXkgKSxcblx0XHRcdFx0J3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudmFsdWVzLCBBcnJheSApXG5cblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGludGVycG9sYXRpb24gPSB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKCk7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdHJhY2suRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9XG5cblx0c2V0SW50ZXJwb2xhdGlvbiggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdGxldCBmYWN0b3J5TWV0aG9kO1xuXG5cdFx0c3dpdGNoICggaW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZURpc2NyZXRlOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEludGVycG9sYXRlTGluZWFyOlxuXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZVNtb290aDpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIGZhY3RvcnlNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbWVzc2FnZSA9ICd1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciAnICtcblx0XHRcdFx0dGhpcy5WYWx1ZVR5cGVOYW1lICsgJyBrZXlmcmFtZSB0cmFjayBuYW1lZCAnICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRJbnRlcnBvbGF0aW9uKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdldFZhbHVlU2l6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggLyB0aGlzLnRpbWVzLmxlbmd0aDtcblxuXHR9XG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdCggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyBzY2FsZSBhbGwga2V5ZnJhbWUgdGltZXMgYnkgYSBmYWN0b3IgKHVzZWZ1bCBmb3IgZnJhbWUgPC0+IHNlY29uZHMgY29udmVyc2lvbnMpXG5cdHNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIHJlbW92ZXMga2V5ZnJhbWVzIGJlZm9yZSBhbmQgYWZ0ZXIgYW5pbWF0aW9uIHdpdGhvdXQgY2hhbmdpbmcgYW55IHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtzdGFydFRpbWUsIGVuZFRpbWVdLlxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXG5cdHRyaW0oIHN0YXJ0VGltZSwgZW5kVGltZSApIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0bGV0IGZyb20gPSAwLFxuXHRcdFx0dG8gPSBuS2V5cyAtIDE7XG5cblx0XHR3aGlsZSAoIGZyb20gIT09IG5LZXlzICYmIHRpbWVzWyBmcm9tIF0gPCBzdGFydFRpbWUgKSB7XG5cblx0XHRcdCsrIGZyb207XG5cblx0XHR9XG5cblx0XHR3aGlsZSAoIHRvICE9PSAtIDEgJiYgdGltZXNbIHRvIF0gPiBlbmRUaW1lICkge1xuXG5cdFx0XHQtLSB0bztcblxuXHRcdH1cblxuXHRcdCsrIHRvOyAvLyBpbmNsdXNpdmUgLT4gZXhjbHVzaXZlIGJvdW5kXG5cblx0XHRpZiAoIGZyb20gIT09IDAgfHwgdG8gIT09IG5LZXlzICkge1xuXG5cdFx0XHQvLyBlbXB0eSB0cmFja3MgYXJlIGZvcmJpZGRlbiwgc28ga2VlcCBhdCBsZWFzdCBvbmUga2V5ZnJhbWVcblx0XHRcdGlmICggZnJvbSA+PSB0byApIHtcblxuXHRcdFx0XHR0byA9IE1hdGgubWF4KCB0bywgMSApO1xuXHRcdFx0XHRmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIGZyb20sIHRvICk7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGg7XG5cblx0XHRpZiAoIG5LZXlzID09PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVHJhY2sgaXMgZW1wdHkuJywgdGhpcyApO1xuXHRcdFx0dmFsaWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGxldCBwcmV2VGltZSA9IG51bGw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5LZXlzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0Ly8gcmVtb3ZlcyBlcXVpdmFsZW50IHNlcXVlbnRpYWwga2V5cyBhcyBjb21tb24gaW4gbW9ycGggdGFyZ2V0IHNlcXVlbmNlc1xuXHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxuXHRvcHRpbWl6ZSgpIHtcblxuXHRcdC8vIHRpbWVzIG9yIHZhbHVlcyBtYXkgYmUgc2hhcmVkIHdpdGggb3RoZXIgdHJhY2tzLCBzbyBvdmVyd3JpdGluZyBpcyB1bnNhZmVcblx0XHRjb25zdCB0aW1lcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudGltZXMgKSxcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzICksXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpLFxuXG5cdFx0XHRzbW9vdGhJbnRlcnBvbGF0aW9uID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uKCkgPT09IEludGVycG9sYXRlU21vb3RoLFxuXG5cdFx0XHRsYXN0SW5kZXggPSB0aW1lcy5sZW5ndGggLSAxO1xuXG5cdFx0bGV0IHdyaXRlSW5kZXggPSAxO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgbGFzdEluZGV4OyArKyBpICkge1xuXG5cdFx0XHRsZXQga2VlcCA9IGZhbHNlO1xuXG5cdFx0XHRjb25zdCB0aW1lID0gdGltZXNbIGkgXTtcblx0XHRcdGNvbnN0IHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZXNbIDAgXSApICkge1xuXG5cdFx0XHRcdGlmICggISBzbW9vdGhJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHVubmVjZXNzYXJ5IGtleWZyYW1lcyBzYW1lIGFzIHRoZWlyIG5laWdoYm9yc1xuXG5cdFx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gdmFsdWVzWyBvZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0UCArIGogXSB8fFxuXHRcdFx0XHRcdFx0XHR2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXROICsgaiBdICkge1xuXG5cdFx0XHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW4tcGxhY2UgY29tcGFjdGlvblxuXG5cdFx0XHRpZiAoIGtlZXAgKSB7XG5cblx0XHRcdFx0aWYgKCBpICE9PSB3cml0ZUluZGV4ICkge1xuXG5cdFx0XHRcdFx0dGltZXNbIHdyaXRlSW5kZXggXSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdFx0XHRjb25zdCByZWFkT2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHR2YWx1ZXNbIHdyaXRlT2Zmc2V0ICsgaiBdID0gdmFsdWVzWyByZWFkT2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBmbHVzaCBsYXN0IGtleWZyYW1lIChjb21wYWN0aW9uIGxvb2tzIGFoZWFkKVxuXG5cdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRmb3IgKCBsZXQgcmVhZE9mZnNldCA9IGxhc3RJbmRleCAqIHN0cmlkZSwgd3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlLCBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Kysgd3JpdGVJbmRleDtcblxuXHRcdH1cblxuXHRcdGlmICggd3JpdGVJbmRleCAhPT0gdGltZXMubGVuZ3RoICkge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIDAsIHdyaXRlSW5kZXggKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdmFsdWVzLCAwLCB3cml0ZUluZGV4ICogc3RyaWRlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRpbWVzID0gdGltZXM7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IHZhbHVlcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy50aW1lcywgMCApO1xuXHRcdGNvbnN0IHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCAwICk7XG5cblx0XHRjb25zdCBUeXBlZEtleWZyYW1lVHJhY2sgPSB0aGlzLmNvbnN0cnVjdG9yO1xuXHRcdGNvbnN0IHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayggdGhpcy5uYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0XHQvLyBJbnRlcnBvbGFudCBhcmd1bWVudCB0byBjb25zdHJ1Y3RvciBpcyBub3Qgc2F2ZWQsIHNvIGNvcHkgdGhlIGZhY3RvcnkgbWV0aG9kIGRpcmVjdGx5LlxuXHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gdGhpcy5jcmVhdGVJbnRlcnBvbGFudDtcblxuXHRcdHJldHVybiB0cmFjaztcblxuXHR9XG5cbn1cblxuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVGltZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBGbG9hdDMyQXJyYXk7XG5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlTGluZWFyO1xuXG4vKipcbiAqIEEgVHJhY2sgb2YgQm9vbGVhbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIEJvb2xlYW5LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7fVxuXG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdib29sJztcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZUJ1ZmZlclR5cGUgPSBBcnJheTtcbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlRGlzY3JldGU7XG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cbiAqL1xuY2xhc3MgQ29sb3JLZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7fVxuXG5Db2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnY29sb3InO1xuXG4vKipcbiAqIEEgVHJhY2sgb2YgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIE51bWJlcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XG5cbk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnbnVtYmVyJztcblxuLyoqXG4gKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC5cbiAqL1xuXG5jbGFzcyBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdGFscGhhID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApO1xuXG5cdFx0bGV0IG9mZnNldCA9IGkxICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGVuZCA9IG9mZnNldCArIHN0cmlkZTsgb2Zmc2V0ICE9PSBlbmQ7IG9mZnNldCArPSA0ICkge1xuXG5cdFx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgVHJhY2sgb2YgcXVhdGVybmlvbiBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxufVxuXG5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdxdWF0ZXJuaW9uJztcbi8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlTGluZWFyO1xuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqL1xuY2xhc3MgU3RyaW5nS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge31cblxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdzdHJpbmcnO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVCdWZmZXJUeXBlID0gQXJyYXk7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlRGlzY3JldGU7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIgPSB1bmRlZmluZWQ7XG5TdHJpbmdLZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGggPSB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIFZlY3RvcktleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHt9XG5cblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAndmVjdG9yJztcblxuY2xhc3MgQW5pbWF0aW9uQ2xpcCB7XG5cblx0Y29uc3RydWN0b3IoIG5hbWUsIGR1cmF0aW9uID0gLSAxLCB0cmFja3MsIGJsZW5kTW9kZSA9IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXHRcdHRoaXMuYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzXG5cdFx0aWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHtcblxuXHRcdFx0dGhpcy5yZXNldER1cmF0aW9uKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cblx0c3RhdGljIHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gW10sXG5cdFx0XHRqc29uVHJhY2tzID0ganNvbi50cmFja3MsXG5cdFx0XHRmcmFtZVRpbWUgPSAxLjAgLyAoIGpzb24uZnBzIHx8IDEuMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0ganNvblRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBwYXJzZUtleWZyYW1lVHJhY2soIGpzb25UcmFja3NbIGkgXSApLnNjYWxlKCBmcmFtZVRpbWUgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xpcCA9IG5ldyB0aGlzKCBqc29uLm5hbWUsIGpzb24uZHVyYXRpb24sIHRyYWNrcywganNvbi5ibGVuZE1vZGUgKTtcblx0XHRjbGlwLnV1aWQgPSBqc29uLnV1aWQ7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9XG5cblx0c3RhdGljIHRvSlNPTiggY2xpcCApIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0Y29uc3QganNvbiA9IHtcblxuXHRcdFx0J25hbWUnOiBjbGlwLm5hbWUsXG5cdFx0XHQnZHVyYXRpb24nOiBjbGlwLmR1cmF0aW9uLFxuXHRcdFx0J3RyYWNrcyc6IHRyYWNrcyxcblx0XHRcdCd1dWlkJzogY2xpcC51dWlkLFxuXHRcdFx0J2JsZW5kTW9kZSc6IGNsaXAuYmxlbmRNb2RlXG5cblx0XHR9O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gY2xpcFRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxuXHRzdGF0aWMgQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0Y29uc3QgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhUYXJnZXRTZXF1ZW5jZS5sZW5ndGg7XG5cdFx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7IGkgKysgKSB7XG5cblx0XHRcdGxldCB0aW1lcyA9IFtdO1xuXHRcdFx0bGV0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHR0aW1lcy5wdXNoKFxuXHRcdFx0XHQoIGkgKyBudW1Nb3JwaFRhcmdldHMgLSAxICkgJSBudW1Nb3JwaFRhcmdldHMsXG5cdFx0XHRcdGksXG5cdFx0XHRcdCggaSArIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyApO1xuXG5cdFx0XHR2YWx1ZXMucHVzaCggMCwgMSwgMCApO1xuXG5cdFx0XHRjb25zdCBvcmRlciA9IEFuaW1hdGlvblV0aWxzLmdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzKCBuYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdH1cblxuXHRzdGF0aWMgZmluZEJ5TmFtZSggb2JqZWN0T3JDbGlwQXJyYXksIG5hbWUgKSB7XG5cblx0XHRsZXQgY2xpcEFycmF5ID0gb2JqZWN0T3JDbGlwQXJyYXk7XG5cblx0XHRpZiAoICEgQXJyYXkuaXNBcnJheSggb2JqZWN0T3JDbGlwQXJyYXkgKSApIHtcblxuXHRcdFx0Y29uc3QgbyA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcEFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBjbGlwQXJyYXlbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdHN0YXRpYyBDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyggbW9ycGhUYXJnZXRzLCBmcHMsIG5vTG9vcCApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XG5cblx0XHQvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XG5cdFx0Y29uc3QgcGF0dGVybiA9IC9eKFtcXHctXSo/KShbXFxkXSspJC87XG5cblx0XHQvLyBzb3J0IG1vcnBoIHRhcmdldCBuYW1lcyBpbnRvIGFuaW1hdGlvbiBncm91cHMgYmFzZWRcblx0XHQvLyBwYXR0ZXJucyBsaWtlIFdhbGtfMDAxLCBXYWxrXzAwMiwgUnVuXzAwMSwgUnVuXzAwMlxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cdFx0XHRjb25zdCBwYXJ0cyA9IG1vcnBoVGFyZ2V0Lm5hbWUubWF0Y2goIHBhdHRlcm4gKTtcblxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBwYXJ0c1sgMSBdO1xuXG5cdFx0XHRcdGxldCBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggISBhbmltYXRpb25Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1sgbmFtZSBdID0gYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gW107XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFuaW1hdGlvbk1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBjbGlwcyA9IFtdO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0Y2xpcHMucHVzaCggdGhpcy5DcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSggbmFtZSwgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSwgZnBzLCBub0xvb3AgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsaXBzO1xuXG5cdH1cblxuXHQvLyBwYXJzZSB0aGUgYW5pbWF0aW9uLmhpZXJhcmNoeSBmb3JtYXRcblx0c3RhdGljIHBhcnNlQW5pbWF0aW9uKCBhbmltYXRpb24sIGJvbmVzICkge1xuXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhZGROb25lbXB0eVRyYWNrID0gZnVuY3Rpb24gKCB0cmFja1R5cGUsIHRyYWNrTmFtZSwgYW5pbWF0aW9uS2V5cywgcHJvcGVydHlOYW1lLCBkZXN0VHJhY2tzICkge1xuXG5cdFx0XHQvLyBvbmx5IHJldHVybiB0cmFjayBpZiB0aGVyZSBhcmUgYWN0dWFsbHkga2V5cy5cblx0XHRcdGlmICggYW5pbWF0aW9uS2V5cy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRcdC8vIGVtcHR5IGtleXMgYXJlIGZpbHRlcmVkIG91dCwgc28gY2hlY2sgYWdhaW5cblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2goIG5ldyB0cmFja1R5cGUoIHRyYWNrTmFtZSwgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0XHRjb25zdCBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0Jztcblx0XHRjb25zdCBmcHMgPSBhbmltYXRpb24uZnBzIHx8IDMwO1xuXHRcdGNvbnN0IGJsZW5kTW9kZSA9IGFuaW1hdGlvbi5ibGVuZE1vZGU7XG5cblx0XHQvLyBhdXRvbWF0aWMgbGVuZ3RoIGRldGVybWluYXRpb24gaW4gQW5pbWF0aW9uQ2xpcC5cblx0XHRsZXQgZHVyYXRpb24gPSBhbmltYXRpb24ubGVuZ3RoIHx8IC0gMTtcblxuXHRcdGNvbnN0IGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCBsZXQgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHRjb25zdCBhbmltYXRpb25LZXlzID0gaGllcmFyY2h5VHJhY2tzWyBoIF0ua2V5cztcblxuXHRcdFx0Ly8gc2tpcCBlbXB0eSB0cmFja3Ncblx0XHRcdGlmICggISBhbmltYXRpb25LZXlzIHx8IGFuaW1hdGlvbktleXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggdGFyZ2V0c1xuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyAwIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdC8vIGZpZ3VyZSBvdXQgYWxsIG1vcnBoIHRhcmdldHMgdXNlZCBpbiB0aGlzIHRyYWNrXG5cdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0TmFtZXMgPSB7fTtcblxuXHRcdFx0XHRsZXQgaztcblxuXHRcdFx0XHRmb3IgKCBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSB0cmFjayBmb3IgZWFjaCBtb3JwaCB0YXJnZXQgd2l0aCBhbGwgemVyb1xuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxuXHRcdFx0XHQvLyB0aGUgbW9ycGhUYXJnZXQgaXMgbmFtZWQuXG5cdFx0XHRcdGZvciAoIGNvbnN0IG1vcnBoVGFyZ2V0TmFtZSBpbiBtb3JwaFRhcmdldE5hbWVzICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBtID0gMDsgbSAhPT0gYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrIG0gKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGFuaW1hdGlvbktleSA9IGFuaW1hdGlvbktleXNbIGsgXTtcblxuXHRcdFx0XHRcdFx0dGltZXMucHVzaCggYW5pbWF0aW9uS2V5LnRpbWUgKTtcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCAoIGFuaW1hdGlvbktleS5tb3JwaFRhcmdldCA9PT0gbW9ycGhUYXJnZXROYW1lICkgPyAxIDogMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHJhY2tzLnB1c2goIG5ldyBOdW1iZXJLZXlmcmFtZVRyYWNrKCAnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlWycgKyBtb3JwaFRhcmdldE5hbWUgKyAnXScsIHRpbWVzLCB2YWx1ZXMgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkdXJhdGlvbiA9IG1vcnBoVGFyZ2V0TmFtZXMubGVuZ3RoICogZnBzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cblxuXHRcdFx0XHRjb25zdCBib25lTmFtZSA9ICcuYm9uZXNbJyArIGJvbmVzWyBoIF0ubmFtZSArICddJztcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5wb3NpdGlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3BvcycsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0UXVhdGVybmlvbktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5xdWF0ZXJuaW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncm90JywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcuc2NhbGUnLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdzY2wnLCB0cmFja3MgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFja3MubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNsaXAgPSBuZXcgdGhpcyggY2xpcE5hbWUsIGR1cmF0aW9uLCB0cmFja3MsIGJsZW5kTW9kZSApO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fVxuXG5cdHJlc2V0RHVyYXRpb24oKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSB0aGlzLnRyYWNrcztcblx0XHRsZXQgZHVyYXRpb24gPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gdHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xuXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KCBkdXJhdGlvbiwgdHJhY2sudGltZXNbIHRyYWNrLnRpbWVzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRyaW0oKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0udHJpbSggMCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHZhbGlkYXRlKCkge1xuXG5cdFx0bGV0IHZhbGlkID0gdHJ1ZTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1sgaSBdLnZhbGlkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fVxuXG5cdG9wdGltaXplKCkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLm9wdGltaXplKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHRoaXMudHJhY2tzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLm5hbWUsIHRoaXMuZHVyYXRpb24sIHRyYWNrcywgdGhpcy5ibGVuZE1vZGUgKTtcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9KU09OKCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIHR5cGVOYW1lICkge1xuXG5cdHN3aXRjaCAoIHR5cGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cblx0XHRjYXNlICdzY2FsYXInOlxuXHRcdGNhc2UgJ2RvdWJsZSc6XG5cdFx0Y2FzZSAnZmxvYXQnOlxuXHRcdGNhc2UgJ251bWJlcic6XG5cdFx0Y2FzZSAnaW50ZWdlcic6XG5cblx0XHRcdHJldHVybiBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAndmVjdG9yJzpcblx0XHRjYXNlICd2ZWN0b3IyJzpcblx0XHRjYXNlICd2ZWN0b3IzJzpcblx0XHRjYXNlICd2ZWN0b3I0JzpcblxuXHRcdFx0cmV0dXJuIFZlY3RvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdjb2xvcic6XG5cblx0XHRcdHJldHVybiBDb2xvcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblxuXHRcdFx0cmV0dXJuIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnYm9vbCc6XG5cdFx0Y2FzZSAnYm9vbGVhbic6XG5cblx0XHRcdHJldHVybiBCb29sZWFuS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cblx0XHRcdHJldHVybiBTdHJpbmdLZXlmcmFtZVRyYWNrO1xuXG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBVbnN1cHBvcnRlZCB0eXBlTmFtZTogJyArIHR5cGVOYW1lICk7XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uICkge1xuXG5cdGlmICgganNvbi50eXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayB0eXBlIHVuZGVmaW5lZCwgY2FuIG5vdCBwYXJzZScgKTtcblxuXHR9XG5cblx0Y29uc3QgdHJhY2tUeXBlID0gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSgganNvbi50eXBlICk7XG5cblx0aWYgKCBqc29uLnRpbWVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRjb25zdCB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTtcblxuXHRcdEFuaW1hdGlvblV0aWxzLmZsYXR0ZW5KU09OKCBqc29uLmtleXMsIHRpbWVzLCB2YWx1ZXMsICd2YWx1ZScgKTtcblxuXHRcdGpzb24udGltZXMgPSB0aW1lcztcblx0XHRqc29uLnZhbHVlcyA9IHZhbHVlcztcblxuXHR9XG5cblx0Ly8gZGVyaXZlZCBjbGFzc2VzIGNhbiBkZWZpbmUgYSBzdGF0aWMgcGFyc2UgbWV0aG9kXG5cdGlmICggdHJhY2tUeXBlLnBhcnNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyZXR1cm4gdHJhY2tUeXBlLnBhcnNlKCBqc29uICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZVxuXHRcdHJldHVybiBuZXcgdHJhY2tUeXBlKCBqc29uLm5hbWUsIGpzb24udGltZXMsIGpzb24udmFsdWVzLCBqc29uLmludGVycG9sYXRpb24gKTtcblxuXHR9XG5cbn1cblxuY29uc3QgQ2FjaGUgPSB7XG5cblx0ZW5hYmxlZDogZmFsc2UsXG5cblx0ZmlsZXM6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0FkZGluZyBrZXk6Jywga2V5ICk7XG5cblx0XHR0aGlzLmZpbGVzWyBrZXkgXSA9IGZpbGU7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdDaGVja2luZyBrZXk6Jywga2V5ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0Y2xlYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZmlsZXMgPSB7fTtcblxuXHR9XG5cbn07XG5cbmNsYXNzIExvYWRpbmdNYW5hZ2VyIHtcblxuXHRjb25zdHJ1Y3Rvciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0bGV0IGlzTG9hZGluZyA9IGZhbHNlO1xuXHRcdGxldCBpdGVtc0xvYWRlZCA9IDA7XG5cdFx0bGV0IGl0ZW1zVG90YWwgPSAwO1xuXHRcdGxldCB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcblx0XHRjb25zdCBoYW5kbGVycyA9IFtdO1xuXG5cdFx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxuXHRcdC8vIGluIHRoZSBjb25zdHJ1Y3RvclxuXG5cdFx0dGhpcy5vblN0YXJ0ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMub25Mb2FkID0gb25Mb2FkO1xuXHRcdHRoaXMub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG5cdFx0dGhpcy5vbkVycm9yID0gb25FcnJvcjtcblxuXHRcdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGl0ZW1zVG90YWwgKys7XG5cblx0XHRcdGlmICggaXNMb2FkaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aXNMb2FkaW5nID0gdHJ1ZTtcblxuXHRcdH07XG5cblx0XHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdFx0aXRlbXNMb2FkZWQgKys7XG5cblx0XHRcdGlmICggc2NvcGUub25Qcm9ncmVzcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGl0ZW1zTG9hZGVkID09PSBpdGVtc1RvdGFsICkge1xuXG5cdFx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmICggc2NvcGUub25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRzY29wZS5vbkxvYWQoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHR0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vbkVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdHRoaXMucmVzb2x2ZVVSTCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRcdHJldHVybiB1cmxNb2RpZmllciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVybDtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFVSTE1vZGlmaWVyID0gZnVuY3Rpb24gKCB0cmFuc2Zvcm0gKSB7XG5cblx0XHRcdHVybE1vZGlmaWVyID0gdHJhbnNmb3JtO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0XHR0aGlzLmFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4LCBsb2FkZXIgKSB7XG5cblx0XHRcdGhhbmRsZXJzLnB1c2goIHJlZ2V4LCBsb2FkZXIgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKCByZWdleCApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBoYW5kbGVycy5pbmRleE9mKCByZWdleCApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpbmRleCwgMiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2V0SGFuZGxlciA9IGZ1bmN0aW9uICggZmlsZSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlZ2V4ID0gaGFuZGxlcnNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbG9hZGVyID0gaGFuZGxlcnNbIGkgKyAxIF07XG5cblx0XHRcdFx0aWYgKCByZWdleC5nbG9iYWwgKSByZWdleC5sYXN0SW5kZXggPSAwOyAvLyBzZWUgIzE3OTIwXG5cblx0XHRcdFx0aWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbG9hZGVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH07XG5cblx0fVxuXG59XG5cbmNvbnN0IERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG5jbGFzcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcblx0XHR0aGlzLnBhdGggPSAnJztcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9ICcnO1xuXHRcdHRoaXMucmVxdWVzdEhlYWRlciA9IHt9O1xuXG5cdH1cblxuXHRsb2FkKCAvKiB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciAqLyApIHt9XG5cblx0bG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRzY29wZS5sb2FkKCB1cmwsIHJlc29sdmUsIG9uUHJvZ3Jlc3MsIHJlamVjdCApO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRwYXJzZSggLyogZGF0YSAqLyApIHt9XG5cblx0c2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRXaXRoQ3JlZGVudGlhbHMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy53aXRoQ3JlZGVudGlhbHMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0UGF0aCggcGF0aCApIHtcblxuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJlc291cmNlUGF0aCggcmVzb3VyY2VQYXRoICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFJlcXVlc3RIZWFkZXIoIHJlcXVlc3RIZWFkZXIgKSB7XG5cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSByZXF1ZXN0SGVhZGVyO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBsb2FkaW5nID0ge307XG5cbmNsYXNzIEZpbGVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHRoaXMubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgcmVxdWVzdCBpcyBkdXBsaWNhdGVcblxuXHRcdGlmICggbG9hZGluZ1sgdXJsIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bG9hZGluZ1sgdXJsIF0ucHVzaCgge1xuXG5cdFx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxuXHRcdFx0XHRvbkVycm9yOiBvbkVycm9yXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSW5pdGlhbGlzZSBhcnJheSBmb3IgZHVwbGljYXRlIHJlcXVlc3RzXG5cdFx0bG9hZGluZ1sgdXJsIF0gPSBbXTtcblxuXHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblx0XHRcdG9uTG9hZDogb25Mb2FkLFxuXHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdG9uRXJyb3I6IG9uRXJyb3IsXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHJlcXVlc3Rcblx0XHRjb25zdCByZXEgPSBuZXcgUmVxdWVzdCggdXJsLCB7XG5cdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyggdGhpcy5yZXF1ZXN0SGVhZGVyICksXG5cdFx0XHRjcmVkZW50aWFsczogdGhpcy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nLFxuXHRcdFx0Ly8gQW4gYWJvcnQgY29udHJvbGxlciBjb3VsZCBiZSBhZGRlZCB3aXRoaW4gYSBmdXR1cmUgUFJcblx0XHR9ICk7XG5cblx0XHQvLyByZWNvcmQgc3RhdGVzICggYXZvaWQgZGF0YSByYWNlIClcblx0XHRjb25zdCBtaW1lVHlwZSA9IHRoaXMubWltZVR5cGU7XG5cdFx0Y29uc3QgcmVzcG9uc2VUeXBlID0gdGhpcy5yZXNwb25zZVR5cGU7XG5cblx0XHQvLyBzdGFydCB0aGUgZmV0Y2hcblx0XHRmZXRjaCggcmVxIClcblx0XHRcdC50aGVuKCByZXNwb25zZSA9PiB7XG5cblx0XHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT09IDIwMCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIHJldHVybiBIVFRQIFN0YXR1cyAwIHdoZW4gdXNpbmcgbm9uLWh0dHAgcHJvdG9jb2xcblx0XHRcdFx0XHQvLyBlLmcuICdmaWxlOi8vJyBvciAnZGF0YTovLycuIEhhbmRsZSBhcyBzdWNjZXNzLlxuXG5cdFx0XHRcdFx0aWYgKCByZXNwb25zZS5zdGF0dXMgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkZpbGVMb2FkZXI6IEhUVFAgU3RhdHVzIDAgcmVjZWl2ZWQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gV29ya2Fyb3VuZDogQ2hlY2tpbmcgaWYgcmVzcG9uc2UuYm9keSA9PT0gdW5kZWZpbmVkIGZvciBBbGlwYXkgYnJvd3NlciAjMjM1NDhcblxuXHRcdFx0XHRcdGlmICggdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAndW5kZWZpbmVkJyB8fCByZXNwb25zZS5ib2R5ID09PSB1bmRlZmluZWQgfHwgcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cdFx0XHRcdFx0Y29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcblx0XHRcdFx0XHRjb25zdCBjb250ZW50TGVuZ3RoID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoICdDb250ZW50LUxlbmd0aCcgKTtcblx0XHRcdFx0XHRjb25zdCB0b3RhbCA9IGNvbnRlbnRMZW5ndGggPyBwYXJzZUludCggY29udGVudExlbmd0aCApIDogMDtcblx0XHRcdFx0XHRjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdG90YWwgIT09IDA7XG5cdFx0XHRcdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRcdFx0XHQvLyBwZXJpb2RpY2FsbHkgcmVhZCBkYXRhIGludG8gdGhlIG5ldyBzdHJlYW0gdHJhY2tpbmcgd2hpbGUgZG93bmxvYWQgcHJvZ3Jlc3Ncblx0XHRcdFx0XHRjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oIHtcblx0XHRcdFx0XHRcdHN0YXJ0KCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlYWREYXRhKCk7XG5cblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24gcmVhZERhdGEoKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oICggeyBkb25lLCB2YWx1ZSB9ICkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRvbmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udHJvbGxlci5jbG9zZSgpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxvYWRlZCArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGV2ZW50ID0gbmV3IFByb2dyZXNzRXZlbnQoICdwcm9ncmVzcycsIHsgbGVuZ3RoQ29tcHV0YWJsZSwgbG9hZGVkLCB0b3RhbCB9ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Qcm9ncmVzcyApIGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZSggdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVhZERhdGEoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBSZXNwb25zZSggc3RyZWFtICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IEVycm9yKCBgZmV0Y2ggZm9yIFwiJHtyZXNwb25zZS51cmx9XCIgcmVzcG9uZGVkIHdpdGggJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xuXG5cdFx0XHRcdHN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG5cblx0XHRcdFx0XHRjYXNlICdibG9iJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcblxuXHRcdFx0XHRcdGNhc2UgJ2RvY3VtZW50JzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKVxuXHRcdFx0XHRcdFx0XHQudGhlbiggdGV4dCA9PiB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIHRleHQsIG1pbWVUeXBlICk7XG5cblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHRpZiAoIG1pbWVUeXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBzbmlmZiBlbmNvZGluZ1xuXHRcdFx0XHRcdFx0XHRjb25zdCByZSA9IC9jaGFyc2V0PVwiPyhbXjtcIlxcc10qKVwiPy9pO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBleGVjID0gcmUuZXhlYyggbWltZVR5cGUgKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbGFiZWwgPSBleGVjICYmIGV4ZWNbIDEgXSA/IGV4ZWNbIDEgXS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCBsYWJlbCApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKCBhYiA9PiBkZWNvZGVyLmRlY29kZSggYWIgKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IClcblx0XHRcdC50aGVuKCBkYXRhID0+IHtcblxuXHRcdFx0XHQvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlXG5cdFx0XHRcdC8vIGVycm9yIHJlc3BvbnNlIGJvZGllcyBhcyBwcm9wZXIgcmVzcG9uc2VzIHRvIHJlcXVlc3RzLlxuXHRcdFx0XHRDYWNoZS5hZGQoIHVybCwgZGF0YSApO1xuXG5cdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkxvYWQgKSBjYWxsYmFjay5vbkxvYWQoIGRhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKVxuXHRcdFx0LmNhdGNoKCBlcnIgPT4ge1xuXG5cdFx0XHRcdC8vIEFib3J0IGVycm9ycyBhbmQgb3RoZXIgZXJyb3JzIGFyZSBoYW5kbGVkIHRoZSBzYW1lXG5cblx0XHRcdFx0Y29uc3QgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0aWYgKCBjYWxsYmFja3MgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIFdoZW4gb25Mb2FkIHdhcyBjYWxsZWQgYW5kIHVybCB3YXMgZGVsZXRlZCBpbiBgbG9hZGluZ2Bcblx0XHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBlcnIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH0gKVxuXHRcdFx0LmZpbmFsbHkoICgpID0+IHtcblxuXHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdHRoaXMubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdH1cblxuXHRzZXRSZXNwb25zZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TWltZVR5cGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5taW1lVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBBbmltYXRpb25Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCB0aGlzLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcbiAqXG4gKiBTdWIgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgcGFyc2UoKSBtZXRob2Qgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGxvYWQoKS5cbiAqL1xuXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGltYWdlcyA9IFtdO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDb21wcmVzc2VkVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXG5cdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybFsgaSBdLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpbWFnZXNbIGkgXSA9IHtcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXG5cdFx0XHRcdFx0Zm9ybWF0OiB0ZXhEYXRhcy5mb3JtYXQsXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGYgXSA9IHsgbWlwbWFwczogW10gfTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ubWlwbWFwcy5wdXNoKCB0ZXhEYXRhcy5taXBtYXBzWyBmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbWFnZSA9IGNyZWF0ZUVsZW1lbnROUyggJ2ltZycgKTtcblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xuXG5cdFx0XHRyZW1vdmVFdmVudExpc3RlbmVycygpO1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgdGhpcyApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGhpcyApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKCBldmVudCApIHtcblxuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZXZlbnQgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zbGljZSggMCwgNSApICE9PSAnZGF0YTonICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCApIGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdGltYWdlLnNyYyA9IHVybDtcblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cbn1cblxuY2xhc3MgQ3ViZVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsZXQgbG9hZGVkID0gMDtcblxuXHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCBpICkge1xuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsc1sgaSBdLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2VzWyBpIF0gPSBpbWFnZTtcblxuXHRcdFx0XHRsb2FkZWQgKys7XG5cblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRsb2FkVGV4dHVyZSggaSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyB0byBsb2FkIGdlbmVyaWMgYmluYXJ5IHRleHR1cmVzIGZvcm1hdHMgKHJnYmUsIGhkciwgLi4uKVxuICpcbiAqIFN1YiBjbGFzc2VzIGhhdmUgdG8gaW1wbGVtZW50IHRoZSBwYXJzZSgpIG1ldGhvZCB3aGljaCB3aWxsIGJlIHVzZWQgaW4gbG9hZCgpLlxuICovXG5cbmNsYXNzIERhdGFUZXh0dXJlTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRjb25zdCB0ZXhEYXRhID0gc2NvcGUucGFyc2UoIGJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoICEgdGV4RGF0YSApIHJldHVybjtcblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleERhdGEuZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhLndpZHRoO1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGEuaGVpZ2h0O1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS53cmFwUyA9IHRleERhdGEud3JhcFMgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IHRleERhdGEud3JhcFQgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IHRleERhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gdGV4RGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0ZXhEYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IHRleERhdGEuYW5pc290cm9weSA6IDE7XG5cblx0XHRcdGlmICggdGV4RGF0YS5lbmNvZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZW5jb2RpbmcgPSB0ZXhEYXRhLmVuY29kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZmxpcFkgPSB0ZXhEYXRhLmZsaXBZO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGEuZm9ybWF0O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS50eXBlID0gdGV4RGF0YS50eXBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzO1xuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjsgLy8gcHJlc3VtYWJseS4uLlxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0ZXhEYXRhLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cbmNsYXNzIFRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlO1xuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0b25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxufVxuXG5jbGFzcyBMaWdodCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpZ2h0JztcblxuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHQvLyBFbXB0eSBoZXJlIGluIGJhc2UgY2xhc3M7IHNvbWUgc3ViY2xhc3NlcyBvdmVycmlkZS5cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XG5cdFx0ZGF0YS5vYmplY3QuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0Lmdyb3VuZENvbG9yID0gdGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hbmdsZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlO1xuXHRcdGlmICggdGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGVjYXkgPSB0aGlzLmRlY2F5O1xuXHRcdGlmICggdGhpcy5wZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QucGVudW1icmEgPSB0aGlzLnBlbnVtYnJhO1xuXG5cdFx0aWYgKCB0aGlzLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3Quc2hhZG93ID0gdGhpcy5zaGFkb3cudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuTGlnaHQucHJvdG90eXBlLmlzTGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIHNreUNvbG9yLCBncm91bmRDb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdFx0c3VwZXIoIHNreUNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5ncm91bmRDb2xvciA9IG5ldyBDb2xvciggZ3JvdW5kQ29sb3IgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUuaXNIZW1pc3BoZXJlTGlnaHQgPSB0cnVlO1xuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2xpZ2h0UG9zaXRpb25Xb3JsZCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2xvb2tUYXJnZXQkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTGlnaHRTaGFkb3cge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdHRoaXMuYmlhcyA9IDA7XG5cdFx0dGhpcy5ub3JtYWxCaWFzID0gMDtcblx0XHR0aGlzLnJhZGl1cyA9IDE7XG5cdFx0dGhpcy5ibHVyU2FtcGxlcyA9IDg7XG5cblx0XHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHRcdHRoaXMubWFwID0gbnVsbDtcblx0XHR0aGlzLm1hcFBhc3MgPSBudWxsO1xuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMCwgMSwgMSApXG5cblx0XHRdO1xuXG5cdH1cblxuXHRnZXRWaWV3cG9ydENvdW50KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0Q291bnQ7XG5cblx0fVxuXG5cdGdldEZydXN0dW0oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJ1c3R1bTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cmljZXMoIGxpZ2h0ICkge1xuXG5cdFx0Y29uc3Qgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XG5cblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkJDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KCBfbGlnaHRQb3NpdGlvbldvcmxkJDEgKTtcblxuXHRcdF9sb29rVGFyZ2V0JDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCQxICk7XG5cdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeCQxLm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggX3Byb2pTY3JlZW5NYXRyaXgkMSApO1xuXG5cdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0fVxuXG5cdGdldFZpZXdwb3J0KCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xuXG5cdH1cblxuXHRnZXRGcmFtZUV4dGVudHMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm1hcCApIHtcblxuXHRcdFx0dGhpcy5tYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hcFBhc3MgKSB7XG5cblx0XHRcdHRoaXMubWFwUGFzcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHt9O1xuXG5cdFx0aWYgKCB0aGlzLmJpYXMgIT09IDAgKSBvYmplY3QuYmlhcyA9IHRoaXMuYmlhcztcblx0XHRpZiAoIHRoaXMubm9ybWFsQmlhcyAhPT0gMCApIG9iamVjdC5ub3JtYWxCaWFzID0gdGhpcy5ub3JtYWxCaWFzO1xuXHRcdGlmICggdGhpcy5yYWRpdXMgIT09IDEgKSBvYmplY3QucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cdFx0aWYgKCB0aGlzLm1hcFNpemUueCAhPT0gNTEyIHx8IHRoaXMubWFwU2l6ZS55ICE9PSA1MTIgKSBvYmplY3QubWFwU2l6ZSA9IHRoaXMubWFwU2l6ZS50b0FycmF5KCk7XG5cblx0XHRvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDtcblx0XHRkZWxldGUgb2JqZWN0LmNhbWVyYS5tYXRyaXg7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufVxuXG5jbGFzcyBTcG90TGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA1MCwgMSwgMC41LCA1MDAgKSApO1xuXG5cdFx0dGhpcy5mb2N1cyA9IDE7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCApIHtcblxuXHRcdGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0Y29uc3QgZm92ID0gUkFEMkRFRyAqIDIgKiBsaWdodC5hbmdsZSAqIHRoaXMuZm9jdXM7XG5cdFx0Y29uc3QgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcblx0XHRjb25zdCBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0XHRjYW1lcmEuZmFyID0gZmFyO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpY2VzKCBsaWdodCApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZm9jdXMgPSBzb3VyY2UuZm9jdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuU3BvdExpZ2h0U2hhZG93LnByb3RvdHlwZS5pc1Nwb3RMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIFNwb3RMaWdodCBleHRlbmRzIExpZ2h0IHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSwgZGlzdGFuY2UgPSAwLCBhbmdsZSA9IE1hdGguUEkgLyAzLCBwZW51bWJyYSA9IDAsIGRlY2F5ID0gMSApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IGFuZ2xlO1xuXHRcdHRoaXMucGVudW1icmEgPSBwZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7IC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFNwb3RMaWdodFNoYWRvdygpO1xuXG5cdH1cblxuXHRnZXQgcG93ZXIoKSB7XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsaWdodCdzIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpIGZyb20gaXRzIGludGVuc2l0eSAoaW4gY2FuZGVsYSlcblx0XHQvLyBieSBjb252ZW50aW9uIGZvciBhIHNwb3RsaWdodCwgbHVtaW5vdXMgcG93ZXIgKGxtKSA9IM+AICogbHVtaW5vdXMgaW50ZW5zaXR5IChjZClcblx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkb3cuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5hbmdsZSA9IHNvdXJjZS5hbmdsZTtcblx0XHR0aGlzLnBlbnVtYnJhID0gc291cmNlLnBlbnVtYnJhO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblNwb3RMaWdodC5wcm90b3R5cGUuaXNTcG90TGlnaHQgPSB0cnVlO1xuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9saWdodFBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbG9va1RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgUG9pbnRMaWdodFNoYWRvdyBleHRlbmRzIExpZ2h0U2hhZG93IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDkwLCAxLCAwLjUsIDUwMCApICk7XG5cblx0XHR0aGlzLl9mcmFtZUV4dGVudHMgPSBuZXcgVmVjdG9yMiggNCwgMiApO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRDb3VudCA9IDY7XG5cblx0XHR0aGlzLl92aWV3cG9ydHMgPSBbXG5cdFx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcblx0XHRcdC8vIGZvbGxvd2luZyBvcmllbnRhdGlvbjpcblx0XHRcdC8vXG5cdFx0XHQvLyAgeHpYWlxuXHRcdFx0Ly8gICB5IFlcblx0XHRcdC8vXG5cdFx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdC8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxuXHRcdFx0Ly8gWSAtIFBvc2l0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cblx0XHRcdC8vIFogLSBQb3NpdGl2ZSB6IGRpcmVjdGlvblxuXHRcdFx0Ly8geiAtIE5lZ2F0aXZlIHogZGlyZWN0aW9uXG5cblx0XHRcdC8vIHBvc2l0aXZlIFhcblx0XHRcdG5ldyBWZWN0b3I0KCAyLCAxLCAxLCAxICksXG5cdFx0XHQvLyBuZWdhdGl2ZSBYXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gcG9zaXRpdmUgWlxuXHRcdFx0bmV3IFZlY3RvcjQoIDMsIDEsIDEsIDEgKSxcblx0XHRcdC8vIG5lZ2F0aXZlIFpcblx0XHRcdG5ldyBWZWN0b3I0KCAxLCAxLCAxLCAxICksXG5cdFx0XHQvLyBwb3NpdGl2ZSBZXG5cdFx0XHRuZXcgVmVjdG9yNCggMywgMCwgMSwgMSApLFxuXHRcdFx0Ly8gbmVnYXRpdmUgWVxuXHRcdFx0bmV3IFZlY3RvcjQoIDEsIDAsIDEsIDEgKVxuXHRcdF07XG5cblx0XHR0aGlzLl9jdWJlRGlyZWN0aW9ucyA9IFtcblx0XHRcdG5ldyBWZWN0b3IzKCAxLCAwLCAwICksIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcblx0XHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApXG5cdFx0XTtcblxuXHRcdHRoaXMuX2N1YmVVcHMgPSBbXG5cdFx0XHRuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLFxuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKVxuXHRcdF07XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdmlld3BvcnRJbmRleCA9IDAgKSB7XG5cblx0XHRjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYTtcblx0XHRjb25zdCBzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeDtcblxuXHRcdGNvbnN0IGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XG5cblx0XHRpZiAoIGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZhciA9IGZhcjtcblx0XHRcdGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHR9XG5cblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRjYW1lcmEucG9zaXRpb24uY29weSggX2xpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0X2xvb2tUYXJnZXQuY29weSggY2FtZXJhLnBvc2l0aW9uICk7XG5cdFx0X2xvb2tUYXJnZXQuYWRkKCB0aGlzLl9jdWJlRGlyZWN0aW9uc1sgdmlld3BvcnRJbmRleCBdICk7XG5cdFx0Y2FtZXJhLnVwLmNvcHkoIHRoaXMuX2N1YmVVcHNbIHZpZXdwb3J0SW5kZXggXSApO1xuXHRcdGNhbWVyYS5sb29rQXQoIF9sb29rVGFyZ2V0ICk7XG5cdFx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAtIF9saWdodFBvc2l0aW9uV29ybGQueCwgLSBfbGlnaHRQb3NpdGlvbldvcmxkLnksIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC56ICk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdHRoaXMuX2ZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0fVxuXG59XG5cblBvaW50TGlnaHRTaGFkb3cucHJvdG90eXBlLmlzUG9pbnRMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIFBvaW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgZGVjYXkgPSAxICkge1xuXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7IC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcblxuXHR9XG5cblx0Z2V0IHBvd2VyKCkge1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbGlnaHQncyBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKSBmcm9tIGl0cyBpbnRlbnNpdHkgKGluIGNhbmRlbGEpXG5cdFx0Ly8gZm9yIGFuIGlzb3Ryb3BpYyBsaWdodCBzb3VyY2UsIGx1bWlub3VzIHBvd2VyIChsbSkgPSA0IM+AIGx1bWlub3VzIGludGVuc2l0eSAoY2QpXG5cdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBjYW5kZWxhKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5Qb2ludExpZ2h0LnByb3RvdHlwZS5pc1BvaW50TGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGV4dGVuZHMgTGlnaHRTaGFkb3cge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gNSwgNSwgNSwgLSA1LCAwLjUsIDUwMCApICk7XG5cblx0fVxuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRTaGFkb3cucHJvdG90eXBlLmlzRGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IHRydWU7XG5cbmNsYXNzIERpcmVjdGlvbmFsTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0RpcmVjdGlvbmFsTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZS5pc0RpcmVjdGlvbmFsTGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBBbWJpZW50TGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0FtYmllbnRMaWdodCc7XG5cblx0fVxuXG59XG5cbkFtYmllbnRMaWdodC5wcm90b3R5cGUuaXNBbWJpZW50TGlnaHQgPSB0cnVlO1xuXG5jbGFzcyBSZWN0QXJlYUxpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5LCB3aWR0aCA9IDEwLCBoZWlnaHQgPSAxMCApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmVjdEFyZWFMaWdodCc7XG5cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0fVxuXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBuaXRzKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIE1hdGguUEk7XG5cblx0fVxuXG5cdHNldCBwb3dlciggcG93ZXIgKSB7XG5cblx0XHQvLyBzZXQgdGhlIGxpZ2h0J3MgaW50ZW5zaXR5IChpbiBuaXRzKSBmcm9tIHRoZSBkZXNpcmVkIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0ICogTWF0aC5QSSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LndpZHRoID0gdGhpcy53aWR0aDtcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5SZWN0QXJlYUxpZ2h0LnByb3RvdHlwZS5pc1JlY3RBcmVhTGlnaHQgPSB0cnVlO1xuXG4vKipcbiAqIFByaW1hcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcbiAqXG4gKiBTZWNvbmRhcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL3d3dy5wcHNsb2FuLm9yZy9wdWJsaWNhdGlvbnMvU3R1cGlkU0gzNi5wZGZcbiAqL1xuXG4vLyAzLWJhbmQgU0ggZGVmaW5lZCBieSA5IGNvZWZmaWNpZW50c1xuXG5jbGFzcyBTcGhlcmljYWxIYXJtb25pY3MzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuY29lZmZpY2llbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCggY29lZmZpY2llbnRzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5jb3B5KCBjb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHplcm8oKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcblx0Z2V0QXQoIG5vcm1hbCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGhcblxuXHRcdGNvbnN0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0XHRjb25zdCBjb2VmZiA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Ly8gYmFuZCAwXG5cdFx0dGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC4yODIwOTUgKTtcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAxIF0sIDAuNDg4NjAzICogeSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDAuNDg4NjAzICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAzIF0sIDAuNDg4NjAzICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDQgXSwgMS4wOTI1NDggKiAoIHggKiB5ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAxLjA5MjU0OCAqICggeSAqIHogKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA2IF0sIDAuMzE1MzkyICogKCAzLjAgKiB6ICogeiAtIDEuMCApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDcgXSwgMS4wOTI1NDggKiAoIHggKiB6ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgOCBdLCAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvLyBnZXQgdGhlIGlycmFkaWFuY2UgKHJhZGlhbmNlIGNvbnZvbHZlZCB3aXRoIGNvc2luZSBsb2JlKSBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xuXHQvLyBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcblx0Z2V0SXJyYWRpYW5jZUF0KCBub3JtYWwsIHRhcmdldCApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXG5cdFx0Y29uc3QgY29lZmYgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHRhcmdldC5jb3B5KCBjb2VmZlsgMCBdICkubXVsdGlwbHlTY2FsYXIoIDAuODg2MjI3ICk7IC8vIM+AICogMC4yODIwOTVcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAxIF0sIDIuMCAqIDAuNTExNjY0ICogeSApOyAvLyAoIDIgKiDPgCAvIDMgKSAqIDAuNDg4NjAzXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDIgXSwgMi4wICogMC41MTE2NjQgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDMgXSwgMi4wICogMC41MTE2NjQgKiB4ICk7XG5cblx0XHQvLyBiYW5kIDJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNCBdLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB5ICk7IC8vICggz4AgLyA0ICkgKiAxLjA5MjU0OFxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA1IF0sIDIuMCAqIDAuNDI5MDQzICogeSAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNiBdLCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTsgLy8gKCDPgCAvIDQgKSAqIDAuMzE1MzkyICogM1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA3IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgOCBdLCAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApICk7IC8vICggz4AgLyA0ICkgKiAwLjU0NjI3NFxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0YWRkKCBzaCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkKCBzaC5jb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxlZFNIKCBzaCwgcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkU2NhbGVkVmVjdG9yKCBzaC5jb2VmZmljaWVudHNbIGkgXSwgcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNjYWxlKCBzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5tdWx0aXBseVNjYWxhciggcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGxlcnAoIHNoLCBhbHBoYSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0ubGVycCggc2guY29lZmZpY2llbnRzWyBpIF0sIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBzaCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggISB0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmVxdWFscyggc2guY29lZmZpY2llbnRzWyBpIF0gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRjb3B5KCBzaCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggc2guY29lZmZpY2llbnRzICk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgY29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS5mcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgKyAoIGkgKiAzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgY29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdC8vIGV2YWx1YXRlIHRoZSBiYXNpcyBmdW5jdGlvbnNcblx0Ly8gc2hCYXNpcyBpcyBhbiBBcnJheVsgOSBdXG5cdHN0YXRpYyBnZXRCYXNpc0F0KCBub3JtYWwsIHNoQmFzaXMgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHNoQmFzaXNbIDAgXSA9IDAuMjgyMDk1O1xuXG5cdFx0Ly8gYmFuZCAxXG5cdFx0c2hCYXNpc1sgMSBdID0gMC40ODg2MDMgKiB5O1xuXHRcdHNoQmFzaXNbIDIgXSA9IDAuNDg4NjAzICogejtcblx0XHRzaEJhc2lzWyAzIF0gPSAwLjQ4ODYwMyAqIHg7XG5cblx0XHQvLyBiYW5kIDJcblx0XHRzaEJhc2lzWyA0IF0gPSAxLjA5MjU0OCAqIHggKiB5O1xuXHRcdHNoQmFzaXNbIDUgXSA9IDEuMDkyNTQ4ICogeSAqIHo7XG5cdFx0c2hCYXNpc1sgNiBdID0gMC4zMTUzOTIgKiAoIDMgKiB6ICogeiAtIDEgKTtcblx0XHRzaEJhc2lzWyA3IF0gPSAxLjA5MjU0OCAqIHggKiB6O1xuXHRcdHNoQmFzaXNbIDggXSA9IDAuNTQ2Mjc0ICogKCB4ICogeCAtIHkgKiB5ICk7XG5cblx0fVxuXG59XG5cblNwaGVyaWNhbEhhcm1vbmljczMucHJvdG90eXBlLmlzU3BoZXJpY2FsSGFybW9uaWNzMyA9IHRydWU7XG5cbmNsYXNzIExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodCB7XG5cblx0Y29uc3RydWN0b3IoIHNoID0gbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKSwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdFx0dGhpcy5zaCA9IHNoO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2guY29weSggc291cmNlLnNoICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmludGVuc2l0eSA9IGpzb24uaW50ZW5zaXR5OyAvLyBUT0RPOiBNb3ZlIHRoaXMgYml0IHRvIExpZ2h0LmZyb21KU09OKCk7XG5cdFx0dGhpcy5zaC5mcm9tQXJyYXkoIGpzb24uc2ggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5zaCA9IHRoaXMuc2gudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbkxpZ2h0UHJvYmUucHJvdG90eXBlLmlzTGlnaHRQcm9iZSA9IHRydWU7XG5cbmNsYXNzIE1hdGVyaWFsTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cdFx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHNjb3BlLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggc2NvcGUucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVzO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBNYXRlcmlhbC5mcm9tVHlwZSgganNvbi50eXBlICk7XG5cblx0XHRpZiAoIGpzb24udXVpZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDtcblx0XHRpZiAoIGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24uY29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5jb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3Iuc2V0SGV4KCBqc29uLmNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm91Z2huZXNzID0ganNvbi5yb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzID0ganNvbi5tZXRhbG5lc3M7XG5cdFx0aWYgKCBqc29uLnNoZWVuICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbiA9IGpzb24uc2hlZW47XG5cdFx0aWYgKCBqc29uLnNoZWVuQ29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIGpzb24uc2hlZW5Db2xvciApO1xuXHRcdGlmICgganNvbi5zaGVlblJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3MgPSBqc29uLnNoZWVuUm91Z2huZXNzO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgoIGpzb24uZW1pc3NpdmUgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXIgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5zcGVjdWxhciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXIuc2V0SGV4KCBqc29uLnNwZWN1bGFyICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eSA9IGpzb24uc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLnNldEhleCgganNvbi5zcGVjdWxhckNvbG9yICk7XG5cdFx0aWYgKCBqc29uLnNoaW5pbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hpbmluZXNzID0ganNvbi5zaGluaW5lc3M7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0ID0ganNvbi5jbGVhcmNvYXQ7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0ganNvbi5jbGVhcmNvYXRSb3VnaG5lc3M7XG5cdFx0aWYgKCBqc29uLnRyYW5zbWlzc2lvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNtaXNzaW9uID0ganNvbi50cmFuc21pc3Npb247XG5cdFx0aWYgKCBqc29uLnRoaWNrbmVzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudGhpY2tuZXNzID0ganNvbi50aGlja25lc3M7XG5cdFx0aWYgKCBqc29uLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmF0dGVudWF0aW9uRGlzdGFuY2UgPSBqc29uLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0aWYgKCBqc29uLmF0dGVudWF0aW9uQ29sb3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yLnNldEhleCgganNvbi5hdHRlbnVhdGlvbkNvbG9yICk7XG5cdFx0aWYgKCBqc29uLmZvZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZm9nID0ganNvbi5mb2c7XG5cdFx0aWYgKCBqc29uLmZsYXRTaGFkaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uZmxhdFNoYWRpbmc7XG5cdFx0aWYgKCBqc29uLmJsZW5kaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZGluZyA9IGpzb24uYmxlbmRpbmc7XG5cdFx0aWYgKCBqc29uLmNvbWJpbmUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbWJpbmUgPSBqc29uLmNvbWJpbmU7XG5cdFx0aWYgKCBqc29uLnNpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpZGUgPSBqc29uLnNpZGU7XG5cdFx0aWYgKCBqc29uLnNoYWRvd1NpZGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoYWRvd1NpZGUgPSBqc29uLnNoYWRvd1NpZGU7XG5cdFx0aWYgKCBqc29uLm9wYWNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm9wYWNpdHkgPSBqc29uLm9wYWNpdHk7XG5cdFx0aWYgKCBqc29uLnRyYW5zcGFyZW50ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc3BhcmVudCA9IGpzb24udHJhbnNwYXJlbnQ7XG5cdFx0aWYgKCBqc29uLmFscGhhVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUZXN0ID0ganNvbi5hbHBoYVRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoVGVzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhUZXN0ID0ganNvbi5kZXB0aFRlc3Q7XG5cdFx0aWYgKCBqc29uLmRlcHRoV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoV3JpdGUgPSBqc29uLmRlcHRoV3JpdGU7XG5cdFx0aWYgKCBqc29uLmNvbG9yV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yV3JpdGUgPSBqc29uLmNvbG9yV3JpdGU7XG5cblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPSBqc29uLnN0ZW5jaWxXcml0ZTtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFdyaXRlTWFzayAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayA9IGpzb24uc3RlbmNpbFdyaXRlTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGdW5jID0ganNvbi5zdGVuY2lsRnVuYztcblx0XHRpZiAoIGpzb24uc3RlbmNpbFJlZiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFJlZiA9IGpzb24uc3RlbmNpbFJlZjtcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZ1bmNNYXNrICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgPSBqc29uLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRpZiAoIGpzb24uc3RlbmNpbEZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGYWlsID0ganNvbi5zdGVuY2lsRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpGYWlsICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWkZhaWwgPSBqc29uLnN0ZW5jaWxaRmFpbDtcblx0XHRpZiAoIGpzb24uc3RlbmNpbFpQYXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgPSBqc29uLnN0ZW5jaWxaUGFzcztcblxuXHRcdGlmICgganNvbi53aXJlZnJhbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCA9IGpzb24ud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lY2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lY2FwID0ganNvbi53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdGlmICgganNvbi53aXJlZnJhbWVMaW5lam9pbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0aWYgKCBqc29uLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247XG5cblx0XHRpZiAoIGpzb24ubGluZXdpZHRoICE9PSAxICkgbWF0ZXJpYWwubGluZXdpZHRoID0ganNvbi5saW5ld2lkdGg7XG5cdFx0aWYgKCBqc29uLmRhc2hTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kYXNoU2l6ZSA9IGpzb24uZGFzaFNpemU7XG5cdFx0aWYgKCBqc29uLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdhcFNpemUgPSBqc29uLmdhcFNpemU7XG5cdFx0aWYgKCBqc29uLnNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zY2FsZSA9IGpzb24uc2NhbGU7XG5cblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldEZhY3RvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciA9IGpzb24ucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHRpZiAoIGpzb24ucG9seWdvbk9mZnNldFVuaXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBqc29uLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdGlmICgganNvbi5kaXRoZXJpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpdGhlcmluZyA9IGpzb24uZGl0aGVyaW5nO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhVG9Db3ZlcmFnZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID0ganNvbi5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0aWYgKCBqc29uLnByZW11bHRpcGxpZWRBbHBoYSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhID0ganNvbi5wcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0XHRpZiAoIGpzb24udmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmlzaWJsZSA9IGpzb24udmlzaWJsZTtcblxuXHRcdGlmICgganNvbi50b25lTWFwcGVkICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50b25lTWFwcGVkID0ganNvbi50b25lTWFwcGVkO1xuXG5cdFx0aWYgKCBqc29uLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHRpZiAoIGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGpzb24udmVydGV4Q29sb3JzID09PSAnbnVtYmVyJyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSAoIGpzb24udmVydGV4Q29sb3JzID4gMCApID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGpzb24udmVydGV4Q29sb3JzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTaGFkZXIgTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi51bmlmb3JtcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGpzb24udW5pZm9ybXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybSA9IGpzb24udW5pZm9ybXNbIG5hbWUgXTtcblxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdID0ge307XG5cblx0XHRcdFx0c3dpdGNoICggdW5pZm9ybS50eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAndCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gZ2V0VGV4dHVyZSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdjJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjInOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YzJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2NCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTMnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ200Jzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uZGVmaW5lcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVmaW5lcyA9IGpzb24uZGVmaW5lcztcblx0XHRpZiAoIGpzb24udmVydGV4U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIgPSBqc29uLnZlcnRleFNoYWRlcjtcblx0XHRpZiAoIGpzb24uZnJhZ21lbnRTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyID0ganNvbi5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGlmICgganNvbi5leHRlbnNpb25zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBqc29uLmV4dGVuc2lvbnMgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwuZXh0ZW5zaW9uc1sga2V5IF0gPSBqc29uLmV4dGVuc2lvbnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBEZXByZWNhdGVkXG5cblx0XHRpZiAoIGpzb24uc2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLnNoYWRpbmcgPT09IDE7IC8vIFRIUkVFLkZsYXRTaGFkaW5nXG5cblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi5zaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplO1xuXHRcdGlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGpzb24uc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0Ly8gbWFwc1xuXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcblx0XHRpZiAoIGpzb24ubWF0Y2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tYXRjYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1hdGNhcCApO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIGpzb24uYWxwaGFNYXAgKTtcblxuXHRcdGlmICgganNvbi5idW1wTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wTWFwID0gZ2V0VGV4dHVyZSgganNvbi5idW1wTWFwICk7XG5cdFx0aWYgKCBqc29uLmJ1bXBTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7XG5cblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlO1xuXHRcdGlmICgganNvbi5ub3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgbm9ybWFsU2NhbGUgPSBqc29uLm5vcm1hbFNjYWxlO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5vcm1hbFNjYWxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIEJsZW5kZXIgZXhwb3J0ZXIgdXNlZCB0byBleHBvcnQgYSBzY2FsYXIuIFNlZSAjNzQ1OVxuXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBub3JtYWxTY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5kaXNwbGFjZW1lbnRNYXAgKTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0ganNvbi5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50QmlhcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IGpzb24uZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdGlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ucm91Z2huZXNzTWFwICk7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5tZXRhbG5lc3NNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVtaXNzaXZlTWFwICk7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IGpzb24uZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhck1hcCApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhckludGVuc2l0eU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5TWFwICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcCA9IGdldFRleHR1cmUoIGpzb24uZW52TWFwICk7XG5cdFx0aWYgKCBqc29uLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5ID0ganNvbi5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcblx0XHRpZiAoIGpzb24ucmVmcmFjdGlvblJhdGlvICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSBqc29uLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IGpzb24ubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xuXHRcdGlmICgganNvbi5hb01hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcblxuXHRcdGlmICgganNvbi5jbGVhcmNvYXRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0TWFwICk7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdFJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgKTtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdE5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSgganNvbi5jbGVhcmNvYXROb3JtYWxTY2FsZSApO1xuXG5cdFx0aWYgKCBqc29uLnRyYW5zbWlzc2lvbk1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwID0gZ2V0VGV4dHVyZSgganNvbi50cmFuc21pc3Npb25NYXAgKTtcblx0XHRpZiAoIGpzb24udGhpY2tuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50aGlja25lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnRoaWNrbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLnNoZWVuQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNoZWVuQ29sb3JNYXAgKTtcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlblJvdWdobmVzc01hcCApO1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdH1cblxuXHRzZXRUZXh0dXJlcyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIExvYWRlclV0aWxzIHtcblxuXHRzdGF0aWMgZGVjb2RlVGV4dCggYXJyYXkgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHQvLyBBdm9pZCB0aGUgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgc2hvcnRjdXQsIHdoaWNoXG5cdFx0Ly8gdGhyb3dzIGEgXCJtYXhpbXVtIGNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiIGVycm9yIGZvciBsYXJnZSBhcnJheXMuXG5cblx0XHRsZXQgcyA9ICcnO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBJbXBsaWNpdGx5IGFzc3VtZXMgbGl0dGxlLWVuZGlhbi5cblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Ly8gbWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cblxuXHRcdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTtcblxuXHRcdH0gY2F0Y2ggKCBlICkgeyAvLyBzZWUgIzE2MzU4XG5cblx0XHRcdHJldHVybiBzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzdGF0aWMgZXh0cmFjdFVybEJhc2UoIHVybCApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdXJsLmxhc3RJbmRleE9mKCAnLycgKTtcblxuXHRcdGlmICggaW5kZXggPT09IC0gMSApIHJldHVybiAnLi8nO1xuXG5cdFx0cmV0dXJuIHVybC5zbGljZSggMCwgaW5kZXggKyAxICk7XG5cblx0fVxuXG5cdHN0YXRpYyByZXNvbHZlVVJMKCB1cmwsIHBhdGggKSB7XG5cblx0XHQvLyBJbnZhbGlkIFVSTFxuXHRcdGlmICggdHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdXJsID09PSAnJyApIHJldHVybiAnJztcblxuXHRcdC8vIEhvc3QgUmVsYXRpdmUgVVJMXG5cdFx0aWYgKCAvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KCBwYXRoICkgJiYgL15cXC8vLnRlc3QoIHVybCApICkge1xuXG5cdFx0XHRwYXRoID0gcGF0aC5yZXBsYWNlKCAvKF5odHRwcz86XFwvXFwvW15cXC9dKykuKi9pLCAnJDEnICk7XG5cblx0XHR9XG5cblx0XHQvLyBBYnNvbHV0ZSBVUkwgaHR0cDovLyxodHRwczovLywvL1xuXHRcdGlmICggL14oaHR0cHM/Oik/XFwvXFwvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gRGF0YSBVUklcblx0XHRpZiAoIC9eZGF0YTouKiwuKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBCbG9iIFVSTFxuXHRcdGlmICggL15ibG9iOi4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIFJlbGF0aXZlIFVSTFxuXHRcdHJldHVybiBwYXRoICsgdXJsO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknO1xuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IEluZmluaXR5O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IHNvdXJjZS5pbnN0YW5jZUNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCB0aGlzICk7XG5cblx0XHRkYXRhLmluc3RhbmNlQ291bnQgPSB0aGlzLmluc3RhbmNlQ291bnQ7XG5cblx0XHRkYXRhLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuY2xhc3MgQnVmZmVyR2VvbWV0cnlMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHNjb3BlLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCBzY29wZS53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyTWFwID0ge307XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXJNYXAgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBpbnRlcmxlYXZlZEJ1ZmZlck1hcFsgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlcnMgPSBqc29uLmludGVybGVhdmVkQnVmZmVycztcblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gaW50ZXJsZWF2ZWRCdWZmZXJzWyB1dWlkIF07XG5cblx0XHRcdGNvbnN0IGJ1ZmZlciA9IGdldEFycmF5QnVmZmVyKCBqc29uLCBpbnRlcmxlYXZlZEJ1ZmZlci5idWZmZXIgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbnRlcmxlYXZlZEJ1ZmZlci50eXBlLCBidWZmZXIgKTtcblx0XHRcdGNvbnN0IGliID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgaW50ZXJsZWF2ZWRCdWZmZXIuc3RyaWRlICk7XG5cdFx0XHRpYi51dWlkID0gaW50ZXJsZWF2ZWRCdWZmZXIudXVpZDtcblxuXHRcdFx0aW50ZXJsZWF2ZWRCdWZmZXJNYXBbIHV1aWQgXSA9IGliO1xuXG5cdFx0XHRyZXR1cm4gaWI7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcigganNvbiwgdXVpZCApIHtcblxuXHRcdFx0aWYgKCBhcnJheUJ1ZmZlck1hcFsgdXVpZCBdICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYXJyYXlCdWZmZXJNYXBbIHV1aWQgXTtcblxuXHRcdFx0Y29uc3QgYXJyYXlCdWZmZXJzID0ganNvbi5hcnJheUJ1ZmZlcnM7XG5cdFx0XHRjb25zdCBhcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyc1sgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBhYiA9IG5ldyBVaW50MzJBcnJheSggYXJyYXlCdWZmZXIgKS5idWZmZXI7XG5cblx0XHRcdGFycmF5QnVmZmVyTWFwWyB1dWlkIF0gPSBhYjtcblxuXHRcdFx0cmV0dXJuIGFiO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBqc29uLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPyBuZXcgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHR5cGVkQXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbmRleC50eXBlLCBpbmRleC5hcnJheSApO1xuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGpzb24uZGF0YS5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlciA9IGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLmRhdGEsIGF0dHJpYnV0ZS5kYXRhICk7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggYXR0cmlidXRlLnR5cGUsIGF0dHJpYnV0ZS5hcnJheSApO1xuXHRcdFx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBidWZmZXJBdHRyaWJ1dGVDb25zdHIoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xuXHRcdFx0aWYgKCBhdHRyaWJ1dGUudXNhZ2UgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRVc2FnZSggYXR0cmlidXRlLnVzYWdlICk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLnVwZGF0ZVJhbmdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YnVmZmVyQXR0cmlidXRlLnVwZGF0ZVJhbmdlLm9mZnNldCA9IGF0dHJpYnV0ZS51cGRhdGVSYW5nZS5vZmZzZXQ7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudCA9IGF0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGtleSwgYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBqc29uLmRhdGEubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlQXJyYXlbIGkgXTtcblx0XHRcdFx0XHRsZXQgYnVmZmVyQXR0cmlidXRlO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBnZXRJbnRlcmxlYXZlZEJ1ZmZlcigganNvbi5kYXRhLCBhdHRyaWJ1dGUuZGF0YSApO1xuXHRcdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUub2Zmc2V0LCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdHlwZWRBcnJheSA9IGdldFR5cGVkQXJyYXkoIGF0dHJpYnV0ZS50eXBlLCBhdHRyaWJ1dGUuYXJyYXkgKTtcblx0XHRcdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cdFx0XHRcdFx0YXJyYXkucHVzaCggYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1sga2V5IF0gPSBhcnJheTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBqc29uLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XG5cblx0XHRpZiAoIGdyb3VwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBncm91cHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0Z2VvbWV0cnkuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBib3VuZGluZ1NwaGVyZSA9IGpzb24uZGF0YS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0aWYgKCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjZW50ZXIuZnJvbUFycmF5KCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoIGNlbnRlciwgYm91bmRpbmdTcGhlcmUucmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24ubmFtZSApIGdlb21ldHJ5Lm5hbWUgPSBqc29uLm5hbWU7XG5cdFx0aWYgKCBqc29uLnVzZXJEYXRhICkgZ2VvbWV0cnkudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxufVxuXG5jbGFzcyBPYmplY3RMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB0aGlzLnJlc291cmNlUGF0aCB8fCBwYXRoO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSApO1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtZXRhZGF0YSA9IGpzb24ubWV0YWRhdGE7XG5cblx0XHRcdGlmICggbWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZ2VvbWV0cnknICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IENhblxcJ3QgbG9hZCAnICsgdXJsICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5wYXJzZSgganNvbiwgb25Mb2FkICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgcGF0aCA9ICggdGhpcy5wYXRoID09PSAnJyApID8gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogdGhpcy5wYXRoO1xuXHRcdHRoaXMucmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGggfHwgcGF0aDtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHRoaXMud2l0aENyZWRlbnRpYWxzICk7XG5cblx0XHRjb25zdCB0ZXh0ID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggdXJsLCBvblByb2dyZXNzICk7XG5cblx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0Y29uc3QgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhd2FpdCBzY29wZS5wYXJzZUFzeW5jKCBqc29uICk7XG5cblx0fVxuXG5cdHBhcnNlKCBqc29uLCBvbkxvYWQgKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZXMoIGpzb24uc2hhcGVzICk7XG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0Y29uc3QgaW1hZ2VzID0gdGhpcy5wYXJzZUltYWdlcygganNvbi5pbWFnZXMsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XG5cdFx0Y29uc3QgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscygganNvbi5tYXRlcmlhbHMsIHRleHR1cmVzICk7XG5cblx0XHRjb25zdCBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KCBqc29uLm9iamVjdCwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNrZWxldG9ucyA9IHRoaXMucGFyc2VTa2VsZXRvbnMoIGpzb24uc2tlbGV0b25zLCBvYmplY3QgKTtcblxuXHRcdHRoaXMuYmluZFNrZWxldG9ucyggb2JqZWN0LCBza2VsZXRvbnMgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgaGFzSW1hZ2VzID0gZmFsc2U7XG5cblx0XHRcdGZvciAoIGNvbnN0IHV1aWQgaW4gaW1hZ2VzICkge1xuXG5cdFx0XHRcdGlmICggaW1hZ2VzWyB1dWlkIF0gaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xuXG5cdFx0XHRcdFx0aGFzSW1hZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNJbWFnZXMgPT09IGZhbHNlICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoIGpzb24uYW5pbWF0aW9ucyApO1xuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZXMoIGpzb24uc2hhcGVzICk7XG5cdFx0Y29uc3QgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKCBqc29uLmdlb21ldHJpZXMsIHNoYXBlcyApO1xuXG5cdFx0Y29uc3QgaW1hZ2VzID0gYXdhaXQgdGhpcy5wYXJzZUltYWdlc0FzeW5jKCBqc29uLmltYWdlcyApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoIGpzb24udGV4dHVyZXMsIGltYWdlcyApO1xuXHRcdGNvbnN0IG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIGpzb24ubWF0ZXJpYWxzLCB0ZXh0dXJlcyApO1xuXG5cdFx0Y29uc3Qgb2JqZWN0ID0gdGhpcy5wYXJzZU9iamVjdCgganNvbi5vYmplY3QsIGdlb21ldHJpZXMsIG1hdGVyaWFscywgdGV4dHVyZXMsIGFuaW1hdGlvbnMgKTtcblx0XHRjb25zdCBza2VsZXRvbnMgPSB0aGlzLnBhcnNlU2tlbGV0b25zKCBqc29uLnNrZWxldG9ucywgb2JqZWN0ICk7XG5cblx0XHR0aGlzLmJpbmRTa2VsZXRvbnMoIG9iamVjdCwgc2tlbGV0b25zICk7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRwYXJzZVNoYXBlcygganNvbiApIHtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0XHRzaGFwZXNbIHNoYXBlLnV1aWQgXSA9IHNoYXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxuXHRwYXJzZVNrZWxldG9ucygganNvbiwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b25zID0ge307XG5cdFx0Y29uc3QgYm9uZXMgPSB7fTtcblxuXHRcdC8vIGdlbmVyYXRlIGJvbmUgbG9va3VwIHRhYmxlXG5cblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdGlmICggY2hpbGQuaXNCb25lICkgYm9uZXNbIGNoaWxkLnV1aWQgXSA9IGNoaWxkO1xuXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHNrZWxldG9uc1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbigpLmZyb21KU09OKCBqc29uWyBpIF0sIGJvbmVzICk7XG5cblx0XHRcdFx0c2tlbGV0b25zWyBza2VsZXRvbi51dWlkIF0gPSBza2VsZXRvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNrZWxldG9ucztcblxuXHR9XG5cblx0cGFyc2VHZW9tZXRyaWVzKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdCdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBUaGUgbGVnYWN5IEdlb21ldHJ5IHR5cGUgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgaW4gR2VvbWV0cmllcyApIHtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeSA9IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdLmZyb21KU09OKCBkYXRhLCBzaGFwZXMgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oIGBUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgXCIkeyBkYXRhLnR5cGUgfVwiYCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5Lm5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSAmJiBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cblx0XHRcdFx0Z2VvbWV0cmllc1sgZGF0YS51dWlkIF0gPSBnZW9tZXRyeTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdlb21ldHJpZXM7XG5cblx0fVxuXG5cdHBhcnNlTWF0ZXJpYWxzKCBqc29uLCB0ZXh0dXJlcyApIHtcblxuXHRcdGNvbnN0IGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWxcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBsb2FkZXIgPSBuZXcgTWF0ZXJpYWxMb2FkZXIoKTtcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdNdWx0aU1hdGVyaWFsJyApIHtcblxuXHRcdFx0XHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdFx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBkYXRhLm1hdGVyaWFscy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gZGF0YS5tYXRlcmlhbHNbIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGVbIG1hdGVyaWFsLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRhcnJheS5wdXNoKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gYXJyYXk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhY2hlWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGNhY2hlWyBkYXRhLnV1aWQgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fVxuXG5cdHBhcnNlQW5pbWF0aW9ucygganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uc1sgY2xpcC51dWlkIF0gPSBjbGlwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cblx0cGFyc2VJbWFnZXMoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblx0XHRjb25zdCBpbWFnZXMgPSB7fTtcblxuXHRcdGxldCBsb2FkZXI7XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRhdGE6IGdldFR5cGVkQXJyYXkoIGltYWdlLnR5cGUsIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IGpzb25bIGkgXTtcblx0XHRcdFx0Y29uc3QgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGNvbnN0IGltYWdlQXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRVcmwgPSB1cmxbIGogXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBjdXJyZW50VXJsICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbWFnZUFycmF5LnB1c2goIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMgZm9yIGN1YmUgdGV4dHVyZXNcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggbmV3IERhdGFUZXh0dXJlKCBkZXNlcmlhbGl6ZWRJbWFnZS5kYXRhLCBkZXNlcmlhbGl6ZWRJbWFnZS53aWR0aCwgZGVzZXJpYWxpemVkSW1hZ2UuaGVpZ2h0ICkgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggaW1hZ2VBcnJheSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBpbWFnZS51cmwgKTtcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlSW1hZ2VzQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cdFx0Y29uc3QgaW1hZ2VzID0ge307XG5cblx0XHRsZXQgbG9hZGVyO1xuXG5cdFx0YXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggcGF0aCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkYXRhOiBnZXRUeXBlZEFycmF5KCBpbWFnZS50eXBlLCBpbWFnZS5kYXRhICksXG5cdFx0XHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VBcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVybC5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGN1cnJlbnRVcmwgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcyBmb3IgY3ViZSB0ZXh0dXJlc1xuXG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2VBcnJheS5wdXNoKCBuZXcgRGF0YVRleHR1cmUoIGRlc2VyaWFsaXplZEltYWdlLmRhdGEsIGRlc2VyaWFsaXplZEltYWdlLndpZHRoLCBkZXNlcmlhbGl6ZWRJbWFnZS5oZWlnaHQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBuZXcgU291cmNlKCBpbWFnZUFycmF5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGltYWdlLnVybCApO1xuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdHBhcnNlVGV4dHVyZXMoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc291cmNlID0gaW1hZ2VzWyBkYXRhLmltYWdlIF07XG5cdFx0XHRcdGNvbnN0IGltYWdlID0gc291cmNlLmRhdGE7XG5cblx0XHRcdFx0bGV0IHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZS5sZW5ndGggPT09IDYgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaW1hZ2UgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gdGV4dHVyZXMgY2FuIGhhdmUgdW5kZWZpbmVkIGltYWdlIGRhdGFcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm9mZnNldCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBkYXRhLm9mZnNldCApO1xuXHRcdFx0XHRpZiAoIGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIGRhdGEucmVwZWF0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJvdGF0aW9uID0gZGF0YS5yb3RhdGlvbjtcblxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwUyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMCBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7XG5cdFx0XHRcdGlmICggZGF0YS5lbmNvZGluZyAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5lbmNvZGluZyA9IGRhdGEuZW5jb2Rpbmc7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYWdGaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZmxpcFkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZO1xuXG5cdFx0XHRcdGlmICggZGF0YS5wcmVtdWx0aXBseUFscGhhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0XHRcdGlmICggZGF0YS51bnBhY2tBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gZGF0YS51bnBhY2tBbGlnbm1lbnQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fVxuXG5cdHBhcnNlT2JqZWN0KCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICkge1xuXG5cdFx0bGV0IG9iamVjdDtcblxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5JywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyaWVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgdXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgdXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGdlb21ldHJ5LCBtYXRlcmlhbDtcblxuXHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnU2NlbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE51bWJlci5pc0ludGVnZXIoIGRhdGEuYmFja2dyb3VuZCApICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IGdldFRleHR1cmUoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IGdldFRleHR1cmUoIGRhdGEuZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZGF0YS5mb3YsIGRhdGEuYXNwZWN0LCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvY3VzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzO1xuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS5maWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtR2F1Z2UgPSBkYXRhLmZpbG1HYXVnZTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1PZmZzZXQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0O1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggZGF0YS5sZWZ0LCBkYXRhLnJpZ2h0LCBkYXRhLnRvcCwgZGF0YS5ib3R0b20sIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQW1iaWVudExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgQW1iaWVudExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3BvdExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuZ3JvdW5kQ29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpZ2h0UHJvYmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaWdodFByb2JlKCkuZnJvbUpTT04oIGRhdGEgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU2tpbm5lZE1lc2gnOlxuXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdCBcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iaW5kTW9kZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmJpbmRNb2RlID0gZGF0YS5iaW5kTW9kZTtcblx0XHRcdFx0aWYgKCBkYXRhLmJpbmRNYXRyaXggIT09IHVuZGVmaW5lZCApIG9iamVjdC5iaW5kTWF0cml4LmZyb21BcnJheSggZGF0YS5iaW5kTWF0cml4ICk7XG5cdFx0XHRcdGlmICggZGF0YS5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNrZWxldG9uID0gZGF0YS5za2VsZXRvbjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTWVzaCc6XG5cblx0XHRcdFx0Z2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0XHRtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdJbnN0YW5jZWRNZXNoJzpcblxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblx0XHRcdFx0Y29uc3QgY291bnQgPSBkYXRhLmNvdW50O1xuXHRcdFx0XHRjb25zdCBpbnN0YW5jZU1hdHJpeCA9IGRhdGEuaW5zdGFuY2VNYXRyaXg7XG5cdFx0XHRcdGNvbnN0IGluc3RhbmNlQ29sb3IgPSBkYXRhLmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKTtcblx0XHRcdFx0b2JqZWN0Lmluc3RhbmNlTWF0cml4ID0gbmV3IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggaW5zdGFuY2VNYXRyaXguYXJyYXkgKSwgMTYgKTtcblx0XHRcdFx0aWYgKCBpbnN0YW5jZUNvbG9yICE9PSB1bmRlZmluZWQgKSBvYmplY3QuaW5zdGFuY2VDb2xvciA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGluc3RhbmNlQ29sb3IuYXJyYXkgKSwgaW5zdGFuY2VDb2xvci5pdGVtU2l6ZSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMT0QnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMT0QoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpbmUoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lTG9vcCggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lU2VnbWVudHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XG5cdFx0XHRjYXNlICdQb2ludHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3ByaXRlJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0dyb3VwJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQm9uZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEJvbmUoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0aWYgKCBkYXRhLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvYmplY3QubWF0cml4LmZyb21BcnJheSggZGF0YS5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBkYXRhLm1hdHJpeEF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdFx0aWYgKCBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSApIG9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnBvc2l0aW9uLmZyb21BcnJheSggZGF0YS5wb3NpdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Qucm90YXRpb24uZnJvbUFycmF5KCBkYXRhLnJvdGF0aW9uICk7XG5cdFx0XHRpZiAoIGRhdGEucXVhdGVybmlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnF1YXRlcm5pb24uZnJvbUFycmF5KCBkYXRhLnF1YXRlcm5pb24gKTtcblx0XHRcdGlmICggZGF0YS5zY2FsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNjYWxlLmZyb21BcnJheSggZGF0YS5zY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5jYXN0U2hhZG93ID0gZGF0YS5jYXN0U2hhZG93O1xuXHRcdGlmICggZGF0YS5yZWNlaXZlU2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IGRhdGEucmVjZWl2ZVNoYWRvdztcblxuXHRcdGlmICggZGF0YS5zaGFkb3cgKSB7XG5cblx0XHRcdGlmICggZGF0YS5zaGFkb3cuYmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5iaWFzID0gZGF0YS5zaGFkb3cuYmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubm9ybWFsQmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5ub3JtYWxCaWFzID0gZGF0YS5zaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cucmFkaXVzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LnJhZGl1cyA9IGRhdGEuc2hhZG93LnJhZGl1cztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5jYW1lcmEgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuY2FtZXJhID0gdGhpcy5wYXJzZU9iamVjdCggZGF0YS5zaGFkb3cuY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpc2libGUgPSBkYXRhLnZpc2libGU7XG5cdFx0aWYgKCBkYXRhLmZydXN0dW1DdWxsZWQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkO1xuXHRcdGlmICggZGF0YS5yZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlbmRlck9yZGVyID0gZGF0YS5yZW5kZXJPcmRlcjtcblx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG9iamVjdC51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cdFx0aWYgKCBkYXRhLmxheWVycyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7XG5cblx0XHRpZiAoIGRhdGEuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmFkZCggdGhpcy5wYXJzZU9iamVjdCggY2hpbGRyZW5bIGkgXSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5hbmltYXRpb25zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdEFuaW1hdGlvbnMgPSBkYXRhLmFuaW1hdGlvbnM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHV1aWQgPSBvYmplY3RBbmltYXRpb25zWyBpIF07XG5cblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggYW5pbWF0aW9uc1sgdXVpZCBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS50eXBlID09PSAnTE9EJyApIHtcblxuXHRcdFx0aWYgKCBkYXRhLmF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5hdXRvVXBkYXRlID0gZGF0YS5hdXRvVXBkYXRlO1xuXG5cdFx0XHRjb25zdCBsZXZlbHMgPSBkYXRhLmxldmVscztcblxuXHRcdFx0Zm9yICggbGV0IGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgbCBdO1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIGxldmVsLm9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5hZGRMZXZlbCggY2hpbGQsIGxldmVsLmRpc3RhbmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRiaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApIHtcblxuXHRcdGlmICggT2JqZWN0LmtleXMoIHNrZWxldG9ucyApLmxlbmd0aCA9PT0gMCApIHJldHVybjtcblxuXHRcdG9iamVjdC50cmF2ZXJzZSggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0aWYgKCBjaGlsZC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmIGNoaWxkLnNrZWxldG9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBza2VsZXRvbnNbIGNoaWxkLnNrZWxldG9uIF07XG5cblx0XHRcdFx0aWYgKCBza2VsZXRvbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBza2VsZXRvbiBmb3VuZCB3aXRoIFVVSUQ6JywgY2hpbGQuc2tlbGV0b24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y2hpbGQuYmluZCggc2tlbGV0b24sIGNoaWxkLmJpbmRNYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyogREVQUkVDQVRFRCAqL1xuXG5cdHNldFRleHR1cmVQYXRoKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogLnNldFRleHR1cmVQYXRoKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0UmVzb3VyY2VQYXRoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldFJlc291cmNlUGF0aCggdmFsdWUgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgVEVYVFVSRV9NQVBQSU5HID0ge1xuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmdcbn07XG5cbmNvbnN0IFRFWFRVUkVfV1JBUFBJTkcgPSB7XG5cdFJlcGVhdFdyYXBwaW5nOiBSZXBlYXRXcmFwcGluZyxcblx0Q2xhbXBUb0VkZ2VXcmFwcGluZzogQ2xhbXBUb0VkZ2VXcmFwcGluZyxcblx0TWlycm9yZWRSZXBlYXRXcmFwcGluZzogTWlycm9yZWRSZXBlYXRXcmFwcGluZ1xufTtcblxuY29uc3QgVEVYVFVSRV9GSUxURVIgPSB7XG5cdE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyOiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcjogTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcixcblx0TGluZWFyRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXI6IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdExpbmVhck1pcG1hcExpbmVhckZpbHRlcjogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXG59O1xuXG5jbGFzcyBJbWFnZUJpdG1hcExvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdFx0aWYgKCB0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm9wdGlvbnMgPSB7IHByZW11bHRpcGx5QWxwaGE6ICdub25lJyB9O1xuXG5cdH1cblxuXHRzZXRPcHRpb25zKCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGZldGNoT3B0aW9ucyA9IHt9O1xuXHRcdGZldGNoT3B0aW9ucy5jcmVkZW50aWFscyA9ICggdGhpcy5jcm9zc09yaWdpbiA9PT0gJ2Fub255bW91cycgKSA/ICdzYW1lLW9yaWdpbicgOiAnaW5jbHVkZSc7XG5cdFx0ZmV0Y2hPcHRpb25zLmhlYWRlcnMgPSB0aGlzLnJlcXVlc3RIZWFkZXI7XG5cblx0XHRmZXRjaCggdXJsLCBmZXRjaE9wdGlvbnMgKS50aGVuKCBmdW5jdGlvbiAoIHJlcyApIHtcblxuXHRcdFx0cmV0dXJuIHJlcy5ibG9iKCk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBibG9iICkge1xuXG5cdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIE9iamVjdC5hc3NpZ24oIHNjb3BlLm9wdGlvbnMsIHsgY29sb3JTcGFjZUNvbnZlcnNpb246ICdub25lJyB9ICkgKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGltYWdlQml0bWFwICkge1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICkuY2F0Y2goIGZ1bmN0aW9uICggZSApIHtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggZSApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fSApO1xuXG5cdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdH1cblxufVxuXG5JbWFnZUJpdG1hcExvYWRlci5wcm90b3R5cGUuaXNJbWFnZUJpdG1hcExvYWRlciA9IHRydWU7XG5cbmxldCBfY29udGV4dDtcblxuY29uc3QgQXVkaW9Db250ZXh0ID0ge1xuXG5cdGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggX2NvbnRleHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2NvbnRleHQgPSBuZXcgKCB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgKSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIF9jb250ZXh0O1xuXG5cdH0sXG5cblx0c2V0Q29udGV4dDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdF9jb250ZXh0ID0gdmFsdWU7XG5cblx0fVxuXG59O1xuXG5jbGFzcyBBdWRpb0xvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCB0aGlzLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGJ1ZmZlci4gVGhlIGBkZWNvZGVBdWRpb0RhdGFgIG1ldGhvZFxuXHRcdFx0XHQvLyBkZXRhY2hlcyB0aGUgYnVmZmVyIHdoZW4gY29tcGxldGUsIHByZXZlbnRpbmcgcmV1c2UuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckNvcHkgPSBidWZmZXIuc2xpY2UoIDAgKTtcblxuXHRcdFx0XHRjb25zdCBjb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblx0XHRcdFx0Y29udGV4dC5kZWNvZGVBdWRpb0RhdGEoIGJ1ZmZlckNvcHksIGZ1bmN0aW9uICggYXVkaW9CdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRvbkxvYWQoIGF1ZGlvQnVmZmVyICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRpZiAoIG9uRXJyb3IgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fVxuXG59XG5cbmNsYXNzIEhlbWlzcGhlcmVMaWdodFByb2JlIGV4dGVuZHMgTGlnaHRQcm9iZSB7XG5cblx0Y29uc3RydWN0b3IoIHNreUNvbG9yLCBncm91bmRDb2xvciwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdFx0Y29uc3QgY29sb3IxID0gbmV3IENvbG9yKCkuc2V0KCBza3lDb2xvciApO1xuXHRcdGNvbnN0IGNvbG9yMiA9IG5ldyBDb2xvcigpLnNldCggZ3JvdW5kQ29sb3IgKTtcblxuXHRcdGNvbnN0IHNreSA9IG5ldyBWZWN0b3IzKCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICk7XG5cdFx0Y29uc3QgZ3JvdW5kID0gbmV3IFZlY3RvcjMoIGNvbG9yMi5yLCBjb2xvcjIuZywgY29sb3IyLmIgKTtcblxuXHRcdC8vIHdpdGhvdXQgZXh0cmEgZmFjdG9yIG9mIFBJIGluIHRoZSBzaGFkZXIsIHNob3VsZCA9IDEgLyBNYXRoLnNxcnQoIE1hdGguUEkgKTtcblx0XHRjb25zdCBjMCA9IE1hdGguc3FydCggTWF0aC5QSSApO1xuXHRcdGNvbnN0IGMxID0gYzAgKiBNYXRoLnNxcnQoIDAuNzUgKTtcblxuXHRcdHRoaXMuc2guY29lZmZpY2llbnRzWyAwIF0uY29weSggc2t5ICkuYWRkKCBncm91bmQgKS5tdWx0aXBseVNjYWxhciggYzAgKTtcblx0XHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMSBdLmNvcHkoIHNreSApLnN1YiggZ3JvdW5kICkubXVsdGlwbHlTY2FsYXIoIGMxICk7XG5cblx0fVxuXG59XG5cbkhlbWlzcGhlcmVMaWdodFByb2JlLnByb3RvdHlwZS5pc0hlbWlzcGhlcmVMaWdodFByb2JlID0gdHJ1ZTtcblxuY2xhc3MgQW1iaWVudExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodFByb2JlIHtcblxuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSA9IDEgKSB7XG5cblx0XHRzdXBlciggdW5kZWZpbmVkLCBpbnRlbnNpdHkgKTtcblxuXHRcdGNvbnN0IGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldCggY29sb3IgKTtcblxuXHRcdC8vIHdpdGhvdXQgZXh0cmEgZmFjdG9yIG9mIFBJIGluIHRoZSBzaGFkZXIsIHdvdWxkIGJlIDIgLyBNYXRoLnNxcnQoIE1hdGguUEkgKTtcblx0XHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMCBdLnNldCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApLm11bHRpcGx5U2NhbGFyKCAyICogTWF0aC5zcXJ0KCBNYXRoLlBJICkgKTtcblxuXHR9XG5cbn1cblxuQW1iaWVudExpZ2h0UHJvYmUucHJvdG90eXBlLmlzQW1iaWVudExpZ2h0UHJvYmUgPSB0cnVlO1xuXG5jb25zdCBfZXllUmlnaHQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfZXllTGVmdCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9wcm9qZWN0aW9uTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jbGFzcyBTdGVyZW9DYW1lcmEge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy50eXBlID0gJ1N0ZXJlb0NhbWVyYSc7XG5cblx0XHR0aGlzLmFzcGVjdCA9IDE7XG5cblx0XHR0aGlzLmV5ZVNlcCA9IDAuMDY0O1xuXG5cdFx0dGhpcy5jYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdFx0dGhpcy5jYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0XHR0aGlzLmNhbWVyYUwubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5jYW1lcmFSID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdFx0dGhpcy5jYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0XHR0aGlzLmNhbWVyYVIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fY2FjaGUgPSB7XG5cdFx0XHRmb2N1czogbnVsbCxcblx0XHRcdGZvdjogbnVsbCxcblx0XHRcdGFzcGVjdDogbnVsbCxcblx0XHRcdG5lYXI6IG51bGwsXG5cdFx0XHRmYXI6IG51bGwsXG5cdFx0XHR6b29tOiBudWxsLFxuXHRcdFx0ZXllU2VwOiBudWxsXG5cdFx0fTtcblxuXHR9XG5cblx0dXBkYXRlKCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlO1xuXG5cdFx0Y29uc3QgbmVlZHNVcGRhdGUgPSBjYWNoZS5mb2N1cyAhPT0gY2FtZXJhLmZvY3VzIHx8IGNhY2hlLmZvdiAhPT0gY2FtZXJhLmZvdiB8fFxuXHRcdFx0Y2FjaGUuYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3QgfHwgY2FjaGUubmVhciAhPT0gY2FtZXJhLm5lYXIgfHxcblx0XHRcdGNhY2hlLmZhciAhPT0gY2FtZXJhLmZhciB8fCBjYWNoZS56b29tICE9PSBjYW1lcmEuem9vbSB8fCBjYWNoZS5leWVTZXAgIT09IHRoaXMuZXllU2VwO1xuXG5cdFx0aWYgKCBuZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0Y2FjaGUuZm9jdXMgPSBjYW1lcmEuZm9jdXM7XG5cdFx0XHRjYWNoZS5mb3YgPSBjYW1lcmEuZm92O1xuXHRcdFx0Y2FjaGUuYXNwZWN0ID0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0O1xuXHRcdFx0Y2FjaGUubmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdFx0Y2FjaGUuZmFyID0gY2FtZXJhLmZhcjtcblx0XHRcdGNhY2hlLnpvb20gPSBjYW1lcmEuem9vbTtcblx0XHRcdGNhY2hlLmV5ZVNlcCA9IHRoaXMuZXllU2VwO1xuXG5cdFx0XHQvLyBPZmYtYXhpcyBzdGVyZW9zY29waWMgZWZmZWN0IGJhc2VkIG9uXG5cdFx0XHQvLyBodHRwOi8vcGF1bGJvdXJrZS5uZXQvc3RlcmVvZ3JhcGhpY3Mvc3RlcmVvcmVuZGVyL1xuXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5jb3B5KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0Y29uc3QgZXllU2VwSGFsZiA9IGNhY2hlLmV5ZVNlcCAvIDI7XG5cdFx0XHRjb25zdCBleWVTZXBPblByb2plY3Rpb24gPSBleWVTZXBIYWxmICogY2FjaGUubmVhciAvIGNhY2hlLmZvY3VzO1xuXHRcdFx0Y29uc3QgeW1heCA9ICggY2FjaGUubmVhciAqIE1hdGgudGFuKCBERUcyUkFEICogY2FjaGUuZm92ICogMC41ICkgKSAvIGNhY2hlLnpvb207XG5cdFx0XHRsZXQgeG1pbiwgeG1heDtcblxuXHRcdFx0Ly8gdHJhbnNsYXRlIHhPZmZzZXRcblxuXHRcdFx0X2V5ZUxlZnQuZWxlbWVudHNbIDEyIF0gPSAtIGV5ZVNlcEhhbGY7XG5cdFx0XHRfZXllUmlnaHQuZWxlbWVudHNbIDEyIF0gPSBleWVTZXBIYWxmO1xuXG5cdFx0XHQvLyBmb3IgbGVmdCBleWVcblxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdHhtYXggPSB5bWF4ICogY2FjaGUuYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIGNhY2hlLm5lYXIgLyAoIHhtYXggLSB4bWluICk7XG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHR0aGlzLmNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBfcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHQvLyBmb3IgcmlnaHQgZXllXG5cblx0XHRcdHhtaW4gPSAtIHltYXggKiBjYWNoZS5hc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247XG5cdFx0XHR4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblxuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBjYWNoZS5uZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0X3Byb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTtcblxuXHRcdFx0dGhpcy5jYW1lcmFSLnByb2plY3Rpb25NYXRyaXguY29weSggX3Byb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FtZXJhTC5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggX2V5ZUxlZnQgKTtcblx0XHR0aGlzLmNhbWVyYVIubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIF9leWVSaWdodCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDbG9jayB7XG5cblx0Y29uc3RydWN0b3IoIGF1dG9TdGFydCA9IHRydWUgKSB7XG5cblx0XHR0aGlzLmF1dG9TdGFydCA9IGF1dG9TdGFydDtcblxuXHRcdHRoaXMuc3RhcnRUaW1lID0gMDtcblx0XHR0aGlzLm9sZFRpbWUgPSAwO1xuXHRcdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXG5cdFx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XG5cblx0fVxuXG5cdHN0YXJ0KCkge1xuXG5cdFx0dGhpcy5zdGFydFRpbWUgPSBub3coKTtcblxuXHRcdHRoaXMub2xkVGltZSA9IHRoaXMuc3RhcnRUaW1lO1xuXHRcdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXHRcdHRoaXMucnVubmluZyA9IHRydWU7XG5cblx0fVxuXG5cdHN0b3AoKSB7XG5cblx0XHR0aGlzLmdldEVsYXBzZWRUaW1lKCk7XG5cdFx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5hdXRvU3RhcnQgPSBmYWxzZTtcblxuXHR9XG5cblx0Z2V0RWxhcHNlZFRpbWUoKSB7XG5cblx0XHR0aGlzLmdldERlbHRhKCk7XG5cdFx0cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWU7XG5cblx0fVxuXG5cdGdldERlbHRhKCkge1xuXG5cdFx0bGV0IGRpZmYgPSAwO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9TdGFydCAmJiAhIHRoaXMucnVubmluZyApIHtcblxuXHRcdFx0dGhpcy5zdGFydCgpO1xuXHRcdFx0cmV0dXJuIDA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMucnVubmluZyApIHtcblxuXHRcdFx0Y29uc3QgbmV3VGltZSA9IG5vdygpO1xuXG5cdFx0XHRkaWZmID0gKCBuZXdUaW1lIC0gdGhpcy5vbGRUaW1lICkgLyAxMDAwO1xuXHRcdFx0dGhpcy5vbGRUaW1lID0gbmV3VGltZTtcblxuXHRcdFx0dGhpcy5lbGFwc2VkVGltZSArPSBkaWZmO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRpZmY7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG5vdygpIHtcblxuXHRyZXR1cm4gKCB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlICkubm93KCk7IC8vIHNlZSAjMTA3MzJcblxufVxuXG5jb25zdCBfcG9zaXRpb24kMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0ZXJuaW9uJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5jb25zdCBfc2NhbGUkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9vcmllbnRhdGlvbiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jbGFzcyBBdWRpb0xpc3RlbmVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdBdWRpb0xpc3RlbmVyJztcblxuXHRcdHRoaXMuY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cblx0XHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdHRoaXMuZmlsdGVyID0gbnVsbDtcblxuXHRcdHRoaXMudGltZURlbHRhID0gMDtcblxuXHRcdC8vIHByaXZhdGVcblxuXHRcdHRoaXMuX2Nsb2NrID0gbmV3IENsb2NrKCk7XG5cblx0fVxuXG5cdGdldElucHV0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9XG5cblx0cmVtb3ZlRmlsdGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblx0XHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblx0XHRcdHRoaXMuZmlsdGVyID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRGaWx0ZXIoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXI7XG5cblx0fVxuXG5cdHNldEZpbHRlciggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5maWx0ZXIgPSB2YWx1ZTtcblx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHR0aGlzLmZpbHRlci5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRNYXN0ZXJWb2x1bWUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7XG5cblx0fVxuXG5cdHNldE1hc3RlclZvbHVtZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoIHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdGNvbnN0IGxpc3RlbmVyID0gdGhpcy5jb250ZXh0Lmxpc3RlbmVyO1xuXHRcdGNvbnN0IHVwID0gdGhpcy51cDtcblxuXHRcdHRoaXMudGltZURlbHRhID0gdGhpcy5fY2xvY2suZ2V0RGVsdGEoKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMSwgX3F1YXRlcm5pb24kMSwgX3NjYWxlJDEgKTtcblxuXHRcdF9vcmllbnRhdGlvbiQxLnNldCggMCwgMCwgLSAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQxICk7XG5cblx0XHRpZiAoIGxpc3RlbmVyLnBvc2l0aW9uWCApIHtcblxuXHRcdFx0Ly8gY29kZSBwYXRoIGZvciBDaHJvbWUgKHNlZSAjMTQzOTMpXG5cblx0XHRcdGNvbnN0IGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLnRpbWVEZWx0YTtcblxuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMS54LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbiQxLnksIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uJDEueiwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbiQxLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS55LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uJDEueiwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIudXBYLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC54LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci51cFkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLnksIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnVwWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueiwgZW5kVGltZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bGlzdGVuZXIuc2V0UG9zaXRpb24oIF9wb3NpdGlvbiQxLngsIF9wb3NpdGlvbiQxLnksIF9wb3NpdGlvbiQxLnogKTtcblx0XHRcdGxpc3RlbmVyLnNldE9yaWVudGF0aW9uKCBfb3JpZW50YXRpb24kMS54LCBfb3JpZW50YXRpb24kMS55LCBfb3JpZW50YXRpb24kMS56LCB1cC54LCB1cC55LCB1cC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmNsYXNzIEF1ZGlvIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBsaXN0ZW5lciApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXVkaW8nO1xuXG5cdFx0dGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXHRcdHRoaXMuY29udGV4dCA9IGxpc3RlbmVyLmNvbnRleHQ7XG5cblx0XHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7XG5cblx0XHR0aGlzLmF1dG9wbGF5ID0gZmFsc2U7XG5cblx0XHR0aGlzLmJ1ZmZlciA9IG51bGw7XG5cdFx0dGhpcy5kZXR1bmUgPSAwO1xuXHRcdHRoaXMubG9vcCA9IGZhbHNlO1xuXHRcdHRoaXMubG9vcFN0YXJ0ID0gMDtcblx0XHR0aGlzLmxvb3BFbmQgPSAwO1xuXHRcdHRoaXMub2Zmc2V0ID0gMDtcblx0XHR0aGlzLmR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gMTtcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gdHJ1ZTtcblx0XHR0aGlzLnNvdXJjZSA9IG51bGw7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcblxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IDA7XG5cdFx0dGhpcy5fcHJvZ3Jlc3MgPSAwO1xuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5maWx0ZXJzID0gW107XG5cblx0fVxuXG5cdGdldE91dHB1dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fVxuXG5cdHNldE5vZGVTb3VyY2UoIGF1ZGlvTm9kZSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2F1ZGlvTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TWVkaWFFbGVtZW50U291cmNlKCBtZWRpYUVsZW1lbnQgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdtZWRpYU5vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFTdHJlYW1Ob2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSggbWVkaWFTdHJlYW0gKTtcblx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRCdWZmZXIoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnYnVmZmVyJztcblxuXHRcdGlmICggdGhpcy5hdXRvcGxheSApIHRoaXMucGxheSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHBsYXkoIGRlbGF5ID0gMCApIHtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGRlbGF5O1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXHRcdHNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0XHRzb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblx0XHRzb3VyY2UubG9vcFN0YXJ0ID0gdGhpcy5sb29wU3RhcnQ7XG5cdFx0c291cmNlLmxvb3BFbmQgPSB0aGlzLmxvb3BFbmQ7XG5cdFx0c291cmNlLm9uZW5kZWQgPSB0aGlzLm9uRW5kZWQuYmluZCggdGhpcyApO1xuXHRcdHNvdXJjZS5zdGFydCggdGhpcy5fc3RhcnRlZEF0LCB0aGlzLl9wcm9ncmVzcyArIHRoaXMub2Zmc2V0LCB0aGlzLmR1cmF0aW9uICk7XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IHRydWU7XG5cblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuXHRcdHRoaXMuc2V0RGV0dW5lKCB0aGlzLmRldHVuZSApO1xuXHRcdHRoaXMuc2V0UGxheWJhY2tSYXRlKCB0aGlzLnBsYXliYWNrUmF0ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuXG5cdH1cblxuXHRwYXVzZSgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHQvLyB1cGRhdGUgY3VycmVudCBwcm9ncmVzc1xuXG5cdFx0XHR0aGlzLl9wcm9ncmVzcyArPSBNYXRoLm1heCggdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lIC0gdGhpcy5fc3RhcnRlZEF0LCAwICkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHRcdFx0aWYgKCB0aGlzLmxvb3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gZW5zdXJlIF9wcm9ncmVzcyBkb2VzIG5vdCBleGNlZWQgZHVyYXRpb24gd2l0aCBsb29wZWQgYXVkaW9zXG5cblx0XHRcdFx0dGhpcy5fcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcyAlICggdGhpcy5kdXJhdGlvbiB8fCB0aGlzLmJ1ZmZlci5kdXJhdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXG5cdFx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0b3AoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcHJvZ3Jlc3MgPSAwO1xuXG5cdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xuXHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29ubmVjdCgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZpbHRlcnNbIGkgLSAxIF0uZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0RmlsdGVycygpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcnM7XG5cblx0fVxuXG5cdHNldEZpbHRlcnMoIHZhbHVlICkge1xuXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcblxuXHRcdGlmICggdGhpcy5fY29ubmVjdGVkID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLmRpc2Nvbm5lY3QoKTtcblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlLnNsaWNlKCk7XG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlLnNsaWNlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RGV0dW5lKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZGV0dW5lID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuc291cmNlLmRldHVuZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBvbmx5IHNldCBkZXR1bmUgd2hlbiBhdmFpbGFibGVcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRldHVuZS5zZXRUYXJnZXRBdFRpbWUoIHRoaXMuZGV0dW5lLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXREZXR1bmUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kZXR1bmU7XG5cblx0fVxuXG5cdGdldEZpbHRlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEZpbHRlcnMoKVsgMCBdO1xuXG5cdH1cblxuXHRzZXRGaWx0ZXIoIGZpbHRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZpbHRlcnMoIGZpbHRlciA/IFsgZmlsdGVyIF0gOiBbXSApO1xuXG5cdH1cblxuXHRzZXRQbGF5YmFja1JhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLnBsYXliYWNrUmF0ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0UGxheWJhY2tSYXRlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGxheWJhY2tSYXRlO1xuXG5cdH1cblxuXHRvbkVuZGVkKCkge1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcblxuXHR9XG5cblx0Z2V0TG9vcCgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5sb29wO1xuXG5cdH1cblxuXHRzZXRMb29wKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLmxvb3AgPSB2YWx1ZTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TG9vcFN0YXJ0KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubG9vcFN0YXJ0ID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0TG9vcEVuZCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmxvb3BFbmQgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRWb2x1bWUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7XG5cblx0fVxuXG5cdHNldFZvbHVtZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoIHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBfcG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcbmNvbnN0IF9zY2FsZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9vcmllbnRhdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgUG9zaXRpb25hbEF1ZGlvIGV4dGVuZHMgQXVkaW8ge1xuXG5cdGNvbnN0cnVjdG9yKCBsaXN0ZW5lciApIHtcblxuXHRcdHN1cGVyKCBsaXN0ZW5lciApO1xuXG5cdFx0dGhpcy5wYW5uZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlUGFubmVyKCk7XG5cdFx0dGhpcy5wYW5uZXIucGFubmluZ01vZGVsID0gJ0hSVEYnO1xuXHRcdHRoaXMucGFubmVyLmNvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG5cdH1cblxuXHRnZXRPdXRwdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXI7XG5cblx0fVxuXG5cdGdldFJlZkRpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlO1xuXG5cdH1cblxuXHRzZXRSZWZEaXN0YW5jZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFJvbGxvZmZGYWN0b3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcblxuXHR9XG5cblx0c2V0Um9sbG9mZkZhY3RvciggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0RGlzdGFuY2VNb2RlbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xuXG5cdH1cblxuXHRzZXREaXN0YW5jZU1vZGVsKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWwgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRNYXhEaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZTtcblxuXHR9XG5cblx0c2V0TWF4RGlzdGFuY2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIubWF4RGlzdGFuY2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXREaXJlY3Rpb25hbENvbmUoIGNvbmVJbm5lckFuZ2xlLCBjb25lT3V0ZXJBbmdsZSwgY29uZU91dGVyR2FpbiApIHtcblxuXHRcdHRoaXMucGFubmVyLmNvbmVJbm5lckFuZ2xlID0gY29uZUlubmVyQW5nbGU7XG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyQW5nbGUgPSBjb25lT3V0ZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IHRydWUgJiYgdGhpcy5pc1BsYXlpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiwgX3F1YXRlcm5pb24sIF9zY2FsZSApO1xuXG5cdFx0X29yaWVudGF0aW9uLnNldCggMCwgMCwgMSApLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24gKTtcblxuXHRcdGNvbnN0IHBhbm5lciA9IHRoaXMucGFubmVyO1xuXG5cdFx0aWYgKCBwYW5uZXIucG9zaXRpb25YICkge1xuXG5cdFx0XHQvLyBjb2RlIHBhdGggZm9yIENocm9tZSBhbmQgRmlyZWZveCAoc2VlICMxNDM5MylcblxuXHRcdFx0Y29uc3QgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMubGlzdGVuZXIudGltZURlbHRhO1xuXG5cdFx0XHRwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5wb3NpdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbi56LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueCwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnksIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi56LCBlbmRUaW1lICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwYW5uZXIuc2V0UG9zaXRpb24oIF9wb3NpdGlvbi54LCBfcG9zaXRpb24ueSwgX3Bvc2l0aW9uLnogKTtcblx0XHRcdHBhbm5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBBdWRpb0FuYWx5c2VyIHtcblxuXHRjb25zdHJ1Y3RvciggYXVkaW8sIGZmdFNpemUgPSAyMDQ4ICkge1xuXG5cdFx0dGhpcy5hbmFseXNlciA9IGF1ZGlvLmNvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcblx0XHR0aGlzLmFuYWx5c2VyLmZmdFNpemUgPSBmZnRTaXplO1xuXG5cdFx0dGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoIHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQgKTtcblxuXHRcdGF1ZGlvLmdldE91dHB1dCgpLmNvbm5lY3QoIHRoaXMuYW5hbHlzZXIgKTtcblxuXHR9XG5cblxuXHRnZXRGcmVxdWVuY3lEYXRhKCkge1xuXG5cdFx0dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSggdGhpcy5kYXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXG5cdH1cblxuXHRnZXRBdmVyYWdlRnJlcXVlbmN5KCkge1xuXG5cdFx0bGV0IHZhbHVlID0gMDtcblx0XHRjb25zdCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsdWUgKz0gZGF0YVsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlIC8gZGF0YS5sZW5ndGg7XG5cblx0fVxuXG59XG5cbmNsYXNzIFByb3BlcnR5TWl4ZXIge1xuXG5cdGNvbnN0cnVjdG9yKCBiaW5kaW5nLCB0eXBlTmFtZSwgdmFsdWVTaXplICkge1xuXG5cdFx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcblx0XHR0aGlzLnZhbHVlU2l6ZSA9IHZhbHVlU2l6ZTtcblxuXHRcdGxldCBtaXhGdW5jdGlvbixcblx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUsXG5cdFx0XHRzZXRJZGVudGl0eTtcblxuXHRcdC8vIGJ1ZmZlciBsYXlvdXQ6IFsgaW5jb21pbmcgfCBhY2N1MCB8IGFjY3UxIHwgb3JpZyB8IGFkZEFjY3UgfCAob3B0aW9uYWwgd29yaykgXVxuXHRcdC8vXG5cdFx0Ly8gaW50ZXJwb2xhdG9ycyBjYW4gdXNlIC5idWZmZXIgYXMgdGhlaXIgLnJlc3VsdFxuXHRcdC8vIHRoZSBkYXRhIHRoZW4gZ29lcyB0byAnaW5jb21pbmcnXG5cdFx0Ly9cblx0XHQvLyAnYWNjdTAnIGFuZCAnYWNjdTEnIGFyZSB1c2VkIGZyYW1lLWludGVybGVhdmVkIGZvclxuXHRcdC8vIHRoZSBjdW11bGF0aXZlIHJlc3VsdCBhbmQgYXJlIGNvbXBhcmVkIHRvIGRldGVjdFxuXHRcdC8vIGNoYW5nZXNcblx0XHQvL1xuXHRcdC8vICdvcmlnJyBzdG9yZXMgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBwcm9wZXJ0eVxuXHRcdC8vXG5cdFx0Ly8gJ2FkZCcgaXMgdXNlZCBmb3IgYWRkaXRpdmUgY3VtdWxhdGl2ZSByZXN1bHRzXG5cdFx0Ly9cblx0XHQvLyAnd29yaycgaXMgb3B0aW9uYWwgYW5kIGlzIG9ubHkgcHJlc2VudCBmb3IgcXVhdGVybmlvbiB0eXBlcy4gSXQgaXMgdXNlZFxuXHRcdC8vIHRvIHN0b3JlIGludGVybWVkaWF0ZSBxdWF0ZXJuaW9uIG11bHRpcGxpY2F0aW9uIHJlc3VsdHNcblxuXHRcdHN3aXRjaCAoIHR5cGVOYW1lICkge1xuXG5cdFx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9zbGVycDtcblx0XHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSA9IHRoaXMuX3NsZXJwQWRkaXRpdmU7XG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb247XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KCB2YWx1ZVNpemUgKiA2ICk7XG5cdFx0XHRcdHRoaXMuX3dvcmtJbmRleCA9IDU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdzdHJpbmcnOlxuXHRcdFx0Y2FzZSAnYm9vbCc6XG5cdFx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2VsZWN0O1xuXG5cdFx0XHRcdC8vIFVzZSB0aGUgcmVndWxhciBtaXggZnVuY3Rpb24gYW5kIGZvciBhZGRpdGl2ZSBvbiB0aGVzZSB0eXBlcyxcblx0XHRcdFx0Ly8gYWRkaXRpdmUgaXMgbm90IHJlbGV2YW50IGZvciBub24tbnVtZXJpYyB0eXBlc1xuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fc2VsZWN0O1xuXG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU90aGVyO1xuXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KCB2YWx1ZVNpemUgKiA1ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX2xlcnA7XG5cdFx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUgPSB0aGlzLl9sZXJwQWRkaXRpdmU7XG5cdFx0XHRcdHNldElkZW50aXR5ID0gdGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWM7XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgRmxvYXQ2NEFycmF5KCB2YWx1ZVNpemUgKiA1ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24gPSBtaXhGdW5jdGlvbjtcblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSA9IG1peEZ1bmN0aW9uQWRkaXRpdmU7XG5cdFx0dGhpcy5fc2V0SWRlbnRpdHkgPSBzZXRJZGVudGl0eTtcblx0XHR0aGlzLl9vcmlnSW5kZXggPSAzO1xuXHRcdHRoaXMuX2FkZEluZGV4ID0gNDtcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdFx0dGhpcy51c2VDb3VudCA9IDA7XG5cdFx0dGhpcy5yZWZlcmVuY2VDb3VudCA9IDA7XG5cblx0fVxuXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWNjdTxpPidcblx0YWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKSB7XG5cblx0XHQvLyBub3RlOiBoYXBwaWx5IGFjY3VtdWxhdGluZyBub3RoaW5nIHdoZW4gd2VpZ2h0ID0gMCwgdGhlIGNhbGxlciBrbm93c1xuXHRcdC8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlXG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlO1xuXG5cdFx0bGV0IGN1cnJlbnRXZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQ7XG5cblx0XHRpZiAoIGN1cnJlbnRXZWlnaHQgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGluY29taW5nICogd2VpZ2h0XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHdlaWdodDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Y3VycmVudFdlaWdodCArPSB3ZWlnaHQ7XG5cdFx0XHRjb25zdCBtaXggPSB3ZWlnaHQgLyBjdXJyZW50V2VpZ2h0O1xuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKCBidWZmZXIsIG9mZnNldCwgMCwgbWl4LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XG5cblx0fVxuXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWRkJ1xuXHRhY2N1bXVsYXRlQWRkaXRpdmUoIHdlaWdodCApIHtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBzdHJpZGUgKiB0aGlzLl9hZGRJbmRleDtcblxuXHRcdGlmICggdGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPT09IDAgKSB7XG5cblx0XHRcdC8vIGFkZCA9IGlkZW50aXR5XG5cblx0XHRcdHRoaXMuX3NldElkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgOj0gYWRkICsgaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlKCBidWZmZXIsIG9mZnNldCwgMCwgd2VpZ2h0LCBzdHJpZGUgKTtcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSArPSB3ZWlnaHQ7XG5cblx0fVxuXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBvZiAnYWNjdTxpPicgdG8gdGhlIGJpbmRpbmcgd2hlbiBhY2N1cyBkaWZmZXJcblx0YXBwbHkoIGFjY3VJbmRleCApIHtcblxuXHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXG5cblx0XHRcdHdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodCxcblx0XHRcdHdlaWdodEFkZGl0aXZlID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUsXG5cblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID0gMDtcblxuXHRcdGlmICggd2VpZ2h0IDwgMSApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKVxuXG5cdFx0XHRjb25zdCBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fb3JpZ0luZGV4O1xuXG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oXG5cdFx0XHRcdGJ1ZmZlciwgb2Zmc2V0LCBvcmlnaW5hbFZhbHVlT2Zmc2V0LCAxIC0gd2VpZ2h0LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggd2VpZ2h0QWRkaXRpdmUgPiAwICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIGFkZGl0aXZlIGFjY3VOXG5cblx0XHRcdHRoaXMuX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlKCBidWZmZXIsIG9mZnNldCwgdGhpcy5fYWRkSW5kZXggKiBzdHJpZGUsIDEsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSBzdHJpZGUsIGUgPSBzdHJpZGUgKyBzdHJpZGU7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGlmICggYnVmZmVyWyBpIF0gIT09IGJ1ZmZlclsgaSArIHN0cmlkZSBdICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlIGhhcyBjaGFuZ2VkIC0+IHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0XHRcdGJpbmRpbmcuc2V0VmFsdWUoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIHJlbWVtYmVyIHRoZSBzdGF0ZSBvZiB0aGUgYm91bmQgcHJvcGVydHkgYW5kIGNvcHkgaXQgdG8gYm90aCBhY2N1c1xuXHRzYXZlT3JpZ2luYWxTdGF0ZSgpIHtcblxuXHRcdGNvbnN0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fb3JpZ0luZGV4O1xuXG5cdFx0YmluZGluZy5nZXRWYWx1ZSggYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0XHQvLyBhY2N1WzAuLjFdIDo9IG9yaWcgLS0gaW5pdGlhbGx5IGRldGVjdCBjaGFuZ2VzIGFnYWluc3QgdGhlIG9yaWdpbmFsXG5cdFx0Zm9yICggbGV0IGkgPSBzdHJpZGUsIGUgPSBvcmlnaW5hbFZhbHVlT2Zmc2V0OyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIGkgXSA9IGJ1ZmZlclsgb3JpZ2luYWxWYWx1ZU9mZnNldCArICggaSAlIHN0cmlkZSApIF07XG5cblx0XHR9XG5cblx0XHQvLyBBZGQgdG8gaWRlbnRpdHkgZm9yIGFkZGl0aXZlXG5cdFx0dGhpcy5fc2V0SWRlbnRpdHkoKTtcblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdH1cblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xuXHRyZXN0b3JlT3JpZ2luYWxTdGF0ZSgpIHtcblxuXHRcdGNvbnN0IG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XG5cdFx0dGhpcy5iaW5kaW5nLnNldFZhbHVlKCB0aGlzLmJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdH1cblxuXHRfc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMoKSB7XG5cblx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fYWRkSW5kZXggKiB0aGlzLnZhbHVlU2l6ZTtcblx0XHRjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyB0aGlzLnZhbHVlU2l6ZTtcblxuXHRcdGZvciAoIGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmJ1ZmZlclsgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0X3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uKCkge1xuXG5cdFx0dGhpcy5fc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMoKTtcblx0XHR0aGlzLmJ1ZmZlclsgdGhpcy5fYWRkSW5kZXggKiB0aGlzLnZhbHVlU2l6ZSArIDMgXSA9IDE7XG5cblx0fVxuXG5cdF9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXIoKSB7XG5cblx0XHRjb25zdCBzdGFydEluZGV4ID0gdGhpcy5fb3JpZ0luZGV4ICogdGhpcy52YWx1ZVNpemU7XG5cdFx0Y29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZVNpemU7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYnVmZmVyWyB0YXJnZXRJbmRleCArIGkgXSA9IHRoaXMuYnVmZmVyWyBzdGFydEluZGV4ICsgaSBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXG5cdC8vIG1peCBmdW5jdGlvbnNcblxuXHRfc2VsZWN0KCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRpZiAoIHQgPj0gMC41ICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIGRzdE9mZnNldCArIGkgXSA9IGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9zbGVycCggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCApIHtcblxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgc3JjT2Zmc2V0LCB0ICk7XG5cblx0fVxuXG5cdF9zbGVycEFkZGl0aXZlKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRjb25zdCB3b3JrT2Zmc2V0ID0gdGhpcy5fd29ya0luZGV4ICogc3RyaWRlO1xuXG5cdFx0Ly8gU3RvcmUgcmVzdWx0IGluIGludGVybWVkaWF0ZSBidWZmZXIgb2Zmc2V0XG5cdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdCggYnVmZmVyLCB3b3JrT2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQgKTtcblxuXHRcdC8vIFNsZXJwIHRvIHRoZSBpbnRlcm1lZGlhdGUgcmVzdWx0XG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCB3b3JrT2Zmc2V0LCB0ICk7XG5cblx0fVxuXG5cdF9sZXJwKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRjb25zdCBzID0gMSAtIHQ7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKiBzICsgYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF0gKiB0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfbGVycEFkZGl0aXZlKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaiA9IGRzdE9mZnNldCArIGk7XG5cblx0XHRcdGJ1ZmZlclsgaiBdID0gYnVmZmVyWyBqIF0gKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIENoYXJhY3RlcnMgW10uOi8gYXJlIHJlc2VydmVkIGZvciB0cmFjayBiaW5kaW5nIHN5bnRheC5cbmNvbnN0IF9SRVNFUlZFRF9DSEFSU19SRSA9ICdcXFxcW1xcXFxdXFxcXC46XFxcXC8nO1xuY29uc3QgX3Jlc2VydmVkUmUgPSBuZXcgUmVnRXhwKCAnWycgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXScsICdnJyApO1xuXG4vLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xuLy8gb25seSBsYXRpbiBjaGFyYWN0ZXJzLCBhbmQgdGhlIHVuaWNvZGUgXFxwe0x9IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBTb1xuLy8gaW5zdGVhZCwgd2UgZXhjbHVkZSByZXNlcnZlZCBjaGFyYWN0ZXJzIGFuZCBtYXRjaCBldmVyeXRoaW5nIGVsc2UuXG5jb25zdCBfd29yZENoYXIgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nO1xuY29uc3QgX3dvcmRDaGFyT3JEb3QgPSAnW14nICsgX1JFU0VSVkVEX0NIQVJTX1JFLnJlcGxhY2UoICdcXFxcLicsICcnICkgKyAnXSc7XG5cbi8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0XG4vLyBiZSBtYXRjaGVkIHRvIHBhcnNlIHRoZSByZXN0IG9mIHRoZSB0cmFjayBuYW1lLlxuY29uc3QgX2RpcmVjdG9yeVJlID0gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuLy8gVGFyZ2V0IG5vZGUuIE1heSBjb250YWluIHdvcmQgY2hhcmFjdGVycyAoYS16QS1aMC05XykgYW5kICcuJyBvciAnLScuXG5jb25zdCBfbm9kZVJlID0gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCBfd29yZENoYXJPckRvdCApO1xuXG4vLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXG4vLyBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXkgY29udGFpbiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBjbG9zaW5nIGJyYWNrZXQuXG5jb25zdCBfb2JqZWN0UmUgPSAvKD86XFwuKFdDKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG4vLyBQcm9wZXJ0eSBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZCBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXlcbi8vIGNvbnRhaW4gYW55IG5vbi1icmFja2V0IGNoYXJhY3RlcnMuXG5jb25zdCBfcHJvcGVydHlSZSA9IC9cXC4oV0MrKSg/OlxcWyguKylcXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG5jb25zdCBfdHJhY2tSZSA9IG5ldyBSZWdFeHAoICcnXG5cdCsgJ14nXG5cdCsgX2RpcmVjdG9yeVJlXG5cdCsgX25vZGVSZVxuXHQrIF9vYmplY3RSZVxuXHQrIF9wcm9wZXJ0eVJlXG5cdCsgJyQnXG4pO1xuXG5jb25zdCBfc3VwcG9ydGVkT2JqZWN0TmFtZXMgPSBbICdtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnIF07XG5cbmNsYXNzIENvbXBvc2l0ZSB7XG5cblx0Y29uc3RydWN0b3IoIHRhcmdldEdyb3VwLCBwYXRoLCBvcHRpb25hbFBhcnNlZFBhdGggKSB7XG5cblx0XHRjb25zdCBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdFx0dGhpcy5fdGFyZ2V0R3JvdXAgPSB0YXJnZXRHcm91cDtcblx0XHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHR9XG5cblx0Z2V0VmFsdWUoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTsgLy8gYmluZCBhbGwgYmluZGluZ1xuXG5cdFx0Y29uc3QgZmlyc3RWYWxpZEluZGV4ID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0YmluZGluZyA9IHRoaXMuX2JpbmRpbmdzWyBmaXJzdFZhbGlkSW5kZXggXTtcblxuXHRcdC8vIGFuZCBvbmx5IGNhbGwgLmdldFZhbHVlIG9uIHRoZSBmaXJzdFxuXHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkgYmluZGluZy5nZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdH1cblxuXHRzZXRWYWx1ZSggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCBsZXQgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5zZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRiaW5kKCkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmJpbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dW5iaW5kKCkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnVuYmluZCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBOb3RlOiBUaGlzIGNsYXNzIHVzZXMgYSBTdGF0ZSBwYXR0ZXJuIG9uIGEgcGVyLW1ldGhvZCBiYXNpczpcbi8vICdiaW5kJyBzZXRzICd0aGlzLmdldFZhbHVlJyAvICdzZXRWYWx1ZScgYW5kIHNoYWRvd3MgdGhlXG4vLyBwcm90b3R5cGUgdmVyc2lvbiBvZiB0aGVzZSBtZXRob2RzIHdpdGggb25lIHRoYXQgcmVwcmVzZW50c1xuLy8gdGhlIGJvdW5kIHN0YXRlLiBXaGVuIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQsIHRoZSBtZXRob2RzXG4vLyBiZWNvbWUgbm8tb3BzLlxuY2xhc3MgUHJvcGVydHlCaW5kaW5nIHtcblxuXHRjb25zdHJ1Y3Rvciggcm9vdE5vZGUsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHR0aGlzLnBhdGggPSBwYXRoO1xuXHRcdHRoaXMucGFyc2VkUGF0aCA9IHBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKCBwYXRoICk7XG5cblx0XHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKSB8fCByb290Tm9kZTtcblxuXHRcdHRoaXMucm9vdE5vZGUgPSByb290Tm9kZTtcblxuXHRcdC8vIGluaXRpYWwgc3RhdGUgb2YgdGhlc2UgbWV0aG9kcyB0aGF0IGNhbGxzICdiaW5kJ1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xuXG5cdH1cblxuXG5cdHN0YXRpYyBjcmVhdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHRpZiAoICEgKCByb290ICYmIHJvb3QuaXNBbmltYXRpb25PYmplY3RHcm91cCApICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmQgcmVtb3ZlcyB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGZyb21cblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb2RlIG5hbWUgdG8gYmUgc2FuaXRpemVkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRzdGF0aWMgc2FuaXRpemVOb2RlTmFtZSggbmFtZSApIHtcblxuXHRcdHJldHVybiBuYW1lLnJlcGxhY2UoIC9cXHMvZywgJ18nICkucmVwbGFjZSggX3Jlc2VydmVkUmUsICcnICk7XG5cblx0fVxuXG5cdHN0YXRpYyBwYXJzZVRyYWNrTmFtZSggdHJhY2tOYW1lICkge1xuXG5cdFx0Y29uc3QgbWF0Y2hlcyA9IF90cmFja1JlLmV4ZWMoIHRyYWNrTmFtZSApO1xuXG5cdFx0aWYgKCBtYXRjaGVzID09PSBudWxsICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IENhbm5vdCBwYXJzZSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3VsdHMgPSB7XG5cdFx0XHQvLyBkaXJlY3RvcnlOYW1lOiBtYXRjaGVzWyAxIF0sIC8vICh0c2NodykgY3VycmVudGx5IHVudXNlZFxuXHRcdFx0bm9kZU5hbWU6IG1hdGNoZXNbIDIgXSxcblx0XHRcdG9iamVjdE5hbWU6IG1hdGNoZXNbIDMgXSxcblx0XHRcdG9iamVjdEluZGV4OiBtYXRjaGVzWyA0IF0sXG5cdFx0XHRwcm9wZXJ0eU5hbWU6IG1hdGNoZXNbIDUgXSwgLy8gcmVxdWlyZWRcblx0XHRcdHByb3BlcnR5SW5kZXg6IG1hdGNoZXNbIDYgXVxuXHRcdH07XG5cblx0XHRjb25zdCBsYXN0RG90ID0gcmVzdWx0cy5ub2RlTmFtZSAmJiByZXN1bHRzLm5vZGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKTtcblxuXHRcdGlmICggbGFzdERvdCAhPT0gdW5kZWZpbmVkICYmIGxhc3REb3QgIT09IC0gMSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCBsYXN0RG90ICsgMSApO1xuXG5cdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYW4gYWxsb3dsaXN0LiBPdGhlcndpc2UsIHRoZXJlXG5cdFx0XHQvLyBpcyBubyB3YXkgdG8gcGFyc2UgJ2Zvby5iYXIuYmF6JzogJ2JheicgbXVzdCBiZSBhIHByb3BlcnR5LCBidXRcblx0XHRcdC8vICdiYXInIGNvdWxkIGJlIHRoZSBvYmplY3ROYW1lLCBvciBwYXJ0IG9mIGEgbm9kZU5hbWUgKHdoaWNoIGNhblxuXHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXG5cdFx0XHRpZiAoIF9zdXBwb3J0ZWRPYmplY3ROYW1lcy5pbmRleE9mKCBvYmplY3ROYW1lICkgIT09IC0gMSApIHtcblxuXHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTtcblx0XHRcdFx0cmVzdWx0cy5vYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCByZXN1bHRzLnByb3BlcnR5TmFtZSA9PT0gbnVsbCB8fCByZXN1bHRzLnByb3BlcnR5TmFtZS5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogY2FuIG5vdCBwYXJzZSBwcm9wZXJ0eU5hbWUgZnJvbSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXG5cdH1cblxuXHRzdGF0aWMgZmluZE5vZGUoIHJvb3QsIG5vZGVOYW1lICkge1xuXG5cdFx0aWYgKCBub2RlTmFtZSA9PT0gdW5kZWZpbmVkIHx8IG5vZGVOYW1lID09PSAnJyB8fCBub2RlTmFtZSA9PT0gJy4nIHx8IG5vZGVOYW1lID09PSAtIDEgfHwgbm9kZU5hbWUgPT09IHJvb3QubmFtZSB8fCBub2RlTmFtZSA9PT0gcm9vdC51dWlkICkge1xuXG5cdFx0XHRyZXR1cm4gcm9vdDtcblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIHNrZWxldG9uIGJvbmVzLlxuXHRcdGlmICggcm9vdC5za2VsZXRvbiApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZSggbm9kZU5hbWUgKTtcblxuXHRcdFx0aWYgKCBib25lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIG5vZGUgc3VidHJlZS5cblx0XHRpZiAoIHJvb3QuY2hpbGRyZW4gKSB7XG5cblx0XHRcdGNvbnN0IHNlYXJjaE5vZGVTdWJ0cmVlID0gZnVuY3Rpb24gKCBjaGlsZHJlbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBjaGlsZE5vZGUgPSBjaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZE5vZGUubmFtZSA9PT0gbm9kZU5hbWUgfHwgY2hpbGROb2RlLnV1aWQgPT09IG5vZGVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gY2hpbGROb2RlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gc2VhcmNoTm9kZVN1YnRyZWUoIGNoaWxkTm9kZS5jaGlsZHJlbiApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXN1bHQgKSByZXR1cm4gcmVzdWx0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3Qgc3ViVHJlZU5vZGUgPSBzZWFyY2hOb2RlU3VidHJlZSggcm9vdC5jaGlsZHJlbiApO1xuXG5cdFx0XHRpZiAoIHN1YlRyZWVOb2RlICkge1xuXG5cdFx0XHRcdHJldHVybiBzdWJUcmVlTm9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8vIHRoZXNlIGFyZSB1c2VkIHRvIFwiYmluZFwiIGEgbm9uZXhpc3RlbnQgcHJvcGVydHlcblx0X2dldFZhbHVlX3VuYXZhaWxhYmxlKCkge31cblx0X3NldFZhbHVlX3VuYXZhaWxhYmxlKCkge31cblxuXHQvLyBHZXR0ZXJzXG5cblx0X2dldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF07XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzb3VyY2UubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCArKyBdID0gc291cmNlWyBpIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF07XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV90b0FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdH1cblxuXHQvLyBEaXJlY3RcblxuXHRfc2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2RpcmVjdF9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBFbnRpcmVBcnJheVxuXG5cdF9zZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRjb25zdCBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBBcnJheUVsZW1lbnRcblxuXHRfc2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvLyBIYXNUb0Zyb21BcnJheVxuXG5cdF9zZXRWYWx1ZV9mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9nZXRWYWx1ZV91bmJvdW5kKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5nZXRWYWx1ZSggdGFyZ2V0QXJyYXksIG9mZnNldCApO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfdW5ib3VuZCggc291cmNlQXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuc2V0VmFsdWUoIHNvdXJjZUFycmF5LCBvZmZzZXQgKTtcblxuXHR9XG5cblx0Ly8gY3JlYXRlIGdldHRlciAvIHNldHRlciBwYWlyIGZvciBhIHByb3BlcnR5IGluIHRoZSBzY2VuZSBncmFwaFxuXHRiaW5kKCkge1xuXG5cdFx0bGV0IHRhcmdldE9iamVjdCA9IHRoaXMubm9kZTtcblx0XHRjb25zdCBwYXJzZWRQYXRoID0gdGhpcy5wYXJzZWRQYXRoO1xuXG5cdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHBhcnNlZFBhdGgub2JqZWN0TmFtZTtcblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBwYXJzZWRQYXRoLnByb3BlcnR5TmFtZTtcblx0XHRsZXQgcHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcblxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdHRhcmdldE9iamVjdCA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggdGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHRoaXMucm9vdE5vZGU7XG5cblx0XHRcdHRoaXMubm9kZSA9IHRhcmdldE9iamVjdDtcblxuXHRcdH1cblxuXHRcdC8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYXZhaWxhYmxlO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtcblxuXHRcdC8vIGVuc3VyZSB0aGVyZSBpcyBhIHZhbHVlIG5vZGVcblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRsZXQgb2JqZWN0SW5kZXggPSBwYXJzZWRQYXRoLm9iamVjdEluZGV4O1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2VzIHdlcmUgd2UgbmVlZCB0byByZWFjaCBkZWVwZXIgaW50byB0aGUgaGllcmFyY2h5IHRvIGdldCB0aGUgZmFjZSBtYXRlcmlhbHMuLi4uXG5cdFx0XHRzd2l0Y2ggKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ21hdGVyaWFscyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWwuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHM7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdib25lcyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0LnNrZWxldG9uICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b24uJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gcG90ZW50aWFsIGZ1dHVyZSBvcHRpbWl6YXRpb246IHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlclxuXHRcdFx0XHRcdC8vIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5za2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgaSBdLm5hbWUgPT09IG9iamVjdEluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdEluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0aWYgKCBvYmplY3RJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXNvbHZlIHByb3BlcnR5XG5cdFx0Y29uc3Qgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTtcblxuXHRcdGlmICggbm9kZVByb3BlcnR5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG5vZGVOYW1lID0gcGFyc2VkUGF0aC5ub2RlTmFtZTtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6ICcgKyBub2RlTmFtZSArXG5cdFx0XHRcdCcuJyArIHByb3BlcnR5TmFtZSArICcgYnV0IGl0IHdhc25cXCd0IGZvdW5kLicsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIHZlcnNpb25pbmcgc2NoZW1lXG5cdFx0bGV0IHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTm9uZTtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0aWYgKCB0YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbWF0ZXJpYWxcblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5OZWVkc1VwZGF0ZTtcblxuXHRcdH0gZWxzZSBpZiAoIHRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG5vZGUgdHJhbnNmb3JtXG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTWF0cml4V29ybGROZWVkc1VwZGF0ZTtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSBob3cgdGhlIHByb3BlcnR5IGdldHMgYm91bmRcblx0XHRsZXQgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtcblxuXHRcdGlmICggcHJvcGVydHlJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBhY2Nlc3MgYSBzdWIgZWxlbWVudCBvZiB0aGUgcHJvcGVydHkgYXJyYXkgKG9ubHkgcHJpbWl0aXZlcyBhcmUgc3VwcG9ydGVkIHJpZ2h0IG5vdylcblxuXHRcdFx0aWYgKCBwcm9wZXJ0eU5hbWUgPT09ICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnICkge1xuXG5cdFx0XHRcdC8vIHBvdGVudGlhbCBvcHRpbWl6YXRpb24sIHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlciwgYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3QubW9ycGhUYXJnZXREaWN0aW9uYXJ5WyBwcm9wZXJ0eUluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXTtcblxuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIG9uIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuQXJyYXlFbGVtZW50O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cdFx0XHR0aGlzLnByb3BlcnR5SW5kZXggPSBwcm9wZXJ0eUluZGV4O1xuXG5cdFx0fSBlbHNlIGlmICggbm9kZVByb3BlcnR5LmZyb21BcnJheSAhPT0gdW5kZWZpbmVkICYmIG5vZGVQcm9wZXJ0eS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG11c3QgdXNlIGNvcHkgZm9yIE9iamVjdDNELkV1bGVyL1F1YXRlcm5pb25cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkhhc0Zyb21Ub0FycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBub2RlUHJvcGVydHkgKSApIHtcblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkVudGlyZUFycmF5O1xuXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuXHRcdH1cblxuXHRcdC8vIHNlbGVjdCBnZXR0ZXIgLyBzZXR0ZXJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlWyBiaW5kaW5nVHlwZSBdO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nWyBiaW5kaW5nVHlwZSBdWyB2ZXJzaW9uaW5nIF07XG5cblx0fVxuXG5cdHVuYmluZCgpIHtcblxuXHRcdHRoaXMubm9kZSA9IG51bGw7XG5cblx0XHQvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlXG5cdFx0Ly8gbm90ZTogYXZvaWRpbmcgdG8gbXV0YXRlIHRoZSBzaGFwZSBvZiAndGhpcycgdmlhICdkZWxldGUnXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYm91bmQ7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XG5cblx0fVxuXG59XG5cblByb3BlcnR5QmluZGluZy5Db21wb3NpdGUgPSBDb21wb3NpdGU7XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuQmluZGluZ1R5cGUgPSB7XG5cdERpcmVjdDogMCxcblx0RW50aXJlQXJyYXk6IDEsXG5cdEFycmF5RWxlbWVudDogMixcblx0SGFzRnJvbVRvQXJyYXk6IDNcbn07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuVmVyc2lvbmluZyA9IHtcblx0Tm9uZTogMCxcblx0TmVlZHNVcGRhdGU6IDEsXG5cdE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDJcbn07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuR2V0dGVyQnlCaW5kaW5nVHlwZSA9IFtcblxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9kaXJlY3QsXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX2FycmF5LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9hcnJheUVsZW1lbnQsXG5cdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX2dldFZhbHVlX3RvQXJyYXksXG5cbl07XG5cblByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmcgPSBbXG5cblx0W1xuXHRcdC8vIERpcmVjdFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2RpcmVjdCxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gRW50aXJlQXJyYXlcblxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5LFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gQXJyYXlFbGVtZW50XG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfYXJyYXlFbGVtZW50LFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5RWxlbWVudF9zZXROZWVkc1VwZGF0ZSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSxcblxuXHRdLCBbXG5cblx0XHQvLyBIYXNUb0Zyb21BcnJheVxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2Zyb21BcnJheSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XVxuXG5dO1xuXG4vKipcbiAqXG4gKiBBIGdyb3VwIG9mIG9iamVjdHMgdGhhdCByZWNlaXZlcyBhIHNoYXJlZCBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcbiAqICAgIGNvbnN0cnVjdG9yIG9yIHRoZSAuY2xpcEFjdGlvbiBtZXRob2Qgb2YgQW5pbWF0aW9uTWl4ZXIuXG4gKlxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cbiAqXG4gKiAgLSBZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogICAgaXMgcnVubmluZy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgIE9iamVjdHMgb2YgdGhpcyBjbGFzcyBhcHBlYXIgYXMgb25lIG9iamVjdCB0byB0aGUgbWl4ZXIsXG4gKiAgICBzbyBjYWNoZSBjb250cm9sIG9mIHRoZSBpbmRpdmlkdWFsIG9iamVjdHMgbXVzdCBiZSBkb25lXG4gKiAgICBvbiB0aGUgZ3JvdXAuXG4gKlxuICogTGltaXRhdGlvbjpcbiAqXG4gKiAgLSBUaGUgYW5pbWF0ZWQgcHJvcGVydGllcyBtdXN0IGJlIGNvbXBhdGlibGUgYW1vbmcgdGhlXG4gKiAgICBhbGwgb2JqZWN0cyBpbiB0aGUgZ3JvdXAuXG4gKlxuICogIC0gQSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogICAgdGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKi9cblxuY2xhc3MgQW5pbWF0aW9uT2JqZWN0R3JvdXAge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGRcblx0XHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcblxuXHRcdGNvbnN0IGluZGljZXMgPSB7fTtcblx0XHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGF0aHMgPSBbXTsgLy8gaW5zaWRlOiBzdHJpbmdcblx0XHR0aGlzLl9wYXJzZWRQYXRocyA9IFtdOyAvLyBpbnNpZGU6IHsgd2UgZG9uJ3QgY2FyZSwgaGVyZSB9XG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gaW5zaWRlOiBBcnJheTwgUHJvcGVydHlCaW5kaW5nID5cblx0XHR0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGggPSB7fTsgLy8gaW5zaWRlOiBpbmRpY2VzIGluIHRoZXNlIGFycmF5c1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dGhpcy5zdGF0cyA9IHtcblxuXHRcdFx0b2JqZWN0czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX29iamVjdHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnRvdGFsIC0gc2NvcGUubkNhY2hlZE9iamVjdHNfO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXQgYmluZGluZ3NQZXJPYmplY3QoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGFkZCgpIHtcblxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRsZXQga25vd25PYmplY3QgPSB1bmRlZmluZWQsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQ7XG5cdFx0XHRsZXQgaW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRjb25zdCBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0XHRsZXQgYmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2luY2Ugd2UgZG8gbm90IGJvdGhlciB0byBjcmVhdGUgbmV3IGJpbmRpbmdzXG5cdFx0XHRcdFx0XHQvLyBmb3Igb2JqZWN0cyB0aGF0IGFyZSBjYWNoZWQsIHRoZSBiaW5kaW5nIG1heVxuXHRcdFx0XHRcdFx0Ly8gb3IgbWF5IG5vdCBleGlzdFxuXG5cdFx0XHRcdFx0XHRiaW5kaW5nID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoc1sgaiBdLCBwYXJzZWRQYXRoc1sgaiBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3RzWyBpbmRleCBdICE9PSBrbm93bk9iamVjdCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQW5pbWF0aW9uT2JqZWN0R3JvdXA6IERpZmZlcmVudCBvYmplY3RzIHdpdGggdGhlIHNhbWUgVVVJRCAnICtcblx0XHRcdFx0XHQnZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApO1xuXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9XG5cblx0cmVtb3ZlKCkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRsZXQgbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPj0gbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgaW50byB0aGUgQ0FDSEVEIHJlZ2lvblxuXG5cdFx0XHRcdGNvbnN0IGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxuXHRcdFx0XHRcdGZpcnN0QWN0aXZlT2JqZWN0ID0gb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZU9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH1cblxuXHQvLyByZW1vdmUgJiBmb3JnZXRcblx0dW5jYWNoZSgpIHtcblxuXHRcdGNvbnN0IG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0bGV0IG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkZWxldGUgaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBjYWNoZWQsIHNocmluayB0aGUgQ0FDSEVEIHJlZ2lvblxuXG5cdFx0XHRcdFx0Y29uc3QgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBjYWNoZWQgb2JqZWN0IHRha2VzIHRoaXMgb2JqZWN0J3MgcGxhY2Vcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBvYmplY3QgZ29lcyB0byB0aGUgYWN0aXZhdGVkIHNsb3QgYW5kIHBvcFxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBhY3RpdmUsIGp1c3Qgc3dhcCB3aXRoIHRoZSBsYXN0IGFuZCBwb3BcblxuXHRcdFx0XHRcdGNvbnN0IGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0aWYgKCBsYXN0SW5kZXggPiAwICkge1xuXG5cdFx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXTtcblxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpbmRleCBdID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0SW5kZXggXTtcblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aC5wb3AoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IC8vIGNhY2hlZCBvciBhY3RpdmVcblxuXHRcdFx0fSAvLyBpZiBvYmplY3QgaXMga25vd25cblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9XG5cblx0Ly8gSW50ZXJuYWwgaW50ZXJmYWNlIHVzZWQgYnkgYmVmcmllbmRlZCBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlOlxuXG5cdHN1YnNjcmliZV8oIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHQvLyByZXR1cm5zIGFuIGFycmF5IG9mIGJpbmRpbmdzIGZvciB0aGUgZ2l2ZW4gcGF0aCB0aGF0IGlzIGNoYW5nZWRcblx0XHQvLyBhY2NvcmRpbmcgdG8gdGhlIGNvbnRhaW5lZCBvYmplY3RzIGluIHRoZSBncm91cFxuXG5cdFx0Y29uc3QgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aDtcblx0XHRsZXQgaW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF07XG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHJldHVybiBiaW5kaW5nc1sgaW5kZXggXTtcblxuXHRcdGNvbnN0IHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcblxuXHRcdGluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0aW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7XG5cblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XG5cdFx0cGFyc2VkUGF0aHMucHVzaCggcGFyc2VkUGF0aCApO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzRm9yUGF0aCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSBuQ2FjaGVkT2JqZWN0cywgbiA9IG9iamVjdHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBvYmplY3QgPSBvYmplY3RzWyBpIF07XG5cdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGkgXSA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJpbmRpbmdzRm9yUGF0aDtcblxuXHR9XG5cblx0dW5zdWJzY3JpYmVfKCBwYXRoICkge1xuXG5cdFx0Ly8gdGVsbHMgdGhlIGdyb3VwIHRvIGZvcmdldCBhYm91dCBhIHByb3BlcnR5IHBhdGggYW5kIG5vIGxvbmdlclxuXHRcdC8vIHVwZGF0ZSB0aGUgYXJyYXkgcHJldmlvdXNseSBvYnRhaW5lZCB3aXRoICdzdWJzY3JpYmVfJ1xuXG5cdFx0Y29uc3QgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdGxhc3RCaW5kaW5ncyA9IGJpbmRpbmdzWyBsYXN0QmluZGluZ3NJbmRleCBdLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcblxuXHRcdFx0aW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7XG5cblx0XHRcdGJpbmRpbmdzWyBpbmRleCBdID0gbGFzdEJpbmRpbmdzO1xuXHRcdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRcdHBhcnNlZFBhdGhzWyBpbmRleCBdID0gcGFyc2VkUGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXJzZWRQYXRocy5wb3AoKTtcblxuXHRcdFx0cGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcblx0XHRcdHBhdGhzLnBvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5BbmltYXRpb25PYmplY3RHcm91cC5wcm90b3R5cGUuaXNBbmltYXRpb25PYmplY3RHcm91cCA9IHRydWU7XG5cbmNsYXNzIEFuaW1hdGlvbkFjdGlvbiB7XG5cblx0Y29uc3RydWN0b3IoIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgPSBudWxsLCBibGVuZE1vZGUgPSBjbGlwLmJsZW5kTW9kZSApIHtcblxuXHRcdHRoaXMuX21peGVyID0gbWl4ZXI7XG5cdFx0dGhpcy5fY2xpcCA9IGNsaXA7XG5cdFx0dGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290O1xuXHRcdHRoaXMuYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gY2xpcC50cmFja3MsXG5cdFx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcblx0XHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRTZXR0aW5ncyA9IHtcblx0XHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdFx0ZW5kaW5nRW5kOiBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cdFx0fTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnQgPSB0cmFja3NbIGkgXS5jcmVhdGVJbnRlcnBvbGFudCggbnVsbCApO1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0gPSBpbnRlcnBvbGFudDtcblx0XHRcdGludGVycG9sYW50LnNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0dGhpcy5faW50ZXJwb2xhbnRzID0gaW50ZXJwb2xhbnRzOyAvLyBib3VuZCBieSB0aGUgbWl4ZXJcblxuXHRcdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdFx0dGhpcy5fcHJvcGVydHlCaW5kaW5ncyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdFx0dGhpcy5fY2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXJcblx0XHR0aGlzLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXG5cdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDtcblxuXHRcdHRoaXMubG9vcCA9IExvb3BSZXBlYXQ7XG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1xuXG5cdFx0Ly8gZ2xvYmFsIG1peGVyIHRpbWUgd2hlbiB0aGUgYWN0aW9uIGlzIHRvIGJlIHN0YXJ0ZWRcblx0XHQvLyBpdCdzIHNldCBiYWNrIHRvICdudWxsJyB1cG9uIHN0YXJ0IG9mIHRoZSBhY3Rpb25cblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xuXG5cdFx0Ly8gc2NhbGVkIGxvY2FsIHRpbWUgb2YgdGhlIGFjdGlvblxuXHRcdC8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3Bcblx0XHR0aGlzLnRpbWUgPSAwO1xuXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IDE7XG5cblx0XHR0aGlzLndlaWdodCA9IDE7XG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gMTtcblxuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTsgLy8gdHJ1ZSAtPiB6ZXJvIGVmZmVjdGl2ZSB0aW1lIHNjYWxlXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTsgLy8gZmFsc2UgLT4gemVybyBlZmZlY3RpdmUgd2VpZ2h0XG5cblx0XHR0aGlzLmNsYW1wV2hlbkZpbmlzaGVkID0gZmFsc2U7Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdFx0dGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID0gdHJ1ZTsvLyBmb3Igc21vb3RoIGludGVycG9sYXRpb24gdy9vIHNlcGFyYXRlXG5cdFx0dGhpcy56ZXJvU2xvcGVBdEVuZCA9IHRydWU7Ly8gY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmRcblxuXHR9XG5cblx0Ly8gU3RhdGUgJiBTY2hlZHVsaW5nXG5cblx0cGxheSgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9hY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN0b3AoKSB7XG5cblx0XHR0aGlzLl9taXhlci5fZGVhY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVzZXQoKTtcblxuXHR9XG5cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHR0aGlzLnRpbWUgPSAwOyAvLyByZXN0YXJ0IGNsaXBcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtIDE7Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsvLyBmb3JnZXQgc2NoZWR1bGluZ1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdGlzUnVubmluZygpIHtcblxuXHRcdHJldHVybiB0aGlzLmVuYWJsZWQgJiYgISB0aGlzLnBhdXNlZCAmJiB0aGlzLnRpbWVTY2FsZSAhPT0gMCAmJlxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID09PSBudWxsICYmIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH1cblxuXHQvLyByZXR1cm4gdHJ1ZSB3aGVuIHBsYXkgaGFzIGJlZW4gY2FsbGVkXG5cdGlzU2NoZWR1bGVkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH1cblxuXHRzdGFydEF0KCB0aW1lICkge1xuXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRMb29wKCBtb2RlLCByZXBldGl0aW9ucyApIHtcblxuXHRcdHRoaXMubG9vcCA9IG1vZGU7XG5cdFx0dGhpcy5yZXBldGl0aW9ucyA9IHJlcGV0aXRpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIFdlaWdodFxuXG5cdC8vIHNldCB0aGUgd2VpZ2h0IHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgZmFkaW5nXG5cdC8vIGFsdGhvdWdoIC5lbmFibGVkID0gZmFsc2UgeWllbGRzIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgemVybywgdGhpc1xuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLmVuYWJsZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVdlaWdodCggd2VpZ2h0ICkge1xuXG5cdFx0dGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XG5cblx0XHQvLyBub3RlOiBzYW1lIGxvZ2ljIGFzIHdoZW4gdXBkYXRlZCBhdCBydW50aW1lXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHR9XG5cblx0Ly8gcmV0dXJuIHRoZSB3ZWlnaHQgY29uc2lkZXJpbmcgZmFkaW5nIGFuZCAuZW5hYmxlZFxuXHRnZXRFZmZlY3RpdmVXZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0O1xuXG5cdH1cblxuXHRmYWRlSW4oIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApO1xuXG5cdH1cblxuXHRmYWRlT3V0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDEsIDAgKTtcblxuXHR9XG5cblx0Y3Jvc3NGYWRlRnJvbSggZmFkZU91dEFjdGlvbiwgZHVyYXRpb24sIHdhcnAgKSB7XG5cblx0XHRmYWRlT3V0QWN0aW9uLmZhZGVPdXQoIGR1cmF0aW9uICk7XG5cdFx0dGhpcy5mYWRlSW4oIGR1cmF0aW9uICk7XG5cblx0XHRpZiAoIHdhcnAgKSB7XG5cblx0XHRcdGNvbnN0IGZhZGVJbkR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbixcblx0XHRcdFx0ZmFkZU91dER1cmF0aW9uID0gZmFkZU91dEFjdGlvbi5fY2xpcC5kdXJhdGlvbixcblxuXHRcdFx0XHRzdGFydEVuZFJhdGlvID0gZmFkZU91dER1cmF0aW9uIC8gZmFkZUluRHVyYXRpb24sXG5cdFx0XHRcdGVuZFN0YXJ0UmF0aW8gPSBmYWRlSW5EdXJhdGlvbiAvIGZhZGVPdXREdXJhdGlvbjtcblxuXHRcdFx0ZmFkZU91dEFjdGlvbi53YXJwKCAxLjAsIHN0YXJ0RW5kUmF0aW8sIGR1cmF0aW9uICk7XG5cdFx0XHR0aGlzLndhcnAoIGVuZFN0YXJ0UmF0aW8sIDEuMCwgZHVyYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjcm9zc0ZhZGVUbyggZmFkZUluQWN0aW9uLCBkdXJhdGlvbiwgd2FycCApIHtcblxuXHRcdHJldHVybiBmYWRlSW5BY3Rpb24uY3Jvc3NGYWRlRnJvbSggdGhpcywgZHVyYXRpb24sIHdhcnAgKTtcblxuXHR9XG5cblx0c3RvcEZhZGluZygpIHtcblxuXHRcdGNvbnN0IHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gVGltZSBTY2FsZSBDb250cm9sXG5cblx0Ly8gc2V0IHRoZSB0aW1lIHNjYWxlIHN0b3BwaW5nIGFueSBzY2hlZHVsZWQgd2FycGluZ1xuXHQvLyBhbHRob3VnaCAucGF1c2VkID0gdHJ1ZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHRpbWUgc2NhbGUgb2YgemVybywgdGhpc1xuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLnBhdXNlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlVGltZVNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH1cblxuXHQvLyByZXR1cm4gdGhlIHRpbWUgc2NhbGUgY29uc2lkZXJpbmcgd2FycGluZyBhbmQgLnBhdXNlZFxuXHRnZXRFZmZlY3RpdmVUaW1lU2NhbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH1cblxuXHRzZXREdXJhdGlvbiggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdHN5bmNXaXRoKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH1cblxuXHRoYWx0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9XG5cblx0d2FycCggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLFxuXHRcdFx0bm93ID0gbWl4ZXIudGltZSxcblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0bGV0IGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIGludGVycG9sYW50ID09PSBudWxsICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcblxuXHRcdHZhbHVlc1sgMCBdID0gc3RhcnRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cdFx0dmFsdWVzWyAxIF0gPSBlbmRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3RvcFdhcnBpbmcoKSB7XG5cblx0XHRjb25zdCB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIE9iamVjdCBBY2Nlc3NvcnNcblxuXHRnZXRNaXhlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9XG5cblx0Z2V0Q2xpcCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH1cblxuXHRnZXRSb290KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9XG5cblx0Ly8gSW50ZXJuYVxuXG5cdF91cGRhdGUoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZTtcblxuXHRcdGlmICggc3RhcnRUaW1lICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBjaGVjayBmb3Igc2NoZWR1bGVkIHN0YXJ0IG9mIGFjdGlvblxuXG5cdFx0XHRjb25zdCB0aW1lUnVubmluZyA9ICggdGltZSAtIHN0YXJ0VGltZSApICogdGltZURpcmVjdGlvbjtcblx0XHRcdGlmICggdGltZVJ1bm5pbmcgPCAwIHx8IHRpbWVEaXJlY3Rpb24gPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuOyAvLyB5ZXQgdG8gY29tZSAvIGRvbid0IGRlY2lkZSB3aGVuIGRlbHRhID0gMFxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHN0YXJ0XG5cblx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7IC8vIHVuc2NoZWR1bGVcblx0XHRcdGRlbHRhVGltZSA9IHRpbWVEaXJlY3Rpb24gKiB0aW1lUnVubmluZztcblxuXHRcdH1cblxuXHRcdC8vIGFwcGx5IHRpbWUgc2NhbGUgYW5kIGFkdmFuY2UgdGltZVxuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMuX3VwZGF0ZVRpbWVTY2FsZSggdGltZSApO1xuXHRcdGNvbnN0IGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0Y29uc3Qgd2VpZ2h0ID0gdGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XG5cblx0XHRpZiAoIHdlaWdodCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IGludGVycG9sYW50cyA9IHRoaXMuX2ludGVycG9sYW50cztcblx0XHRcdGNvbnN0IHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0c3dpdGNoICggdGhpcy5ibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZTpcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IGludGVycG9sYW50cy5sZW5ndGg7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xuXHRcdFx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlQWRkaXRpdmUoIHdlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGU6XG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0XHRcdHByb3BlcnR5TWl4ZXJzWyBqIF0uYWNjdW11bGF0ZSggYWNjdUluZGV4LCB3ZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfdXBkYXRlV2VpZ2h0KCB0aW1lICkge1xuXG5cdFx0bGV0IHdlaWdodCA9IDA7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0d2VpZ2h0ID0gdGhpcy53ZWlnaHQ7XG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0d2VpZ2h0ICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BGYWRpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJwb2xhbnRWYWx1ZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZmFkZWQgb3V0LCBkaXNhYmxlXG5cdFx0XHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHdlaWdodDtcblx0XHRyZXR1cm4gd2VpZ2h0O1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZVNjYWxlKCB0aW1lICkge1xuXG5cdFx0bGV0IHRpbWVTY2FsZSA9IDA7XG5cblx0XHRpZiAoICEgdGhpcy5wYXVzZWQgKSB7XG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0XHRjb25zdCBpbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH1cblxuXHRfdXBkYXRlVGltZSggZGVsdGFUaW1lICkge1xuXG5cdFx0Y29uc3QgZHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uO1xuXHRcdGNvbnN0IGxvb3AgPSB0aGlzLmxvb3A7XG5cblx0XHRsZXQgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcblx0XHRsZXQgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0Y29uc3QgcGluZ1BvbmcgPSAoIGxvb3AgPT09IExvb3BQaW5nUG9uZyApO1xuXG5cdFx0aWYgKCBkZWx0YVRpbWUgPT09IDAgKSB7XG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtIDEgKSByZXR1cm4gdGltZTtcblxuXHRcdFx0cmV0dXJuICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGxvb3AgPT09IExvb3BPbmNlICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IDA7XG5cdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gZHVyYXRpb247XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0gMSA6IDFcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgeyAvLyByZXBldGl0aXZlIFJlcGVhdCBvciBQaW5nUG9uZ1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdGlmICggZGVsdGFUaW1lID49IDAgKSB7XG5cblx0XHRcdFx0XHRsb29wQ291bnQgPSAwO1xuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gd2hlbiBsb29waW5nIGluIHJldmVyc2UgZGlyZWN0aW9uLCB0aGUgaW5pdGlhbFxuXHRcdFx0XHRcdC8vIHRyYW5zaXRpb24gdGhyb3VnaCB6ZXJvIGNvdW50cyBhcyBhIHJlcGV0aXRpb24sXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXG5cblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gfHwgdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0Ly8gd3JhcCBhcm91bmRcblxuXHRcdFx0XHRjb25zdCBsb29wRGVsdGEgPSBNYXRoLmZsb29yKCB0aW1lIC8gZHVyYXRpb24gKTsgLy8gc2lnbmVkXG5cdFx0XHRcdHRpbWUgLT0gZHVyYXRpb24gKiBsb29wRGVsdGE7XG5cblx0XHRcdFx0bG9vcENvdW50ICs9IE1hdGguYWJzKCBsb29wRGVsdGEgKTtcblxuXHRcdFx0XHRjb25zdCBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcblxuXHRcdFx0XHRpZiAoIHBlbmRpbmcgPD0gMCApIHtcblxuXHRcdFx0XHRcdC8vIGhhdmUgdG8gc3RvcCAoc3dpdGNoIHN0YXRlLCBjbGFtcCB0aW1lLCBmaXJlIGV2ZW50KVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcblxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA+IDAgPyAxIDogLSAxXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBrZWVwIHJ1bm5pbmdcblxuXHRcdFx0XHRcdGlmICggcGVuZGluZyA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcblxuXHRcdFx0XHRcdFx0Y29uc3QgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2xvb3AnLCBhY3Rpb246IHRoaXMsIGxvb3BEZWx0YTogbG9vcERlbHRhXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aW1lO1xuXG5cdH1cblxuXHRfc2V0RW5kaW5ncyggYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nICkge1xuXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcblxuXHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhc3N1bWluZyBmb3IgTG9vcE9uY2UgYXRTdGFydCA9PSBhdEVuZCA9PSB0cnVlXG5cblx0XHRcdGlmICggYXRTdGFydCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IHRoaXMuemVyb1Nsb3BlQXRTdGFydCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXRFbmQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kIFx0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lO1xuXHRcdGxldCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xuXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcblx0XHR2YWx1ZXNbIDAgXSA9IHdlaWdodE5vdztcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XG5cdFx0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIEFuaW1hdGlvbk1peGVyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggcm9vdCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9yb290ID0gcm9vdDtcblx0XHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xuXHRcdHRoaXMuX2FjY3VJbmRleCA9IDA7XG5cdFx0dGhpcy50aW1lID0gMDtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IDEuMDtcblxuXHR9XG5cblx0X2JpbmRBY3Rpb24oIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncyxcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZTtcblxuXHRcdGxldCBiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IHt9O1xuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgdHJhY2sgPSB0cmFja3NbIGkgXSxcblx0XHRcdFx0dHJhY2tOYW1lID0gdHJhY2submFtZTtcblxuXHRcdFx0bGV0IGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZXhpc3RpbmcgYmluZGluZywgbWFrZSBzdXJlIHRoZSBjYWNoZSBrbm93c1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XG5cblx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKFxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpICk7XG5cblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0ucmVzdWx0QnVmZmVyID0gYmluZGluZy5idWZmZXI7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9hY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCBhY3Rpb24uX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXG5cblx0XHRcdFx0Y29uc3Qgcm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkLFxuXHRcdFx0XHRcdGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0XHRcdHRoaXMuX2JpbmRBY3Rpb24oIGFjdGlvbixcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCAmJiBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnNbIDAgXSApO1xuXG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBpbmNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnVzZUNvdW50ICsrID09PSAwICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcblx0XHRcdFx0XHRiaW5kaW5nLnNhdmVPcmlnaW5hbFN0YXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xlbmRBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBkZWNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXG5cblx0X2luaXRNZW1vcnlNYW5hZ2VyKCkge1xuXG5cdFx0dGhpcy5fYWN0aW9ucyA9IFtdOyAvLyAnbkFjdGl2ZUFjdGlvbnMnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cblx0XHR0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307XG5cdFx0Ly8gaW5zaWRlOlxuXHRcdC8vIHtcblx0XHQvLyBcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+IC0gdXNlZCBhcyBwcm90b3R5cGVzXG5cdFx0Ly8gXHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvbiAtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRcdGFjdGlvbnM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVBY3Rpb25zO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRiaW5kaW5nczoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzXG5cblx0X2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblx0XHRyZXR1cm4gaW5kZXggIT09IG51bGwgJiYgaW5kZXggPCB0aGlzLl9uQWN0aXZlQWN0aW9ucztcblxuXHR9XG5cblx0X2FkZEluYWN0aXZlQWN0aW9uKCBhY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRsZXQgYWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHtcblxuXHRcdFx0XHRrbm93bkFjdGlvbnM6IFsgYWN0aW9uIF0sXG5cdFx0XHRcdGFjdGlvbkJ5Um9vdDoge31cblxuXHRcdFx0fTtcblxuXHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gMDtcblxuXHRcdFx0YWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSA9IGFjdGlvbnNGb3JDbGlwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdGFjdGlvbnMucG9wKCk7XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0sXG5cdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zLFxuXG5cdFx0XHRsYXN0S25vd25BY3Rpb24gPVxuXHRcdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCAtIDEgXSxcblxuXHRcdFx0YnlDbGlwQ2FjaGVJbmRleCA9IGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleDtcblxuXHRcdGxhc3RLbm93bkFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGJ5Q2xpcENhY2hlSW5kZXg7XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsgYnlDbGlwQ2FjaGVJbmRleCBdID0gbGFzdEtub3duQWN0aW9uO1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXAucG9wKCk7XG5cblx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cblx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVBY3Rpb25zICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRmaXJzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0X3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyAgfCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHw8IGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xuXHRcdC8vICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgcyAgICAgICAgYVxuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHRsYXN0QWN0aXZlQWN0aW9uID0gYWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YWN0aW9uc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBhY3Rpb247XG5cblx0XHRsYXN0QWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGFjdGlvbnNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUFjdGlvbjtcblxuXHR9XG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRsZXQgYmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdID0gYmluZGluZztcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XG5cdFx0YmluZGluZ3MucHVzaCggYmluZGluZyApO1xuXG5cdH1cblxuXHRfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByb3BCaW5kaW5nID0gYmluZGluZy5iaW5kaW5nLFxuXHRcdFx0cm9vdFV1aWQgPSBwcm9wQmluZGluZy5yb290Tm9kZS51dWlkLFxuXHRcdFx0dHJhY2tOYW1lID0gcHJvcEJpbmRpbmcucGF0aCxcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdLFxuXG5cdFx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGJpbmRpbmdzLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4O1xuXG5cdFx0bGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUJpbmRpbmc7XG5cdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRkZWxldGUgYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBiaW5kaW5nQnlOYW1lICkubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRkZWxldGUgYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZW5kQmluZGluZyggYmluZGluZyApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MgKyssXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XG5cblx0fVxuXG5cdF90YWtlQmFja0JpbmRpbmcoIGJpbmRpbmcgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH1cblxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IG9mIEludGVycG9sYW50cyBmb3Igd2VpZ2h0IGFuZCB0aW1lIHNjYWxlXG5cblx0X2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKSB7XG5cblx0XHRjb25zdCBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgKys7XG5cblx0XHRsZXQgaW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTtcblxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVycG9sYW50O1xuXG5cdH1cblxuXHRfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIGludGVycG9sYW50ICkge1xuXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdHByZXZJbmRleCA9IGludGVycG9sYW50Ll9fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMsXG5cblx0XHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudCA9IGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0bGFzdEFjdGl2ZUludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRpbnRlcnBvbGFudHNbIHByZXZJbmRleCBdID0gbGFzdEFjdGl2ZUludGVycG9sYW50O1xuXG5cdH1cblxuXHQvLyByZXR1cm4gYW4gYWN0aW9uIGZvciBhIGNsaXAgb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSByb290IHRhcmdldFxuXHQvLyBvYmplY3QgKHRoaXMgbWV0aG9kIGFsbG9jYXRlcyBhIGxvdCBvZiBkeW5hbWljIG1lbW9yeSBpbiBjYXNlIGFcblx0Ly8gcHJldmlvdXNseSB1bmtub3duIGNsaXAvcm9vdCBjb21iaW5hdGlvbiBpcyBzcGVjaWZpZWQpXG5cdGNsaXBBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCwgYmxlbmRNb2RlICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQ7XG5cblx0XHRsZXQgY2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/IEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcDtcblxuXHRcdGNvbnN0IGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXA7XG5cblx0XHRjb25zdCBhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cdFx0bGV0IHByb3RvdHlwZUFjdGlvbiA9IG51bGw7XG5cblx0XHRpZiAoIGJsZW5kTW9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIGNsaXBPYmplY3QgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gY2xpcE9iamVjdC5ibGVuZE1vZGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGV4aXN0aW5nQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGV4aXN0aW5nQWN0aW9uICE9PSB1bmRlZmluZWQgJiYgZXhpc3RpbmdBY3Rpb24uYmxlbmRNb2RlID09PSBibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nQWN0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHdlIGtub3cgdGhlIGNsaXAsIHNvIHdlIGRvbid0IGhhdmUgdG8gcGFyc2UgYWxsXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcblx0XHRcdHByb3RvdHlwZUFjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdO1xuXG5cdFx0XHQvLyBhbHNvLCB0YWtlIHRoZSBjbGlwIGZyb20gdGhlIHByb3RvdHlwZSBhY3Rpb25cblx0XHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApXG5cdFx0XHRcdGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7XG5cblx0XHR9XG5cblx0XHQvLyBjbGlwIG11c3QgYmUga25vd24gd2hlbiBzcGVjaWZpZWQgdmlhIHN0cmluZ1xuXHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcblx0XHRjb25zdCBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QsIGJsZW5kTW9kZSApO1xuXG5cdFx0dGhpcy5fYmluZEFjdGlvbiggbmV3QWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKTtcblxuXHRcdC8vIGFuZCBtYWtlIHRoZSBhY3Rpb24ga25vd24gdG8gdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRyZXR1cm4gbmV3QWN0aW9uO1xuXG5cdH1cblxuXHQvLyBnZXQgYW4gZXhpc3RpbmcgYWN0aW9uXG5cdGV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHRjb25zdCByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdIHx8IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0Ly8gZGVhY3RpdmF0ZXMgYWxsIHByZXZpb3VzbHkgc2NoZWR1bGVkIGFjdGlvbnNcblx0c3RvcEFsbEFjdGlvbigpIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdGZvciAoIGxldCBpID0gbkFjdGlvbnMgLSAxOyBpID49IDA7IC0tIGkgKSB7XG5cblx0XHRcdGFjdGlvbnNbIGkgXS5zdG9wKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gYWR2YW5jZSB0aGUgdGltZSBhbmQgdXBkYXRlIGFwcGx5IHRoZSBhbmltYXRpb25cblx0dXBkYXRlKCBkZWx0YVRpbWUgKSB7XG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdHRpbWUgPSB0aGlzLnRpbWUgKz0gZGVsdGFUaW1lLFxuXHRcdFx0dGltZURpcmVjdGlvbiA9IE1hdGguc2lnbiggZGVsdGFUaW1lICksXG5cblx0XHRcdGFjY3VJbmRleCA9IHRoaXMuX2FjY3VJbmRleCBePSAxO1xuXG5cdFx0Ly8gcnVuIGFjdGl2ZSBhY3Rpb25zXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBhY3Rpb24gPSBhY3Rpb25zWyBpIF07XG5cblx0XHRcdGFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYXBwbHkoIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8vIEFsbG93cyB5b3UgdG8gc2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gYW4gYW5pbWF0aW9uLlxuXHRzZXRUaW1lKCB0aW1lSW5TZWNvbmRzICkge1xuXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIEFuaW1hdGlvbk1peGVyIG9iamVjdDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9hY3Rpb25zLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fYWN0aW9uc1sgaSBdLnRpbWUgPSAwOyAvLyBaZXJvIG91dCB0aW1lIGF0dHJpYnV0ZSBmb3IgYWxsIGFzc29jaWF0ZWQgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHMuXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoIHRpbWVJblNlY29uZHMgKTsgLy8gVXBkYXRlIHVzZWQgdG8gc2V0IGV4YWN0IHRpbWUuIFJldHVybnMgXCJ0aGlzXCIgQW5pbWF0aW9uTWl4ZXIgb2JqZWN0LlxuXG5cdH1cblxuXHQvLyByZXR1cm4gdGhpcyBtaXhlcidzIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHRnZXRSb290KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cblx0fVxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcFxuXHR1bmNhY2hlQ2xpcCggY2xpcCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbm90ZToganVzdCBjYWxsaW5nIF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiB3b3VsZCBtZXNzIHVwIHRoZVxuXHRcdFx0Ly8gaXRlcmF0aW9uIHN0YXRlIGFuZCBhbHNvIHJlcXVpcmUgdXBkYXRpbmcgdGhlIHN0YXRlIHdlIGNhblxuXHRcdFx0Ly8ganVzdCB0aHJvdyBhd2F5XG5cblx0XHRcdGNvbnN0IGFjdGlvbnNUb1JlbW92ZSA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucztcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYWN0aW9uc1RvUmVtb3ZlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRjb25zdCBhY3Rpb24gPSBhY3Rpb25zVG9SZW1vdmVbIGkgXTtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0XHRjb25zdCBjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXHRcdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XG5cdFx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRcdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdFx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHR1bmNhY2hlUm9vdCggcm9vdCApIHtcblxuXHRcdGNvbnN0IHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRmb3IgKCBjb25zdCBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLmFjdGlvbkJ5Um9vdCxcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGFjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyByZW1vdmUgYSB0YXJnZXRlZCBjbGlwIGZyb20gdGhlIGNhY2hlXG5cdHVuY2FjaGVBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdGNvbnN0IGFjdGlvbiA9IHRoaXMuZXhpc3RpbmdBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCApO1xuXG5cdFx0aWYgKCBhY3Rpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5BbmltYXRpb25NaXhlci5wcm90b3R5cGUuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCAxICk7XG5cbmNsYXNzIFVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogVHlwZSBwYXJhbWV0ZXIgaXMgbm8gbG9uZ2VyIG5lZWRlZC4nICk7XG5cdFx0XHR2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgVW5pZm9ybSggdGhpcy52YWx1ZS5jbG9uZSA9PT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZSA6IHRoaXMudmFsdWUuY2xvbmUoKSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciBleHRlbmRzIEludGVybGVhdmVkQnVmZmVyIHtcblxuXHRjb25zdHJ1Y3RvciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRzdXBlciggYXJyYXksIHN0cmlkZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGNvbnN0IGliID0gc3VwZXIuY2xvbmUoIGRhdGEgKTtcblxuXHRcdGliLm1lc2hQZXJBdHRyaWJ1dGUgPSB0aGlzLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gaWI7XG5cblx0fVxuXG5cdHRvSlNPTiggZGF0YSApIHtcblxuXHRcdGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oIGRhdGEgKTtcblxuXHRcdGpzb24uaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciA9IHRydWU7XG5cdFx0anNvbi5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fVxuXG59XG5cbkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuY2xhc3MgR0xCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdGNvbnN0cnVjdG9yKCBidWZmZXIsIHR5cGUsIGl0ZW1TaXplLCBlbGVtZW50U2l6ZSwgY291bnQgKSB7XG5cblx0XHR0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR0aGlzLmVsZW1lbnRTaXplID0gZWxlbWVudFNpemU7XG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHR9XG5cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdHNldEJ1ZmZlciggYnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBidWZmZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0VHlwZSggdHlwZSwgZWxlbWVudFNpemUgKSB7XG5cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZWxlbWVudFNpemUgPSBlbGVtZW50U2l6ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRJdGVtU2l6ZSggaXRlbVNpemUgKSB7XG5cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q291bnQoIGNvdW50ICkge1xuXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbkdMQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5pc0dMQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuY2xhc3MgUmF5Y2FzdGVyIHtcblxuXHRjb25zdHJ1Y3Rvciggb3JpZ2luLCBkaXJlY3Rpb24sIG5lYXIgPSAwLCBmYXIgPSBJbmZpbml0eSApIHtcblxuXHRcdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5uZWFyID0gbmVhcjtcblx0XHR0aGlzLmZhciA9IGZhcjtcblx0XHR0aGlzLmNhbWVyYSA9IG51bGw7XG5cdFx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cblx0XHR0aGlzLnBhcmFtcyA9IHtcblx0XHRcdE1lc2g6IHt9LFxuXHRcdFx0TGluZTogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRcdExPRDoge30sXG5cdFx0XHRQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sXG5cdFx0XHRTcHJpdGU6IHt9XG5cdFx0fTtcblxuXHR9XG5cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdC8vIGRpcmVjdGlvbiBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgKGZvciBhY2N1cmF0ZSBkaXN0YW5jZSBjYWxjdWxhdGlvbnMpXG5cblx0XHR0aGlzLnJheS5zZXQoIG9yaWdpbiwgZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdHNldEZyb21DYW1lcmEoIGNvb3JkcywgY2FtZXJhICkge1xuXG5cdFx0aWYgKCBjYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0fSBlbHNlIGlmICggY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlOiAnICsgY2FtZXJhLnR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHJlY3Vyc2l2ZSA9IHRydWUsIGludGVyc2VjdHMgPSBbXSApIHtcblxuXHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG5cdGludGVyc2VjdE9iamVjdHMoIG9iamVjdHMsIHJlY3Vyc2l2ZSA9IHRydWUsIGludGVyc2VjdHMgPSBbXSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3RzWyBpIF0sIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0fVxuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYXNjU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2U7XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgcmVjdXJzaXZlICkge1xuXG5cdGlmICggb2JqZWN0LmxheWVycy50ZXN0KCByYXljYXN0ZXIubGF5ZXJzICkgKSB7XG5cblx0XHRvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0fVxuXG5cdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BoZXJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICogVGhlIHBvbGFyIGFuZ2xlIChwaGkpIGlzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHktYXhpcy4gVGhlIHBvc2l0aXZlIHktYXhpcyBpcyB1cC5cbiAqIFRoZSBhemltdXRoYWwgYW5nbGUgKHRoZXRhKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXMuXG4gKi9cblxuY2xhc3MgU3BoZXJpY2FsIHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgcGhpID0gMCwgdGhldGEgPSAwICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7IC8vIHBvbGFyIGFuZ2xlXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhOyAvLyBhemltdXRoYWwgYW5nbGVcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXQoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMucGhpID0gcGhpO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMucGhpID0gb3RoZXIucGhpO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlIEVQUyBhbmQgUEktRVBTXG5cdG1ha2VTYWZlKCkge1xuXG5cdFx0Y29uc3QgRVBTID0gMC4wMDAwMDE7XG5cdFx0dGhpcy5waGkgPSBNYXRoLm1heCggRVBTLCBNYXRoLm1pbiggTWF0aC5QSSAtIEVQUywgdGhpcy5waGkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21WZWN0b3IzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeSAqIHkgKyB6ICogeiApO1xuXG5cdFx0aWYgKCB0aGlzLnJhZGl1cyA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IDA7XG5cdFx0XHR0aGlzLnBoaSA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdFx0dGhpcy5waGkgPSBNYXRoLmFjb3MoIGNsYW1wKCB5IC8gdGhpcy5yYWRpdXMsIC0gMSwgMSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVmOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeWxpbmRyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICovXG5cbmNsYXNzIEN5bGluZHJpY2FsIHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgdGhldGEgPSAwLCB5ID0gMCApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzOyAvLyBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhOyAvLyBjb3VudGVyY2xvY2t3aXNlIGFuZ2xlIGluIHRoZSB4LXogcGxhbmUgbWVhc3VyZWQgaW4gcmFkaWFucyBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXNcblx0XHR0aGlzLnkgPSB5OyAvLyBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldCggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXHRcdHRoaXMueSA9IG90aGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVZlY3RvcjMoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKCB2LngsIHYueSwgdi56ICk7XG5cblx0fVxuXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB6ICogeiApO1xuXHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciQ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5jbGFzcyBCb3gyIHtcblxuXHRjb25zdHJ1Y3RvciggbWluID0gbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKSwgbWF4ID0gbmV3IFZlY3RvcjIoIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKSApIHtcblxuXHRcdHRoaXMubWluID0gbWluO1xuXHRcdHRoaXMubWF4ID0gbWF4O1xuXG5cdH1cblxuXHRzZXQoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVBvaW50cyggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZSggY2VudGVyLCBzaXplICkge1xuXG5cdFx0Y29uc3QgaGFsZlNpemUgPSBfdmVjdG9yJDQuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHR0aGlzLm1pbi5jb3B5KCBjZW50ZXIgKS5zdWIoIGhhbGZTaXplICk7XG5cdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IC0gSW5maW5pdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0aXNFbXB0eSgpIHtcblxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXG5cblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKTtcblxuXHR9XG5cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHRnZXRTaXplKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fVxuXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHBhbmRCeVZlY3RvciggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4cGFuZEJ5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fVxuXG5cdGNvbnRhaW5zQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55O1xuXG5cdH1cblxuXHRnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcblx0XHRcdCggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKVxuXHRcdCk7XG5cblx0fVxuXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdC8vIHVzaW5nIDQgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zXG5cblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRib3gubWF4LnkgPCB0aGlzLm1pbi55IHx8IGJveC5taW4ueSA+IHRoaXMubWF4LnkgPyBmYWxzZSA6IHRydWU7XG5cblx0fVxuXG5cdGNsYW1wUG9pbnQoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0Y29uc3QgY2xhbXBlZFBvaW50ID0gX3ZlY3RvciQ0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXHRcdHJldHVybiBjbGFtcGVkUG9pbnQuc3ViKCBwb2ludCApLmxlbmd0aCgpO1xuXG5cdH1cblxuXHRpbnRlcnNlY3QoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVuaW9uKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMubWluLmFkZCggb2Zmc2V0ICk7XG5cdFx0dGhpcy5tYXguYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRlcXVhbHMoIGJveCApIHtcblxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTtcblxuXHR9XG5cbn1cblxuQm94Mi5wcm90b3R5cGUuaXNCb3gyID0gdHJ1ZTtcblxuY29uc3QgX3N0YXJ0UCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9zdGFydEVuZCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgTGluZTMge1xuXG5cdGNvbnN0cnVjdG9yKCBzdGFydCA9IG5ldyBWZWN0b3IzKCksIGVuZCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHR0aGlzLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cblx0fVxuXG5cdHNldCggc3RhcnQsIGVuZCApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggc3RhcnQgKTtcblx0XHR0aGlzLmVuZC5jb3B5KCBlbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5KCBsaW5lICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDZW50ZXIoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5zdGFydCwgdGhpcy5lbmQgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fVxuXG5cdGRlbHRhKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMuZW5kLCB0aGlzLnN0YXJ0ICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvKCB0aGlzLmVuZCApO1xuXG5cdH1cblxuXHRhdCggdCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGVsdGEoIHRhcmdldCApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnN0YXJ0ICk7XG5cblx0fVxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApIHtcblxuXHRcdF9zdGFydFAuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMuc3RhcnQgKTtcblx0XHRfc3RhcnRFbmQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHRcdGNvbnN0IHN0YXJ0RW5kMiA9IF9zdGFydEVuZC5kb3QoIF9zdGFydEVuZCApO1xuXHRcdGNvbnN0IHN0YXJ0RW5kX3N0YXJ0UCA9IF9zdGFydEVuZC5kb3QoIF9zdGFydFAgKTtcblxuXHRcdGxldCB0ID0gc3RhcnRFbmRfc3RhcnRQIC8gc3RhcnRFbmQyO1xuXG5cdFx0aWYgKCBjbGFtcFRvTGluZSApIHtcblxuXHRcdFx0dCA9IGNsYW1wKCB0LCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9XG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGNsYW1wVG9MaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKTtcblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggbGluZSApIHtcblxuXHRcdHJldHVybiBsaW5lLnN0YXJ0LmVxdWFscyggdGhpcy5zdGFydCApICYmIGxpbmUuZW5kLmVxdWFscyggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgU3BvdExpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgY29sb3IgKSB7XG5cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMubGlnaHQgPSBsaWdodDtcblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFtcblx0XHRcdDAsIDAsIDAsIFx0MCwgMCwgMSxcblx0XHRcdDAsIDAsIDAsIFx0MSwgMCwgMSxcblx0XHRcdDAsIDAsIDAsXHQtIDEsIDAsIDEsXG5cdFx0XHQwLCAwLCAwLCBcdDAsIDEsIDEsXG5cdFx0XHQwLCAwLCAwLCBcdDAsIC0gMSwgMVxuXHRcdF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGogPSAxLCBsID0gMzI7IGkgPCBsOyBpICsrLCBqICsrICkge1xuXG5cdFx0XHRjb25zdCBwMSA9ICggaSAvIGwgKSAqIE1hdGguUEkgKiAyO1xuXHRcdFx0Y29uc3QgcDIgPSAoIGogLyBsICkgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0cG9zaXRpb25zLnB1c2goXG5cdFx0XHRcdE1hdGguY29zKCBwMSApLCBNYXRoLnNpbiggcDEgKSwgMSxcblx0XHRcdFx0TWF0aC5jb3MoIHAyICksIE1hdGguc2luKCBwMiApLCAxXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHRoaXMuY29uZSA9IG5ldyBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRcdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZSgpIHtcblxuXHRcdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGNvbnN0IGNvbmVMZW5ndGggPSB0aGlzLmxpZ2h0LmRpc3RhbmNlID8gdGhpcy5saWdodC5kaXN0YW5jZSA6IDEwMDA7XG5cdFx0Y29uc3QgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBjb25lV2lkdGgsIGNvbmVXaWR0aCwgY29uZUxlbmd0aCApO1xuXG5cdFx0X3ZlY3RvciQzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMuY29uZS5sb29rQXQoIF92ZWN0b3IkMyApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ib25lTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX21hdHJpeFdvcmxkSW52ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5cbmNsYXNzIFNrZWxldG9uSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3Rvciggb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgYm9uZXMgPSBnZXRCb25lTGlzdCggb2JqZWN0ICk7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBjb2xvcnMgPSBbXTtcblxuXHRcdGNvbnN0IGNvbG9yMSA9IG5ldyBDb2xvciggMCwgMCwgMSApO1xuXHRcdGNvbnN0IGNvbG9yMiA9IG5ldyBDb2xvciggMCwgMSwgMCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYm9uZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCBkZXB0aFRlc3Q6IGZhbHNlLCBkZXB0aFdyaXRlOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UsIHRyYW5zcGFyZW50OiB0cnVlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdTa2VsZXRvbkhlbHBlcic7XG5cdFx0dGhpcy5pc1NrZWxldG9uSGVscGVyID0gdHJ1ZTtcblxuXHRcdHRoaXMucm9vdCA9IG9iamVjdDtcblx0XHR0aGlzLmJvbmVzID0gYm9uZXM7XG5cblx0XHR0aGlzLm1hdHJpeCA9IG9iamVjdC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRfbWF0cml4V29ybGRJbnYuY29weSggdGhpcy5yb290Lm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGogPSAwOyBpIDwgYm9uZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0X2JvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggX21hdHJpeFdvcmxkSW52LCBib25lLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdF92ZWN0b3IkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIF9ib25lTWF0cml4ICk7XG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiwgX3ZlY3RvciQyLngsIF92ZWN0b3IkMi55LCBfdmVjdG9yJDIueiApO1xuXG5cdFx0XHRcdF9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIF9tYXRyaXhXb3JsZEludiwgYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0X3ZlY3RvciQyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggX2JvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqICsgMSwgX3ZlY3RvciQyLngsIF92ZWN0b3IkMi55LCBfdmVjdG9yJDIueiApO1xuXG5cdFx0XHRcdGogKz0gMjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gZ2V0Qm9uZUxpc3QoIG9iamVjdCApIHtcblxuXHRjb25zdCBib25lTGlzdCA9IFtdO1xuXG5cdGlmICggb2JqZWN0LmlzQm9uZSA9PT0gdHJ1ZSApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2goIG9iamVjdCApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Ym9uZUxpc3QucHVzaC5hcHBseSggYm9uZUxpc3QsIGdldEJvbmVMaXN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSApICk7XG5cblx0fVxuXG5cdHJldHVybiBib25lTGlzdDtcblxufVxuXG5jbGFzcyBQb2ludExpZ2h0SGVscGVyIGV4dGVuZHMgTWVzaCB7XG5cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzcGhlcmVTaXplLCBjb2xvciApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IFNwaGVyZUdlb21ldHJ5KCBzcGhlcmVTaXplLCA0LCAyICk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdFx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvaW50TGlnaHRIZWxwZXInO1xuXG5cdFx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXG5cdFx0Lypcblx0Ly8gVE9ETzogZGVsZXRlIHRoaXMgY29tbWVudD9cblx0Y29uc3QgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCAxLCAyICk7XG5cdGNvbnN0IGRpc3RhbmNlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleENvbG9yLCBmb2c6IGZhbHNlLCB3aXJlZnJhbWU6IHRydWUsIG9wYWNpdHk6IDAuMSwgdHJhbnNwYXJlbnQ6IHRydWUgfSApO1xuXG5cdHRoaXMubGlnaHRTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggYnVsYkdlb21ldHJ5LCBidWxiTWF0ZXJpYWwgKTtcblx0dGhpcy5saWdodERpc3RhbmNlID0gbmV3IFRIUkVFLk1lc2goIGRpc3RhbmNlR2VvbWV0cnksIGRpc3RhbmNlTWF0ZXJpYWwgKTtcblxuXHRjb25zdCBkID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XG5cblx0fVxuXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcblx0Ki9cblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5tYXRlcmlhbC5jb2xvci5zZXQoIHRoaXMuY29sb3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0Lypcblx0XHRjb25zdCBkID0gdGhpcy5saWdodC5kaXN0YW5jZTtcblxuXHRcdGlmICggZCA9PT0gMC4wICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xuXG5cdFx0fVxuXHRcdCovXG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9jb2xvcjEgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcigpO1xuY29uc3QgX2NvbG9yMiA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XG5cbmNsYXNzIEhlbWlzcGhlcmVMaWdodEhlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdFx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IE9jdGFoZWRyb25HZW9tZXRyeSggc2l6ZSApO1xuXHRcdGdlb21ldHJ5LnJvdGF0ZVkoIE1hdGguUEkgKiAwLjUgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cdFx0aWYgKCB0aGlzLmNvbG9yID09PSB1bmRlZmluZWQgKSB0aGlzLm1hdGVyaWFsLnZlcnRleENvbG9ycyA9IHRydWU7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXHRcdGNvbnN0IGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uLmNvdW50ICogMyApO1xuXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0dGhpcy5hZGQoIG5ldyBNZXNoKCBnZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCBtZXNoID0gdGhpcy5jaGlsZHJlblsgMCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBjb2xvcnMgPSBtZXNoLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ2NvbG9yJyApO1xuXG5cdFx0XHRfY29sb3IxLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdF9jb2xvcjIuY29weSggdGhpcy5saWdodC5ncm91bmRDb2xvciApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjb2xvcnMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGNvbG9yID0gKCBpIDwgKCBsIC8gMiApICkgPyBfY29sb3IxIDogX2NvbG9yMjtcblxuXHRcdFx0XHRjb2xvcnMuc2V0WFlaKCBpLCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29sb3JzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdG1lc2gubG9va0F0KCBfdmVjdG9yJDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICkubmVnYXRlKCkgKTtcblxuXHR9XG5cbn1cblxuY2xhc3MgR3JpZEhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIHNpemUgPSAxMCwgZGl2aXNpb25zID0gMTAsIGNvbG9yMSA9IDB4NDQ0NDQ0LCBjb2xvcjIgPSAweDg4ODg4OCApIHtcblxuXHRcdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICk7XG5cdFx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgKTtcblxuXHRcdGNvbnN0IGNlbnRlciA9IGRpdmlzaW9ucyAvIDI7XG5cdFx0Y29uc3Qgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG5cdFx0Y29uc3QgaGFsZlNpemUgPSBzaXplIC8gMjtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW10sIGNvbG9ycyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMCwgayA9IC0gaGFsZlNpemU7IGkgPD0gZGl2aXNpb25zOyBpICsrLCBrICs9IHN0ZXAgKSB7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCBrLCAwLCAtIGhhbGZTaXplLCBrLCAwLCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRjb25zdCBjb2xvciA9IGkgPT09IGNlbnRlciA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdHcmlkSGVscGVyJztcblxuXHR9XG5cbn1cblxuY2xhc3MgUG9sYXJHcmlkSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMTAsIHJhZGlhbHMgPSAxNiwgY2lyY2xlcyA9IDgsIGRpdmlzaW9ucyA9IDY0LCBjb2xvcjEgPSAweDQ0NDQ0NCwgY29sb3IyID0gMHg4ODg4ODggKSB7XG5cblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xuXHRcdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICk7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IGNvbG9ycyA9IFtdO1xuXG5cdFx0Ly8gY3JlYXRlIHRoZSByYWRpYWxzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gcmFkaWFsczsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdiA9ICggaSAvIHJhZGlhbHMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0Y29uc3QgeCA9IE1hdGguc2luKCB2ICkgKiByYWRpdXM7XG5cdFx0XHRjb25zdCB6ID0gTWF0aC5jb3MoIHYgKSAqIHJhZGl1cztcblxuXHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXG5cdFx0XHRjb25zdCBjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgdGhlIGNpcmNsZXNcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBjaXJjbGVzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdFx0Y29uc3QgciA9IHJhZGl1cyAtICggcmFkaXVzIC8gY2lyY2xlcyAqIGkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xuXG5cdFx0XHRcdC8vIGZpcnN0IHZlcnRleFxuXG5cdFx0XHRcdGxldCB2ID0gKCBqIC8gZGl2aXNpb25zICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdFx0bGV0IHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdFx0bGV0IHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdFx0Ly8gc2Vjb25kIHZlcnRleFxuXG5cdFx0XHRcdHYgPSAoICggaiArIDEgKSAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHRcdHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdFx0eiA9IE1hdGguY29zKCB2ICkgKiByO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvbGFyR3JpZEhlbHBlcic7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY2xhc3MgRGlyZWN0aW9uYWxMaWdodEhlbHBlciBleHRlbmRzIE9iamVjdDNEIHtcblxuXHRjb25zdHJ1Y3RvciggbGlnaHQsIHNpemUsIGNvbG9yICkge1xuXG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cdFx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdGlmICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgc2l6ZSA9IDE7XG5cblx0XHRsZXQgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbXG5cdFx0XHQtIHNpemUsIHNpemUsIDAsXG5cdFx0XHRzaXplLCBzaXplLCAwLFxuXHRcdFx0c2l6ZSwgLSBzaXplLCAwLFxuXHRcdFx0LSBzaXplLCAtIHNpemUsIDAsXG5cdFx0XHQtIHNpemUsIHNpemUsIDBcblx0XHRdLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGZvZzogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHRoaXMubGlnaHRQbGFuZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLmFkZCggdGhpcy5saWdodFBsYW5lICk7XG5cblx0XHRnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMCwgMSBdLCAzICkgKTtcblxuXHRcdHRoaXMudGFyZ2V0TGluZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLmFkZCggdGhpcy50YXJnZXRMaW5lICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0dXBkYXRlKCkge1xuXG5cdFx0X3YxLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdF92Mi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0X3YzLnN1YlZlY3RvcnMoIF92MiwgX3YxICk7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUubG9va0F0KCBfdjIgKTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cdFx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0TGluZS5sb29rQXQoIF92MiApO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gX3YzLmxlbmd0aCgpO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2NhbWVyYSA9IC8qQF9fUFVSRV9fKi8gbmV3IENhbWVyYSgpO1xuXG4vKipcbiAqXHQtIHNob3dzIGZydXN0dW0sIGxpbmUgb2Ygc2lnaHQgYW5kIHVwIG9mIHRoZSBjYW1lcmFcbiAqXHQtIHN1aXRhYmxlIGZvciBmYXN0IHVwZGF0ZXNcbiAqIFx0LSBiYXNlZCBvbiBmcnVzdHVtIHZpc3VhbGl6YXRpb24gaW4gbGlnaHRnbC5qcyBzaGFkb3dtYXAgZXhhbXBsZVxuICpcdFx0aHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2xpZ2h0Z2wuanMvYmxvYi9tYXN0ZXIvdGVzdHMvc2hhZG93bWFwLmh0bWxcbiAqL1xuXG5jbGFzcyBDYW1lcmFIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiwgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IGNvbG9ycyA9IFtdO1xuXG5cdFx0Y29uc3QgcG9pbnRNYXAgPSB7fTtcblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0Y29uc3QgY29sb3JGcnVzdHVtID0gbmV3IENvbG9yKCAweGZmYWEwMCApO1xuXHRcdGNvbnN0IGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcblx0XHRjb25zdCBjb2xvclVwID0gbmV3IENvbG9yKCAweDAwYWFmZiApO1xuXHRcdGNvbnN0IGNvbG9yVGFyZ2V0ID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHRcdGNvbnN0IGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XG5cblx0XHQvLyBuZWFyXG5cblx0XHRhZGRMaW5lKCAnbjEnLCAnbjInLCBjb2xvckZydXN0dW0gKTtcblx0XHRhZGRMaW5lKCAnbjInLCAnbjQnLCBjb2xvckZydXN0dW0gKTtcblx0XHRhZGRMaW5lKCAnbjQnLCAnbjMnLCBjb2xvckZydXN0dW0gKTtcblx0XHRhZGRMaW5lKCAnbjMnLCAnbjEnLCBjb2xvckZydXN0dW0gKTtcblxuXHRcdC8vIGZhclxuXG5cdFx0YWRkTGluZSggJ2YxJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ2YyJywgJ2Y0JywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ2Y0JywgJ2YzJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ2YzJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cblx0XHQvLyBzaWRlc1xuXG5cdFx0YWRkTGluZSggJ24xJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ24yJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ24zJywgJ2YzJywgY29sb3JGcnVzdHVtICk7XG5cdFx0YWRkTGluZSggJ240JywgJ2Y0JywgY29sb3JGcnVzdHVtICk7XG5cblx0XHQvLyBjb25lXG5cblx0XHRhZGRMaW5lKCAncCcsICduMScsIGNvbG9yQ29uZSApO1xuXHRcdGFkZExpbmUoICdwJywgJ24yJywgY29sb3JDb25lICk7XG5cdFx0YWRkTGluZSggJ3AnLCAnbjMnLCBjb2xvckNvbmUgKTtcblx0XHRhZGRMaW5lKCAncCcsICduNCcsIGNvbG9yQ29uZSApO1xuXG5cdFx0Ly8gdXBcblxuXHRcdGFkZExpbmUoICd1MScsICd1MicsIGNvbG9yVXAgKTtcblx0XHRhZGRMaW5lKCAndTInLCAndTMnLCBjb2xvclVwICk7XG5cdFx0YWRkTGluZSggJ3UzJywgJ3UxJywgY29sb3JVcCApO1xuXG5cdFx0Ly8gdGFyZ2V0XG5cblx0XHRhZGRMaW5lKCAnYycsICd0JywgY29sb3JUYXJnZXQgKTtcblx0XHRhZGRMaW5lKCAncCcsICdjJywgY29sb3JDcm9zcyApO1xuXG5cdFx0Ly8gY3Jvc3NcblxuXHRcdGFkZExpbmUoICdjbjEnLCAnY24yJywgY29sb3JDcm9zcyApO1xuXHRcdGFkZExpbmUoICdjbjMnLCAnY240JywgY29sb3JDcm9zcyApO1xuXG5cdFx0YWRkTGluZSggJ2NmMScsICdjZjInLCBjb2xvckNyb3NzICk7XG5cdFx0YWRkTGluZSggJ2NmMycsICdjZjQnLCBjb2xvckNyb3NzICk7XG5cblx0XHRmdW5jdGlvbiBhZGRMaW5lKCBhLCBiLCBjb2xvciApIHtcblxuXHRcdFx0YWRkUG9pbnQoIGEsIGNvbG9yICk7XG5cdFx0XHRhZGRQb2ludCggYiwgY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZFBvaW50KCBpZCwgY29sb3IgKSB7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdGlmICggcG9pbnRNYXBbIGlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwb2ludE1hcFsgaWQgXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2FtZXJhSGVscGVyJztcblxuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHRcdGlmICggdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCApIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5wb2ludE1hcCA9IHBvaW50TWFwO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IHBvaW50TWFwID0gdGhpcy5wb2ludE1hcDtcblxuXHRcdGNvbnN0IHcgPSAxLCBoID0gMTtcblxuXHRcdC8vIHdlIG5lZWQganVzdCBjYW1lcmEgcHJvamVjdGlvbiBtYXRyaXggaW52ZXJzZVxuXHRcdC8vIHdvcmxkIG1hdHJpeCBtdXN0IGJlIGlkZW50aXR5XG5cblx0XHRfY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHQvLyBjZW50ZXIgLyB0YXJnZXRcblxuXHRcdHNldFBvaW50KCAnYycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAwLCAxICk7XG5cblx0XHQvLyBuZWFyXG5cblx0XHRzZXRQb2ludCggJ24xJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICduMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgLSBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ24zJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnbjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIGgsIC0gMSApO1xuXG5cdFx0Ly8gZmFyXG5cblx0XHRzZXRQb2ludCggJ2YxJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0gdywgaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIGgsIDEgKTtcblxuXHRcdC8vIHVwXG5cblx0XHRzZXRQb2ludCggJ3UxJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3ICogMC43LCBoICogMS4xLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ3UyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRcdHNldFBvaW50KCAndTMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGggKiAyLCAtIDEgKTtcblxuXHRcdC8vIGNyb3NzXG5cblx0XHRzZXRQb2ludCggJ2NmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAxICk7XG5cdFx0c2V0UG9pbnQoICdjZjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgLSBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdjZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIDEgKTtcblxuXHRcdHNldFBvaW50KCAnY24xJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIDAsIC0gMSApO1xuXHRcdHNldFBvaW50KCAnY24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ2NuMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgLSBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ2NuNCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgaCwgLSAxICk7XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuXG5mdW5jdGlvbiBzZXRQb2ludCggcG9pbnQsIHBvaW50TWFwLCBnZW9tZXRyeSwgY2FtZXJhLCB4LCB5LCB6ICkge1xuXG5cdF92ZWN0b3Iuc2V0KCB4LCB5LCB6ICkudW5wcm9qZWN0KCBjYW1lcmEgKTtcblxuXHRjb25zdCBwb2ludHMgPSBwb2ludE1hcFsgcG9pbnQgXTtcblxuXHRpZiAoIHBvaW50cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooIHBvaW50c1sgaSBdLCBfdmVjdG9yLngsIF92ZWN0b3IueSwgX3ZlY3Rvci56ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmNvbnN0IF9ib3ggPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5cbmNsYXNzIEJveEhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0Y29uc3RydWN0b3IoIG9iamVjdCwgY29sb3IgPSAweGZmZmYwMCApIHtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cdFx0Y29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggOCAqIDMgKTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGljZXMsIDEgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0XHR0aGlzLnR5cGUgPSAnQm94SGVscGVyJztcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0dXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3hIZWxwZXI6IC51cGRhdGUoKSBoYXMgbm8gbG9uZ2VyIGFyZ3VtZW50cy4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9ib3guc2V0RnJvbU9iamVjdCggdGhpcy5vYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdGlmICggX2JveC5pc0VtcHR5KCkgKSByZXR1cm47XG5cblx0XHRjb25zdCBtaW4gPSBfYm94Lm1pbjtcblx0XHRjb25zdCBtYXggPSBfYm94Lm1heDtcblxuXHRcdC8qXG5cdFx0XHQ1X19fXzRcblx0XHQxL19fXzAvfFxuXHRcdHwgNl9ffF83XG5cdFx0Mi9fX18zL1xuXG5cdFx0MDogbWF4LngsIG1heC55LCBtYXguelxuXHRcdDE6IG1pbi54LCBtYXgueSwgbWF4Lnpcblx0XHQyOiBtaW4ueCwgbWluLnksIG1heC56XG5cdFx0MzogbWF4LngsIG1pbi55LCBtYXguelxuXHRcdDQ6IG1heC54LCBtYXgueSwgbWluLnpcblx0XHQ1OiBtaW4ueCwgbWF4LnksIG1pbi56XG5cdFx0NjogbWluLngsIG1pbi55LCBtaW4uelxuXHRcdDc6IG1heC54LCBtaW4ueSwgbWluLnpcblx0XHQqL1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTtcblxuXHRcdGFycmF5WyAwIF0gPSBtYXgueDsgYXJyYXlbIDEgXSA9IG1heC55OyBhcnJheVsgMiBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDMgXSA9IG1pbi54OyBhcnJheVsgNCBdID0gbWF4Lnk7IGFycmF5WyA1IF0gPSBtYXguejtcblx0XHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xuXHRcdGFycmF5WyA5IF0gPSBtYXgueDsgYXJyYXlbIDEwIF0gPSBtaW4ueTsgYXJyYXlbIDExIF0gPSBtYXguejtcblx0XHRhcnJheVsgMTIgXSA9IG1heC54OyBhcnJheVsgMTMgXSA9IG1heC55OyBhcnJheVsgMTQgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE4IF0gPSBtaW4ueDsgYXJyYXlbIDE5IF0gPSBtaW4ueTsgYXJyYXlbIDIwIF0gPSBtaW4uejtcblx0XHRhcnJheVsgMjEgXSA9IG1heC54OyBhcnJheVsgMjIgXSA9IG1pbi55OyBhcnJheVsgMjMgXSA9IG1pbi56O1xuXG5cdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXG5cdH1cblxuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QgKSB7XG5cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMub2JqZWN0ID0gc291cmNlLm9iamVjdDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jbGFzcyBCb3gzSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHRjb25zdHJ1Y3RvciggYm94LCBjb2xvciA9IDB4ZmZmZjAwICkge1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0dGhpcy5ib3ggPSBib3g7XG5cblx0XHR0aGlzLnR5cGUgPSAnQm94M0hlbHBlcic7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRjb25zdCBib3ggPSB0aGlzLmJveDtcblxuXHRcdGlmICggYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRcdGJveC5nZXRDZW50ZXIoIHRoaXMucG9zaXRpb24gKTtcblxuXHRcdGJveC5nZXRTaXplKCB0aGlzLnNjYWxlICk7XG5cblx0XHR0aGlzLnNjYWxlLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBQbGFuZUhlbHBlciBleHRlbmRzIExpbmUge1xuXG5cdGNvbnN0cnVjdG9yKCBwbGFuZSwgc2l6ZSA9IDEsIGhleCA9IDB4ZmZmZjAwICkge1xuXG5cdFx0Y29uc3QgY29sb3IgPSBoZXg7XG5cblx0XHRjb25zdCBwb3NpdGlvbnMgPSBbIDEsIC0gMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAwLCAwLCAwIF07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BsYW5lSGVscGVyJztcblxuXHRcdHRoaXMucGxhbmUgPSBwbGFuZTtcblxuXHRcdHRoaXMuc2l6ZSA9IHNpemU7XG5cblx0XHRjb25zdCBwb3NpdGlvbnMyID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxIF07XG5cblx0XHRjb25zdCBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7XG5cdFx0Z2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0dGhpcy5hZGQoIG5ldyBNZXNoKCBnZW9tZXRyeTIsIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIG9wYWNpdHk6IDAuMiwgdHJhbnNwYXJlbnQ6IHRydWUsIGRlcHRoV3JpdGU6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKSApO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRsZXQgc2NhbGUgPSAtIHRoaXMucGxhbmUuY29uc3RhbnQ7XG5cblx0XHRpZiAoIE1hdGguYWJzKCBzY2FsZSApIDwgMWUtOCApIHNjYWxlID0gMWUtODsgLy8gc2lnbiBkb2VzIG5vdCBtYXR0ZXJcblxuXHRcdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgc2NhbGUgKTtcblxuXHRcdHRoaXMuY2hpbGRyZW5bIDAgXS5tYXRlcmlhbC5zaWRlID0gKCBzY2FsZSA8IDAgKSA/IEJhY2tTaWRlIDogRnJvbnRTaWRlOyAvLyByZW5kZXJlciBmbGlwcyBzaWRlIHdoZW4gZGV0ZXJtaW5hbnQgPCAwOyBmbGlwcGluZyBub3Qgd2FudGVkIGhlcmVcblxuXHRcdHRoaXMubG9va0F0KCB0aGlzLnBsYW5lLm5vcm1hbCApO1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9heGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xubGV0IF9saW5lR2VvbWV0cnksIF9jb25lR2VvbWV0cnk7XG5cbmNsYXNzIEFycm93SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRjb25zdHJ1Y3RvciggZGlyID0gbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSwgb3JpZ2luID0gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKSwgbGVuZ3RoID0gMSwgY29sb3IgPSAweGZmZmYwMCwgaGVhZExlbmd0aCA9IGxlbmd0aCAqIDAuMiwgaGVhZFdpZHRoID0gaGVhZExlbmd0aCAqIDAuMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXJyb3dIZWxwZXInO1xuXG5cdFx0aWYgKCBfbGluZUdlb21ldHJ5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9saW5lR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRcdF9saW5lR2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAxLCAwIF0sIDMgKSApO1xuXG5cdFx0XHRfY29uZUdlb21ldHJ5ID0gbmV3IEN5bGluZGVyR2VvbWV0cnkoIDAsIDAuNSwgMSwgNSwgMSApO1xuXHRcdFx0X2NvbmVHZW9tZXRyeS50cmFuc2xhdGUoIDAsIC0gMC41LCAwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIG9yaWdpbiApO1xuXG5cdFx0dGhpcy5saW5lID0gbmV3IExpbmUoIF9saW5lR2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXHRcdHRoaXMubGluZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0dGhpcy5hZGQoIHRoaXMubGluZSApO1xuXG5cdFx0dGhpcy5jb25lID0gbmV3IE1lc2goIF9jb25lR2VvbWV0cnksIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXHRcdHRoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0dGhpcy5hZGQoIHRoaXMuY29uZSApO1xuXG5cdFx0dGhpcy5zZXREaXJlY3Rpb24oIGRpciApO1xuXHRcdHRoaXMuc2V0TGVuZ3RoKCBsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXG5cdH1cblxuXHRzZXREaXJlY3Rpb24oIGRpciApIHtcblxuXHRcdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAwLCAwLCAwLCAxICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkaXIueSA8IC0gMC45OTk5OSApIHtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2F4aXMuc2V0KCBkaXIueiwgMCwgLSBkaXIueCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRjb25zdCByYWRpYW5zID0gTWF0aC5hY29zKCBkaXIueSApO1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggX2F4aXMsIHJhZGlhbnMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0TGVuZ3RoKCBsZW5ndGgsIGhlYWRMZW5ndGggPSBsZW5ndGggKiAwLjIsIGhlYWRXaWR0aCA9IGhlYWRMZW5ndGggKiAwLjIgKSB7XG5cblx0XHR0aGlzLmxpbmUuc2NhbGUuc2V0KCAxLCBNYXRoLm1heCggMC4wMDAxLCBsZW5ndGggLSBoZWFkTGVuZ3RoICksIDEgKTsgLy8gc2VlICMxNzQ1OFxuXHRcdHRoaXMubGluZS51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMuY29uZS5zY2FsZS5zZXQoIGhlYWRXaWR0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICk7XG5cdFx0dGhpcy5jb25lLnBvc2l0aW9uLnkgPSBsZW5ndGg7XG5cdFx0dGhpcy5jb25lLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdH1cblxuXHRzZXRDb2xvciggY29sb3IgKSB7XG5cblx0XHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoIGNvbG9yICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgZmFsc2UgKTtcblxuXHRcdHRoaXMubGluZS5jb3B5KCBzb3VyY2UubGluZSApO1xuXHRcdHRoaXMuY29uZS5jb3B5KCBzb3VyY2UuY29uZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNsYXNzIEF4ZXNIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMSApIHtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0MCwgMCwgMCxcdHNpemUsIDAsIDAsXG5cdFx0XHQwLCAwLCAwLFx0MCwgc2l6ZSwgMCxcblx0XHRcdDAsIDAsIDAsXHQwLCAwLCBzaXplXG5cdFx0XTtcblxuXHRcdGNvbnN0IGNvbG9ycyA9IFtcblx0XHRcdDEsIDAsIDAsXHQxLCAwLjYsIDAsXG5cdFx0XHQwLCAxLCAwLFx0MC42LCAxLCAwLFxuXHRcdFx0MCwgMCwgMSxcdDAsIDAuNiwgMVxuXHRcdF07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXhlc0hlbHBlcic7XG5cblx0fVxuXG5cdHNldENvbG9ycyggeEF4aXNDb2xvciwgeUF4aXNDb2xvciwgekF4aXNDb2xvciApIHtcblxuXHRcdGNvbnN0IGNvbG9yID0gbmV3IENvbG9yKCk7XG5cdFx0Y29uc3QgYXJyYXkgPSB0aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IuYXJyYXk7XG5cblx0XHRjb2xvci5zZXQoIHhBeGlzQ29sb3IgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMCApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAzICk7XG5cblx0XHRjb2xvci5zZXQoIHlBeGlzQ29sb3IgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgNiApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCA5ICk7XG5cblx0XHRjb2xvci5zZXQoIHpBeGlzQ29sb3IgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMTIgKTtcblx0XHRjb2xvci50b0FycmF5KCBhcnJheSwgMTUgKTtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG5jbGFzcyBTaGFwZVBhdGgge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy50eXBlID0gJ1NoYXBlUGF0aCc7XG5cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0XHR0aGlzLnN1YlBhdGhzID0gW107XG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XG5cblx0fVxuXG5cdG1vdmVUbyggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGggPSBuZXcgUGF0aCgpO1xuXHRcdHRoaXMuc3ViUGF0aHMucHVzaCggdGhpcy5jdXJyZW50UGF0aCApO1xuXHRcdHRoaXMuY3VycmVudFBhdGgubW92ZVRvKCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGluZVRvKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5saW5lVG8oIHgsIHkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRxdWFkcmF0aWNDdXJ2ZVRvKCBhQ1B4LCBhQ1B5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzcGxpbmVUaHJ1KCBwdHMgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnNwbGluZVRocnUoIHB0cyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvU2hhcGVzKCBpc0NDVywgbm9Ib2xlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHRvU2hhcGVzTm9Ib2xlcyggaW5TdWJwYXRocyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGVzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluU3VicGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB0bXBQYXRoID0gaW5TdWJwYXRoc1sgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpc1BvaW50SW5zaWRlUG9seWdvbiggaW5QdCwgaW5Qb2x5Z29uICkge1xuXG5cdFx0XHRjb25zdCBwb2x5TGVuID0gaW5Qb2x5Z29uLmxlbmd0aDtcblxuXHRcdFx0Ly8gaW5QdCBvbiBwb2x5Z29uIGNvbnRvdXIgPT4gaW1tZWRpYXRlIHN1Y2Nlc3MgICAgb3Jcblx0XHRcdC8vIHRvZ2dsaW5nIG9mIGluc2lkZS9vdXRzaWRlIGF0IGV2ZXJ5IHNpbmdsZSEgaW50ZXJzZWN0aW9uIHBvaW50IG9mIGFuIGVkZ2Vcblx0XHRcdC8vICB3aXRoIHRoZSBob3Jpem9udGFsIGxpbmUgdGhyb3VnaCBpblB0LCBsZWZ0IG9mIGluUHRcblx0XHRcdC8vICBub3QgY291bnRpbmcgbG93ZXJZIGVuZHBvaW50cyBvZiBlZGdlcyBhbmQgd2hvbGUgZWRnZXMgb24gdGhhdCBsaW5lXG5cdFx0XHRsZXQgaW5zaWRlID0gZmFsc2U7XG5cdFx0XHRmb3IgKCBsZXQgcCA9IHBvbHlMZW4gLSAxLCBxID0gMDsgcSA8IHBvbHlMZW47IHAgPSBxICsrICkge1xuXG5cdFx0XHRcdGxldCBlZGdlTG93UHQgPSBpblBvbHlnb25bIHAgXTtcblx0XHRcdFx0bGV0IGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHEgXTtcblxuXHRcdFx0XHRsZXQgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7XG5cdFx0XHRcdGxldCBlZGdlRHkgPSBlZGdlSGlnaFB0LnkgLSBlZGdlTG93UHQueTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBlZGdlRHkgKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXG5cdFx0XHRcdFx0aWYgKCBlZGdlRHkgPCAwICkge1xuXG5cdFx0XHRcdFx0XHRlZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7XG5cdFx0XHRcdFx0XHRlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBwIF07IGVkZ2VEeSA9IC0gZWRnZUR5O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAoIGluUHQueSA8IGVkZ2VMb3dQdC55ICkgfHwgKCBpblB0LnkgPiBlZGdlSGlnaFB0LnkgKSApIFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHRcdGlmICggaW5QdC55ID09PSBlZGdlTG93UHQueSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpblB0LnggPT09IGVkZ2VMb3dQdC54IClcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0Ly8gY29udGludWU7XHRcdFx0XHQvLyBubyBpbnRlcnNlY3Rpb24gb3IgZWRnZUxvd1B0ID0+IGRvZXNuJ3QgY291bnQgISEhXG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBwZXJwRWRnZSA9IGVkZ2VEeSAqICggaW5QdC54IC0gZWRnZUxvd1B0LnggKSAtIGVkZ2VEeCAqICggaW5QdC55IC0gZWRnZUxvd1B0LnkgKTtcblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPT09IDAgKVx0XHRcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA8IDAgKSBcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XHRcdC8vIHRydWUgaW50ZXJzZWN0aW9uIGxlZnQgb2YgaW5QdFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwYXJhbGxlbCBvciBjb2xsaW5lYXJcblx0XHRcdFx0XHRpZiAoIGluUHQueSAhPT0gZWRnZUxvd1B0LnkgKSBcdFx0Y29udGludWU7XHRcdFx0Ly8gcGFyYWxsZWxcblx0XHRcdFx0XHQvLyBlZGdlIGxpZXMgb24gdGhlIHNhbWUgaG9yaXpvbnRhbCBsaW5lIGFzIGluUHRcblx0XHRcdFx0XHRpZiAoICggKCBlZGdlSGlnaFB0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUxvd1B0LnggKSApIHx8XG5cdFx0XHRcdFx0XHQgKCAoIGVkZ2VMb3dQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VIaWdoUHQueCApICkgKVx0XHRyZXR1cm5cdHRydWU7XHQvLyBpblB0OiBQb2ludCBvbiBjb250b3VyICFcblx0XHRcdFx0XHQvLyBjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuXHRpbnNpZGU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpc0Nsb2NrV2lzZSA9IFNoYXBlVXRpbHMuaXNDbG9ja1dpc2U7XG5cblx0XHRjb25zdCBzdWJQYXRocyA9IHRoaXMuc3ViUGF0aHM7XG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG5cblx0XHRpZiAoIG5vSG9sZXMgPT09IHRydWUgKVx0cmV0dXJuXHR0b1NoYXBlc05vSG9sZXMoIHN1YlBhdGhzICk7XG5cblxuXHRcdGxldCBzb2xpZCwgdG1wUGF0aCwgdG1wU2hhcGU7XG5cdFx0Y29uc3Qgc2hhcGVzID0gW107XG5cblx0XHRpZiAoIHN1YlBhdGhzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyAwIF07XG5cdFx0XHR0bXBTaGFwZSA9IG5ldyBTaGFwZSgpO1xuXHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cdFx0XHRzaGFwZXMucHVzaCggdG1wU2hhcGUgKTtcblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRsZXQgaG9sZXNGaXJzdCA9ICEgaXNDbG9ja1dpc2UoIHN1YlBhdGhzWyAwIF0uZ2V0UG9pbnRzKCkgKTtcblx0XHRob2xlc0ZpcnN0ID0gaXNDQ1cgPyAhIGhvbGVzRmlyc3QgOiBob2xlc0ZpcnN0O1xuXG5cdFx0Ly8gY29uc29sZS5sb2coXCJIb2xlcyBmaXJzdFwiLCBob2xlc0ZpcnN0KTtcblxuXHRcdGNvbnN0IGJldHRlclNoYXBlSG9sZXMgPSBbXTtcblx0XHRjb25zdCBuZXdTaGFwZXMgPSBbXTtcblx0XHRsZXQgbmV3U2hhcGVIb2xlcyA9IFtdO1xuXHRcdGxldCBtYWluSWR4ID0gMDtcblx0XHRsZXQgdG1wUG9pbnRzO1xuXG5cdFx0bmV3U2hhcGVzWyBtYWluSWR4IF0gPSB1bmRlZmluZWQ7XG5cdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzdWJQYXRocy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbIGkgXTtcblx0XHRcdHRtcFBvaW50cyA9IHRtcFBhdGguZ2V0UG9pbnRzKCk7XG5cdFx0XHRzb2xpZCA9IGlzQ2xvY2tXaXNlKCB0bXBQb2ludHMgKTtcblx0XHRcdHNvbGlkID0gaXNDQ1cgPyAhIHNvbGlkIDogc29saWQ7XG5cblx0XHRcdGlmICggc29saWQgKSB7XG5cblx0XHRcdFx0aWYgKCAoICEgaG9sZXNGaXJzdCApICYmICggbmV3U2hhcGVzWyBtYWluSWR4IF0gKSApXHRtYWluSWR4ICsrO1xuXG5cdFx0XHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0geyBzOiBuZXcgU2hhcGUoKSwgcDogdG1wUG9pbnRzIH07XG5cdFx0XHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdLnMuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cblx0XHRcdFx0aWYgKCBob2xlc0ZpcnN0IClcdG1haW5JZHggKys7XG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2N3JywgaSk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bmV3U2hhcGVIb2xlc1sgbWFpbklkeCBdLnB1c2goIHsgaDogdG1wUGF0aCwgcDogdG1wUG9pbnRzWyAwIF0gfSApO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2NjdycsIGkpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBvbmx5IEhvbGVzPyAtPiBwcm9iYWJseSBhbGwgU2hhcGVzIHdpdGggd3Jvbmcgb3JpZW50YXRpb25cblx0XHRpZiAoICEgbmV3U2hhcGVzWyAwIF0gKVx0cmV0dXJuXHR0b1NoYXBlc05vSG9sZXMoIHN1YlBhdGhzICk7XG5cblxuXHRcdGlmICggbmV3U2hhcGVzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGxldCBhbWJpZ3VvdXMgPSBmYWxzZTtcblx0XHRcdGxldCB0b0NoYW5nZSA9IDA7XG5cblx0XHRcdGZvciAoIGxldCBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHNJZHggXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHNobyA9IG5ld1NoYXBlSG9sZXNbIHNJZHggXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaElkeCA9IDA7IGhJZHggPCBzaG8ubGVuZ3RoOyBoSWR4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaG8gPSBzaG9bIGhJZHggXTtcblx0XHRcdFx0XHRsZXQgaG9sZV91bmFzc2lnbmVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBzMklkeCA9IDA7IHMySWR4IDwgbmV3U2hhcGVzLmxlbmd0aDsgczJJZHggKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaXNQb2ludEluc2lkZVBvbHlnb24oIGhvLnAsIG5ld1NoYXBlc1sgczJJZHggXS5wICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBzSWR4ICE9PSBzMklkeCApXHR0b0NoYW5nZSArKztcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGhvbGVfdW5hc3NpZ25lZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGJldHRlclNoYXBlSG9sZXNbIHMySWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0YW1iaWd1b3VzID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0b0NoYW5nZSA+IDAgJiYgYW1iaWd1b3VzID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzID0gYmV0dGVyU2hhcGVIb2xlcztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV0IHRtcEhvbGVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5ld1NoYXBlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dG1wU2hhcGUgPSBuZXdTaGFwZXNbIGkgXS5zO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHR0bXBIb2xlcyA9IG5ld1NoYXBlSG9sZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHRtcEhvbGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRtcFNoYXBlLmhvbGVzLnB1c2goIHRtcEhvbGVzWyBqIF0uaCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL2NvbnNvbGUubG9nKFwic2hhcGVcIiwgc2hhcGVzKTtcblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9mbG9hdFZpZXcgPSBuZXcgRmxvYXQzMkFycmF5KCAxICk7XG5jb25zdCBfaW50MzJWaWV3ID0gbmV3IEludDMyQXJyYXkoIF9mbG9hdFZpZXcuYnVmZmVyICk7XG5cbmNsYXNzIERhdGFVdGlscyB7XG5cblx0Ly8gQ29udmVydHMgZmxvYXQzMiB0byBmbG9hdDE2IChzdG9yZWQgYXMgdWludDE2IHZhbHVlKS5cblxuXHRzdGF0aWMgdG9IYWxmRmxvYXQoIHZhbCApIHtcblxuXHRcdGlmICggdmFsID4gNjU1MDQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFVdGlscy50b0hhbGZGbG9hdCgpOiB2YWx1ZSBleGNlZWRzIDY1NTA0LicgKTtcblxuXHRcdFx0dmFsID0gNjU1MDQ7IC8vIG1heGltdW0gcmVwcmVzZW50YWJsZSB2YWx1ZSBpbiBmbG9hdDE2XG5cblx0XHR9XG5cblx0XHQvLyBTb3VyY2U6IGh0dHA6Ly9nYW1lZGV2LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xNzMyNi9jb252ZXJzaW9uLW9mLWEtbnVtYmVyLWZyb20tc2luZ2xlLXByZWNpc2lvbi1mbG9hdGluZy1wb2ludC1yZXByZXNlbnRhdGlvbi10by1hLzE3NDEwIzE3NDEwXG5cblx0XHQvKiBUaGlzIG1ldGhvZCBpcyBmYXN0ZXIgdGhhbiB0aGUgT3BlbkVYUiBpbXBsZW1lbnRhdGlvbiAodmVyeSBvZnRlblxuXHRcdCogdXNlZCwgZWcuIGluIE9ncmUpLCB3aXRoIHRoZSBhZGRpdGlvbmFsIGJlbmVmaXQgb2Ygcm91bmRpbmcsIGluc3BpcmVkXG5cdFx0KiBieSBKYW1lcyBUdXJzYT9zIGhhbGYtcHJlY2lzaW9uIGNvZGUuICovXG5cblx0XHRfZmxvYXRWaWV3WyAwIF0gPSB2YWw7XG5cdFx0Y29uc3QgeCA9IF9pbnQzMlZpZXdbIDAgXTtcblxuXHRcdGxldCBiaXRzID0gKCB4ID4+IDE2ICkgJiAweDgwMDA7IC8qIEdldCB0aGUgc2lnbiAqL1xuXHRcdGxldCBtID0gKCB4ID4+IDEyICkgJiAweDA3ZmY7IC8qIEtlZXAgb25lIGV4dHJhIGJpdCBmb3Igcm91bmRpbmcgKi9cblx0XHRjb25zdCBlID0gKCB4ID4+IDIzICkgJiAweGZmOyAvKiBVc2luZyBpbnQgaXMgZmFzdGVyIGhlcmUgKi9cblxuXHRcdC8qIElmIHplcm8sIG9yIGRlbm9ybWFsLCBvciBleHBvbmVudCB1bmRlcmZsb3dzIHRvbyBtdWNoIGZvciBhIGRlbm9ybWFsXG5cdFx0XHQqIGhhbGYsIHJldHVybiBzaWduZWQgemVyby4gKi9cblx0XHRpZiAoIGUgPCAxMDMgKSByZXR1cm4gYml0cztcblxuXHRcdC8qIElmIE5hTiwgcmV0dXJuIE5hTi4gSWYgSW5mIG9yIGV4cG9uZW50IG92ZXJmbG93LCByZXR1cm4gSW5mLiAqL1xuXHRcdGlmICggZSA+IDE0MiApIHtcblxuXHRcdFx0Yml0cyB8PSAweDdjMDA7XG5cdFx0XHQvKiBJZiBleHBvbmVudCB3YXMgMHhmZiBhbmQgb25lIG1hbnRpc3NhIGJpdCB3YXMgc2V0LCBpdCBtZWFucyBOYU4sXG5cdFx0XHRcdFx0XHQqIG5vdCBJbmYsIHNvIG1ha2Ugc3VyZSB3ZSBzZXQgb25lIG1hbnRpc3NhIGJpdCB0b28uICovXG5cdFx0XHRiaXRzIHw9ICggKCBlID09IDI1NSApID8gMCA6IDEgKSAmJiAoIHggJiAweDAwN2ZmZmZmICk7XG5cdFx0XHRyZXR1cm4gYml0cztcblxuXHRcdH1cblxuXHRcdC8qIElmIGV4cG9uZW50IHVuZGVyZmxvd3MgYnV0IG5vdCB0b28gbXVjaCwgcmV0dXJuIGEgZGVub3JtYWwgKi9cblx0XHRpZiAoIGUgPCAxMTMgKSB7XG5cblx0XHRcdG0gfD0gMHgwODAwO1xuXHRcdFx0LyogRXh0cmEgcm91bmRpbmcgbWF5IG92ZXJmbG93IGFuZCBzZXQgbWFudGlzc2EgdG8gMCBhbmQgZXhwb25lbnRcblx0XHRcdFx0KiB0byAxLCB3aGljaCBpcyBPSy4gKi9cblx0XHRcdGJpdHMgfD0gKCBtID4+ICggMTE0IC0gZSApICkgKyAoICggbSA+PiAoIDExMyAtIGUgKSApICYgMSApO1xuXHRcdFx0cmV0dXJuIGJpdHM7XG5cblx0XHR9XG5cblx0XHRiaXRzIHw9ICggKCBlIC0gMTEyICkgPDwgMTAgKSB8ICggbSA+PiAxICk7XG5cdFx0LyogRXh0cmEgcm91bmRpbmcuIEFuIG92ZXJmbG93IHdpbGwgc2V0IG1hbnRpc3NhIHRvIDAgYW5kIGluY3JlbWVudFxuXHRcdFx0KiB0aGUgZXhwb25lbnQsIHdoaWNoIGlzIE9LLiAqL1xuXHRcdGJpdHMgKz0gbSAmIDE7XG5cdFx0cmV0dXJuIGJpdHM7XG5cblx0fVxuXG59XG5cbmNvbnN0IExpbmVTdHJpcCA9IDA7XG5jb25zdCBMaW5lUGllY2VzID0gMTtcbmNvbnN0IE5vQ29sb3JzID0gMDtcbmNvbnN0IEZhY2VDb2xvcnMgPSAxO1xuY29uc3QgVmVydGV4Q29sb3JzID0gMjtcblxuZnVuY3Rpb24gTWVzaEZhY2VNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hGYWNlTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIE11bHRpTWF0ZXJpYWwoIG1hdGVyaWFscyA9IFtdICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk11bHRpTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuJyApO1xuXHRtYXRlcmlhbHMuaXNNdWx0aU1hdGVyaWFsID0gdHJ1ZTtcblx0bWF0ZXJpYWxzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcblx0bWF0ZXJpYWxzLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFscy5zbGljZSgpO1xuXG5cdH07XG5cblx0cmV0dXJuIG1hdGVyaWFscztcblxufVxuXG5mdW5jdGlvbiBQb2ludENsb3VkKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZSggbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGUgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5TcHJpdGUuJyApO1xuXHRyZXR1cm4gbmV3IFNwcml0ZSggbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbSggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW1NYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gVmVydGV4KCB4LCB5LCB6ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBWZWN0b3IzKCB4LCB5LCB6ICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXRVc2FnZSggVEhSRUUuRHluYW1pY0RyYXdVc2FnZSApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkuc2V0VXNhZ2UoIER5bmFtaWNEcmF3VXNhZ2UgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQ4QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBVaW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBVaW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDhDbGFtcGVkQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDhDbGFtcGVkQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQxNkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MTZCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDE2QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBJbnQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBGbG9hdDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBGbG9hdDY0QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmxvYXQ2NEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG4vL1xuXG5DdXJ2ZS5jcmVhdGUgPSBmdW5jdGlvbiAoIGNvbnN0cnVjdCwgZ2V0UG9pbnQgKSB7XG5cblx0Y29uc29sZS5sb2coICdUSFJFRS5DdXJ2ZS5jcmVhdGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkJyApO1xuXG5cdGNvbnN0cnVjdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdDtcblx0Y29uc3RydWN0LnByb3RvdHlwZS5nZXRQb2ludCA9IGdldFBvaW50O1xuXG5cdHJldHVybiBjb25zdHJ1Y3Q7XG5cbn07XG5cbi8vXG5cblBhdGgucHJvdG90eXBlLmZyb21Qb2ludHMgPSBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXRoOiAuZnJvbVBvaW50cygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qb2ludHMoKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBBeGlzSGVscGVyKCBzaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLicgKTtcblx0cmV0dXJuIG5ldyBBeGVzSGVscGVyKCBzaXplICk7XG5cbn1cblxuZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICk7XG5cbn1cblxuZnVuY3Rpb24gRWRnZXNIZWxwZXIoIG9iamVjdCwgaGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IEVkZ2VzR2VvbWV0cnkoIG9iamVjdC5nZW9tZXRyeSApLCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleCAhPT0gdW5kZWZpbmVkID8gaGV4IDogMHhmZmZmZmYgfSApICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApO1xuXG59O1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2VsZXRvbkhlbHBlcjogdXBkYXRlKCkgbm8gbG9uZ2VyIG5lZWRzIHRvIGJlIGNhbGxlZC4nICk7XG5cbn07XG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUhlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBXaXJlZnJhbWVHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG4vL1xuXG5Mb2FkZXIucHJvdG90eXBlLmV4dHJhY3RVcmxCYXNlID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKTtcblxufTtcblxuTG9hZGVyLkhhbmRsZXJzID0ge1xuXG5cdGFkZDogZnVuY3Rpb24gKCAvKiByZWdleCwgbG9hZGVyICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlcjogSGFuZGxlcnMuYWRkKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIExvYWRpbmdNYW5hZ2VyLmFkZEhhbmRsZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXG5cdGdldDogZnVuY3Rpb24gKCAvKiBmaWxlICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxvYWRlcjogSGFuZGxlcnMuZ2V0KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIExvYWRpbmdNYW5hZ2VyLmdldEhhbmRsZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR9XG5cbn07XG5cbmZ1bmN0aW9uIFhIUkxvYWRlciggbWFuYWdlciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5YSFJMb2FkZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5GaWxlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBGaWxlTG9hZGVyKCBtYW5hZ2VyICk7XG5cbn1cblxuZnVuY3Rpb24gQmluYXJ5VGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRGF0YVRleHR1cmVMb2FkZXIuJyApO1xuXHRyZXR1cm4gbmV3IERhdGFUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICk7XG5cbn1cblxuLy9cblxuQm94Mi5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbkJveDIucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nICk7XG5cdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcblxufTtcblxuQm94Mi5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25Cb3ggPSBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxufTtcblxuQm94Mi5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG4vL1xuXG5Cb3gzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuQm94My5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkJveCA9IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvblNwaGVyZSA9IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG59O1xuXG5Cb3gzLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbi8vXG5cbkV1bGVyLnByb3RvdHlwZS50b1ZlY3RvcjMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV1bGVyOiAudG9WZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMuc2V0RnJvbUV1bGVyKCkgaW5zdGVhZCcgKTtcblxufTtcblxuXG4vL1xuXG5TcGhlcmUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG59O1xuXG4vL1xuXG5GcnVzdHVtLnByb3RvdHlwZS5zZXRGcm9tTWF0cml4ID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZydXN0dW06IC5zZXRGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBtICk7XG5cbn07XG5cbi8vXG5cbkxpbmUzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbi8vXG5cbk1hdHJpeDMucHJvdG90eXBlLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0ID0gZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yMyA9IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXgzKCB0aGlzICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhICovICkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4My5wcm90b3R5cGUuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDMoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYXR0cmlidXRlLmFwcGx5TWF0cml4MyggdGhpcyApO1xuXG59O1xuXG5NYXRyaXgzLnByb3RvdHlwZS5hcHBseVRvVmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbk1hdHJpeDMucHJvdG90eXBlLmdldEludmVyc2UgPSBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXhJbnYuY29weSggbWF0cml4ICkuaW52ZXJ0KCk7IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy5jb3B5KCBtYXRyaXggKS5pbnZlcnQoKTtcblxufTtcblxuLy9cblxuTWF0cml4NC5wcm90b3R5cGUuZXh0cmFjdFBvc2l0aW9uID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5leHRyYWN0UG9zaXRpb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jb3B5UG9zaXRpb24oKS4nICk7XG5cdHJldHVybiB0aGlzLmNvcHlQb3NpdGlvbiggbSApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5mbGF0dGVuVG9BcnJheU9mZnNldCA9IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMudG9BcnJheSggYXJyYXksIG9mZnNldCApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFZlY3RvcjMoKS5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAzICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24gPSBmdW5jdGlvbiAoIHEgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLicgKTtcblx0cmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlUb0FycmF5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3I0ID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzQXJyYXkgPSBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVBeGlzID0gZnVuY3Rpb24gKCB2ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0di50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUuY3Jvc3NWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVYID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVZID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVaID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5yb3RhdGVCeUF4aXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuTWF0cml4NC5wcm90b3R5cGUuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYXR0cmlidXRlLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5hcHBseVRvVmVjdG9yM0FycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbk1hdHJpeDQucHJvdG90eXBlLm1ha2VGcnVzdHVtID0gZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZUZydXN0dW0oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApO1xuXG59O1xuXG5NYXRyaXg0LnByb3RvdHlwZS5nZXRJbnZlcnNlID0gZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4SW52LmNvcHkoIG1hdHJpeCApLmludmVydCgpOyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMuY29weSggbWF0cml4ICkuaW52ZXJ0KCk7XG5cbn07XG5cbi8vXG5cblBsYW5lLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkxpbmUgPSBmdW5jdGlvbiAoIGxpbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pc0ludGVyc2VjdGlvbkxpbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzTGluZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0xpbmUoIGxpbmUgKTtcblxufTtcblxuLy9cblxuUXVhdGVybmlvbi5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzID0gZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpcyBub3cgdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggdGhpcyApO1xuXG59O1xuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24gKCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAuaW52ZXJzZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gaW52ZXJ0KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnZlcnQoKTtcblxufTtcblxuLy9cblxuUmF5LnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkJveCA9IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cbn07XG5cblJheS5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25QbGFuZSA9IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25QbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNQbGFuZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApO1xuXG59O1xuXG5SYXkucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uU3BoZXJlID0gZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxufTtcblxuLy9cblxuVHJpYW5nbGUucHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5hcmVhKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QXJlYSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0QXJlYSgpO1xuXG59O1xuXG5UcmlhbmdsZS5wcm90b3R5cGUuYmFyeWNvb3JkRnJvbVBvaW50ID0gZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKTtcblxufTtcblxuVHJpYW5nbGUucHJvdG90eXBlLm1pZHBvaW50ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5taWRwb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE1pZHBvaW50KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRNaWRwb2ludCggdGFyZ2V0ICk7XG5cbn07XG5cblRyaWFuZ2xlLnByb3RvdHlwZW5vcm1hbCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXROb3JtYWwoIHRhcmdldCApO1xuXG59O1xuXG5UcmlhbmdsZS5wcm90b3R5cGUucGxhbmUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLnBsYW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0UGxhbmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFBsYW5lKCB0YXJnZXQgKTtcblxufTtcblxuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50ID0gZnVuY3Rpb24gKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICk7XG5cbn07XG5cblRyaWFuZ2xlLm5vcm1hbCA9IGZ1bmN0aW9uICggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKTtcblxufTtcblxuLy9cblxuU2hhcGUucHJvdG90eXBlLmV4dHJhY3RBbGxQb2ludHMgPSBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLmV4dHJhY3RBbGxQb2ludHMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmV4dHJhY3RQb2ludHMoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICk7XG5cbn07XG5cblNoYXBlLnByb3RvdHlwZS5leHRydWRlID0gZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIHRoaXMsIG9wdGlvbnMgKTtcblxufTtcblxuU2hhcGUucHJvdG90eXBlLm1ha2VHZW9tZXRyeSA9IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLm1ha2VHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBTaGFwZUdlb21ldHJ5KCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG59O1xuXG4vL1xuXG5WZWN0b3IyLnByb3RvdHlwZS5mcm9tQXR0cmlidXRlID0gZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKTtcblxufTtcblxuVmVjdG9yMi5wcm90b3R5cGUuZGlzdGFuY2VUb01hbmhhdHRhbiA9IGZ1bmN0aW9uICggdiApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nICk7XG5cdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxufTtcblxuVmVjdG9yMi5wcm90b3R5cGUubGVuZ3RoTWFuaGF0dGFuID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG59O1xuXG4vL1xuXG5WZWN0b3IzLnByb3RvdHlwZS5zZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuJyApO1xuXG59O1xuXG5WZWN0b3IzLnByb3RvdHlwZS5zZXRFdWxlckZyb21RdWF0ZXJuaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUXVhdGVybmlvbigpIGluc3RlYWQuJyApO1xuXG59O1xuXG5WZWN0b3IzLnByb3RvdHlwZS5nZXRQb3NpdGlvbkZyb21NYXRyaXggPSBmdW5jdGlvbiAoIG0gKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLicgKTtcblx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmdldFNjYWxlRnJvbU1hdHJpeCA9IGZ1bmN0aW9uICggbSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0U2NhbGVGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFNjYWxlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoIG0gKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuZ2V0Q29sdW1uRnJvbU1hdHJpeCA9IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS4nICk7XG5cdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG1hdHJpeCwgaW5kZXggKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuYXBwbHlQcm9qZWN0aW9uID0gZnVuY3Rpb24gKCBtICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseVByb2plY3Rpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmFwcGx5TWF0cml4NCggbSApIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG0gKTtcblxufTtcblxuVmVjdG9yMy5wcm90b3R5cGUuZnJvbUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmRpc3RhbmNlVG9NYW5oYXR0YW4gPSBmdW5jdGlvbiAoIHYgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cbn07XG5cblZlY3RvcjMucHJvdG90eXBlLmxlbmd0aE1hbmhhdHRhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxufTtcblxuLy9cblxuVmVjdG9yNC5wcm90b3R5cGUuZnJvbUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cbn07XG5cblZlY3RvcjQucHJvdG90eXBlLmxlbmd0aE1hbmhhdHRhbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxufTtcblxuLy9cblxuT2JqZWN0M0QucHJvdG90eXBlLmdldENoaWxkQnlOYW1lID0gZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0Q2hpbGRCeU5hbWUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRPYmplY3RCeU5hbWUoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldE9iamVjdEJ5TmFtZSggbmFtZSApO1xuXG59O1xuXG5PYmplY3QzRC5wcm90b3R5cGUucmVuZGVyRGVwdGggPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLicgKTtcblxufTtcblxuT2JqZWN0M0QucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICggZGlzdGFuY2UsIGF4aXMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApO1xuXG59O1xuXG5PYmplY3QzRC5wcm90b3R5cGUuZ2V0V29ybGRSb3RhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7XG5cbn07XG5cbk9iamVjdDNELnByb3RvdHlwZS5hcHBseU1hdHJpeCA9IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuYXBwbHlNYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5hcHBseU1hdHJpeDQoKS4nICk7XG5cdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRldWxlck9yZGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dXNlUXVhdGVybmlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5NZXNoLnByb3RvdHlwZS5zZXREcmF3TW9kZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaDogLnNldERyYXdNb2RlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4gVHJhbnNmb3JtIHlvdXIgZ2VvbWV0cnkgdmlhIEJ1ZmZlckdlb21ldHJ5VXRpbHMudG9UcmlhbmdsZXNEcmF3TW9kZSgpIGlmIG5lY2Vzc2FyeS4nICk7XG5cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNZXNoLnByb3RvdHlwZSwge1xuXG5cdGRyYXdNb2RlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoOiAuZHJhd01vZGUgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4nICk7XG5cdFx0XHRyZXR1cm4gVHJpYW5nbGVzRHJhd01vZGU7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWVzaDogLmRyYXdNb2RlIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSByZW5kZXJlciBub3cgYWx3YXlzIGFzc3VtZXMgVEhSRUUuVHJpYW5nbGVzRHJhd01vZGUuIFRyYW5zZm9ybSB5b3VyIGdlb21ldHJ5IHZpYSBCdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKSBpZiBuZWNlc3NhcnkuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuU2tpbm5lZE1lc2gucHJvdG90eXBlLmluaXRCb25lcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2g6IGluaXRCb25lcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG4vL1xuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0TGVucyA9IGZ1bmN0aW9uICggZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5zZXRMZW5zIGlzIGRlcHJlY2F0ZWQuICcgK1xuXHRcdFx0J1VzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLicgKTtcblxuXHRpZiAoIGZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgdGhpcy5maWxtR2F1Z2UgPSBmaWxtR2F1Z2U7XG5cdHRoaXMuc2V0Rm9jYWxMZW5ndGgoIGZvY2FsTGVuZ3RoICk7XG5cbn07XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMaWdodC5wcm90b3R5cGUsIHtcblx0b25seVNoYWRvdzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLm9ubHlTaGFkb3cgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUZvdjoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuZm92ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUxlZnQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTGVmdCBpcyBub3cgLnNoYWRvdy5jYW1lcmEubGVmdC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubGVmdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFSaWdodDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFSaWdodCBpcyBub3cgLnNoYWRvdy5jYW1lcmEucmlnaHQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYVRvcDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEudG9wID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUJvdHRvbToge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFCb3R0b20gaXMgbm93IC5zaGFkb3cuY2FtZXJhLmJvdHRvbS4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuYm90dG9tID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYU5lYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTmVhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEubmVhci4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubmVhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFWaXNpYmxlOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVmlzaWJsZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkNhbWVyYUhlbHBlciggbGlnaHQuc2hhZG93LmNhbWVyYSApIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dCaWFzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0JpYXMgaXMgbm93IC5zaGFkb3cuYmlhcy4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5iaWFzID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0RhcmtuZXNzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93RGFya25lc3MgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcFdpZHRoOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcFdpZHRoIGlzIG5vdyAuc2hhZG93Lm1hcFNpemUud2lkdGguJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBIZWlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93TWFwSGVpZ2h0IGlzIG5vdyAuc2hhZG93Lm1hcFNpemUuaGVpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRsZW5ndGg6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7XG5cblx0XHR9XG5cdH0sXG5cdGR5bmFtaWM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudXNhZ2UgPT09IER5bmFtaWNEcmF3VXNhZ2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zZXRVc2FnZSggRHluYW1pY0RyYXdVc2FnZSApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5zZXREeW5hbWljID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5zZXREeW5hbWljKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zZXRVc2FnZSgpIGluc3RlYWQuJyApO1xuXHR0aGlzLnNldFVzYWdlKCB2YWx1ZSA9PT0gdHJ1ZSA/IER5bmFtaWNEcmF3VXNhZ2UgOiBTdGF0aWNEcmF3VXNhZ2UgKTtcblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29weUluZGljZXNBcnJheSA9IGZ1bmN0aW9uICggLyogaW5kaWNlcyAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59LFxuXG5CdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLnNldEFycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuc2V0QXJyYXkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEJ1ZmZlckdlb21ldHJ5IC5zZXRBdHRyaWJ1dGUgdG8gcmVwbGFjZS9yZXNpemUgYXR0cmlidXRlIGJ1ZmZlcnMnICk7XG5cbn07XG5cbi8vXG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5hZGRJbmRleCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRJbmRleCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEluZGV4KCkuJyApO1xuXHR0aGlzLnNldEluZGV4KCBpbmRleCApO1xuXG59O1xuXG5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuYWRkQXR0cmlidXRlID0gZnVuY3Rpb24gKCBuYW1lLCBhdHRyaWJ1dGUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRBdHRyaWJ1dGUoKS4nICk7XG5cblx0aWYgKCAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0J1ZmZlckF0dHJpYnV0ZSApICYmICEgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFyZ3VtZW50c1sgMSBdLCBhcmd1bWVudHNbIDIgXSApICk7XG5cblx0fVxuXG5cdGlmICggbmFtZSA9PT0gJ2luZGV4JyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmFkZEF0dHJpYnV0ZTogVXNlIC5zZXRJbmRleCgpIGZvciBpbmRleCBhdHRyaWJ1dGUuJyApO1xuXHRcdHRoaXMuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICk7XG5cbn07XG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5hZGREcmF3Q2FsbCA9IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50LCBpbmRleE9mZnNldCApIHtcblxuXHRpZiAoIGluZGV4T2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIGluZGV4T2Zmc2V0LicgKTtcblxuXHR9XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIGlzIG5vdyAuYWRkR3JvdXAoKS4nICk7XG5cdHRoaXMuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCApO1xuXG59O1xuXG5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY2xlYXJEcmF3Q2FsbHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jbGVhckRyYXdDYWxscygpIGlzIG5vdyAuY2xlYXJHcm91cHMoKS4nICk7XG5cdHRoaXMuY2xlYXJHcm91cHMoKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbXB1dGVPZmZzZXRzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZU9mZnNldHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLnJlbW92ZUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmRlbGV0ZUF0dHJpYnV0ZSgpLicgKTtcblxuXHRyZXR1cm4gdGhpcy5kZWxldGVBdHRyaWJ1dGUoIG5hbWUgKTtcblxufTtcblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmFwcGx5TWF0cml4ID0gZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hcHBseU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmFwcGx5TWF0cml4NCgpLicgKTtcblx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGRyYXdjYWxsczoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5kcmF3Y2FsbHMgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ3JvdXBzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdyb3VwcztcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0czoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLm9mZnNldHMgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ3JvdXBzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdyb3VwcztcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbkludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5zZXREeW5hbWljID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLnNldER5bmFtaWMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNldFVzYWdlKCkgaW5zdGVhZC4nICk7XG5cdHRoaXMuc2V0VXNhZ2UoIHZhbHVlID09PSB0cnVlID8gRHluYW1pY0RyYXdVc2FnZSA6IFN0YXRpY0RyYXdVc2FnZSApO1xuXHRyZXR1cm4gdGhpcztcblxufTtcblxuSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLnNldEFycmF5ID0gZnVuY3Rpb24gKCAvKiBhcnJheSAqLyApIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXI6IC5zZXRBcnJheSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgQnVmZmVyR2VvbWV0cnkgLnNldEF0dHJpYnV0ZSB0byByZXBsYWNlL3Jlc2l6ZSBhdHRyaWJ1dGUgYnVmZmVycycgKTtcblxufTtcblxuLy9cblxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5nZXRBcnJheXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogLmdldEFycmF5cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlTGlzdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiAuYWRkU2hhcGVMaXN0KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogLmFkZFNoYXBlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbi8vXG5cblNjZW5lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZTogLmRpc3Bvc2UoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuLy9cblxuVW5pZm9ybS5wcm90b3R5cGUub25VcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdHdyYXBBcm91bmQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwQXJvdW5kIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdG92ZXJkcmF3OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLm92ZXJkcmF3IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHdyYXBSR0I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcigpO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHNoYWRpbmc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggdmFsdWUgPT09IEZsYXRTaGFkaW5nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0c3RlbmNpbE1hc2s6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zdGVuY2lsTWFzayBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnN0ZW5jaWxGdW5jTWFzayBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnN0ZW5jaWxNYXNrIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc3RlbmNpbEZ1bmNNYXNrIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zdGVuY2lsRnVuY01hc2sgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblxuXHR2ZXJ0ZXhUYW5nZW50czoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnZlcnRleFRhbmdlbnRzIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC52ZXJ0ZXhUYW5nZW50cyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0ZGVyaXZhdGl2ZXM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTtcblx0XHRcdHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuY2xlYXJUYXJnZXQgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5jbGVhclRhcmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgYW5kIC5jbGVhcigpIGluc3RlYWQuJyApO1xuXHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdHRoaXMuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYW5pbWF0ZSgpIGlzIG5vdyAuc2V0QW5pbWF0aW9uTG9vcCgpLicgKTtcblx0dGhpcy5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nICk7XG5cdHJldHVybiB0aGlzLmdldFJlbmRlclRhcmdldCgpO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRNYXhBbmlzb3Ryb3B5ID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLicgKTtcblx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuZ2V0UHJlY2lzaW9uID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyApO1xuXHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5yZXNldEdMU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nICk7XG5cdHJldHVybiB0aGlzLnN0YXRlLnJlc2V0KCk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzRmxvYXRUZXh0dXJlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfZmxvYXRcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNCbGVuZE1pbk1heCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNCbGVuZE1pbk1heCgpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ0VYVF9ibGVuZF9taW5tYXhcXCcgKS4nICk7XG5cdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLicgKTtcblx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zdXBwb3J0c0luc3RhbmNlZEFycmF5cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXFwnICkuJyApO1xuXHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLmVuYWJsZVNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCBib29sZWFuICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5lbmFibGVTY2lzc29yVGVzdCgpIGlzIG5vdyAuc2V0U2Npc3NvclRlc3QoKS4nICk7XG5cdHRoaXMuc2V0U2Npc3NvclRlc3QoIGJvb2xlYW4gKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuaW5pdE1hdGVyaWFsID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5pbml0TWF0ZXJpYWwoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWRkUHJlUGx1Z2luID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQcmVQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWRkUG9zdFBsdWdpbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUG9zdFBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS51cGRhdGVTaGFkb3dNYXAgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zZXRGYWNlQ3VsbGluZyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0RmFjZUN1bGxpbmcoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufTtcblxuV2ViR0xSZW5kZXJlci5wcm90b3R5cGUuYWxsb2NUZXh0dXJlVW5pdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWxsb2NUZXh0dXJlVW5pdCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5zZXRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnNldFRleHR1cmUyRCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZTJEKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn07XG5cbldlYkdMUmVuZGVyZXIucHJvdG90eXBlLnNldFRleHR1cmVDdWJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlQ3ViZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5XZWJHTFJlbmRlcmVyLnByb3RvdHlwZS5nZXRBY3RpdmVNaXBNYXBMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0QWN0aXZlTWlwTWFwTGV2ZWwoKSBpcyBub3cgLmdldEFjdGl2ZU1pcG1hcExldmVsKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRzaGFkb3dNYXBFbmFibGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC5lbmFibGVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAuZW5hYmxlZCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBUeXBlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBUeXBlIGlzIG5vdyAuc2hhZG93TWFwLnR5cGUuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBDdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Y29udGV4dDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY29udGV4dCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmdldENvbnRleHQoKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdldENvbnRleHQoKTtcblxuXHRcdH1cblx0fSxcblx0dnI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnZyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnhyJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMueHI7XG5cblx0XHR9XG5cdH0sXG5cdGdhbW1hSW5wdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hSW5wdXQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IHRoZSBlbmNvZGluZyBmb3IgdGV4dHVyZXMgdmlhIFRleHR1cmUuZW5jb2RpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFJbnB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgdGhlIGVuY29kaW5nIGZvciB0ZXh0dXJlcyB2aWEgVGV4dHVyZS5lbmNvZGluZyBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Z2FtbWFPdXRwdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hT3V0cHV0IGhhcyBiZWVuIHJlbW92ZWQuIFNldCBXZWJHTFJlbmRlcmVyLm91dHB1dEVuY29kaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nYW1tYU91dHB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgV2ViR0xSZW5kZXJlci5vdXRwdXRFbmNvZGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMub3V0cHV0RW5jb2RpbmcgPSAoIHZhbHVlID09PSB0cnVlICkgPyBzUkdCRW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcblxuXHRcdH1cblx0fSxcblx0dG9uZU1hcHBpbmdXaGl0ZVBvaW50OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC50b25lTWFwcGluZ1doaXRlUG9pbnQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cdFx0XHRyZXR1cm4gMS4wO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnRvbmVNYXBwaW5nV2hpdGVQb2ludCBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Z2FtbWFGYWN0b3I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hRmFjdG9yIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIDI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFGYWN0b3IgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdlYkdMU2hhZG93TWFwLnByb3RvdHlwZSwge1xuXG5cdGN1bGxGYWNlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogY3VsbEZhY2UgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAuY3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHJlbmRlclJldmVyc2VTaWRlZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0cmVuZGVyU2luZ2xlU2lkZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclNpbmdsZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIGlzIG5vdyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQoIHNpemUsIG9wdGlvbnMgKS4nICk7XG5cdHJldHVybiBuZXcgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgb3B0aW9ucyApO1xuXG59XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHtcblxuXHR3cmFwUzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBTO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwUyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR3cmFwVDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBUO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwVCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRtYWdGaWx0ZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWluRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGFuaXNvdHJvcHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmFuaXNvdHJvcHkgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUub2Zmc2V0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHJlcGVhdDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUucmVwZWF0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnJlcGVhdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRmb3JtYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmZvcm1hdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5mb3JtYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRnZW5lcmF0ZU1pcG1hcHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbkF1ZGlvLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nICk7XG5cdGNvbnN0IHNjb3BlID0gdGhpcztcblx0Y29uc3QgYXVkaW9Mb2FkZXIgPSBuZXcgQXVkaW9Mb2FkZXIoKTtcblx0YXVkaW9Mb2FkZXIubG9hZCggZmlsZSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRzY29wZS5zZXRCdWZmZXIoIGJ1ZmZlciApO1xuXG5cdH0gKTtcblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuQXVkaW9BbmFseXNlci5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpb0FuYWx5c2VyOiAuZ2V0RGF0YSgpIGlzIG5vdyAuZ2V0RnJlcXVlbmN5RGF0YSgpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xuXG59O1xuXG4vL1xuXG5DdWJlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3ViZUNhbWVyYTogLnVwZGF0ZUN1YmVNYXAoKSBpcyBub3cgLnVwZGF0ZSgpLicgKTtcblx0cmV0dXJuIHRoaXMudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTtcblxufTtcblxuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3ViZUNhbWVyYTogLmNsZWFyKCkgaXMgbm93IC5yZW5kZXJUYXJnZXQuY2xlYXIoKS4nICk7XG5cdHJldHVybiB0aGlzLnJlbmRlclRhcmdldC5jbGVhciggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG59O1xuXG5JbWFnZVV0aWxzLmNyb3NzT3JpZ2luID0gdW5kZWZpbmVkO1xuXG5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5UZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0Y29uc3QgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0Y29uc3QgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoIHVybHMsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHRjb25zdCBsb2FkZXIgPSBuZXcgQ3ViZVRleHR1cmVMb2FkZXIoKTtcblx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0Y29uc3QgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmxzLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdGlmICggbWFwcGluZyApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyApO1xuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBDYW52YXNSZW5kZXJlcigpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQ2FudmFzUmVuZGVyZXIgaGFzIGJlZW4gcmVtb3ZlZCcgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBKU09OTG9hZGVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5KU09OTG9hZGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59XG5cbi8vXG5cbmNvbnN0IFNjZW5lVXRpbHMgPSB7XG5cblx0Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDogZnVuY3Rpb24gKCAvKiBnZW9tZXRyeSwgbWF0ZXJpYWxzICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0YXR0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBzY2VuZSwgcGFyZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH1cblxufTtcblxuLy9cblxuZnVuY3Rpb24gTGVuc0ZsYXJlKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MZW5zRmxhcmUgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9vYmplY3RzL0xlbnNmbGFyZS5qcycgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBQYXJhbWV0cmljR2VvbWV0cnkoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeSBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanNtL2dlb21ldHJpZXMvUGFyYW1ldHJpY0dlb21ldHJ5LmpzJyApO1xuXHRyZXR1cm4gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cbn1cblxuZnVuY3Rpb24gVGV4dEdlb21ldHJ5KCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5UZXh0R2VvbWV0cnkgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9nZW9tZXRyaWVzL1RleHRHZW9tZXRyeS5qcycgKTtcblx0cmV0dXJuIG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG59XG5cbmZ1bmN0aW9uIEZvbnRMb2FkZXIoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkZvbnRMb2FkZXIgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0ZvbnRMb2FkZXIuanMnICk7XG5cbn1cblxuZnVuY3Rpb24gRm9udCgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRm9udCBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanNtL2xvYWRlcnMvRm9udExvYWRlci5qcycgKTtcblxufVxuXG5mdW5jdGlvbiBJbW1lZGlhdGVSZW5kZXJPYmplY3QoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdCBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhIG5vcm1hbCByZW5kZXIgdGFyZ2V0IGFuZCBzZXQgdGhlIFwic2FtcGxlc1wiIHByb3BlcnR5IHRvIGdyZWF0ZXIgMCB0byBlbmFibGUgbXVsdGlzYW1wbGluZy4nICk7XG5cdGNvbnN0IHJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXHRyZW5kZXJUYXJnZXQuc2FtcGxlcyA9IDQ7XG5cdHJldHVybiByZW5kZXJUYXJnZXQ7XG5cbn1cblxuZnVuY3Rpb24gRGF0YVRleHR1cmUyREFycmF5KCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5EYXRhVGV4dHVyZTJEQXJyYXkgaGFzIGJlZW4gcmVuYW1lZCB0byBEYXRhQXJyYXlUZXh0dXJlLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhQXJyYXlUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG59XG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFUZXh0dXJlM0QgaGFzIGJlZW4gcmVuYW1lZCB0byBEYXRhM0RUZXh0dXJlLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhM0RUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG59XG5cbmlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQoIG5ldyBDdXN0b21FdmVudCggJ3JlZ2lzdGVyJywgeyBkZXRhaWw6IHtcblx0XHRyZXZpc2lvbjogUkVWSVNJT04sXG5cdH0gfSApICk7XG5cbn1cblxuaWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRpZiAoIHdpbmRvdy5fX1RIUkVFX18gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBNdWx0aXBsZSBpbnN0YW5jZXMgb2YgVGhyZWUuanMgYmVpbmcgaW1wb3J0ZWQuJyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR3aW5kb3cuX19USFJFRV9fID0gUkVWSVNJT047XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IEFDRVNGaWxtaWNUb25lTWFwcGluZywgQWRkRXF1YXRpb24sIEFkZE9wZXJhdGlvbiwgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUsIEFkZGl0aXZlQmxlbmRpbmcsIEFscGhhRm9ybWF0LCBBbHdheXNEZXB0aCwgQWx3YXlzU3RlbmNpbEZ1bmMsIEFtYmllbnRMaWdodCwgQW1iaWVudExpZ2h0UHJvYmUsIEFuaW1hdGlvbkNsaXAsIEFuaW1hdGlvbkxvYWRlciwgQW5pbWF0aW9uTWl4ZXIsIEFuaW1hdGlvbk9iamVjdEdyb3VwLCBBbmltYXRpb25VdGlscywgQXJjQ3VydmUsIEFycmF5Q2FtZXJhLCBBcnJvd0hlbHBlciwgQXVkaW8sIEF1ZGlvQW5hbHlzZXIsIEF1ZGlvQ29udGV4dCwgQXVkaW9MaXN0ZW5lciwgQXVkaW9Mb2FkZXIsIEF4ZXNIZWxwZXIsIEF4aXNIZWxwZXIsIEJhY2tTaWRlLCBCYXNpY0RlcHRoUGFja2luZywgQmFzaWNTaGFkb3dNYXAsIEJpbmFyeVRleHR1cmVMb2FkZXIsIEJvbmUsIEJvb2xlYW5LZXlmcmFtZVRyYWNrLCBCb3VuZGluZ0JveEhlbHBlciwgQm94MiwgQm94MywgQm94M0hlbHBlciwgQm94R2VvbWV0cnkgYXMgQm94QnVmZmVyR2VvbWV0cnksIEJveEdlb21ldHJ5LCBCb3hIZWxwZXIsIEJ1ZmZlckF0dHJpYnV0ZSwgQnVmZmVyR2VvbWV0cnksIEJ1ZmZlckdlb21ldHJ5TG9hZGVyLCBCeXRlVHlwZSwgQ2FjaGUsIENhbWVyYSwgQ2FtZXJhSGVscGVyLCBDYW52YXNSZW5kZXJlciwgQ2FudmFzVGV4dHVyZSwgQ2F0bXVsbFJvbUN1cnZlMywgQ2luZW9uVG9uZU1hcHBpbmcsIENpcmNsZUdlb21ldHJ5IGFzIENpcmNsZUJ1ZmZlckdlb21ldHJ5LCBDaXJjbGVHZW9tZXRyeSwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgQ2xvY2ssIENvbG9yLCBDb2xvcktleWZyYW1lVHJhY2ssIENvbXByZXNzZWRUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciwgQ29uZUdlb21ldHJ5IGFzIENvbmVCdWZmZXJHZW9tZXRyeSwgQ29uZUdlb21ldHJ5LCBDdWJlQ2FtZXJhLCBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVSZWZyYWN0aW9uTWFwcGluZywgQ3ViZVRleHR1cmUsIEN1YmVUZXh0dXJlTG9hZGVyLCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBDdWJpY0ludGVycG9sYW50LCBDdWxsRmFjZUJhY2ssIEN1bGxGYWNlRnJvbnQsIEN1bGxGYWNlRnJvbnRCYWNrLCBDdWxsRmFjZU5vbmUsIEN1cnZlLCBDdXJ2ZVBhdGgsIEN1c3RvbUJsZW5kaW5nLCBDdXN0b21Ub25lTWFwcGluZywgQ3lsaW5kZXJHZW9tZXRyeSBhcyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LCBDeWxpbmRlckdlb21ldHJ5LCBDeWxpbmRyaWNhbCwgRGF0YTNEVGV4dHVyZSwgRGF0YUFycmF5VGV4dHVyZSwgRGF0YVRleHR1cmUsIERhdGFUZXh0dXJlMkRBcnJheSwgRGF0YVRleHR1cmUzRCwgRGF0YVRleHR1cmVMb2FkZXIsIERhdGFVdGlscywgRGVjcmVtZW50U3RlbmNpbE9wLCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wLCBEZWZhdWx0TG9hZGluZ01hbmFnZXIsIERlcHRoRm9ybWF0LCBEZXB0aFN0ZW5jaWxGb3JtYXQsIERlcHRoVGV4dHVyZSwgRGlyZWN0aW9uYWxMaWdodCwgRGlyZWN0aW9uYWxMaWdodEhlbHBlciwgRGlzY3JldGVJbnRlcnBvbGFudCwgRG9kZWNhaGVkcm9uR2VvbWV0cnkgYXMgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnksIERvZGVjYWhlZHJvbkdlb21ldHJ5LCBEb3VibGVTaWRlLCBEc3RBbHBoYUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUsIER5bmFtaWNDb3B5VXNhZ2UsIER5bmFtaWNEcmF3VXNhZ2UsIER5bmFtaWNSZWFkVXNhZ2UsIEVkZ2VzR2VvbWV0cnksIEVkZ2VzSGVscGVyLCBFbGxpcHNlQ3VydmUsIEVxdWFsRGVwdGgsIEVxdWFsU3RlbmNpbEZ1bmMsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgRXVsZXIsIEV2ZW50RGlzcGF0Y2hlciwgRXh0cnVkZUdlb21ldHJ5IGFzIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSwgRXh0cnVkZUdlb21ldHJ5LCBGYWNlQ29sb3JzLCBGaWxlTG9hZGVyLCBGbGF0U2hhZGluZywgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSwgRmxvYXQzMkF0dHJpYnV0ZSwgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSwgRmxvYXQ2NEF0dHJpYnV0ZSwgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSwgRmxvYXRUeXBlLCBGb2csIEZvZ0V4cDIsIEZvbnQsIEZvbnRMb2FkZXIsIEZyYW1lYnVmZmVyVGV4dHVyZSwgRnJvbnRTaWRlLCBGcnVzdHVtLCBHTEJ1ZmZlckF0dHJpYnV0ZSwgR0xTTDEsIEdMU0wzLCBHcmVhdGVyRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYywgR3JlYXRlclN0ZW5jaWxGdW5jLCBHcmlkSGVscGVyLCBHcm91cCwgSGFsZkZsb2F0VHlwZSwgSGVtaXNwaGVyZUxpZ2h0LCBIZW1pc3BoZXJlTGlnaHRIZWxwZXIsIEhlbWlzcGhlcmVMaWdodFByb2JlLCBJY29zYWhlZHJvbkdlb21ldHJ5IGFzIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksIEljb3NhaGVkcm9uR2VvbWV0cnksIEltYWdlQml0bWFwTG9hZGVyLCBJbWFnZUxvYWRlciwgSW1hZ2VVdGlscywgSW1tZWRpYXRlUmVuZGVyT2JqZWN0LCBJbmNyZW1lbnRTdGVuY2lsT3AsIEluY3JlbWVudFdyYXBTdGVuY2lsT3AsIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLCBJbnN0YW5jZWRNZXNoLCBJbnQxNkF0dHJpYnV0ZSwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIEludDMyQXR0cmlidXRlLCBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgSW50OEF0dHJpYnV0ZSwgSW50OEJ1ZmZlckF0dHJpYnV0ZSwgSW50VHlwZSwgSW50ZXJsZWF2ZWRCdWZmZXIsIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLCBJbnRlcnBvbGFudCwgSW50ZXJwb2xhdGVEaXNjcmV0ZSwgSW50ZXJwb2xhdGVMaW5lYXIsIEludGVycG9sYXRlU21vb3RoLCBJbnZlcnRTdGVuY2lsT3AsIEpTT05Mb2FkZXIsIEtlZXBTdGVuY2lsT3AsIEtleWZyYW1lVHJhY2ssIExPRCwgTGF0aGVHZW9tZXRyeSBhcyBMYXRoZUJ1ZmZlckdlb21ldHJ5LCBMYXRoZUdlb21ldHJ5LCBMYXllcnMsIExlbnNGbGFyZSwgTGVzc0RlcHRoLCBMZXNzRXF1YWxEZXB0aCwgTGVzc0VxdWFsU3RlbmNpbEZ1bmMsIExlc3NTdGVuY2lsRnVuYywgTGlnaHQsIExpZ2h0UHJvYmUsIExpbmUsIExpbmUzLCBMaW5lQmFzaWNNYXRlcmlhbCwgTGluZUN1cnZlLCBMaW5lQ3VydmUzLCBMaW5lRGFzaGVkTWF0ZXJpYWwsIExpbmVMb29wLCBMaW5lUGllY2VzLCBMaW5lU2VnbWVudHMsIExpbmVTdHJpcCwgTGluZWFyRW5jb2RpbmcsIExpbmVhckZpbHRlciwgTGluZWFySW50ZXJwb2xhbnQsIExpbmVhck1pcE1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLCBMaW5lYXJUb25lTWFwcGluZywgTG9hZGVyLCBMb2FkZXJVdGlscywgTG9hZGluZ01hbmFnZXIsIExvb3BPbmNlLCBMb29wUGluZ1BvbmcsIExvb3BSZXBlYXQsIEx1bWluYW5jZUFscGhhRm9ybWF0LCBMdW1pbmFuY2VGb3JtYXQsIE1PVVNFLCBNYXRlcmlhbCwgTWF0ZXJpYWxMb2FkZXIsIE1hdGhVdGlscyBhcyBNYXRoLCBNYXRoVXRpbHMsIE1hdHJpeDMsIE1hdHJpeDQsIE1heEVxdWF0aW9uLCBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgTWVzaERlcHRoTWF0ZXJpYWwsIE1lc2hEaXN0YW5jZU1hdGVyaWFsLCBNZXNoRmFjZU1hdGVyaWFsLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBNZXNoTWF0Y2FwTWF0ZXJpYWwsIE1lc2hOb3JtYWxNYXRlcmlhbCwgTWVzaFBob25nTWF0ZXJpYWwsIE1lc2hQaHlzaWNhbE1hdGVyaWFsLCBNZXNoU3RhbmRhcmRNYXRlcmlhbCwgTWVzaFRvb25NYXRlcmlhbCwgTWluRXF1YXRpb24sIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE1peE9wZXJhdGlvbiwgTXVsdGlNYXRlcmlhbCwgTXVsdGlwbHlCbGVuZGluZywgTXVsdGlwbHlPcGVyYXRpb24sIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTmV2ZXJEZXB0aCwgTmV2ZXJTdGVuY2lsRnVuYywgTm9CbGVuZGluZywgTm9Db2xvcnMsIE5vVG9uZU1hcHBpbmcsIE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSwgTm9ybWFsQmxlbmRpbmcsIE5vdEVxdWFsRGVwdGgsIE5vdEVxdWFsU3RlbmNpbEZ1bmMsIE51bWJlcktleWZyYW1lVHJhY2ssIE9iamVjdDNELCBPYmplY3RMb2FkZXIsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBPY3RhaGVkcm9uR2VvbWV0cnkgYXMgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBPY3RhaGVkcm9uR2VvbWV0cnksIE9uZUZhY3RvciwgT25lTWludXNEc3RBbHBoYUZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgT25lTWludXNTcmNBbHBoYUZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgT3J0aG9ncmFwaGljQ2FtZXJhLCBQQ0ZTaGFkb3dNYXAsIFBDRlNvZnRTaGFkb3dNYXAsIFBNUkVNR2VuZXJhdG9yLCBQYXJhbWV0cmljR2VvbWV0cnksIFBhcnRpY2xlLCBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwsIFBhcnRpY2xlU3lzdGVtLCBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsLCBQYXRoLCBQZXJzcGVjdGl2ZUNhbWVyYSwgUGxhbmUsIFBsYW5lR2VvbWV0cnkgYXMgUGxhbmVCdWZmZXJHZW9tZXRyeSwgUGxhbmVHZW9tZXRyeSwgUGxhbmVIZWxwZXIsIFBvaW50Q2xvdWQsIFBvaW50Q2xvdWRNYXRlcmlhbCwgUG9pbnRMaWdodCwgUG9pbnRMaWdodEhlbHBlciwgUG9pbnRzLCBQb2ludHNNYXRlcmlhbCwgUG9sYXJHcmlkSGVscGVyLCBQb2x5aGVkcm9uR2VvbWV0cnkgYXMgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBQb2x5aGVkcm9uR2VvbWV0cnksIFBvc2l0aW9uYWxBdWRpbywgUHJvcGVydHlCaW5kaW5nLCBQcm9wZXJ0eU1peGVyLCBRdWFkcmF0aWNCZXppZXJDdXJ2ZSwgUXVhZHJhdGljQmV6aWVyQ3VydmUzLCBRdWF0ZXJuaW9uLCBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LCBSRVZJU0lPTiwgUkdCQURlcHRoUGFja2luZywgUkdCQUZvcm1hdCwgUkdCQUludGVnZXJGb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9CUFRDX0Zvcm1hdCwgUkdCQV9FVEMyX0VBQ19Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JGb3JtYXQsIFJHQl9FVEMxX0Zvcm1hdCwgUkdCX0VUQzJfRm9ybWF0LCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQl9TM1RDX0RYVDFfRm9ybWF0LCBSR0Zvcm1hdCwgUkdJbnRlZ2VyRm9ybWF0LCBSYXdTaGFkZXJNYXRlcmlhbCwgUmF5LCBSYXljYXN0ZXIsIFJlY3RBcmVhTGlnaHQsIFJlZEZvcm1hdCwgUmVkSW50ZWdlckZvcm1hdCwgUmVpbmhhcmRUb25lTWFwcGluZywgUmVwZWF0V3JhcHBpbmcsIFJlcGxhY2VTdGVuY2lsT3AsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBSaW5nR2VvbWV0cnkgYXMgUmluZ0J1ZmZlckdlb21ldHJ5LCBSaW5nR2VvbWV0cnksIFNjZW5lLCBTY2VuZVV0aWxzLCBTaGFkZXJDaHVuaywgU2hhZGVyTGliLCBTaGFkZXJNYXRlcmlhbCwgU2hhZG93TWF0ZXJpYWwsIFNoYXBlLCBTaGFwZUdlb21ldHJ5IGFzIFNoYXBlQnVmZmVyR2VvbWV0cnksIFNoYXBlR2VvbWV0cnksIFNoYXBlUGF0aCwgU2hhcGVVdGlscywgU2hvcnRUeXBlLCBTa2VsZXRvbiwgU2tlbGV0b25IZWxwZXIsIFNraW5uZWRNZXNoLCBTbW9vdGhTaGFkaW5nLCBTcGhlcmUsIFNwaGVyZUdlb21ldHJ5IGFzIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LCBTcGhlcmVHZW9tZXRyeSwgU3BoZXJpY2FsLCBTcGhlcmljYWxIYXJtb25pY3MzLCBTcGxpbmVDdXJ2ZSwgU3BvdExpZ2h0LCBTcG90TGlnaHRIZWxwZXIsIFNwcml0ZSwgU3ByaXRlTWF0ZXJpYWwsIFNyY0FscGhhRmFjdG9yLCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgU3RhdGljQ29weVVzYWdlLCBTdGF0aWNEcmF3VXNhZ2UsIFN0YXRpY1JlYWRVc2FnZSwgU3RlcmVvQ2FtZXJhLCBTdHJlYW1Db3B5VXNhZ2UsIFN0cmVhbURyYXdVc2FnZSwgU3RyZWFtUmVhZFVzYWdlLCBTdHJpbmdLZXlmcmFtZVRyYWNrLCBTdWJ0cmFjdEVxdWF0aW9uLCBTdWJ0cmFjdGl2ZUJsZW5kaW5nLCBUT1VDSCwgVGFuZ2VudFNwYWNlTm9ybWFsTWFwLCBUZXRyYWhlZHJvbkdlb21ldHJ5IGFzIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnksIFRldHJhaGVkcm9uR2VvbWV0cnksIFRleHRHZW9tZXRyeSwgVGV4dHVyZSwgVGV4dHVyZUxvYWRlciwgVG9ydXNHZW9tZXRyeSBhcyBUb3J1c0J1ZmZlckdlb21ldHJ5LCBUb3J1c0dlb21ldHJ5LCBUb3J1c0tub3RHZW9tZXRyeSBhcyBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRyaWFuZ2xlLCBUcmlhbmdsZUZhbkRyYXdNb2RlLCBUcmlhbmdsZVN0cmlwRHJhd01vZGUsIFRyaWFuZ2xlc0RyYXdNb2RlLCBUdWJlR2VvbWV0cnkgYXMgVHViZUJ1ZmZlckdlb21ldHJ5LCBUdWJlR2VvbWV0cnksIFVWTWFwcGluZywgVWludDE2QXR0cmlidXRlLCBVaW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkF0dHJpYnV0ZSwgVWludDMyQnVmZmVyQXR0cmlidXRlLCBVaW50OEF0dHJpYnV0ZSwgVWludDhCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSwgVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLCBVbmlmb3JtLCBVbmlmb3Jtc0xpYiwgVW5pZm9ybXNVdGlscywgVW5zaWduZWRCeXRlVHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBVbnNpZ25lZEludFR5cGUsIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSwgVW5zaWduZWRTaG9ydDU1NTFUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgVlNNU2hhZG93TWFwLCBWZWN0b3IyLCBWZWN0b3IzLCBWZWN0b3I0LCBWZWN0b3JLZXlmcmFtZVRyYWNrLCBWZXJ0ZXgsIFZlcnRleENvbG9ycywgVmlkZW9UZXh0dXJlLCBXZWJHTDFSZW5kZXJlciwgV2ViR0wzRFJlbmRlclRhcmdldCwgV2ViR0xBcnJheVJlbmRlclRhcmdldCwgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0LCBXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cywgV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCwgV2ViR0xSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSwgV2ViR0xSZW5kZXJlciwgV2ViR0xVdGlscywgV2lyZWZyYW1lR2VvbWV0cnksIFdpcmVmcmFtZUhlbHBlciwgV3JhcEFyb3VuZEVuZGluZywgWEhSTG9hZGVyLCBaZXJvQ3VydmF0dXJlRW5kaW5nLCBaZXJvRmFjdG9yLCBaZXJvU2xvcGVFbmRpbmcsIFplcm9TdGVuY2lsT3AsIF9TUkdCQUZvcm1hdCwgc1JHQkVuY29kaW5nIH07XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBcclxuICogQHJldHVybiB7VEhSRUUuTWVzaH1cclxuICovXHJcbmZ1bmN0aW9uIENvaW4oeCwgeSkge1xyXG4gIC8vIENyZWF0ZSBhIG5ldyBtZXNoIHdpdGggY29pbiBnZW9tZXRyeSBhbmQgbWF0ZXJpYWxcclxuICBsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XHJcbiAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgXHJcbiAgICBjb2xvcjogMHhlZWVlZWUgLFxyXG4gIH0pO1xyXG4gIGxldCBjb2luID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICBjb2luLnBvc2l0aW9uLnNldCh4KzEvMiwgNSwgeSsxLzIpO1xyXG4gIGNvaW4ubmFtZSA9ICdjb2luJztcclxuICByZXR1cm4gY29pbjtcclxufVxyXG5cclxuZnVuY3Rpb24gUG93ZXJ1cCh4LCB5KSB7XHJcbiAgICAvLyBDcmVhdGUgYSBuZXcgbWVzaCB3aXRoIHBvd2VydXAgZ2VvbWV0cnkgYW5kIG1hdGVyaWFsXHJcbiAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMiwgOCwgOCk7XHJcbiAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgIGNvbG9yOiAweGZlZmVmZSxcclxuICAgIH0pO1xyXG4gICAgbGV0IHBvd2VydXAgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgcG93ZXJ1cC5wb3NpdGlvbi5zZXQoeCsxLzIsIDUsIHkrMS8yKTtcclxuICAgIHBvd2VydXAubmFtZSA9ICdwb3dlcnVwJztcclxuICAgIHJldHVybiBwb3dlcnVwO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgQ29pbiwgUG93ZXJ1cCB9OyIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB3YXlwb2ludHMgZnJvbSAnLi4vYXNzZXQvd2F5cG9pbnRzLmpzb24nO1xyXG5cclxuXHJcbmZ1bmN0aW9uIEdob3N0KHgsIHosIGNvbG9yLCBnZW9tZXRyeSwgdHh0TWF0Y2FwLCBzdGFnZSkge1xyXG5cclxuICB2YXIgZ2hvc3RNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTWF0Y2FwTWF0ZXJpYWwoe1xyXG4gICAgY29sb3I6IGNvbG9yLFxyXG4gICAgbWF0Y2FwOiB0eHRNYXRjYXAsXHJcbiAgfSlcclxuXHJcblxyXG4gIGxldCBnaG9zdCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBnaG9zdE1hdGVyaWFsKTtcclxuICBnaG9zdC5uYW1lID0gJ2dob3N0JztcclxuICBnaG9zdC5zaXplID0gMC4yN1xyXG4gIGdob3N0LnNjYWxlLnNldChnaG9zdC5zaXplLCBnaG9zdC5zaXplLCBnaG9zdC5zaXplKTsgLy8gc2NhbGUgZG93biBieSAyNSVcclxuICBnaG9zdC5yb3RhdGVPbkF4aXMobmV3IFRIUkVFLlZlY3RvcjMoMSwgMCwgMCksIC1NYXRoLlBJIC8gMik7XHJcbiAgXHJcblxyXG4gIGdob3N0LnBvc2l0aW9uLnNldCh4LCA2LCB6KTtcclxuXHJcbiAgLy8gaW5pdFxyXG4gIGdob3N0LmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnByZXZXYXlwb2ludCA9IG51bGxcclxuICAgIHRoaXMubmV4dFdheXBvaW50ID0gd2F5cG9pbnRzWzIzICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildXHJcbiAgICBjb25zb2xlLmxvZygnZ2hvc3Qgc3RhZ2UgJyArIHN0YWdlKVxyXG4gICAgdGhpcy5zcGVlZCA9IHN0YWdlID09PSAxID8gMjAgOiAzMFxyXG4gICAgY29uc29sZS5sb2codGhpcylcclxuICB9XHJcbiAgZ2hvc3QuaW5pdCgpXHJcblxyXG4gIC8vIHVwZGF0ZVxyXG4gIGdob3N0LnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSkge1xyXG4gICAgbGV0IGdvdG9YID0gdGhpcy5uZXh0V2F5cG9pbnQueFxyXG4gICAgbGV0IGdvdG9aID0gdGhpcy5uZXh0V2F5cG9pbnQueVxyXG4gICAgbGV0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KGdvdG9YIC0gdGhpcy5wb3NpdGlvbi54LCAyKSArIE1hdGgucG93KGdvdG9aIC0gdGhpcy5wb3NpdGlvbi56LCAyKSlcclxuICAgIGlmIChkaXN0YW5jZSA8IDEpIHtcclxuICAgICAgbGV0IHBvc3NpYmxlTmV4dFdheXBvaW50cyA9IHRoaXMubmV4dFdheXBvaW50LmRpci5maWx0ZXIoZGlyID0+IGRpciAhPT0gdGhpcy5wcmV2V2F5cG9pbnQ/LmlkKVxyXG4gICAgICB0aGlzLnByZXZXYXlwb2ludCA9IHRoaXMubmV4dFdheXBvaW50XHJcbiAgICAgIGxldCBuZXh0SWRcclxuICAgICAgaWYgKHBvc3NpYmxlTmV4dFdheXBvaW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbmV4dElkID0gcG9zc2libGVOZXh0V2F5cG9pbnRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlTmV4dFdheXBvaW50cy5sZW5ndGgpXVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5leHRJZCA9IHRoaXMubmV4dFdheXBvaW50LmRpclswXVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubmV4dFdheXBvaW50ID0gd2F5cG9pbnRzW25leHRJZF1cclxuXHJcbiAgICAgIC8vIGFkanVzdCB0aGUgZ2hvc3QncyBkaXJlY3Rpb24gKHJvdGF0aW9uKVxyXG4gICAgICB0aGlzLnJvdGF0aW9uLnogPSBNYXRoLlBJIC8gMiAtIE1hdGguYXRhbjIodGhpcy5uZXh0V2F5cG9pbnQueSAtIHRoaXMucG9zaXRpb24ueiwgdGhpcy5uZXh0V2F5cG9pbnQueCAtIHRoaXMucG9zaXRpb24ueClcclxuICAgIH1cclxuICAgIGxldCBkaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyhnb3RvWCAtIHRoaXMucG9zaXRpb24ueCwgMCwgZ290b1ogLSB0aGlzLnBvc2l0aW9uLnopXHJcbiAgICBkaXJlY3Rpb24ubm9ybWFsaXplKClcclxuICAgIGRpcmVjdGlvbi5tdWx0aXBseVNjYWxhcih0aGlzLnNwZWVkICogZGVsdGEpXHJcbiAgICB0aGlzLnBvc2l0aW9uLmFkZChkaXJlY3Rpb24pXHJcblxyXG5cclxuXHJcbiAgICBcclxuICB9XHJcbiAgcmV0dXJuIGdob3N0O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgR2hvc3QgfTsiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbGxpc2lvbiBkZXRlY3Rpb24gcGFyYW1ldGVycy5cclxuICovXHJcbmZ1bmN0aW9uIGFkZEJvdW5kcyhvYmopIHtcclxuICAvLyBDb21wdXRlIHRoZSBib3VuZGluZyBib3ggYWZ0ZXIgc2NhbGUsIHRyYW5zbGF0aW9uLCBldGMuXHJcbiAgdmFyIGJib3ggPSBuZXcgVEhSRUUuQm94MygpLnNldEZyb21PYmplY3Qob2JqKTtcclxuICBvYmouYm91bmRzID0ge1xyXG4gICAgeE1pbjogYmJveC5taW4ueCxcclxuICAgIHhNYXg6IGJib3gubWF4LngsXHJcbiAgICB5TWluOiBiYm94Lm1pbi55LFxyXG4gICAgeU1heDogYmJveC5tYXgueSxcclxuICAgIHpNaW46IGJib3gubWluLnosXHJcbiAgICB6TWF4OiBiYm94Lm1heC56LFxyXG4gICAgaXNIb3Jpem9udGFsOiBiYm94Lm1heC54IC0gYmJveC5taW4ueCA+IGJib3gubWF4LnogLSBiYm94Lm1pbi56LFxyXG4gIH07XHJcbiAgb2JqLmZpbGxTdHlsZSA9IG9iai5maWxsU3R5bGUgfHwgb2JqLm1hdGVyaWFsLmNvbG9yPy5nZXRTdHlsZSgpIHx8IG9iai5tYXRlcmlhbFszXS5jb2xvci5nZXRTdHlsZSgpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbGxpc2lvbiBkZXRlY3Rpb24gZm9yIGV2ZXJ5IHNvbGlkIG9iamVjdC5cclxuICogQHJldHVybiBmYWxsaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXRlY3RDb2xsaXNpb25zKGNvbnRyb2xzLCBsYXN0U2FmZVBvc2l0aW9uLCB2ZWxvY2l0eSwgc2NlbmUsIGdhbWUsIG9iamVjdHMpIHtcclxuICAvLyBHZXQgdGhlIHVzZXIncyBjdXJyZW50IGNvbGxpc2lvbiBhcmVhLlxyXG4gIGxldCByb3RhdGlvblBvaW50ID0gY29udHJvbHMuZ2V0T2JqZWN0KClcclxuICBsZXQgcGxheWVyU2l6ZSA9IDIuODtcclxuICBsZXQgcHggPSByb3RhdGlvblBvaW50LnBvc2l0aW9uLng7XHJcbiAgbGV0IHB5ID0gcm90YXRpb25Qb2ludC5wb3NpdGlvbi55O1xyXG4gIGxldCBweiA9IHJvdGF0aW9uUG9pbnQucG9zaXRpb24uejtcclxuICB2YXIgYm91bmRzID0ge1xyXG4gICAgeE1pbjogcHggLSBwbGF5ZXJTaXplLFxyXG4gICAgeE1heDogcHggKyBwbGF5ZXJTaXplLFxyXG4gICAgeU1pbjogcHkgLSBwbGF5ZXJTaXplLFxyXG4gICAgeU1heDogcHkgKyBwbGF5ZXJTaXplLFxyXG4gICAgek1pbjogcHogLSBwbGF5ZXJTaXplLFxyXG4gICAgek1heDogcHogKyBwbGF5ZXJTaXplLFxyXG4gIH07XHJcblxyXG4gIC8vIFJ1biB0aHJvdWdoIGVhY2ggb2JqZWN0IGFuZCBkZXRlY3QgaWYgdGhlcmUgaXMgYSBjb2xsaXNpb24uXHJcbiAgZm9yICh2YXIgaW5kZXggPSBvYmplY3RzLmxlbmd0aCAtMTsgaW5kZXggPj0gMDsgaW5kZXggLS0pIHtcclxuXHJcbiAgICBsZXQgb2JqID0gb2JqZWN0c1tpbmRleF07XHJcbiAgICBsZXQgY29sID0gb2JqLmJvdW5kcztcclxuICAgIGlmICgoYm91bmRzLnhNaW4gPD0gY29sLnhNYXggJiYgYm91bmRzLnhNYXggPj0gY29sLnhNaW4pICYmXHJcbiAgICAgIChib3VuZHMueU1pbiA8PSBjb2wueU1heCAmJiBib3VuZHMueU1heCA+PSBjb2wueU1pbikgJiZcclxuICAgICAgKGJvdW5kcy56TWluIDw9IGNvbC56TWF4ICYmIGJvdW5kcy56TWF4ID49IGNvbC56TWluKSkge1xyXG5cclxuICAgICAgaWYgKG9iai5uYW1lID09PSAnd2FsbCcpIHtcclxuICAgICAgICAvLyBJZiBwbGF5ZXIgb24gdG9wIG9mIHRoZSBvYmplY3QsIGZyZWV6ZSBpdHMgeSBwb3NpdGlvbi5cclxuICAgICAgICBpZiAodmVsb2NpdHkueSA8IDAgJiYgTWF0aC5hYnMoYm91bmRzLnlNaW4gLSBjb2wueU1heCkgPCAxKSB7XHJcbiAgICAgICAgICBjb250cm9scy5nZXRPYmplY3QoKS5wb3NpdGlvbi55ID0gbGFzdFNhZmVQb3NpdGlvbi55O1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTbGlkZSB0aGUgcGxheWVyIGhvcml6b250YWxseSBvciB2ZXJ0aWNhbGx5XHJcbiAgICAgICAgaWYgKGNvbC5pc0hvcml6b250YWwpIHtcclxuICAgICAgICAgIGNvbnRyb2xzLmdldE9iamVjdCgpLnBvc2l0aW9uLnogPSBsYXN0U2FmZVBvc2l0aW9uLno7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnRyb2xzLmdldE9iamVjdCgpLnBvc2l0aW9uLnggPSBsYXN0U2FmZVBvc2l0aW9uLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcblxyXG4gICAgICB9IGVsc2UgaWYgKG9iai5uYW1lID09PSAnY29pbicpIHtcclxuICAgICAgICBvYmplY3RzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgc2NlbmUucmVtb3ZlKG9iaik7XHJcbiAgICAgICAgZ2FtZS5hZGRDb2luKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAob2JqLm5hbWUgPT09ICdwb3dlcnVwJykge1xyXG4gICAgICAgIG9iamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBzY2VuZS5yZW1vdmUob2JqKTtcclxuICAgICAgICBnYW1lLmFkZFBvd2VydXAoKTtcclxuICAgICAgfSBlbHNlIGlmIChvYmoubmFtZSA9PT0gJ2dob3N0Jykge1xyXG4gICAgICAgIGdhbWUubG9zZUdhbWUoKVxyXG4gICAgICB9IGVsc2UgaWYgKG9iai5uYW1lID09PSAncG9ydGFsJykge1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlXHJcbn1cclxuXHJcbiAgZXhwb3J0IHsgZGV0ZWN0Q29sbGlzaW9ucywgYWRkQm91bmRzIH1cclxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5jb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuSW1hZ2VMb2FkZXIoKTtcclxuaW1wb3J0IHsgQ29pbiwgUG93ZXJ1cCB9IGZyb20gJy4vY29sbGVjdGFibGUuanMnO1xyXG5pbXBvcnQgeyBHaG9zdCB9IGZyb20gJy4vZ2hvc3QuanMnO1xyXG5pbXBvcnQgeyBhZGRCb3VuZHMgfSBmcm9tICcuL2NvbGxpc2lvbi5qcyc7XHJcblxyXG5cclxuY29uc3QgdmVydGV4ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuY29uc3QgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKTtcclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHtBcnJheVt5XVt4XT0odHJ1ZXxmYWxzZSl9IHBvaW50QXJyYXkgXHJcbiAqL1xyXG5mdW5jdGlvbiBjb252ZXJ0UG9pbnRzVG9SZWN0YW5nbGVzKHBvaW50QXJyYXkpIHtcclxuICBsZXQgcmVjdGFuZ2xlcyA9IFtdO1xyXG5cclxuICAvLyBEZXRlY3QgaG9yaXpvbnRhbCBsaW5lc1xyXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgcG9pbnRBcnJheS5sZW5ndGg7IHkrKykge1xyXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBwb2ludEFycmF5W3ldLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgIGlmIChwb2ludEFycmF5W3ldW3hdKSB7XHJcbiAgICAgICAgbGV0IHgxID0geDtcclxuICAgICAgICBsZXQgeDIgPSB4O1xyXG4gICAgICAgIHdoaWxlIChwb2ludEFycmF5W3ldW3gyXSA9PT0gMSkge1xyXG4gICAgICAgICAgeDIrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHgyIC0geDEgPiAxKSB7XHJcbiAgICAgICAgICAvLyBNYXJrIGFzIHZpc2l0ZWRcclxuICAgICAgICAgIGZvciAobGV0IGkgPSB4MTsgaSA8PSB4MjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBvaW50QXJyYXlbeV1baV0gPSAyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmVjdGFuZ2xlcy5wdXNoKFt4MSwgeSwgeDIgLSB4MSwgMV0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHggPSB4MjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRGV0ZWN0IHZlcnRpY2FsIGxpbmVzXHJcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBwb2ludEFycmF5WzBdLmxlbmd0aDsgeCsrKSB7XHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHBvaW50QXJyYXkubGVuZ3RoOyB5KyspIHtcclxuICAgICAgaWYgKHBvaW50QXJyYXlbeV1beF0pIHtcclxuICAgICAgICBsZXQgeTEgPSB5O1xyXG4gICAgICAgIGxldCB5MiA9IHk7XHJcbiAgICAgICAgd2hpbGUgKHBvaW50QXJyYXlbeTJdW3hdID09PSAxKSB7XHJcbiAgICAgICAgICB5MisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeTIgLSB5MSA+IDEpIHtcclxuICAgICAgICAgIC8vIE1hcmsgYXMgdmlzaXRlZFxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IHkxOyBpIDw9IHkyOyBpKyspIHtcclxuICAgICAgICAgICAgcG9pbnRBcnJheVtpXVt4XSA9IDI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZWN0YW5nbGVzLnB1c2goW3gsIHkxLCAxLCB5MiAtIHkxXSlcclxuICAgICAgICB9XHJcbiAgICAgICAgeSA9IHkyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBZGQgYWxsIHJlbWFpbmluZyAxeDEgcG9pbnRzIGFzIHJlY3RhbmdsZXNcclxuICBmb3IgKGxldCB5ID0gMDsgeSA8IHBvaW50QXJyYXkubGVuZ3RoOyB5KyspIHtcclxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgcG9pbnRBcnJheVt5XS5sZW5ndGg7IHgrKykge1xyXG4gICAgICBpZiAocG9pbnRBcnJheVt5XVt4XSA9PT0gMSkge1xyXG4gICAgICAgIHJlY3RhbmdsZXMucHVzaChbeCwgeSwgMSwgMV0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICByZXR1cm4gcmVjdGFuZ2xlcztcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZsb29yRmFjdG9yeShzY2VuZSkge1xyXG4gIC8vIGZsb29yXHJcblxyXG4gIGxldCBmbG9vckdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMzAwLCAzMDAsIDE2LCAxNik7XHJcbiAgZmxvb3JHZW9tZXRyeS5yb3RhdGVYKC0gTWF0aC5QSSAvIDIpO1xyXG4gIC8vIG1vdmUgZmxvb3JcclxuXHJcblxyXG4gIC8vIHZlcnRleCBkaXNwbGFjZW1lbnRcclxuXHJcbiAgbGV0IHBvc2l0aW9uID0gZmxvb3JHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuICBmb3IgKGxldCBpID0gMCwgbCA9IHBvc2l0aW9uLmNvdW50OyBpIDwgbDsgaSsrKSB7XHJcblxyXG4gICAgdmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGkpO1xyXG5cclxuICAgIHZlcnRleC54ICs9IE1hdGgucmFuZG9tKCkgKiAyMCArIDEwMDtcclxuICAgIHZlcnRleC55ICs9IE1hdGgucmFuZG9tKCkgKiAwLjE7XHJcbiAgICB2ZXJ0ZXgueiArPSBNYXRoLnJhbmRvbSgpICogMjAgKyAxNTA7XHJcblxyXG4gICAgcG9zaXRpb24uc2V0WFlaKGksIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuICB9XHJcblxyXG4gIGZsb29yR2VvbWV0cnkgPSBmbG9vckdlb21ldHJ5LnRvTm9uSW5kZXhlZCgpOyAvLyBlbnN1cmUgZWFjaCBmYWNlIGhhcyB1bmlxdWUgdmVydGljZXNcclxuXHJcbiAgcG9zaXRpb24gPSBmbG9vckdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcbiAgY29uc3QgY29sb3JzRmxvb3IgPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGw7IGkrKykge1xyXG5cclxuICAgIGNvbG9yLnNldEhTTChNYXRoLnJhbmRvbSgpICogMC4xICsgMC42LCAwLjI1LCBNYXRoLnJhbmRvbSgpICogMC4yNSk7XHJcbiAgICBjb2xvcnNGbG9vci5wdXNoKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xyXG5cclxuICB9XHJcblxyXG4gIGZsb29yR2VvbWV0cnkuc2V0QXR0cmlidXRlKCdjb2xvcicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKGNvbG9yc0Zsb29yLCAzKSk7XHJcblxyXG4gIGNvbnN0IGZsb29yTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyB2ZXJ0ZXhDb2xvcnM6IHRydWUgfSk7XHJcblxyXG4gIGNvbnN0IGZsb29yID0gbmV3IFRIUkVFLk1lc2goZmxvb3JHZW9tZXRyeSwgZmxvb3JNYXRlcmlhbCk7XHJcbiAgZmxvb3IubmFtZSA9ICdmbG9vcic7XHJcbiAgc2NlbmUuYWRkKGZsb29yKVxyXG59XHJcblxyXG5mdW5jdGlvbiB3YWxsRmFjdG9yeShzY2VuZSwgb2JqZWN0cywgdHh0LCBzdGFnZSkge1xyXG5cclxuICB2YXIgYmx1ZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgXHJcbiAgICBjb2xvcjogMHgyMTIxZGVcclxuICAgIFxyXG4gICB9KTtcclxuXHJcbiAgY29uc3QgY3JlYXRlQm94ID0gKHgsIHksIHosIHcsIGgsIGQpID0+IHtcclxuICAgIGxldCB0ZXh0dXJlID0gdHh0LmNsb25lKCk7XHJcbiAgICBsZXQgd2FsbE1hdGVyaWFsXHJcblxyXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkodywgaCwgZCk7XHJcblxyXG4gICAgaWYgKHN0YWdlID09PSAyKSB7XHJcbiAgICAgIGJsdWVNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpXHJcbiAgICAgIGJsdWVNYXRlcmlhbC5jb2xvci5zZXRIU0woeCAqIDAuMDEsIDAuOSwgMC4yKTtcclxuXHJcbiAgICAgIHdhbGxNYXRlcmlhbCA9IGJsdWVNYXRlcmlhbDtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgIHdhbGxNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgIG1hcDogdGV4dHVyZSxcclxuICAgICAgZmxhdFNoYWRpbmc6IHRydWUsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICAgbGV0IG1hdGVyaWFsMSwgbWF0ZXJpYWwyXHJcbiAgICBpZiAodyA+IGQpIHtcclxuICAgICAgbWF0ZXJpYWwxID0gYmx1ZU1hdGVyaWFsO1xyXG4gICAgICBtYXRlcmlhbDIgPSB3YWxsTWF0ZXJpYWw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYXRlcmlhbDEgPSB3YWxsTWF0ZXJpYWw7XHJcbiAgICAgIG1hdGVyaWFsMiA9IGJsdWVNYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgW1xyXG4gICAgICBtYXRlcmlhbDEsXHJcbiAgICAgIG1hdGVyaWFsMSxcclxuICAgICAgYmx1ZU1hdGVyaWFsLFxyXG4gICAgICBibHVlTWF0ZXJpYWwsXHJcbiAgICAgIG1hdGVyaWFsMixcclxuICAgICAgbWF0ZXJpYWwyLFxyXG5cclxuICAgIF0pXHJcbiAgICBib3gubmFtZSA9ICd3YWxsJ1xyXG5cclxuICAgIC8vIFByZXZlbnQgdGV4dHVyZSB3YXJwaW5nXHJcbiAgICBsZXQgbG9uZ2VzdFNpZGUgPSBNYXRoLm1heCh3LCBkKSAvIGhcclxuICAgIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcclxuICAgIHRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcclxuICAgIHRleHR1cmUucmVwZWF0LnNldChsb25nZXN0U2lkZSwgMSlcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgYm94LnBvc2l0aW9uLnNldCh4ICsgdyAvIDIsIHkgKyBoIC8gMiwgeiArIGQgLyAyKTtcclxuICAgIGFkZEJvdW5kcyhib3gpXHJcbiAgICBvYmplY3RzLnB1c2goYm94KTtcclxuICAgIHNjZW5lLmFkZChib3gpO1xyXG4gIH1cclxuXHJcbiAgLy8gY29uc3QgYm94TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoIHsgc3BlY3VsYXI6IDB4ZmZmZmZmLCBmbGF0U2hhZGluZzogdHJ1ZSwgdmVydGV4Q29sb3JzOiB0cnVlIH0gKTtcclxuICAvLyBib3hNYXRlcmlhbC5jb2xvci5zZXRIU0woIE1hdGgucmFuZG9tKCkgKiAwLjIgKyAwLjUsIDAuNzUsIE1hdGgucmFuZG9tKCkgKiAwLjI1ICsgMC43NSApO1xyXG5cclxuICAvLyBjb25zdCBib3ggPSBuZXcgVEhSRUUuTWVzaCggYm94R2VvbWV0cnksIGJveE1hdGVyaWFsICk7XHJcblxyXG5cclxuICBjb25zdCBib3hHZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKS50b05vbkluZGV4ZWQoKTtcclxuXHJcbiAgbGV0IHBvc2l0aW9uID0gYm94R2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuICBjb25zdCBjb2xvcnNCb3ggPSBbXTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGw7IGkrKykge1xyXG5cclxuICAgIGNvbG9yLnNldEhTTChNYXRoLnJhbmRvbSgpICogMC4zICsgMC41LCAwLjc1LCBNYXRoLnJhbmRvbSgpICogMC4yNSArIDAuNzUpO1xyXG4gICAgY29sb3JzQm94LnB1c2goY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XHJcbiAgfVxyXG5cclxuICBib3hHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoY29sb3JzQm94LCAzKSk7XHJcblxyXG5cclxuXHJcbiAgbG9hZGVyLmxvYWQoXCJhc3NldC9tYXplLnBuZ1wiLCBmdW5jdGlvbiAoaW1nKSB7XHJcblxyXG5cclxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpXHJcbiAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcclxuICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWcsIDAsIDAsIGltZy53aWR0aCwgaW1nLmhlaWdodCk7XHJcbiAgICB2YXIgcGl4ZWxEYXRhID0gY2FudmFzLmdldENvbnRleHQoJzJkJykuZ2V0SW1hZ2VEYXRhKDAsIDAsIGltZy53aWR0aCwgaW1nLmhlaWdodCkuZGF0YTtcclxuXHJcbiAgICBsZXQgcG9pbnRBcnJheSA9IEFycmF5KGltZy5oZWlnaHQpLmZpbGwoMCkubWFwKCgpID0+IEFycmF5KGltZy53aWR0aCkuZmlsbCgwKSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpeGVsRGF0YS5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICBsZXQgeCA9IGkgLyA0ICUgaW1nLndpZHRoO1xyXG4gICAgICBsZXQgeSA9IE1hdGguZmxvb3IoaSAvIDQgLyBpbWcud2lkdGgpO1xyXG4gICAgICAvLyBDaGVjayBpZiBwaXhlbCBpcyAjMjEyMWRlIChibHVlKVxyXG4gICAgICBpZiAocGl4ZWxEYXRhW2ldID09PSAzMyAmJiBwaXhlbERhdGFbaSArIDFdID09PSAzMyAmJiBwaXhlbERhdGFbaSArIDJdID09PSAyMjIpIHtcclxuICAgICAgICBwb2ludEFycmF5W3ldW3hdID0gMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTG9vayBmb3IgY29pbnMgKDJ4MiBncmlkIG9mIGNvbG9yICNmZmI4OTcsIFJHQigyNTUsIDE4NCwgMTUxKSlcclxuICAgICAgaWYgKHBpeGVsRGF0YVtpICsgMl0gPT09IDE1MSAmJiBwaXhlbERhdGFbaSArIDFdID09PSBwaXhlbERhdGFbaSArIDQgKyAxXSAmJiBwaXhlbERhdGFbaSArIDFdID09PSBwaXhlbERhdGFbaSArIGltZy53aWR0aCAqIDQgKyAxXSkge1xyXG4gICAgICAgIGxldCBjb2luID0gbmV3IENvaW4oeCwgeSlcclxuICAgICAgICBhZGRCb3VuZHMoY29pbilcclxuICAgICAgICBvYmplY3RzLnB1c2goY29pbik7XHJcbiAgICAgICAgc2NlbmUuYWRkKGNvaW4pO1xyXG5cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gTG9vayBmb3IgcG93ZXJ1cHMgZG90cywgYnJvd24gUkdCKDE4NSwgMTIyLCA4NylcclxuICAgICAgaWYgKHBpeGVsRGF0YVtpXSA9PT0gMTg1ICYmIHBpeGVsRGF0YVtpICsgMV0gPT09IDEyMiAmJiBwaXhlbERhdGFbaSArIDJdID09PSA4Nykge1xyXG4gICAgICAgIGxldCBwb3dlcnVwID0gbmV3IFBvd2VydXAoeCwgeSlcclxuICAgICAgICBhZGRCb3VuZHMocG93ZXJ1cClcclxuICAgICAgICBvYmplY3RzLnB1c2gocG93ZXJ1cCk7XHJcbiAgICAgICAgc2NlbmUuYWRkKHBvd2VydXApO1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICAvLyBDcmVhdGUgd2FsbHNcclxuICAgIGxldCByZWN0cyA9IGNvbnZlcnRQb2ludHNUb1JlY3RhbmdsZXMocG9pbnRBcnJheSlcclxuICAgIHJlY3RzLmZvckVhY2gocmVjdGFuZ2xlID0+IHtcclxuICAgICAgY3JlYXRlQm94KHJlY3RhbmdsZVswXSwgMCwgcmVjdGFuZ2xlWzFdLCByZWN0YW5nbGVbMl0sIDEwLCByZWN0YW5nbGVbM10pXHJcbiAgICB9KVxyXG5cclxuXHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnaG9zdEZhY3Rvcnkoc2NlbmUsIG9iamVjdHMsIGdlb21ldHJ5LCBzdGFnZSkge1xyXG4gIGxldCBnaG9zdENvbG9ycyA9IFsgLy8gR2hvc3QgY29sb3JzIGZyb20gcGFjbWFuXHJcbiAgICAweGZmMDAwMCxcclxuICAgIDB4MDBmZmZmLFxyXG4gICAgMHhmZmI4ZGUsXHJcbiAgICAweGZmYjg0N1xyXG4gIF1cclxuICBsZXQgZ2hvc3RDb29yZHMgPSBbXHJcbiAgICBbMTEyLCAxMTddLFxyXG4gICAgWzk2LCAxNDBdLFxyXG4gICAgWzExMywgMTQwXSxcclxuICAgIFsxMjksIDE0MF1cclxuICBdXHJcbiAgY29uc3QgZ2hvc3RBcnIgPSBbXVxyXG4gIGxldCB0ZXh0dXJlTWF0Y2FwID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKGBhc3NldC9tYXRnaG9zdC5wbmdgKVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ2hvc3RDb2xvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBbeCwgel0gPSBnaG9zdENvb3Jkc1tpXVxyXG4gICAgbGV0IGNvbG9yID0gZ2hvc3RDb2xvcnNbaV1cclxuICAgIGNvbnN0IGdob3N0ID0gbmV3IEdob3N0KHgsIHosIGNvbG9yLCBnZW9tZXRyeSwgdGV4dHVyZU1hdGNhcCwgc3RhZ2UpXHJcbiAgICBhZGRCb3VuZHMoZ2hvc3QpXHJcbiAgICBzY2VuZS5hZGQoZ2hvc3QpO1xyXG4gICAgb2JqZWN0cy5wdXNoKGdob3N0KTtcclxuICAgIGdob3N0QXJyLnB1c2goZ2hvc3QpO1xyXG4gIH1cclxuICByZXR1cm4gZ2hvc3RBcnJcclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IGZsb29yRmFjdG9yeSwgd2FsbEZhY3RvcnksIGdob3N0RmFjdG9yeSB9OyIsImltcG9ydCB7XHJcblx0RXVsZXIsXHJcblx0RXZlbnREaXNwYXRjaGVyLFxyXG5cdFZlY3RvcjNcclxufSBmcm9tICd0aHJlZSc7XHJcblxyXG5jb25zdCBfZXVsZXIgPSBuZXcgRXVsZXIoIDAsIDAsIDAsICdZWFonICk7XHJcbmNvbnN0IF92ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuY29uc3QgX2NoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xyXG5jb25zdCBfbG9ja0V2ZW50ID0geyB0eXBlOiAnbG9jaycgfTtcclxuY29uc3QgX3VubG9ja0V2ZW50ID0geyB0eXBlOiAndW5sb2NrJyB9O1xyXG5cclxuY29uc3QgX1BJXzIgPSBNYXRoLlBJIC8gMjtcclxuXHJcbmNsYXNzIFBvaW50ZXJMb2NrQ29udHJvbHMgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xyXG5cclxuXHRjb25zdHJ1Y3RvciggY2FtZXJhLCBkb21FbGVtZW50ICkge1xyXG5cclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0aWYgKCBkb21FbGVtZW50ID09PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludGVyTG9ja0NvbnRyb2xzOiBUaGUgc2Vjb25kIHBhcmFtZXRlciBcImRvbUVsZW1lbnRcIiBpcyBub3cgbWFuZGF0b3J5LicgKTtcclxuXHRcdFx0ZG9tRWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XHJcblx0XHR0aGlzLmlzTG9ja2VkID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gU2V0IHRvIGNvbnN0cmFpbiB0aGUgcGl0Y2ggb2YgdGhlIGNhbWVyYVxyXG5cdFx0Ly8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnNcclxuXHRcdHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcclxuXHRcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcclxuXHJcblx0XHR0aGlzLnBvaW50ZXJTcGVlZCA9IDEuMDtcclxuXHJcblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0ZnVuY3Rpb24gb25Nb3VzZU1vdmUoIGV2ZW50ICkge1xyXG5cclxuXHRcdFx0aWYgKCBzY29wZS5pc0xvY2tlZCA9PT0gZmFsc2UgKSByZXR1cm47XHJcblxyXG5cdFx0XHRjb25zdCBtb3ZlbWVudFggPSBldmVudC5tb3ZlbWVudFggfHwgZXZlbnQubW96TW92ZW1lbnRYIHx8IGV2ZW50LndlYmtpdE1vdmVtZW50WCB8fCAwO1xyXG5cdFx0XHRjb25zdCBtb3ZlbWVudFkgPSBldmVudC5tb3ZlbWVudFkgfHwgZXZlbnQubW96TW92ZW1lbnRZIHx8IGV2ZW50LndlYmtpdE1vdmVtZW50WSB8fCAwO1xyXG5cclxuXHRcdFx0X2V1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCBjYW1lcmEucXVhdGVybmlvbiApO1xyXG5cclxuXHRcdFx0X2V1bGVyLnkgLT0gbW92ZW1lbnRYICogMC4wMDIgKiBzY29wZS5wb2ludGVyU3BlZWQ7XHJcblx0XHRcdF9ldWxlci54IC09IG1vdmVtZW50WSAqIDAuMDAyICogc2NvcGUucG9pbnRlclNwZWVkO1xyXG5cclxuXHRcdFx0X2V1bGVyLnggPSBNYXRoLm1heCggX1BJXzIgLSBzY29wZS5tYXhQb2xhckFuZ2xlLCBNYXRoLm1pbiggX1BJXzIgLSBzY29wZS5taW5Qb2xhckFuZ2xlLCBfZXVsZXIueCApICk7XHJcblxyXG5cdFx0XHRjYW1lcmEucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIF9ldWxlciApO1xyXG5cclxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggX2NoYW5nZUV2ZW50ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIG9uUG9pbnRlcmxvY2tDaGFuZ2UoKSB7XHJcblxyXG5cdFx0XHRpZiAoIHNjb3BlLmRvbUVsZW1lbnQub3duZXJEb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgPT09IHNjb3BlLmRvbUVsZW1lbnQgKSB7XHJcblxyXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIF9sb2NrRXZlbnQgKTtcclxuXHJcblx0XHRcdFx0c2NvcGUuaXNMb2NrZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggX3VubG9ja0V2ZW50ICk7XHJcblxyXG5cdFx0XHRcdHNjb3BlLmlzTG9ja2VkID0gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIG9uUG9pbnRlcmxvY2tFcnJvcigpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qb2ludGVyTG9ja0NvbnRyb2xzOiBVbmFibGUgdG8gdXNlIFBvaW50ZXIgTG9jayBBUEknICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUgKTtcclxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVybG9ja2NoYW5nZScsIG9uUG9pbnRlcmxvY2tDaGFuZ2UgKTtcclxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVybG9ja2Vycm9yJywgb25Qb2ludGVybG9ja0Vycm9yICk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRzY29wZS5kb21FbGVtZW50Lm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlICk7XHJcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmxvY2tjaGFuZ2UnLCBvblBvaW50ZXJsb2NrQ2hhbmdlICk7XHJcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmxvY2tlcnJvcicsIG9uUG9pbnRlcmxvY2tFcnJvciApO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0dGhpcy5kaXNjb25uZWN0KCk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLmdldE9iamVjdCA9IGZ1bmN0aW9uICgpIHsgLy8gcmV0YWluaW5nIHRoaXMgbWV0aG9kIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcblxyXG5cdFx0XHRyZXR1cm4gY2FtZXJhO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5nZXREaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zdCBkaXJlY3Rpb24gPSBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCB2ICkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdi5jb3B5KCBkaXJlY3Rpb24gKS5hcHBseVF1YXRlcm5pb24oIGNhbWVyYS5xdWF0ZXJuaW9uICk7XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH0oKTtcclxuXHJcblx0XHR0aGlzLm1vdmVGb3J3YXJkID0gZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcclxuXHJcblx0XHRcdC8vIG1vdmUgZm9yd2FyZCBwYXJhbGxlbCB0byB0aGUgeHotcGxhbmVcclxuXHRcdFx0Ly8gYXNzdW1lcyBjYW1lcmEudXAgaXMgeS11cFxyXG5cclxuXHRcdFx0X3ZlY3Rvci5zZXRGcm9tTWF0cml4Q29sdW1uKCBjYW1lcmEubWF0cml4LCAwICk7XHJcblxyXG5cdFx0XHRfdmVjdG9yLmNyb3NzVmVjdG9ycyggY2FtZXJhLnVwLCBfdmVjdG9yICk7XHJcblxyXG5cdFx0XHRjYW1lcmEucG9zaXRpb24uYWRkU2NhbGVkVmVjdG9yKCBfdmVjdG9yLCBkaXN0YW5jZSApO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5tb3ZlUmlnaHQgPSBmdW5jdGlvbiAoIGRpc3RhbmNlICkge1xyXG5cclxuXHRcdFx0X3ZlY3Rvci5zZXRGcm9tTWF0cml4Q29sdW1uKCBjYW1lcmEubWF0cml4LCAwICk7XHJcblxyXG5cdFx0XHRjYW1lcmEucG9zaXRpb24uYWRkU2NhbGVkVmVjdG9yKCBfdmVjdG9yLCBkaXN0YW5jZSApO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5sb2NrID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0dGhpcy5kb21FbGVtZW50LnJlcXVlc3RQb2ludGVyTG9jaygpO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy51bmxvY2sgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRzY29wZS5kb21FbGVtZW50Lm93bmVyRG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLmNvbm5lY3QoKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgUG9pbnRlckxvY2tDb250cm9scyB9OyIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IGZsb29yRmFjdG9yeSwgd2FsbEZhY3RvcnksIGdob3N0RmFjdG9yeSB9IGZyb20gJy4vY29tcG9uZW50L2ZhY3RvcnkuanMnO1xyXG5pbXBvcnQgeyBhZGRCb3VuZHMsIGRldGVjdENvbGxpc2lvbnMgfSBmcm9tICcuL2NvbXBvbmVudC9jb2xsaXNpb24uanMnO1xyXG5pbXBvcnQgeyBQb2ludGVyTG9ja0NvbnRyb2xzIH0gZnJvbSAnLi91dGlsL1BvaW50ZXJMb2NrQ29udHJvbHMuanMnO1xyXG5pbXBvcnQgTWluaW1hcCBmcm9tICcuL2NvbXBvbmVudC9taW5pbWFwLmpzJztcclxudmFyIFNUTExvYWRlciA9IHJlcXVpcmUoJ3RocmVlLXN0bC1sb2FkZXInKShUSFJFRSlcclxuXHJcbmxldCBzY2VuZSwgcmVuZGVyZXIsIG15UG9pbnRMaWdodCwgcmF5Y2FzdGVyLCBza3lib3hHZW8sIHNreWJveDtcclxubGV0IG1hdGVyaWFsQ29yb25hLCBtYXRlcmlhbFJlZEVjbGlwc2UsIGxpZ2h0O1xyXG5cclxuY29uc3Qgb2JqZWN0cyA9IFtdO1xyXG5cclxubGV0IG1vdmVGb3J3YXJkID0gZmFsc2U7XHJcbmxldCBtb3ZlQmFja3dhcmQgPSBmYWxzZTtcclxubGV0IG1vdmVMZWZ0ID0gZmFsc2U7XHJcbmxldCBtb3ZlUmlnaHQgPSBmYWxzZTtcclxubGV0IGZhbGxpbmcgPSB0cnVlO1xyXG5sZXQgcGxheWVyU3BlZWQgPSAzODBcclxuXHJcblxyXG5sZXQgcHJldlRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMSwgMzAwMDApO1xyXG5jb25zdCB2ZWxvY2l0eSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbmNvbnN0IGRpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbmNvbnN0IGNvbnRyb2xzID0gbmV3IFBvaW50ZXJMb2NrQ29udHJvbHMoY2FtZXJhLCBkb2N1bWVudC5ib2R5KTtcclxuY29uc3QgbWluaW1hcCA9IG5ldyBNaW5pbWFwKG9iamVjdHMsIGNvbnRyb2xzKVxyXG5cclxuY29uc3QgYmxvY2tlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdibG9ja2VyJyk7XHJcbmNvbnN0IGluc3RydWN0aW9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnN0cnVjdGlvbnMnKTtcclxuY29uc3QgcmVzdGFydEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lb3Zlci1yZXN0YXJ0Jyk7XHJcbmNvbnN0IGdhbWVvdmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RydWN0aW9ucycpO1xyXG5cclxuY2xhc3MgR2FtZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnN0YWdlID0gMVxyXG4gICAgdGhpcy5sYXN0U3RhZ2UgPSAyXHJcbiAgICB0aGlzLmNvaW5zID0gMDtcclxuICAgIHRoaXMuc2NvcmUgPSAwO1xyXG4gICAgdGhpcy5jb2luc1RvdGFsID0gMjQwO1xyXG4gICAgdGhpcy5wb3dlcnVwQWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLnBvd2VydXBEdXJhdGlvbiA9IDExIC8vIHNlY29uZHNcclxuICAgIHRoaXMuZ2hvc3RzID0gW107XHJcbiAgICB0aGlzLnBvd2VydXBDb3VudGRvd24gPSAwO1xyXG4gICAgdGhpcy5nYW1lT3ZlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5oaWdoc2NvcmUgPSAwO1xyXG4gIH1cclxuXHJcbiAgbG9hZFN0YWdlKCkge1xyXG4gICAgdGhpcy5wb3dlcnVwQWN0aXZlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNvaW5zID0gMDtcclxuICAgIHRoaXMuc2NvcmUgPSAwO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvaW5zJykuaW5uZXJIVE1MID0gdGhpcy5jb2lucztcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZScpLmlubmVySFRNTCA9IHRoaXMuc2NvcmU7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhZ2UnKS5pbm5lckhUTUwgPSB0aGlzLnN0YWdlO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvd2VydXAnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgIG9iamVjdHMuc3BsaWNlKDAsIG9iamVjdHMubGVuZ3RoKTtcclxuICAgIHdoaWxlKHNjZW5lLmNoaWxkcmVuLmxlbmd0aCA+IDApeyBcclxuICAgICAgc2NlbmUucmVtb3ZlKHNjZW5lLmNoaWxkcmVuWzBdKTsgXHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGlnaHRpbmdcclxuICAgIFxyXG4gIFxyXG4gIHNjZW5lLmFkZChsaWdodCk7XHJcbiAgc2NlbmUuYWRkKG15UG9pbnRMaWdodCk7XHJcbiAgc2NlbmUuYWRkKGNvbnRyb2xzLmdldE9iamVjdCgpKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZW92ZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgdGhpcy5nYW1lT3ZlciA9IGZhbHNlO1xyXG4gICAgb2JqZWN0cy5zcGxpY2UoMCwgb2JqZWN0cy5sZW5ndGgpO1xyXG4gICAgdGhpcy5naG9zdHMgPSBbXTtcclxuXHJcbiAgICAvLyBza3lib3hcclxuICAgIHNreWJveCA9IG5ldyBUSFJFRS5NZXNoKHNreWJveEdlbywgdGhpcy5zdGFnZSA9PT0gMSA/IG1hdGVyaWFsQ29yb25hIDogbWF0ZXJpYWxSZWRFY2xpcHNlKTtcclxuICAgIHNjZW5lLmFkZChza3lib3gpO1xyXG4gICAgXHJcbiAgICAvLyBmbG9vciBwYXR0ZXJuXHJcbiAgICBmbG9vckZhY3Rvcnkoc2NlbmUpO1xyXG5cclxuICAgIC8vIHdhbGxzXHJcbiAgICBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoYGFzc2V0L3dhbGwke3RoaXMuc3RhZ2V9LmpwZ2AsIGZ1bmN0aW9uICh0ZXh0dXJlKSB7XHJcblxyXG4gICAgICB3YWxsRmFjdG9yeShzY2VuZSwgb2JqZWN0cywgdGV4dHVyZSwgZ2FtZS5zdGFnZSk7XHJcbiAgICAgIFxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBnaG9zdHNcclxuICAgIG5ldyBTVExMb2FkZXIoKS5sb2FkKCdhc3NldC9naG9zdC5zdGwnLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgICAgZ2FtZS5naG9zdHMgPSBnaG9zdEZhY3Rvcnkoc2NlbmUsIG9iamVjdHMsIGdlb21ldHJ5LCBnYW1lLnN0YWdlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHBsYXllclxyXG4gICAgZGlyZWN0aW9uLnNldCgwLCAwLCAwKTtcclxuICAgIHZlbG9jaXR5LnNldCgwLCAwLCAwKTtcclxuICAgIGNvbnRyb2xzLmdldE9iamVjdCgpLnJvdGF0aW9uLnNldCgwLCBNYXRoLlBJLCAwKTtcclxuICAgIGNvbnRyb2xzLmdldE9iamVjdCgpLnBvc2l0aW9uLnNldCgxMTIsIDYsIDIxMSlcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29pbnNUb3RhbCcpLmlubmVySFRNTCA9IHRoaXMuY29pbnNUb3RhbDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFnZScpLmlubmVySFRNTCA9IHRoaXMuc3RhZ2U7XHJcblxyXG4gIH1cclxuXHJcbiAgc2V0VG90YWxDb2lucyhuKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29pbnNUb3RhbCcpLmlubmVySFRNTCA9IG47XHJcbiAgfVxyXG5cclxuICBhZGRDb2luKCkge1xyXG4gICAgdGhpcy5jb2lucysrO1xyXG4gICAgdGhpcy5zY29yZSArPSAxMDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2lucycpLmlubmVySFRNTCA9IHRoaXMuY29pbnM7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NvcmUnKS5pbm5lckhUTUwgPSB0aGlzLnNjb3JlO1xyXG5cclxuICAgIGlmICh0aGlzLmNvaW5zID49IHRoaXMuY29pbnNUb3RhbCkge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLmNvaW5zID0gMDtcclxuICAgICAgICB0aGlzLnN0YWdlKys7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhZ2UgPiB0aGlzLmxhc3RTdGFnZSkge1xyXG4gICAgICAgICAgdGhpcy5zdGFnZSA9IDE7XHJcbiAgICAgICAgICB0aGlzLmxvc2VHYW1lKGZhbHNlKVxyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGFnZScpLmlubmVySFRNTCA9IHRoaXMuc3RhZ2U7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvaW5zJykuaW5uZXJIVE1MID0gdGhpcy5jb2lucztcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29pbnNUb3RhbCcpLmlubmVySFRNTCA9IHRoaXMuY29pbnNUb3RhbDtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhZ2UnKS5pbm5lckhUTUwgPSB0aGlzLnN0YWdlO1xyXG4gICAgICAgIHRoaXMubG9hZFN0YWdlKCk7XHJcbiAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkUG93ZXJ1cCgpIHtcclxuICAgIHRoaXMuc2NvcmUgKz0gNTBcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY29yZScpLmlubmVySFRNTCA9IHRoaXMuc2NvcmU7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG93ZXJ1cCcpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgdGhpcy5wb3dlcnVwQWN0aXZlID0gdHJ1ZTtcclxuICAgIHRoaXMucG93ZXJ1cENvdW50ZG93biA9IHRoaXMucG93ZXJ1cER1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlUG93ZXJ1cCgpIHtcclxuICAgIHRoaXMucG93ZXJ1cEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvd2VydXAnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICB9XHJcblxyXG4gIGxvc2VHYW1lKGxvc3QpIHtcclxuXHJcbiAgICB0aGlzLmhpZ2hzY29yZSA9IE1hdGgubWF4KHRoaXMuaGlnaHNjb3JlLCB0aGlzLnNjb3JlKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lb3Zlci1zY29yZScpLmlubmVySFRNTCA9IHRoaXMuc2NvcmU7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZW92ZXItaGlnaHNjb3JlJykuaW5uZXJIVE1MID0gdGhpcy5oaWdoc2NvcmU7XHJcblxyXG4gICAgY29udHJvbHMudW5sb2NrKCk7XHJcbiAgICBpbnN0cnVjdGlvbnMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lb3ZlcicpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lb3Zlci10aXRsZScpLmlubmVySFRNTCA9IGxvc3Q9PT1mYWxzZSA/ICdXaW5uZXIhJyA6ICdHYW1lIE92ZXInO1xyXG4gXHJcblxyXG4gICAgdGhpcy5nYW1lT3ZlciA9IHRydWU7XHJcbiAgICB0aGlzLnN0YWdlID0gMTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkZWx0YSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdob3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgZ2hvc3QgPSB0aGlzLmdob3N0c1tpXTtcclxuICAgICAgZ2hvc3QudXBkYXRlKGRlbHRhKTtcclxuICAgICAgYWRkQm91bmRzKGdob3N0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wb3dlcnVwQWN0aXZlKSB7XHJcbiAgICAgIHRoaXMucG93ZXJ1cENvdW50ZG93biAtPSBkZWx0YTtcclxuICAgICAgaWYgKHRoaXMucG93ZXJ1cENvdW50ZG93biA8PSAwKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVQb3dlcnVwKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XHJcblxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUGF0aFN0cmluZ3MoZmlsZW5hbWUpIHtcclxuICBjb25zdCBiYXNlUGF0aCA9IFwiLi9hc3NldC9za3lib3gvXCI7XHJcbiAgY29uc3QgYmFzZUZpbGVuYW1lID0gYmFzZVBhdGggKyBmaWxlbmFtZTtcclxuICBjb25zdCBmaWxlVHlwZSA9IFwiLnBuZ1wiO1xyXG4gIGNvbnN0IHNpZGVzID0gW1wiZnRcIiwgXCJia1wiLCBcInVwXCIsIFwiZG5cIiwgXCJydFwiLCBcImxmXCJdO1xyXG4gIGNvbnN0IHBhdGhTdGluZ3MgPSBzaWRlcy5tYXAoc2lkZSA9PiB7XHJcbiAgICByZXR1cm4gYmFzZUZpbGVuYW1lICsgXCJfXCIgKyBzaWRlICsgZmlsZVR5cGU7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHBhdGhTdGluZ3M7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlTWF0ZXJpYWxBcnJheShmaWxlbmFtZSkge1xyXG4gIGNvbnN0IHNreWJveEltYWdlcGF0aHMgPSBjcmVhdGVQYXRoU3RyaW5ncyhmaWxlbmFtZSk7XHJcbiAgY29uc3QgbWF0ZXJpYWxBcnJheSA9IHNreWJveEltYWdlcGF0aHMubWFwKGltYWdlID0+IHtcclxuICAgIGxldCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKGltYWdlKTtcclxuICAgIHJldHVybiBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBtYXA6IHRleHR1cmUsIHNpZGU6IFRIUkVFLkJhY2tTaWRlIH0pOyAvLyA8LS0tXHJcbiAgfSk7XHJcbiAgcmV0dXJuIG1hdGVyaWFsQXJyYXk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcblxyXG4gIC8vIENhbWVyYS9yZW5kZXJpbmdcclxuICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gIC8vc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZygweDIyMiwgMCwgNzApO1xyXG5cclxuICAvLyBMaWdodHNcclxuICBsaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoMHhlZWVlZmYsIDB4Nzc3Nzg4LCAwLjc1KTtcclxuICBsaWdodC5wb3NpdGlvbi5zZXQoMC41LCAxLCAwLjc1KTtcclxuICBteVBvaW50TGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGZmZmY5OSwgMS45LCAyNSk7XHJcblxyXG4gIC8vIHNreWJveCBpbml0IChyZXN0IGlzIHNldCB1cCBpbiBnYW1lLmxvYWRTdGFnZSgpKVxyXG4gIG1hdGVyaWFsQ29yb25hID0gY3JlYXRlTWF0ZXJpYWxBcnJheShcImNvcm9uYVwiKTtcclxuICBtYXRlcmlhbFJlZEVjbGlwc2UgPSBjcmVhdGVNYXRlcmlhbEFycmF5KFwicmVkZWNsaXBzZVwiKTtcclxuICBza3lib3hHZW8gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMTAwMDAsIDEwMDAwLCAxMDAwMCk7XHJcblxyXG5cclxuXHJcbiAgaW5zdHJ1Y3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIGNvbnRyb2xzLmxvY2soKTtcclxuXHJcbiAgfSk7XHJcblxyXG4gIHJlc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBnYW1lLmxvYWRTdGFnZSgpO1xyXG4gICAgZ2FtZW92ZXIuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgaW5zdHJ1Y3Rpb25zLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICB9KTtcclxuXHJcbiAgY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignbG9jaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICBpbnN0cnVjdGlvbnMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGJsb2NrZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcbiAgfSk7XHJcblxyXG4gIGNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9jaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICBibG9ja2VyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgaWYgKCFnYW1lLmdhbWVPdmVyKSB7XHJcbiAgICAgIGluc3RydWN0aW9ucy5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gIH0pO1xyXG5cclxuXHJcbiAgY29uc3Qgb25LZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG4gICAgc3dpdGNoIChldmVudC5jb2RlKSB7XHJcblxyXG4gICAgICBjYXNlICdBcnJvd1VwJzpcclxuICAgICAgY2FzZSAnS2V5Vyc6XHJcbiAgICAgICAgbW92ZUZvcndhcmQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcclxuICAgICAgY2FzZSAnS2V5QSc6XHJcbiAgICAgICAgbW92ZUxlZnQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcclxuICAgICAgY2FzZSAnS2V5Uyc6XHJcbiAgICAgICAgbW92ZUJhY2t3YXJkID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxyXG4gICAgICBjYXNlICdLZXlEJzpcclxuICAgICAgICBtb3ZlUmlnaHQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnU3BhY2UnOlxyXG4gICAgICAgIGlmIChnYW1lLnBvd2VydXBBY3RpdmUpIHtcclxuICAgICAgICAgIGlmICghZmFsbGluZyB8fCB2ZWxvY2l0eS55ID09IDApIHZlbG9jaXR5LnkgPSA1MDtcclxuICAgICAgICAgIGZhbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uS2V5VXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICBzd2l0Y2ggKGV2ZW50LmNvZGUpIHtcclxuXHJcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxyXG4gICAgICBjYXNlICdLZXlXJzpcclxuICAgICAgICBtb3ZlRm9yd2FyZCA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcclxuICAgICAgY2FzZSAnS2V5QSc6XHJcbiAgICAgICAgbW92ZUxlZnQgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XHJcbiAgICAgIGNhc2UgJ0tleVMnOlxyXG4gICAgICAgIG1vdmVCYWNrd2FyZCA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XHJcbiAgICAgIGNhc2UgJ0tleUQnOlxyXG4gICAgICAgIG1vdmVSaWdodCA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdLZXlQJzpcclxuICAgICAgICAgIGdhbWUubG9hZFN0YWdlKCk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICB9XHJcblxyXG4gIH07XHJcblxyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24pO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb25LZXlVcCk7XHJcblxyXG4gIHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSwgbmV3IFRIUkVFLlZlY3RvcjMoMCwgLSAxLCAwKSwgMCwgMTApO1xyXG5cclxuICBnYW1lLmxvYWRTdGFnZSgpXHJcblxyXG4gIC8vIHJlbmRlcmVyXHJcbiAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KTtcclxuICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gIC8vcmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgLy8gcmVzaXplXHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcclxuXHJcbiAgLy8gYW5pbWF0ZVxyXG4gIGFuaW1hdGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XHJcblxyXG4gIGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcclxuICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gIG1pbmltYXAub25SZXNpemUoKVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhbmltYXRlKCkge1xyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcblxyXG4gIGlmIChnYW1lLmdhbWVPdmVyKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcblxyXG4gIGlmIChjb250cm9scy5pc0xvY2tlZCA9PT0gdHJ1ZSkge1xyXG5cclxuICAgIC8vcmF5Y2FzdGVyLnJheS5vcmlnaW4uY29weSggY29udHJvbHMuZ2V0T2JqZWN0KCkucG9zaXRpb24gKTtcclxuICAgIC8vcmF5Y2FzdGVyLnJheS5vcmlnaW4ueSArPSAxO1xyXG5cclxuICAgIC8vY29uc3QgaW50ZXJzZWN0aW9ucyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKCBvYmplY3RzLCBmYWxzZSApO1xyXG5cclxuICAgIC8vY29uc3Qgb25PYmplY3QgPSBpbnRlcnNlY3Rpb25zLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgY29uc3QgZGVsdGEgPSAodGltZSAtIHByZXZUaW1lKSAvIDEwMDA7XHJcblxyXG4gICAgdmVsb2NpdHkueCAtPSB2ZWxvY2l0eS54ICogMTAuMCAqIGRlbHRhO1xyXG4gICAgdmVsb2NpdHkueiAtPSB2ZWxvY2l0eS56ICogMTAuMCAqIGRlbHRhO1xyXG5cclxuICAgIGlmIChmYWxsaW5nKSB7XHJcbiAgICAgIHZlbG9jaXR5LnkgLT0gOS44ICogMTAuMCAqIGRlbHRhOyAvLyAxMDAuMCA9IG1hc3NcclxuICAgIH1cclxuXHJcbiAgICBkaXJlY3Rpb24ueiA9IE51bWJlcihtb3ZlRm9yd2FyZCkgLSBOdW1iZXIobW92ZUJhY2t3YXJkKTtcclxuICAgIGRpcmVjdGlvbi54ID0gTnVtYmVyKG1vdmVSaWdodCkgLSBOdW1iZXIobW92ZUxlZnQpO1xyXG4gICAgZGlyZWN0aW9uLm5vcm1hbGl6ZSgpOyAvLyB0aGlzIGVuc3VyZXMgY29uc2lzdGVudCBtb3ZlbWVudHMgaW4gYWxsIGRpcmVjdGlvbnNcclxuXHJcbiAgICBpZiAobW92ZUZvcndhcmQgfHwgbW92ZUJhY2t3YXJkKSB2ZWxvY2l0eS56IC09IGRpcmVjdGlvbi56ICogcGxheWVyU3BlZWQgKiBkZWx0YTtcclxuICAgIGlmIChtb3ZlTGVmdCB8fCBtb3ZlUmlnaHQpIHZlbG9jaXR5LnggLT0gZGlyZWN0aW9uLnggKiBwbGF5ZXJTcGVlZCAqIGRlbHRhO1xyXG5cclxuICAgIGxldCBsYXN0U2FmZVBvc2l0aW9uID0gY29udHJvbHMuZ2V0T2JqZWN0KCkucG9zaXRpb24uY2xvbmUoKTtcclxuXHJcbiAgICBjb250cm9scy5tb3ZlUmlnaHQoLSB2ZWxvY2l0eS54ICogZGVsdGEpO1xyXG4gICAgY29udHJvbHMubW92ZUZvcndhcmQoLSB2ZWxvY2l0eS56ICogZGVsdGEpO1xyXG4gICAgY29udHJvbHMuZ2V0T2JqZWN0KCkucG9zaXRpb24ueSArPSAodmVsb2NpdHkueSAqIGRlbHRhKTsgLy8gbmV3IGJlaGF2aW9yXHJcblxyXG5cclxuXHJcbiAgICAvLyBjaGVjayBjb2xsaXNpb25cclxuICAgIGZhbGxpbmcgPSAhZGV0ZWN0Q29sbGlzaW9ucyhjb250cm9scywgbGFzdFNhZmVQb3NpdGlvbiwgdmVsb2NpdHksIHNjZW5lLCBnYW1lLCBvYmplY3RzKVxyXG5cclxuICAgIC8vIGZhbGxpbmdcclxuICAgIGlmIChjb250cm9scy5nZXRPYmplY3QoKS5wb3NpdGlvbi55IDwgNi41KSB7XHJcbiAgICAgIHZlbG9jaXR5LnkgPSAwO1xyXG4gICAgICBjb250cm9scy5nZXRPYmplY3QoKS5wb3NpdGlvbi55ID0gNi41O1xyXG4gICAgICBmYWxsaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWFrZSBwb3dlcnVwIHRleHQgcmFpbmJvd1xyXG4gICAgaWYgKGdhbWUucG93ZXJ1cEFjdGl2ZSkge1xyXG4gICAgICBsZXQgcG93ZXJ1cFRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG93ZXJ1cCcpO1xyXG4gICAgICBwb3dlcnVwVGV4dC5zdHlsZS5jb2xvciA9ICdoc2woJyArIHRpbWUgKyAnLCAxMDAlLCA1MCUpJztcclxuICAgIH1cclxuXHJcbiAgICBnYW1lLnVwZGF0ZShkZWx0YSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLy8gbXkgcG9pbnQgbGlnaHRcclxuICBteVBvaW50TGlnaHQucG9zaXRpb24ueCA9IGNvbnRyb2xzLmdldE9iamVjdCgpLnBvc2l0aW9uLng7XHJcbiAgbXlQb2ludExpZ2h0LnBvc2l0aW9uLnkgPSBjb250cm9scy5nZXRPYmplY3QoKS5wb3NpdGlvbi55O1xyXG4gIG15UG9pbnRMaWdodC5wb3NpdGlvbi56ID0gY29udHJvbHMuZ2V0T2JqZWN0KCkucG9zaXRpb24uejtcclxuXHJcbiAgcHJldlRpbWUgPSB0aW1lO1xyXG5cclxuICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG5cclxuICBsZXQgY2FtRGlyZWN0aW9uID0gY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKCBuZXcgVEhSRUUuVmVjdG9yMygpICk7XHJcbiAgbGV0IHRoZXRhID0gTWF0aC5hdGFuMihjYW1EaXJlY3Rpb24ueCwgY2FtRGlyZWN0aW9uLnopO1xyXG4gIG1pbmltYXAudXBkYXRlKHRoZXRhKVxyXG59XHJcblxyXG5leHBvcnQgeyBpbml0IH07IiwiY2xhc3MgTWluaW1hcCB7XHJcbiAgY29uc3RydWN0b3Iob2JqZWN0cywgY29udHJvbHMpIHtcclxuICAgIHRoaXMub2JqZWN0cyA9IG9iamVjdHM7XHJcbiAgICB0aGlzLmNvbnRyb2xzID0gY29udHJvbHM7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBtaW5pbWFwIGluIGNhbnZhc1xyXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWluaW1hcCcpO1xyXG4gICAgbGV0IGdyZWF0ZXIgPSBNYXRoLm1heCh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxyXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSBncmVhdGVyICogMC4yNTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGdyZWF0ZXIgKiAwLjI1O1xyXG4gICAgdGhpcy56b29tID0gZ3JlYXRlciAvIDU1MDtcclxuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICB0aGlzLmZvbGxvd1ggPSAwO1xyXG4gICAgdGhpcy5mb2xsb3daID0gMDtcclxuICAgIFxyXG4gICAgdGhpcy5sYXN0UHggPSAwXHJcbiAgICB0aGlzLmxhc3RQeiA9IDBcclxuICAgIHRoaXMuZWF0VGltZSA9IDBcclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge1xyXG4gICAgXHJcbiAgICBsZXQgZ3JlYXRlciA9IE1hdGgubWF4KHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpXHJcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IGdyZWF0ZXIgKiAwLjI7XHJcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBncmVhdGVyICogMC4yO1xyXG4gICAgdGhpcy56b29tID0gZ3JlYXRlciAvIDU1MDtcclxuICB9XHJcblxyXG4gIFgoeCkge1xyXG5cclxuICAgIHJldHVybih4IC0gdGhpcy5mb2xsb3dYKSAqIHRoaXMuem9vbSArIHRoaXMuY2FudmFzLndpZHRoIC8gMlxyXG4gIH1cclxuICBaKHopIHtcclxuXHJcbiAgICByZXR1cm4oeiAtIHRoaXMuZm9sbG93WikgICogdGhpcy56b29tICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMlxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKHRoZXRhKSB7XHJcbiAgICAvLyBDbGVhciB0aGUgY2FudmFzXHJcbiAgICBsZXQgY3R4ID0gdGhpcy5jdHg7XHJcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgbGV0IHB4ID0gdGhpcy5jb250cm9scy5nZXRPYmplY3QoKS5wb3NpdGlvbi54XHJcbiAgICBsZXQgcHogPSB0aGlzLmNvbnRyb2xzLmdldE9iamVjdCgpLnBvc2l0aW9uLnpcclxuICAgIHRoaXMuZGlzdGFuY2VUcmF2ZWxsZWQgPSBNYXRoLnNxcnQoTWF0aC5wb3cocHggLSB0aGlzLmxhc3RQeCwgMikgKyBNYXRoLnBvdyhweiAtIHRoaXMubGFzdFB6LCAyKSlcclxuICAgIHRoaXMubGFzdFB4ID0gcHhcclxuICAgIHRoaXMubGFzdFB6ID0gcHpcclxuICAgIHRoaXMuZm9sbG93WCA9IChweCAtIHRoaXMuZm9sbG93WCkgKiAwLjEgKyB0aGlzLmZvbGxvd1g7XHJcbiAgICB0aGlzLmZvbGxvd1ogPSAocHogLSB0aGlzLmZvbGxvd1opICogMC4xICsgdGhpcy5mb2xsb3daO1xyXG4gICAgZm9yIChsZXQgb2JqIG9mIHRoaXMub2JqZWN0cykge1xyXG4gICAgICBsZXQgY29sID0gb2JqLmJvdW5kc1xyXG4gICAgICBsZXQgeDEgPSB0aGlzLlgoY29sLnhNaW4pXHJcbiAgICAgIGxldCB6MSA9IHRoaXMuWihjb2wuek1pbilcclxuICAgICAgbGV0IHcgPSAoY29sLnhNYXggLSBjb2wueE1pbikgKiB0aGlzLnpvb21cclxuICAgICAgbGV0IGggPSAoY29sLnpNYXggLSBjb2wuek1pbikgKiB0aGlzLnpvb21cclxuXHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvYmouZmlsbFN0eWxlXHJcbiAgICAgIGN0eC5maWxsUmVjdCh4MSwgejEsIHcsIGgpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRHJhdyB0aGUgcGFjLW1hbiAocGxheWVyKVxyXG4gICAgbGV0IHBteCA9IHRoaXMuWChweClcclxuICAgIGxldCBwbXogPSB0aGlzLloocHopXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gJyNmZmZmMDAnXHJcbiAgICBjdHgubW92ZVRvKHBteCwgcG16KVxyXG4gICAgdGhpcy5lYXRUaW1lICs9IHRoaXMuZGlzdGFuY2VUcmF2ZWxsZWRcclxuICAgIHRoZXRhID0gKE1hdGguUEkvMiAtIHRoZXRhKVxyXG4gICAgbGV0IG5vbSA9IDAuNSArIE1hdGguc2luKHRoaXMuZWF0VGltZSAqIDAuNykgKiBNYXRoLlBJIC8gNFxyXG4gICAgY3R4LmFyYyhwbXgsIHBteiwgNCAqIHRoaXMuem9vbSwgdGhldGEgKyBub20gLCBNYXRoLlBJICogMiArIHRoZXRhIC0gbm9tLCBmYWxzZSlcclxuICAgIGN0eC5saW5lVG8ocG14LCBwbXopXHJcbiAgICBjdHguZmlsbCgpXHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1pbmltYXA7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiVEhSRUUiLCJTVExMb2FkZXIiLCJtYW5hZ2VyIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJsb2FkIiwidXJsIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJzY29wZSIsImxvYWRlciIsIkZpbGVMb2FkZXIiLCJzZXRSZXNwb25zZVR5cGUiLCJ0ZXh0IiwicGFyc2UiLCJiaW5EYXRhIiwiZW5zdXJlQmluYXJ5IiwicmVhZGVyIiwiRGF0YVZpZXciLCJnZXRVaW50MzIiLCJieXRlTGVuZ3RoIiwic29saWQiLCJnZXRVaW50OCIsImlzQmluYXJ5IiwicGFyc2VCaW5hcnkiLCJwYXJzZUFTQ0lJIiwiZW5zdXJlU3RyaW5nIiwiciIsImciLCJiIiwiY29sb3JzIiwiZGVmYXVsdFIiLCJkZWZhdWx0RyIsImRlZmF1bHRCIiwiYWxwaGEiLCJmYWNlcyIsImhhc0NvbG9ycyIsImdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJ2ZXJ0aWNlcyIsIm5vcm1hbHMiLCJmYWNlIiwic3RhcnQiLCJub3JtYWxYIiwiZ2V0RmxvYXQzMiIsIm5vcm1hbFkiLCJub3JtYWxaIiwicGFja2VkQ29sb3IiLCJnZXRVaW50MTYiLCJ2ZXJ0ZXhzdGFydCIsImFkZEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJBcnJheSIsInBhdHRlcm5GYWNlIiwicGF0dGVybk5vcm1hbCIsInBhdHRlcm5WZXJ0ZXgiLCJub3JtYWwiLCJWZWN0b3IzIiwiZXhlYyIsIngiLCJwYXJzZUZsb2F0IiwieSIsInoiLCJidWYiLCJhcnJheV9idWZmZXIiLCJVaW50OEFycmF5Iiwic3RyQXJyYXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwiYnVmZmVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwiUkVWSVNJT04iLCJNT1VTRSIsIkxFRlQiLCJNSURETEUiLCJSSUdIVCIsIlJPVEFURSIsIkRPTExZIiwiUEFOIiwiVE9VQ0giLCJET0xMWV9QQU4iLCJET0xMWV9ST1RBVEUiLCJDdWxsRmFjZU5vbmUiLCJDdWxsRmFjZUJhY2siLCJDdWxsRmFjZUZyb250IiwiQ3VsbEZhY2VGcm9udEJhY2siLCJCYXNpY1NoYWRvd01hcCIsIlBDRlNoYWRvd01hcCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJWU01TaGFkb3dNYXAiLCJGcm9udFNpZGUiLCJCYWNrU2lkZSIsIkRvdWJsZVNpZGUiLCJGbGF0U2hhZGluZyIsIlNtb290aFNoYWRpbmciLCJOb0JsZW5kaW5nIiwiTm9ybWFsQmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwiU3VidHJhY3RpdmVCbGVuZGluZyIsIk11bHRpcGx5QmxlbmRpbmciLCJDdXN0b21CbGVuZGluZyIsIkFkZEVxdWF0aW9uIiwiU3VidHJhY3RFcXVhdGlvbiIsIlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIiwiTWluRXF1YXRpb24iLCJNYXhFcXVhdGlvbiIsIlplcm9GYWN0b3IiLCJPbmVGYWN0b3IiLCJTcmNDb2xvckZhY3RvciIsIk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IiLCJTcmNBbHBoYUZhY3RvciIsIk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IiLCJEc3RBbHBoYUZhY3RvciIsIk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IiLCJEc3RDb2xvckZhY3RvciIsIk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJOb1RvbmVNYXBwaW5nIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJDdXN0b21Ub25lTWFwcGluZyIsIlVWTWFwcGluZyIsIkN1YmVSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVSZWZyYWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIiwiRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nIiwiUmVwZWF0V3JhcHBpbmciLCJDbGFtcFRvRWRnZVdyYXBwaW5nIiwiTWlycm9yZWRSZXBlYXRXcmFwcGluZyIsIk5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsIk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciIsIkxpbmVhck1pcG1hcExpbmVhckZpbHRlciIsIkxpbmVhck1pcE1hcExpbmVhckZpbHRlciIsIlVuc2lnbmVkQnl0ZVR5cGUiLCJCeXRlVHlwZSIsIlNob3J0VHlwZSIsIlVuc2lnbmVkU2hvcnRUeXBlIiwiSW50VHlwZSIsIlVuc2lnbmVkSW50VHlwZSIsIkZsb2F0VHlwZSIsIkhhbGZGbG9hdFR5cGUiLCJVbnNpZ25lZFNob3J0NDQ0NFR5cGUiLCJVbnNpZ25lZFNob3J0NTU1MVR5cGUiLCJVbnNpZ25lZEludDI0OFR5cGUiLCJBbHBoYUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQkFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJMdW1pbmFuY2VBbHBoYUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUmVkSW50ZWdlckZvcm1hdCIsIlJHRm9ybWF0IiwiUkdJbnRlZ2VyRm9ybWF0IiwiUkdCQUludGVnZXJGb3JtYXQiLCJSR0JfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQzX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCIsIlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JfRVRDMV9Gb3JtYXQiLCJSR0JfRVRDMl9Gb3JtYXQiLCJSR0JBX0VUQzJfRUFDX0Zvcm1hdCIsIlJHQkFfQVNUQ180eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NF9Gb3JtYXQiLCJSR0JBX0FTVENfNXg1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfOHg1X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4OF9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4NV9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4OF9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMl9Gb3JtYXQiLCJSR0JBX0JQVENfRm9ybWF0IiwiTG9vcE9uY2UiLCJMb29wUmVwZWF0IiwiTG9vcFBpbmdQb25nIiwiSW50ZXJwb2xhdGVEaXNjcmV0ZSIsIkludGVycG9sYXRlTGluZWFyIiwiSW50ZXJwb2xhdGVTbW9vdGgiLCJaZXJvQ3VydmF0dXJlRW5kaW5nIiwiWmVyb1Nsb3BlRW5kaW5nIiwiV3JhcEFyb3VuZEVuZGluZyIsIk5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSIsIkFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlIiwiVHJpYW5nbGVzRHJhd01vZGUiLCJUcmlhbmdsZVN0cmlwRHJhd01vZGUiLCJUcmlhbmdsZUZhbkRyYXdNb2RlIiwiTGluZWFyRW5jb2RpbmciLCJzUkdCRW5jb2RpbmciLCJCYXNpY0RlcHRoUGFja2luZyIsIlJHQkFEZXB0aFBhY2tpbmciLCJUYW5nZW50U3BhY2VOb3JtYWxNYXAiLCJPYmplY3RTcGFjZU5vcm1hbE1hcCIsIlplcm9TdGVuY2lsT3AiLCJLZWVwU3RlbmNpbE9wIiwiUmVwbGFjZVN0ZW5jaWxPcCIsIkluY3JlbWVudFN0ZW5jaWxPcCIsIkRlY3JlbWVudFN0ZW5jaWxPcCIsIkluY3JlbWVudFdyYXBTdGVuY2lsT3AiLCJEZWNyZW1lbnRXcmFwU3RlbmNpbE9wIiwiSW52ZXJ0U3RlbmNpbE9wIiwiTmV2ZXJTdGVuY2lsRnVuYyIsIkxlc3NTdGVuY2lsRnVuYyIsIkVxdWFsU3RlbmNpbEZ1bmMiLCJMZXNzRXF1YWxTdGVuY2lsRnVuYyIsIkdyZWF0ZXJTdGVuY2lsRnVuYyIsIk5vdEVxdWFsU3RlbmNpbEZ1bmMiLCJHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYyIsIkFsd2F5c1N0ZW5jaWxGdW5jIiwiU3RhdGljRHJhd1VzYWdlIiwiRHluYW1pY0RyYXdVc2FnZSIsIlN0cmVhbURyYXdVc2FnZSIsIlN0YXRpY1JlYWRVc2FnZSIsIkR5bmFtaWNSZWFkVXNhZ2UiLCJTdHJlYW1SZWFkVXNhZ2UiLCJTdGF0aWNDb3B5VXNhZ2UiLCJEeW5hbWljQ29weVVzYWdlIiwiU3RyZWFtQ29weVVzYWdlIiwiR0xTTDEiLCJHTFNMMyIsIl9TUkdCQUZvcm1hdCIsIkV2ZW50RGlzcGF0Y2hlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsImhhc0V2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGlzdGVuZXJBcnJheSIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsImFycmF5Iiwic2xpY2UiLCJsIiwiX2x1dCIsIl9zZWVkIiwiREVHMlJBRCIsIk1hdGgiLCJQSSIsIlJBRDJERUciLCJnZW5lcmF0ZVVVSUQiLCJkMCIsInJhbmRvbSIsImQxIiwiZDIiLCJkMyIsInRvVXBwZXJDYXNlIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJldWNsaWRlYW5Nb2R1bG8iLCJtIiwibGVycCIsInQiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsInBvdyIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJmbG9vciIsIk1hdGhVdGlscyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIm1hcExpbmVhciIsImExIiwiYTIiLCJiMSIsImIyIiwiaW52ZXJzZUxlcnAiLCJkYW1wIiwibGFtYmRhIiwiZHQiLCJleHAiLCJwaW5ncG9uZyIsImFicyIsInNtb290aHN0ZXAiLCJzbW9vdGhlcnN0ZXAiLCJyYW5kSW50IiwibG93IiwiaGlnaCIsInJhbmRGbG9hdCIsInJhbmRGbG9hdFNwcmVhZCIsInJhbmdlIiwic2VlZGVkUmFuZG9tIiwicyIsImRlZ1RvUmFkIiwiZGVncmVlcyIsInJhZFRvRGVnIiwicmFkaWFucyIsInNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIiLCJxIiwiYyIsIm9yZGVyIiwiY29zIiwic2luIiwiYzIiLCJzMiIsImMxMyIsInMxMyIsImMxXzMiLCJzMV8zIiwiYzNfMSIsInMzXzEiLCJzZXQiLCJjb25zb2xlIiwid2FybiIsIlZlY3RvcjIiLCJ3aWR0aCIsImhlaWdodCIsInNldFNjYWxhciIsInNjYWxhciIsInNldFgiLCJzZXRZIiwic2V0Q29tcG9uZW50IiwiZ2V0Q29tcG9uZW50IiwiY2xvbmUiLCJjb3B5IiwidiIsImFkZCIsInciLCJhZGRWZWN0b3JzIiwiYWRkU2NhbGFyIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViIiwic3ViVmVjdG9ycyIsInN1YlNjYWxhciIsIm11bHRpcGx5IiwibXVsdGlwbHlTY2FsYXIiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJlbGVtZW50cyIsImNsYW1wU2NhbGFyIiwibWluVmFsIiwibWF4VmFsIiwiY2xhbXBMZW5ndGgiLCJyb3VuZCIsInJvdW5kVG9aZXJvIiwibmVnYXRlIiwiZG90IiwiY3Jvc3MiLCJsZW5ndGhTcSIsInNxcnQiLCJtYW5oYXR0YW5MZW5ndGgiLCJub3JtYWxpemUiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2VUbyIsImRpc3RhbmNlVG9TcXVhcmVkIiwiZHgiLCJkeSIsIm1hbmhhdHRhbkRpc3RhbmNlVG8iLCJzZXRMZW5ndGgiLCJsZXJwVmVjdG9ycyIsInYxIiwidjIiLCJlcXVhbHMiLCJmcm9tQXJyYXkiLCJvZmZzZXQiLCJ0b0FycmF5IiwiZnJvbUJ1ZmZlckF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImdldFgiLCJnZXRZIiwicm90YXRlQXJvdW5kIiwiY2VudGVyIiwiaXRlcmF0b3IiLCJpc1ZlY3RvcjIiLCJNYXRyaXgzIiwiYXJndW1lbnRzIiwiZXJyb3IiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4M0NvbHVtbiIsInNldEZyb21NYXRyaXg0IiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYWUiLCJiZSIsImExMSIsImExMiIsImExMyIsImEyMSIsImEyMiIsImEyMyIsImEzMSIsImEzMiIsImEzMyIsImIxMSIsImIxMiIsImIxMyIsImIyMSIsImIyMiIsImIyMyIsImIzMSIsImIzMiIsImIzMyIsImRldGVybWluYW50IiwiZiIsImgiLCJpbnZlcnQiLCJ0MTEiLCJ0MTIiLCJ0MTMiLCJkZXQiLCJkZXRJbnYiLCJ0cmFuc3Bvc2UiLCJ0bXAiLCJnZXROb3JtYWxNYXRyaXgiLCJtYXRyaXg0IiwidHJhbnNwb3NlSW50b0FycmF5Iiwic2V0VXZUcmFuc2Zvcm0iLCJ0eCIsInR5Iiwic3giLCJzeSIsInJvdGF0aW9uIiwiY3giLCJjeSIsInNjYWxlIiwicm90YXRlIiwidGhldGEiLCJ0cmFuc2xhdGUiLCJtYXRyaXgiLCJhcnJheU5lZWRzVWludDMyIiwiaXNNYXRyaXgzIiwiVFlQRURfQVJSQVlTIiwiSW50OEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJnZXRUeXBlZEFycmF5IiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZSIsIl9jb2xvcktleXdvcmRzIiwiX2hzbEEiLCJfaHNsQiIsImh1ZTJyZ2IiLCJwIiwiU1JHQlRvTGluZWFyIiwiTGluZWFyVG9TUkdCIiwiQ29sb3IiLCJzZXRSR0IiLCJpc0NvbG9yIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJoZXgiLCJzZXRIU0wiLCJoYW5kbGVBbHBoYSIsInN0cmluZyIsImNvbG9yIiwiY29tcG9uZW50cyIsInBhcnNlSW50Iiwic2l6ZSIsImNoYXJBdCIsInNldENvbG9yTmFtZSIsInRvTG93ZXJDYXNlIiwiY29weVNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiY29udmVydExpbmVhclRvU1JHQiIsImdldEhleCIsImdldEhleFN0cmluZyIsImdldEhTTCIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJkZWx0YSIsImdldFN0eWxlIiwib2Zmc2V0SFNMIiwiYWRkQ29sb3JzIiwiY29sb3IxIiwiY29sb3IyIiwibGVycENvbG9ycyIsImxlcnBIU0wiLCJnZXRaIiwibm9ybWFsaXplZCIsInRvSlNPTiIsIl9jYW52YXMiLCJOQU1FUyIsIkltYWdlVXRpbHMiLCJzdGF0aWMiLCJpbWFnZSIsInRlc3QiLCJzcmMiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwiSFRNTEltYWdlRWxlbWVudCIsIkltYWdlQml0bWFwIiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiU291cmNlIiwidXVpZCIsInZlcnNpb24iLCJuZWVkc1VwZGF0ZSIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJpbWFnZXMiLCJvdXRwdXQiLCJBcnJheSIsImlzQXJyYXkiLCJpc0RhdGFUZXh0dXJlIiwic2VyaWFsaXplSW1hZ2UiLCJnZXREYXRhVVJMIiwiaXNTb3VyY2UiLCJ0ZXh0dXJlSWQiLCJUZXh0dXJlIiwiREVGQVVMVF9JTUFHRSIsIm1hcHBpbmciLCJERUZBVUxUX01BUFBJTkciLCJ3cmFwUyIsIndyYXBUIiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwiZm9ybWF0IiwiYW5pc290cm9weSIsImVuY29kaW5nIiwic3VwZXIiLCJtaXBtYXBzIiwiaW50ZXJuYWxGb3JtYXQiLCJyZXBlYXQiLCJtYXRyaXhBdXRvVXBkYXRlIiwiZ2VuZXJhdGVNaXBtYXBzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwidXNlckRhdGEiLCJvblVwZGF0ZSIsImlzUmVuZGVyVGFyZ2V0VGV4dHVyZSIsIm5lZWRzUE1SRU1VcGRhdGUiLCJ1cGRhdGVNYXRyaXgiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImRpc3Bvc2UiLCJ0cmFuc2Zvcm1VdiIsInV2IiwiaXNUZXh0dXJlIiwiVmVjdG9yNCIsInNldFoiLCJzZXRXIiwiYXBwbHlNYXRyaXg0Iiwic2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24iLCJhY29zIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwiZXBzaWxvbiIsImVwc2lsb24yIiwibTExIiwibTEyIiwibTEzIiwibTIxIiwibTIyIiwibTIzIiwibTMxIiwibTMyIiwibTMzIiwieHgiLCJ5eSIsInp6IiwieHkiLCJ4eiIsInl6IiwiZ2V0VyIsImlzVmVjdG9yNCIsIldlYkdMUmVuZGVyVGFyZ2V0IiwiZGVwdGgiLCJzY2lzc29yIiwic2Npc3NvclRlc3QiLCJ2aWV3cG9ydCIsInRleHR1cmUiLCJkZXB0aEJ1ZmZlciIsInN0ZW5jaWxCdWZmZXIiLCJkZXB0aFRleHR1cmUiLCJzYW1wbGVzIiwic2V0U2l6ZSIsImFzc2lnbiIsImlzV2ViR0xSZW5kZXJUYXJnZXQiLCJEYXRhQXJyYXlUZXh0dXJlIiwid3JhcFIiLCJpc0RhdGFBcnJheVRleHR1cmUiLCJXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IiwiaXNXZWJHTEFycmF5UmVuZGVyVGFyZ2V0IiwiRGF0YTNEVGV4dHVyZSIsImlzRGF0YTNEVGV4dHVyZSIsIldlYkdMM0RSZW5kZXJUYXJnZXQiLCJpc1dlYkdMM0RSZW5kZXJUYXJnZXQiLCJXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyIsImlsIiwiaXNXZWJHTE11bHRpcGxlUmVuZGVyVGFyZ2V0cyIsIlF1YXRlcm5pb24iLCJfeCIsIl95IiwiX3oiLCJfdyIsInFhIiwicWIiLCJxbSIsInNsZXJwUXVhdGVybmlvbnMiLCJkc3QiLCJkc3RPZmZzZXQiLCJzcmMwIiwic3JjT2Zmc2V0MCIsInNyYzEiLCJzcmNPZmZzZXQxIiwieDAiLCJ5MCIsInowIiwidzAiLCJ4MSIsInkxIiwiejEiLCJ3MSIsImRpciIsInNxclNpbiIsIk51bWJlciIsIkVQU0lMT04iLCJsZW4iLCJ0RGlyIiwiX29uQ2hhbmdlQ2FsbGJhY2siLCJxdWF0ZXJuaW9uIiwic2V0RnJvbUV1bGVyIiwiZXVsZXIiLCJpc0V1bGVyIiwiX29yZGVyIiwiYzEiLCJjMyIsInMxIiwiczMiLCJzZXRGcm9tQXhpc0FuZ2xlIiwiYXhpcyIsImhhbGZBbmdsZSIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsInRyYWNlIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidkZyb20iLCJ2VG8iLCJhbmdsZVRvIiwicm90YXRlVG93YXJkcyIsInN0ZXAiLCJzbGVycCIsImNvbmp1Z2F0ZSIsIm11bHRpcGx5UXVhdGVybmlvbnMiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJjb3NIYWxmVGhldGEiLCJzcXJTaW5IYWxmVGhldGEiLCJzaW5IYWxmVGhldGEiLCJoYWxmVGhldGEiLCJyYXRpb0EiLCJyYXRpb0IiLCJ1MSIsInNxcnQxdTEiLCJzcXJ0dTEiLCJ1MiIsInUzIiwiX29uQ2hhbmdlIiwiY2FsbGJhY2siLCJpc1F1YXRlcm5pb24iLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiX3F1YXRlcm5pb24kNCIsImFwcGx5QXhpc0FuZ2xlIiwiYXBwbHlOb3JtYWxNYXRyaXgiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3NWZWN0b3JzIiwiYXgiLCJheSIsImF6IiwiYngiLCJieSIsImJ6IiwicHJvamVjdE9uVmVjdG9yIiwiZGVub21pbmF0b3IiLCJwcm9qZWN0T25QbGFuZSIsInBsYW5lTm9ybWFsIiwiX3ZlY3RvciRjIiwicmVmbGVjdCIsImR6Iiwic2V0RnJvbVNwaGVyaWNhbCIsInNldEZyb21TcGhlcmljYWxDb29yZHMiLCJyYWRpdXMiLCJwaGkiLCJzaW5QaGlSYWRpdXMiLCJzZXRGcm9tQ3lsaW5kcmljYWwiLCJzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJzZXRGcm9tTWF0cml4U2NhbGUiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwic3oiLCJyYW5kb21EaXJlY3Rpb24iLCJ1IiwiaXNWZWN0b3IzIiwiQm94MyIsInNldEZyb21BcnJheSIsIm1pblgiLCJtaW5ZIiwibWluWiIsIm1heFgiLCJtYXhZIiwibWF4WiIsInNldEZyb21CdWZmZXJBdHRyaWJ1dGUiLCJzZXRGcm9tUG9pbnRzIiwicG9pbnRzIiwibWFrZUVtcHR5IiwiZXhwYW5kQnlQb2ludCIsInNldEZyb21DZW50ZXJBbmRTaXplIiwiaGFsZlNpemUiLCJfdmVjdG9yJGIiLCJzZXRGcm9tT2JqZWN0Iiwib2JqZWN0IiwicHJlY2lzZSIsImV4cGFuZEJ5T2JqZWN0IiwiYm94IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwidmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsInBvc2l0aW9uIiwiYm91bmRpbmdCb3giLCJjb21wdXRlQm91bmRpbmdCb3giLCJfYm94JDMiLCJ1bmlvbiIsImNoaWxkcmVuIiwiY29udGFpbnNQb2ludCIsImNvbnRhaW5zQm94IiwiZ2V0UGFyYW1ldGVyIiwiaW50ZXJzZWN0c0JveCIsImludGVyc2VjdHNTcGhlcmUiLCJzcGhlcmUiLCJjbGFtcFBvaW50IiwiaW50ZXJzZWN0c1BsYW5lIiwicGxhbmUiLCJjb25zdGFudCIsImludGVyc2VjdHNUcmlhbmdsZSIsInRyaWFuZ2xlIiwiX2NlbnRlciIsIl9leHRlbnRzIiwiX3YwJDIiLCJfdjEkNyIsIl92MiQzIiwiX2YwIiwiX2YxIiwiX2YyIiwiYXhlcyIsInNhdEZvckF4ZXMiLCJfdHJpYW5nbGVOb3JtYWwiLCJkaXN0YW5jZVRvUG9pbnQiLCJnZXRCb3VuZGluZ1NwaGVyZSIsImludGVyc2VjdCIsIl9wb2ludHMiLCJpc0JveDMiLCJfdGVzdEF4aXMiLCJ2MCIsImV4dGVudHMiLCJqIiwicDAiLCJwMSIsInAyIiwiX2JveCQyIiwiX3YxJDYiLCJfdG9GYXJ0aGVzdFBvaW50IiwiX3RvUG9pbnQiLCJTcGhlcmUiLCJvcHRpb25hbENlbnRlciIsIm1heFJhZGl1c1NxIiwicmFkaXVzU3VtIiwiZGVsdGFMZW5ndGhTcSIsImdldEJvdW5kaW5nQm94IiwiZ2V0TWF4U2NhbGVPbkF4aXMiLCJtaXNzaW5nUmFkaXVzSGFsZiIsIl92ZWN0b3IkYSIsIl9zZWdDZW50ZXIiLCJfc2VnRGlyIiwiX2RpZmYiLCJfZWRnZTEiLCJfZWRnZTIiLCJfbm9ybWFsJDEiLCJSYXkiLCJvcmlnaW4iLCJkaXJlY3Rpb24iLCJyYXkiLCJhdCIsImxvb2tBdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsInMwIiwic3FyRGlzdCIsImV4dERldCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImJhY2tmYWNlQ3VsbGluZyIsInNpZ24iLCJEZE4iLCJEZFF4RTIiLCJEZEUxeFEiLCJRZE4iLCJNYXRyaXg0IiwibjE0IiwibjI0IiwibjM0IiwibjQxIiwibjQyIiwibjQzIiwibjQ0IiwiY29weVBvc2l0aW9uIiwic2V0RnJvbU1hdHJpeDMiLCJtYWtlQmFzaXMiLCJleHRyYWN0Um90YXRpb24iLCJzY2FsZVgiLCJfdjEkNSIsInNjYWxlWSIsInNjYWxlWiIsIm1ha2VSb3RhdGlvbkZyb21FdWxlciIsImFmIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJjb21wb3NlIiwiX3plcm8iLCJfb25lIiwiZXllIiwidXAiLCJhMTQiLCJhMjQiLCJhMzQiLCJhNDEiLCJhNDIiLCJhNDMiLCJhNDQiLCJiMTQiLCJiMjQiLCJiMzQiLCJiNDEiLCJiNDIiLCJiNDMiLCJiNDQiLCJzZXRQb3NpdGlvbiIsInQxNCIsInNjYWxlWFNxIiwic2NhbGVZU3EiLCJzY2FsZVpTcSIsIm1ha2VUcmFuc2xhdGlvbiIsIm1ha2VSb3RhdGlvblgiLCJtYWtlUm90YXRpb25ZIiwibWFrZVJvdGF0aW9uWiIsIm1ha2VSb3RhdGlvbkF4aXMiLCJtYWtlU2NhbGUiLCJtYWtlU2hlYXIiLCJ5eCIsInp4IiwienkiLCJ4MiIsInkyIiwiejIiLCJ3eCIsInd5Iiwid3oiLCJkZWNvbXBvc2UiLCJfbTEkMiIsImludlNYIiwiaW52U1kiLCJpbnZTWiIsIm1ha2VQZXJzcGVjdGl2ZSIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5lYXIiLCJmYXIiLCJtYWtlT3J0aG9ncmFwaGljIiwiaXNNYXRyaXg0IiwiX21hdHJpeCQxIiwiX3F1YXRlcm5pb24kMyIsIkV1bGVyIiwiRGVmYXVsdE9yZGVyIiwiYXNpbiIsInNldEZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJSb3RhdGlvbk9yZGVycyIsIkxheWVycyIsIm1hc2siLCJjaGFubmVsIiwiZW5hYmxlIiwiZW5hYmxlQWxsIiwidG9nZ2xlIiwiZGlzYWJsZSIsImRpc2FibGVBbGwiLCJsYXllcnMiLCJpc0VuYWJsZWQiLCJfb2JqZWN0M0RJZCIsIl92MSQ0IiwiX3ExIiwiX20xJDEiLCJfdGFyZ2V0IiwiX3Bvc2l0aW9uJDMiLCJfc2NhbGUkMiIsIl9xdWF0ZXJuaW9uJDIiLCJfeEF4aXMiLCJfeUF4aXMiLCJfekF4aXMiLCJfYWRkZWRFdmVudCIsIl9yZW1vdmVkRXZlbnQiLCJPYmplY3QzRCIsInBhcmVudCIsIkRlZmF1bHRVcCIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJtb2RlbFZpZXdNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJEZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ2aXNpYmxlIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJhbmltYXRpb25zIiwib25CZWZvcmVSZW5kZXIiLCJvbkFmdGVyUmVuZGVyIiwic2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJzZXRSb3RhdGlvbkZyb21NYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwicm90YXRlT25BeGlzIiwicm90YXRlT25Xb3JsZEF4aXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJ0cmFuc2xhdGVPbkF4aXMiLCJkaXN0YW5jZSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsImxvY2FsVG9Xb3JsZCIsIndvcmxkVG9Mb2NhbCIsImlzQ2FtZXJhIiwiaXNMaWdodCIsImlzT2JqZWN0M0QiLCJyZW1vdmVGcm9tUGFyZW50IiwiY2xlYXIiLCJhdHRhY2giLCJnZXRPYmplY3RCeUlkIiwiZ2V0T2JqZWN0QnlQcm9wZXJ0eSIsImdldE9iamVjdEJ5TmFtZSIsImdldFdvcmxkUG9zaXRpb24iLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2UiLCJ0cmF2ZXJzZVZpc2libGUiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiZm9yY2UiLCJ1cGRhdGVQYXJlbnRzIiwidXBkYXRlQ2hpbGRyZW4iLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwic2hhcGVzIiwic2tlbGV0b25zIiwibm9kZXMiLCJzZXJpYWxpemUiLCJsaWJyYXJ5IiwiaXNJbnN0YW5jZWRNZXNoIiwiaW5zdGFuY2VNYXRyaXgiLCJpbnN0YW5jZUNvbG9yIiwiaXNTY2VuZSIsImJhY2tncm91bmQiLCJlbnZpcm9ubWVudCIsImlzTWVzaCIsImlzTGluZSIsImlzUG9pbnRzIiwicGFyYW1ldGVycyIsInNoYXBlIiwiaXNTa2lubmVkTWVzaCIsImJpbmRNb2RlIiwiYmluZE1hdHJpeCIsInNrZWxldG9uIiwibWF0ZXJpYWwiLCJ1dWlkcyIsImFuaW1hdGlvbiIsImV4dHJhY3RGcm9tQ2FjaGUiLCJjYWNoZSIsInZhbHVlcyIsInJlY3Vyc2l2ZSIsImNoaWxkIiwiX3YwJDEiLCJfdjEkMyIsIl92MiQyIiwiX3YzJDEiLCJfdmFiIiwiX3ZhYyIsIl92YmMiLCJfdmFwIiwiX3ZicCIsIl92Y3AiLCJUcmlhbmdsZSIsInRhcmdldExlbmd0aFNxIiwiZG90MDAiLCJkb3QwMSIsImRvdDAyIiwiZG90MTEiLCJkb3QxMiIsImRlbm9tIiwiaW52RGVub20iLCJnZXRCYXJ5Y29vcmQiLCJwMyIsInV2MSIsInV2MiIsInV2MyIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiaTAiLCJpMSIsImkyIiwic2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMiLCJnZXRBcmVhIiwiZ2V0TWlkcG9pbnQiLCJnZXROb3JtYWwiLCJnZXRQbGFuZSIsInNldEZyb21Db3BsYW5hclBvaW50cyIsImdldFVWIiwiaXNGcm9udEZhY2luZyIsImQ0IiwidmMiLCJkNSIsImQ2IiwidmIiLCJ2YSIsIm1hdGVyaWFsSWQiLCJNYXRlcmlhbCIsImZvZyIsImJsZW5kaW5nIiwic2lkZSIsInZlcnRleENvbG9ycyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJkZXB0aEZ1bmMiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwic3RlbmNpbFdyaXRlTWFzayIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jTWFzayIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbFdyaXRlIiwiY2xpcHBpbmdQbGFuZXMiLCJjbGlwSW50ZXJzZWN0aW9uIiwiY2xpcFNoYWRvd3MiLCJzaGFkb3dTaWRlIiwiY29sb3JXcml0ZSIsInByZWNpc2lvbiIsInBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiZGl0aGVyaW5nIiwiYWxwaGFUb0NvdmVyYWdlIiwicHJlbXVsdGlwbGllZEFscGhhIiwidG9uZU1hcHBlZCIsIl9hbHBoYVRlc3QiLCJhbHBoYVRlc3QiLCJvbkJ1aWxkIiwib25CZWZvcmVDb21waWxlIiwiY3VzdG9tUHJvZ3JhbUNhY2hlS2V5Iiwic2V0VmFsdWVzIiwibmV3VmFsdWUiLCJmbGF0U2hhZGluZyIsImN1cnJlbnRWYWx1ZSIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsInNoZWVuIiwic2hlZW5Db2xvciIsInNoZWVuUm91Z2huZXNzIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic3BlY3VsYXJJbnRlbnNpdHkiLCJzcGVjdWxhckNvbG9yIiwic2hpbmluZXNzIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0TWFwIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwIiwiY2xlYXJjb2F0Tm9ybWFsTWFwIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJtYXRjYXAiLCJhbHBoYU1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5IiwiYnVtcE1hcCIsImJ1bXBTY2FsZSIsIm5vcm1hbE1hcCIsIm5vcm1hbE1hcFR5cGUiLCJub3JtYWxTY2FsZSIsImRpc3BsYWNlbWVudE1hcCIsImRpc3BsYWNlbWVudFNjYWxlIiwiZGlzcGxhY2VtZW50QmlhcyIsInJvdWdobmVzc01hcCIsIm1ldGFsbmVzc01hcCIsImVtaXNzaXZlTWFwIiwic3BlY3VsYXJNYXAiLCJzcGVjdWxhckludGVuc2l0eU1hcCIsInNwZWN1bGFyQ29sb3JNYXAiLCJlbnZNYXAiLCJjb21iaW5lIiwiZW52TWFwSW50ZW5zaXR5IiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwiZ3JhZGllbnRNYXAiLCJ0cmFuc21pc3Npb24iLCJ0cmFuc21pc3Npb25NYXAiLCJ0aGlja25lc3MiLCJ0aGlja25lc3NNYXAiLCJhdHRlbnVhdGlvbkRpc3RhbmNlIiwiYXR0ZW51YXRpb25Db2xvciIsInNpemVBdHRlbnVhdGlvbiIsImxpbmV3aWR0aCIsImRhc2hTaXplIiwiZ2FwU2l6ZSIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsIndpcmVmcmFtZUxpbmVjYXAiLCJ3aXJlZnJhbWVMaW5lam9pbiIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsImlzTWF0ZXJpYWwiLCJmcm9tVHlwZSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsIl92ZWN0b3IkOSIsIl92ZWN0b3IyJDEiLCJpdGVtU2l6ZSIsIlR5cGVFcnJvciIsInVzYWdlIiwidXBkYXRlUmFuZ2UiLCJvblVwbG9hZENhbGxiYWNrIiwic2V0VXNhZ2UiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVoiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJpc0J1ZmZlckF0dHJpYnV0ZSIsIkludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSIsIkludDE2QnVmZmVyQXR0cmlidXRlIiwiVWludDE2QnVmZmVyQXR0cmlidXRlIiwiSW50MzJCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MzJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDE2QnVmZmVyQXR0cmlidXRlIiwiaXNGbG9hdDE2QnVmZmVyQXR0cmlidXRlIiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUiLCJfaWQkMSIsIl9tMSIsIl9vYmoiLCJfb2Zmc2V0IiwiX2JveCQxIiwiX2JveE1vcnBoVGFyZ2V0cyIsIl92ZWN0b3IkOCIsIm1vcnBoQXR0cmlidXRlcyIsIm1vcnBoVGFyZ2V0c1JlbGF0aXZlIiwiZ3JvdXBzIiwiYm91bmRpbmdTcGhlcmUiLCJkcmF3UmFuZ2UiLCJJbmZpbml0eSIsImdldEluZGV4Iiwic2V0SW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJhZGRHcm91cCIsIm1hdGVyaWFsSW5kZXgiLCJjbGVhckdyb3VwcyIsInNldERyYXdSYW5nZSIsInRhbmdlbnQiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiIsImlzR0xCdWZmZXJBdHRyaWJ1dGUiLCJtb3JwaEF0dHJpYnV0ZSIsImlzTmFOIiwiamwiLCJjb21wdXRlVGFuZ2VudHMiLCJpbmRpY2VzIiwicG9zaXRpb25zIiwidXZzIiwiblZlcnRpY2VzIiwidGFuZ2VudHMiLCJ0YW4xIiwidGFuMiIsInZBIiwidkIiLCJ2QyIsInV2QSIsInV2QiIsInV2QyIsInNkaXIiLCJ0ZGlyIiwiaGFuZGxlVHJpYW5nbGUiLCJpc0Zpbml0ZSIsImdyb3VwIiwidG1wMiIsIm4yIiwiaGFuZGxlVmVydGV4IiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJwb3NpdGlvbkF0dHJpYnV0ZSIsIm5vcm1hbEF0dHJpYnV0ZSIsInBBIiwicEIiLCJwQyIsIm5BIiwibkIiLCJuQyIsImNiIiwiYWIiLCJub3JtYWxpemVOb3JtYWxzIiwibWVyZ2UiLCJpc0J1ZmZlckdlb21ldHJ5IiwiYXR0cmlidXRlQXJyYXkxIiwiYXR0cmlidXRlMiIsImF0dHJpYnV0ZUFycmF5MiIsImF0dHJpYnV0ZU9mZnNldCIsInRvTm9uSW5kZXhlZCIsImNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUiLCJhcnJheTIiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwic3RyaWRlIiwiZ2VvbWV0cnkyIiwibmV3QXR0cmlidXRlIiwibW9ycGhBcnJheSIsImtleXMiLCJoYXNNb3JwaEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVBcnJheSIsIl9pbnZlcnNlTWF0cml4JDIiLCJfcmF5JDIiLCJfc3BoZXJlJDMiLCJfdkEkMSIsIl92QiQxIiwiX3ZDJDEiLCJfdGVtcEEiLCJfdGVtcEIiLCJfdGVtcEMiLCJfbW9ycGhBIiwiX21vcnBoQiIsIl9tb3JwaEMiLCJfdXZBJDEiLCJfdXZCJDEiLCJfdXZDJDEiLCJfaW50ZXJzZWN0aW9uUG9pbnQiLCJfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsIk1lc2giLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJtb3JwaFRhcmdldEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldERpY3Rpb25hcnkiLCJtbCIsIm1vcnBoVGFyZ2V0cyIsInJheWNhc3RlciIsImludGVyc2VjdHMiLCJpbnRlcnNlY3Rpb24iLCJtb3JwaFBvc2l0aW9uIiwiZ3JvdXBNYXRlcmlhbCIsImNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24iLCJmYWNlSW5kZXgiLCJpc0dlb21ldHJ5IiwibW9ycGhJbmZsdWVuY2VzIiwiaW5mbHVlbmNlIiwiYm9uZVRyYW5zZm9ybSIsImNoZWNrSW50ZXJzZWN0aW9uIiwiQm94R2VvbWV0cnkiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJkZXB0aFNlZ21lbnRzIiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImNsb25lVW5pZm9ybXMiLCJwcm9wZXJ0eSIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsIlVuaWZvcm1zVXRpbHMiLCJTaGFkZXJNYXRlcmlhbCIsImRlZmluZXMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxpZ2h0cyIsImNsaXBwaW5nIiwiZXh0ZW5zaW9ucyIsImRlcml2YXRpdmVzIiwiZnJhZ0RlcHRoIiwiZHJhd0J1ZmZlcnMiLCJzaGFkZXJUZXh0dXJlTE9EIiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsImluZGV4MEF0dHJpYnV0ZU5hbWUiLCJ1bmlmb3Jtc05lZWRVcGRhdGUiLCJnbHNsVmVyc2lvbiIsImlzU2hhZGVyTWF0ZXJpYWwiLCJDYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImZvdiIsImFzcGVjdCIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwidGFuIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJlbmFibGVkIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjbGVhclZpZXdPZmZzZXQiLCJza2V3IiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsIkN1YmVDYW1lcmEiLCJyZW5kZXJUYXJnZXQiLCJpc1dlYkdMQ3ViZVJlbmRlclRhcmdldCIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsInJlbmRlcmVyIiwic2NlbmUiLCJjdXJyZW50WHJFbmFibGVkIiwieHIiLCJjdXJyZW50UmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0Iiwic2V0UmVuZGVyVGFyZ2V0IiwicmVuZGVyIiwiQ3ViZVRleHR1cmUiLCJpc0N1YmVUZXh0dXJlIiwiV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IiwiZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUiLCJzaGFkZXIiLCJ0RXF1aXJlY3QiLCJtZXNoIiwiY3VycmVudE1pbkZpbHRlciIsInN0ZW5jaWwiLCJfdmVjdG9yMSIsIl92ZWN0b3IyIiwiX25vcm1hbE1hdHJpeCIsIlBsYW5lIiwic2V0Q29tcG9uZW50cyIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50IiwiaW52ZXJzZU5vcm1hbExlbmd0aCIsImRpc3RhbmNlVG9TcGhlcmUiLCJwcm9qZWN0UG9pbnQiLCJpbnRlcnNlY3RMaW5lIiwibGluZSIsImludGVyc2VjdHNMaW5lIiwic3RhcnRTaWduIiwiZW5kU2lnbiIsImVuZCIsImNvcGxhbmFyUG9pbnQiLCJvcHRpb25hbE5vcm1hbE1hdHJpeCIsInJlZmVyZW5jZVBvaW50IiwiaXNQbGFuZSIsIl9zcGhlcmUkMiIsIl92ZWN0b3IkNyIsIkZydXN0dW0iLCJwNCIsInA1IiwicGxhbmVzIiwiZnJ1c3R1bSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJXZWJHTEFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwiYW5pbWF0aW9uTG9vcCIsInJlcXVlc3RJZCIsIm9uQW5pbWF0aW9uRnJhbWUiLCJ0aW1lIiwiZnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdG9wIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiY2FwYWJpbGl0aWVzIiwiaXNXZWJHTDIiLCJidWZmZXJzIiwiV2Vha01hcCIsImRlbGV0ZUJ1ZmZlciIsImRlbGV0ZSIsImJ1ZmZlclR5cGUiLCJjYWNoZWQiLCJieXRlc1BlckVsZW1lbnQiLCJlbGVtZW50U2l6ZSIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiQllURVNfUEVSX0VMRU1FTlQiLCJidWZmZXJTdWJEYXRhIiwic3ViYXJyYXkiLCJ1cGRhdGVCdWZmZXIiLCJQbGFuZUdlb21ldHJ5Iiwid2lkdGhfaGFsZiIsImhlaWdodF9oYWxmIiwic2VnbWVudF93aWR0aCIsInNlZ21lbnRfaGVpZ2h0IiwiU2hhZGVyQ2h1bmsiLCJhbHBoYW1hcF9mcmFnbWVudCIsImFscGhhbWFwX3BhcnNfZnJhZ21lbnQiLCJhbHBoYXRlc3RfZnJhZ21lbnQiLCJhbHBoYXRlc3RfcGFyc19mcmFnbWVudCIsImFvbWFwX2ZyYWdtZW50IiwiYW9tYXBfcGFyc19mcmFnbWVudCIsImJlZ2luX3ZlcnRleCIsImJlZ2lubm9ybWFsX3ZlcnRleCIsImJzZGZzIiwiYnVtcG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgiLCJjbGlwcGluZ19wbGFuZXNfdmVydGV4IiwiY29sb3JfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX2ZyYWdtZW50IiwiY29sb3JfcGFyc192ZXJ0ZXgiLCJjb2xvcl92ZXJ0ZXgiLCJjb21tb24iLCJjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQiLCJkZWZhdWx0bm9ybWFsX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgiLCJlbWlzc2l2ZW1hcF9mcmFnbWVudCIsImVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQiLCJlbmNvZGluZ3NfZnJhZ21lbnQiLCJlbmNvZGluZ3NfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfdmVydGV4IiwiZm9nX3ZlcnRleCIsImZvZ19wYXJzX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0bWFwX2ZyYWdtZW50IiwibGlnaHRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X3ZlcnRleCIsImxpZ2h0c19wYXJzX2JlZ2luIiwibGlnaHRzX3Rvb25fZnJhZ21lbnQiLCJsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhjb2xvcl92ZXJ0ZXgiLCJtb3JwaG5vcm1hbF92ZXJ0ZXgiLCJtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3ZlcnRleCIsIm5vcm1hbF9mcmFnbWVudF9iZWdpbiIsIm5vcm1hbF9mcmFnbWVudF9tYXBzIiwibm9ybWFsX3BhcnNfZnJhZ21lbnQiLCJub3JtYWxfcGFyc192ZXJ0ZXgiLCJub3JtYWxfdmVydGV4Iiwibm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQiLCJjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luIiwiY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzIiwiY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQiLCJvdXRwdXRfZnJhZ21lbnQiLCJwYWNraW5nIiwicHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCIsInByb2plY3RfdmVydGV4IiwiZGl0aGVyaW5nX2ZyYWdtZW50IiwiZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfZnJhZ21lbnQiLCJyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfdmVydGV4Iiwic2hhZG93bWFwX3ZlcnRleCIsInNoYWRvd21hc2tfcGFyc19mcmFnbWVudCIsInNraW5iYXNlX3ZlcnRleCIsInNraW5uaW5nX3BhcnNfdmVydGV4Iiwic2tpbm5pbmdfdmVydGV4Iiwic2tpbm5vcm1hbF92ZXJ0ZXgiLCJzcGVjdWxhcm1hcF9mcmFnbWVudCIsInNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19mcmFnbWVudCIsInRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQiLCJ0cmFuc21pc3Npb25fZnJhZ21lbnQiLCJ0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCIsInV2X3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX3ZlcnRleCIsInV2X3ZlcnRleCIsInV2Ml9wYXJzX2ZyYWdtZW50IiwidXYyX3BhcnNfdmVydGV4IiwidXYyX3ZlcnRleCIsIndvcmxkcG9zX3ZlcnRleCIsImJhY2tncm91bmRfdmVydCIsImJhY2tncm91bmRfZnJhZyIsImN1YmVfdmVydCIsImN1YmVfZnJhZyIsImRlcHRoX3ZlcnQiLCJkZXB0aF9mcmFnIiwiZGlzdGFuY2VSR0JBX3ZlcnQiLCJkaXN0YW5jZVJHQkFfZnJhZyIsImVxdWlyZWN0X3ZlcnQiLCJlcXVpcmVjdF9mcmFnIiwibGluZWRhc2hlZF92ZXJ0IiwibGluZWRhc2hlZF9mcmFnIiwibWVzaGJhc2ljX3ZlcnQiLCJtZXNoYmFzaWNfZnJhZyIsIm1lc2hsYW1iZXJ0X3ZlcnQiLCJtZXNobGFtYmVydF9mcmFnIiwibWVzaG1hdGNhcF92ZXJ0IiwibWVzaG1hdGNhcF9mcmFnIiwibWVzaG5vcm1hbF92ZXJ0IiwibWVzaG5vcm1hbF9mcmFnIiwibWVzaHBob25nX3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaHlzaWNhbF92ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNodG9vbl92ZXJ0IiwibWVzaHRvb25fZnJhZyIsInBvaW50c192ZXJ0IiwicG9pbnRzX2ZyYWciLCJzaGFkb3dfdmVydCIsInNoYWRvd19mcmFnIiwic3ByaXRlX3ZlcnQiLCJzcHJpdGVfZnJhZyIsIlVuaWZvcm1zTGliIiwiZGlmZnVzZSIsInV2VHJhbnNmb3JtIiwidXYyVHJhbnNmb3JtIiwic3BlY3VsYXJtYXAiLCJlbnZtYXAiLCJmbGlwRW52TWFwIiwiaW9yIiwiYW9tYXAiLCJsaWdodG1hcCIsImVtaXNzaXZlbWFwIiwiYnVtcG1hcCIsIm5vcm1hbG1hcCIsImRpc3BsYWNlbWVudG1hcCIsInJvdWdobmVzc21hcCIsIm1ldGFsbmVzc21hcCIsImdyYWRpZW50bWFwIiwiZm9nRGVuc2l0eSIsImZvZ05lYXIiLCJmb2dGYXIiLCJmb2dDb2xvciIsImFtYmllbnRMaWdodENvbG9yIiwibGlnaHRQcm9iZSIsImRpcmVjdGlvbmFsTGlnaHRzIiwicHJvcGVydGllcyIsImRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzIiwic2hhZG93QmlhcyIsInNoYWRvd05vcm1hbEJpYXMiLCJzaGFkb3dSYWRpdXMiLCJzaGFkb3dNYXBTaXplIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXAiLCJkaXJlY3Rpb25hbFNoYWRvd01hdHJpeCIsInNwb3RMaWdodHMiLCJjb25lQ29zIiwicGVudW1icmFDb3MiLCJkZWNheSIsInNwb3RMaWdodFNoYWRvd3MiLCJzcG90U2hhZG93TWFwIiwic3BvdFNoYWRvd01hdHJpeCIsInBvaW50TGlnaHRzIiwicG9pbnRMaWdodFNoYWRvd3MiLCJzaGFkb3dDYW1lcmFOZWFyIiwic2hhZG93Q2FtZXJhRmFyIiwicG9pbnRTaGFkb3dNYXAiLCJwb2ludFNoYWRvd01hdHJpeCIsImhlbWlzcGhlcmVMaWdodHMiLCJza3lDb2xvciIsImdyb3VuZENvbG9yIiwicmVjdEFyZWFMaWdodHMiLCJsdGNfMSIsImx0Y18yIiwiU2hhZGVyTGliIiwiYmFzaWMiLCJsYW1iZXJ0IiwicGhvbmciLCJzdGFuZGFyZCIsInRvb24iLCJkYXNoZWQiLCJ0b3RhbFNpemUiLCJ0MkQiLCJjdWJlIiwiZXF1aXJlY3QiLCJkaXN0YW5jZVJHQkEiLCJyZWZlcmVuY2VQb3NpdGlvbiIsIm5lYXJEaXN0YW5jZSIsImZhckRpc3RhbmNlIiwic2hhZG93IiwiV2ViR0xCYWNrZ3JvdW5kIiwiY3ViZW1hcHMiLCJzdGF0ZSIsIm9iamVjdHMiLCJjbGVhckNvbG9yIiwicGxhbmVNZXNoIiwiYm94TWVzaCIsImNsZWFyQWxwaGEiLCJjdXJyZW50QmFja2dyb3VuZCIsImN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiIsImN1cnJlbnRUb25lbWFwcGluZyIsInNldENsZWFyIiwiZ2V0Q2xlYXJDb2xvciIsInNldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsInJlbmRlckxpc3QiLCJmb3JjZUNsZWFyIiwic2Vzc2lvbiIsImdldFNlc3Npb24iLCJlbnZpcm9ubWVudEJsZW5kTW9kZSIsImF1dG9DbGVhciIsImF1dG9DbGVhckNvbG9yIiwiYXV0b0NsZWFyRGVwdGgiLCJhdXRvQ2xlYXJTdGVuY2lsIiwidG9uZU1hcHBpbmciLCJ1bnNoaWZ0IiwiV2ViR0xCaW5kaW5nU3RhdGVzIiwibWF4VmVydGV4QXR0cmlidXRlcyIsImV4dGVuc2lvbiIsInZhb0F2YWlsYWJsZSIsImJpbmRpbmdTdGF0ZXMiLCJkZWZhdWx0U3RhdGUiLCJjcmVhdGVCaW5kaW5nU3RhdGUiLCJjdXJyZW50U3RhdGUiLCJiaW5kVmVydGV4QXJyYXlPYmplY3QiLCJ2YW8iLCJiaW5kVmVydGV4QXJyYXkiLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXlPRVMiLCJuZXdBdHRyaWJ1dGVzIiwiZW5hYmxlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEaXZpc29ycyIsInByb2dyYW0iLCJpbml0QXR0cmlidXRlcyIsImVuYWJsZUF0dHJpYnV0ZSIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJ2ZXJ0ZXhBdHRyaWJJUG9pbnRlciIsInJlc2V0IiwicmVzZXREZWZhdWx0U3RhdGUiLCJzZXR1cCIsInVwZGF0ZUJ1ZmZlcnMiLCJwcm9ncmFtTWFwIiwic3RhdGVNYXAiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImNyZWF0ZVZlcnRleEFycmF5T0VTIiwiZ2V0QmluZGluZ1N0YXRlIiwiY2FjaGVkQXR0cmlidXRlcyIsImdlb21ldHJ5QXR0cmlidXRlcyIsImF0dHJpYnV0ZXNOdW0iLCJjYWNoZWRBdHRyaWJ1dGUiLCJnZW9tZXRyeUF0dHJpYnV0ZSIsInNhdmVDYWNoZSIsImlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJwcm9ncmFtQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZXMiLCJtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJwcm9ncmFtQXR0cmlidXRlIiwibG9jYXRpb24iLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibG9jYXRpb25TaXplIiwiX21heEluc3RhbmNlQ291bnQiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImdlb21ldHJ5SWQiLCJwcm9ncmFtSWQiLCJyZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSIsInJlbGVhc2VTdGF0ZXNPZlByb2dyYW0iLCJXZWJHTEJ1ZmZlclJlbmRlcmVyIiwiaW5mbyIsIm1vZGUiLCJzZXRNb2RlIiwiZHJhd0FycmF5cyIsInJlbmRlckluc3RhbmNlcyIsInByaW1jb3VudCIsIm1ldGhvZE5hbWUiLCJXZWJHTENhcGFiaWxpdGllcyIsIm1heEFuaXNvdHJvcHkiLCJnZXRNYXhQcmVjaXNpb24iLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJXZWJHTDJSZW5kZXJpbmdDb250ZXh0IiwiV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQiLCJtYXhQcmVjaXNpb24iLCJoYXMiLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIm1heFRleHR1cmVTaXplIiwibWF4Q3ViZW1hcFNpemUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJtYXhWYXJ5aW5ncyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImZsb2F0RnJhZ21lbnRUZXh0dXJlcyIsImdldE1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJmbG9hdFZlcnRleFRleHR1cmVzIiwibWF4U2FtcGxlcyIsIldlYkdMQ2xpcHBpbmciLCJnbG9iYWxTdGF0ZSIsIm51bUdsb2JhbFBsYW5lcyIsImxvY2FsQ2xpcHBpbmdFbmFibGVkIiwicmVuZGVyaW5nU2hhZG93cyIsInZpZXdOb3JtYWxNYXRyaXgiLCJ1bmlmb3JtIiwicmVzZXRHbG9iYWxTdGF0ZSIsIm51bVBsYW5lcyIsIm51bUludGVyc2VjdGlvbiIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwiaTQiLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRTdGF0ZSIsInVzZUNhY2hlIiwibWF0ZXJpYWxQcm9wZXJ0aWVzIiwibkdsb2JhbCIsImxHbG9iYWwiLCJjbGlwcGluZ1N0YXRlIiwiV2ViR0xDdWJlTWFwcyIsIm1hcFRleHR1cmVNYXBwaW5nIiwib25UZXh0dXJlRGlzcG9zZSIsImN1YmVtYXAiLCJwaHlzaWNhbCIsInNoZWVuQ29sb3JNYXAiLCJzaGVlblJvdWdobmVzc01hcCIsInRyYW5zbWlzc2lvblNhbXBsZXJTaXplIiwidHJhbnNtaXNzaW9uU2FtcGxlck1hcCIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsInNjYWxlVyIsInNjYWxlSCIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwiRVhUUkFfTE9EX1NJR01BIiwiX2ZsYXRDYW1lcmEiLCJfY2xlYXJDb2xvciIsIl9vbGRUYXJnZXQiLCJQSEkiLCJJTlZfUEhJIiwiX2F4aXNEaXJlY3Rpb25zIiwiUE1SRU1HZW5lcmF0b3IiLCJfcmVuZGVyZXIiLCJfcGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfbG9kTWF4IiwiX2N1YmVTaXplIiwiX2xvZFBsYW5lcyIsIl9zaXplTG9kcyIsIl9zaWdtYXMiLCJfYmx1ck1hdGVyaWFsIiwiX2N1YmVtYXBNYXRlcmlhbCIsIl9lcXVpcmVjdE1hdGVyaWFsIiwiX2NvbXBpbGVNYXRlcmlhbCIsImZyb21TY2VuZSIsInNpZ21hIiwiX3NldFNpemUiLCJjdWJlVVZSZW5kZXJUYXJnZXQiLCJfYWxsb2NhdGVUYXJnZXRzIiwiX3NjZW5lVG9DdWJlVVYiLCJfYmx1ciIsIl9hcHBseVBNUkVNIiwiX2NsZWFudXAiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyIiwiZXF1aXJlY3Rhbmd1bGFyIiwiX2Zyb21UZXh0dXJlIiwiZnJvbUN1YmVtYXAiLCJjb21waWxlQ3ViZW1hcFNoYWRlciIsIl9nZXRDdWJlbWFwTWF0ZXJpYWwiLCJjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyIiwiX2dldEVxdWlyZWN0TWF0ZXJpYWwiLCJfZGlzcG9zZSIsImN1YmVTaXplIiwibG9nMiIsIm91dHB1dFRhcmdldCIsIl9zZXRWaWV3cG9ydCIsIl90ZXh0dXJlVG9DdWJlVVYiLCJwYXJhbXMiLCJfY3JlYXRlUmVuZGVyVGFyZ2V0Iiwic2l6ZUxvZHMiLCJsb2RQbGFuZXMiLCJzaWdtYXMiLCJsb2RNYXgiLCJsb2QiLCJ0b3RhbExvZHMiLCJzaXplTG9kIiwidGV4ZWxTaXplIiwiY3ViZUZhY2VzIiwicG9zaXRpb25TaXplIiwidXZTaXplIiwiZmFjZUluZGV4U2l6ZSIsImNvb3JkaW5hdGVzIiwiZmlsbCIsIl9jcmVhdGVQbGFuZXMiLCJ3ZWlnaHRzIiwicG9sZUF4aXMiLCJfZ2V0Qmx1clNoYWRlciIsInRtcE1lc2giLCJjb21waWxlIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwib3JpZ2luYWxBdXRvQ2xlYXIiLCJiYWNrZ3JvdW5kTWF0ZXJpYWwiLCJiYWNrZ3JvdW5kQm94IiwidXNlU29saWRDb2xvciIsImNvbCIsImxvZEluIiwibG9kT3V0IiwicGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfaGFsZkJsdXIiLCJ0YXJnZXRJbiIsInRhcmdldE91dCIsInNpZ21hUmFkaWFucyIsImJsdXJNYXRlcmlhbCIsImJsdXJNZXNoIiwiYmx1clVuaWZvcm1zIiwicGl4ZWxzIiwicmFkaWFuc1BlclBpeGVsIiwic2lnbWFQaXhlbHMiLCJzdW0iLCJ3ZWlnaHQiLCJvdXRwdXRTaXplIiwiV2ViR0xDdWJlVVZNYXBzIiwiY3ViZVVWbWFwcyIsInBtcmVtR2VuZXJhdG9yIiwiY3ViZW1hcFVWIiwiaXNFcXVpcmVjdE1hcCIsImlzQ3ViZU1hcCIsImlzQ3ViZVRleHR1cmVDb21wbGV0ZSIsIldlYkdMRXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIldlYkdMR2VvbWV0cmllcyIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsIm1lbW9yeSIsInVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSIsImdlb21ldHJ5SW5kZXgiLCJnZW9tZXRyeVBvc2l0aW9uIiwicHJldmlvdXNBdHRyaWJ1dGUiLCJnZXRXaXJlZnJhbWVBdHRyaWJ1dGUiLCJjdXJyZW50QXR0cmlidXRlIiwiV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJkcmF3RWxlbWVudHMiLCJXZWJHTEluZm8iLCJjYWxscyIsInRyaWFuZ2xlcyIsImxpbmVzIiwicHJvZ3JhbXMiLCJhdXRvUmVzZXQiLCJpbnN0YW5jZUNvdW50IiwibnVtZXJpY2FsU29ydCIsImFic051bWVyaWNhbFNvcnQiLCJkZW5vcm1hbGl6ZSIsIm1vcnBoIiwiV2ViR0xNb3JwaHRhcmdldHMiLCJpbmZsdWVuY2VzTGlzdCIsIm1vcnBoVGV4dHVyZXMiLCJ3b3JrSW5mbHVlbmNlcyIsIm9iamVjdEluZmx1ZW5jZXMiLCJtb3JwaFRhcmdldHNDb3VudCIsImVudHJ5IiwiaGFzTW9ycGhQb3NpdGlvbiIsImhhc01vcnBoTm9ybWFscyIsImhhc01vcnBoQ29sb3JzIiwibW9ycGhOb3JtYWxzIiwibW9ycGhDb2xvcnMiLCJ2ZXJ0ZXhEYXRhQ291bnQiLCJ2ZXJ0ZXhEYXRhU3RyaWRlIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsIm1vcnBoQ29sb3IiLCJkaXNwb3NlVGV4dHVyZSIsIm1vcnBoSW5mbHVlbmNlc1N1bSIsIm1vcnBoQmFzZUluZmx1ZW5jZSIsImdldFVuaWZvcm1zIiwic2V0VmFsdWUiLCJpbmZsdWVuY2VzIiwic29ydCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVNYXAiLCJvbkluc3RhbmNlZE1lc2hEaXNwb3NlIiwiaW5zdGFuY2VkTWVzaCIsImJ1ZmZlcmdlb21ldHJ5IiwiZW1wdHlUZXh0dXJlIiwiZW1wdHlBcnJheVRleHR1cmUiLCJlbXB0eTNkVGV4dHVyZSIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVjFpIiwidW5pZm9ybTFpIiwic2V0VmFsdWVWMmkiLCJ1bmlmb3JtMml2Iiwic2V0VmFsdWVWM2kiLCJ1bmlmb3JtM2l2Iiwic2V0VmFsdWVWNGkiLCJ1bmlmb3JtNGl2Iiwic2V0VmFsdWVWMXVpIiwidW5pZm9ybTF1aSIsInNldFZhbHVlVjJ1aSIsInVuaWZvcm0ydWl2Iiwic2V0VmFsdWVWM3VpIiwidW5pZm9ybTN1aXYiLCJzZXRWYWx1ZVY0dWkiLCJ1bmlmb3JtNHVpdiIsInNldFZhbHVlVDEiLCJ1bml0Iiwic2V0VGV4dHVyZTJEIiwic2V0VmFsdWVUM0QxIiwic2V0VGV4dHVyZTNEIiwic2V0VmFsdWVUNiIsInNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVUMkRBcnJheTEiLCJzZXRUZXh0dXJlMkRBcnJheSIsInNldFZhbHVlVjFmQXJyYXkiLCJ1bmlmb3JtMWZ2Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVWMWlBcnJheSIsInVuaWZvcm0xaXYiLCJzZXRWYWx1ZVYyaUFycmF5Iiwic2V0VmFsdWVWM2lBcnJheSIsInNldFZhbHVlVjRpQXJyYXkiLCJzZXRWYWx1ZVYxdWlBcnJheSIsInVuaWZvcm0xdWl2Iiwic2V0VmFsdWVWMnVpQXJyYXkiLCJzZXRWYWx1ZVYzdWlBcnJheSIsInNldFZhbHVlVjR1aUFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQzREFycmF5Iiwic2V0VmFsdWVUNkFycmF5Iiwic2V0VmFsdWVUMkRBcnJheUFycmF5IiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJnZXRTaW5ndWxhclNldHRlciIsIlB1cmVBcnJheVVuaWZvcm0iLCJnZXRQdXJlQXJyYXlTZXR0ZXIiLCJTdHJ1Y3R1cmVkVW5pZm9ybSIsInNlcSIsInVwZGF0ZUNhY2hlIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aCIsInBhdGhMZW5ndGgiLCJsYXN0SW5kZXgiLCJtYXRjaCIsIm1hdGNoRW5kIiwiaWRJc0luZGV4Iiwic3Vic2NyaXB0IiwibmV4dCIsIldlYkdMVW5pZm9ybXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsIldlYkdMU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsInNldE9wdGlvbmFsIiwidXBsb2FkIiwic2VxV2l0aFZhbHVlIiwicHJvZ3JhbUlkQ291bnQiLCJnZXRTaGFkZXJFcnJvcnMiLCJzdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJlcnJvcnMiLCJnZXRTaGFkZXJJbmZvTG9nIiwidHJpbSIsInNwbGl0IiwiYWRkTGluZU51bWJlcnMiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJnZXRFbmNvZGluZ0NvbXBvbmVudHMiLCJnZXRUb25lTWFwcGluZ0Z1bmN0aW9uIiwidG9uZU1hcHBpbmdOYW1lIiwiZmlsdGVyRW1wdHlMaW5lIiwicmVwbGFjZUxpZ2h0TnVtcyIsInJlcGxhY2UiLCJudW1EaXJMaWdodHMiLCJudW1TcG90TGlnaHRzIiwibnVtUmVjdEFyZWFMaWdodHMiLCJudW1Qb2ludExpZ2h0cyIsIm51bUhlbWlMaWdodHMiLCJudW1EaXJMaWdodFNoYWRvd3MiLCJudW1TcG90TGlnaHRTaGFkb3dzIiwibnVtUG9pbnRMaWdodFNoYWRvd3MiLCJyZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMiLCJudW1DbGlwcGluZ1BsYW5lcyIsIm51bUNsaXBJbnRlcnNlY3Rpb24iLCJpbmNsdWRlUGF0dGVybiIsInJlc29sdmVJbmNsdWRlcyIsImluY2x1ZGVSZXBsYWNlciIsImluY2x1ZGUiLCJkZXByZWNhdGVkVW5yb2xsTG9vcFBhdHRlcm4iLCJ1bnJvbGxMb29wUGF0dGVybiIsInVucm9sbExvb3BzIiwibG9vcFJlcGxhY2VyIiwiZGVwcmVjYXRlZExvb3BSZXBsYWNlciIsInNuaXBwZXQiLCJnZW5lcmF0ZVByZWNpc2lvbiIsInByZWNpc2lvbnN0cmluZyIsIldlYkdMUHJvZ3JhbSIsImNhY2hlS2V5Iiwic2hhZG93TWFwVHlwZURlZmluZSIsInNoYWRvd01hcFR5cGUiLCJnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUiLCJlbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZSIsImdlbmVyYXRlRW52TWFwVHlwZURlZmluZSIsImVudk1hcE1vZGVEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUiLCJlbnZNYXBCbGVuZGluZ0RlZmluZSIsImdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUiLCJlbnZNYXBDdWJlVVZTaXplIiwiaW1hZ2VIZWlnaHQiLCJlbnZNYXBDdWJlVVZIZWlnaHQiLCJtYXhNaXAiLCJ0ZXhlbEhlaWdodCIsInRleGVsV2lkdGgiLCJnZW5lcmF0ZUN1YmVVVlNpemUiLCJjdXN0b21FeHRlbnNpb25zIiwiZXh0ZW5zaW9uRGVyaXZhdGl2ZXMiLCJ0YW5nZW50U3BhY2VOb3JtYWxNYXAiLCJzaGFkZXJJRCIsImV4dGVuc2lvbkZyYWdEZXB0aCIsInJlbmRlcmVyRXh0ZW5zaW9uRnJhZ0RlcHRoIiwiZXh0ZW5zaW9uRHJhd0J1ZmZlcnMiLCJyZW5kZXJlckV4dGVuc2lvbkRyYXdCdWZmZXJzIiwiZXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxPRCIsInJlbmRlcmVyRXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxvZCIsImZpbHRlciIsImdlbmVyYXRlRXh0ZW5zaW9ucyIsImN1c3RvbURlZmluZXMiLCJjaHVua3MiLCJnZW5lcmF0ZURlZmluZXMiLCJjcmVhdGVQcm9ncmFtIiwicHJlZml4VmVydGV4IiwicHJlZml4RnJhZ21lbnQiLCJ2ZXJzaW9uU3RyaW5nIiwiaXNSYXdTaGFkZXJNYXRlcmlhbCIsInNoYWRlck5hbWUiLCJpbnN0YW5jaW5nIiwiaW5zdGFuY2luZ0NvbG9yIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsIm1heEJvbmVzIiwidXNlRm9nIiwiZm9nRXhwMiIsIm9iamVjdFNwYWNlTm9ybWFsTWFwIiwidmVydGV4VGFuZ2VudHMiLCJ2ZXJ0ZXhBbHBoYXMiLCJ2ZXJ0ZXhVdnMiLCJ1dnNWZXJ0ZXhPbmx5Iiwic2tpbm5pbmciLCJ1c2VWZXJ0ZXhUZXh0dXJlIiwibW9ycGhUZXh0dXJlU3RyaWRlIiwiZG91YmxlU2lkZWQiLCJmbGlwU2lkZWQiLCJzaGFkb3dNYXBFbmFibGVkIiwiZGVjb2RlVmlkZW9UZXh0dXJlIiwicGh5c2ljYWxseUNvcnJlY3RMaWdodHMiLCJvcGFxdWUiLCJvdXRwdXRFbmNvZGluZyIsImRlcHRoUGFja2luZyIsImZyYWdtZW50R2xzbCIsImdsVmVydGV4U2hhZGVyIiwiZ2xGcmFnbWVudFNoYWRlciIsImF0dGFjaFNoYWRlciIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwiZGVidWciLCJjaGVja1NoYWRlckVycm9ycyIsInByb2dyYW1Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsInZlcnRleExvZyIsImZyYWdtZW50TG9nIiwicnVubmFibGUiLCJoYXZlRGlhZ25vc3RpY3MiLCJ2ZXJ0ZXhFcnJvcnMiLCJmcmFnbWVudEVycm9ycyIsImdldEVycm9yIiwiZGlhZ25vc3RpY3MiLCJwcmVmaXgiLCJjYWNoZWRVbmlmb3JtcyIsImRlbGV0ZVNoYWRlciIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMiLCJkZXN0cm95IiwiZGVsZXRlUHJvZ3JhbSIsInVzZWRUaW1lcyIsIl9pZCIsIldlYkdMU2hhZGVyQ2FjaGUiLCJzaGFkZXJDYWNoZSIsIk1hcCIsIm1hdGVyaWFsQ2FjaGUiLCJ2ZXJ0ZXhTaGFkZXJTdGFnZSIsIl9nZXRTaGFkZXJTdGFnZSIsImZyYWdtZW50U2hhZGVyU3RhZ2UiLCJtYXRlcmlhbFNoYWRlcnMiLCJfZ2V0U2hhZGVyQ2FjaGVGb3JNYXRlcmlhbCIsInNoYWRlclN0YWdlIiwiZ2V0VmVydGV4U2hhZGVySUQiLCJnZXRGcmFnbWVudFNoYWRlcklEIiwiU2V0IiwiY29kZSIsInN0YWdlIiwiV2ViR0xTaGFkZXJTdGFnZSIsIldlYkdMUHJvZ3JhbXMiLCJjdWJldXZtYXBzIiwiX3Byb2dyYW1MYXllcnMiLCJfY3VzdG9tU2hhZGVycyIsInNoYWRlcklEcyIsIk1lc2hEZXB0aE1hdGVyaWFsIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIk1lc2hNYXRjYXBNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJTaGFkb3dNYXRlcmlhbCIsIlNwcml0ZU1hdGVyaWFsIiwiZ2V0UGFyYW1ldGVycyIsInNoYWRvd3MiLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwiYm9uZXMiLCJuVmVydGV4VW5pZm9ybXMiLCJuVmVydGV4TWF0cmljZXMiLCJnZXRNYXhCb25lcyIsImN1c3RvbVZlcnRleFNoYWRlcklEIiwiY3VzdG9tRnJhZ21lbnRTaGFkZXJJRCIsInVzZUFscGhhVGVzdCIsInVzZUNsZWFyY29hdCIsImlzWFJSZW5kZXJUYXJnZXQiLCJpc1ZpZGVvVGV4dHVyZSIsImlzRm9nRXhwMiIsImRpcmVjdGlvbmFsIiwic3BvdCIsInJlY3RBcmVhIiwiaGVtaSIsInNoYWRvd01hcCIsImdldFByb2dyYW1DYWNoZUtleSIsIm1vcnBoQXR0cmlidXRlQ291bnQiLCJnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzIiwiZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMiLCJhY3F1aXJlUHJvZ3JhbSIsInBsIiwicHJlZXhpc3RpbmdQcm9ncmFtIiwicmVsZWFzZVByb2dyYW0iLCJwb3AiLCJyZWxlYXNlU2hhZGVyQ2FjaGUiLCJXZWJHTFByb3BlcnRpZXMiLCJwYWludGVyU29ydFN0YWJsZSIsImdyb3VwT3JkZXIiLCJyZXZlcnNlUGFpbnRlclNvcnRTdGFibGUiLCJXZWJHTFJlbmRlckxpc3QiLCJyZW5kZXJJdGVtcyIsInJlbmRlckl0ZW1zSW5kZXgiLCJ0cmFuc21pc3NpdmUiLCJnZXROZXh0UmVuZGVySXRlbSIsInJlbmRlckl0ZW0iLCJmaW5pc2giLCJjdXN0b21PcGFxdWVTb3J0IiwiY3VzdG9tVHJhbnNwYXJlbnRTb3J0IiwiV2ViR0xSZW5kZXJMaXN0cyIsImxpc3RzIiwicmVuZGVyQ2FsbERlcHRoIiwiVW5pZm9ybXNDYWNoZSIsImxpZ2h0IiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm5leHRWZXJzaW9uIiwic2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0IiwibGlnaHRBIiwibGlnaHRCIiwiV2ViR0xMaWdodHMiLCJzaGFkb3dDYWNoZSIsIlNoYWRvd1VuaWZvcm1zQ2FjaGUiLCJoYXNoIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJudW1EaXJlY3Rpb25hbFNoYWRvd3MiLCJudW1Qb2ludFNoYWRvd3MiLCJudW1TcG90U2hhZG93cyIsImFtYmllbnQiLCJwcm9iZSIsImRpcmVjdGlvbmFsU2hhZG93Iiwic3BvdFNoYWRvdyIsInJlY3RBcmVhTFRDMSIsInJlY3RBcmVhTFRDMiIsInBvaW50U2hhZG93IiwidmVjdG9yMyIsIm1hdHJpeDQyIiwic2NhbGVGYWN0b3IiLCJpbnRlbnNpdHkiLCJpc0FtYmllbnRMaWdodCIsImlzTGlnaHRQcm9iZSIsInNoIiwiY29lZmZpY2llbnRzIiwiaXNEaXJlY3Rpb25hbExpZ2h0Iiwic2hhZG93VW5pZm9ybXMiLCJiaWFzIiwibm9ybWFsQmlhcyIsIm1hcFNpemUiLCJpc1Nwb3RMaWdodCIsInBlbnVtYnJhIiwiaXNSZWN0QXJlYUxpZ2h0IiwiaXNQb2ludExpZ2h0IiwiaXNIZW1pc3BoZXJlTGlnaHQiLCJMVENfRkxPQVRfMSIsIkxUQ19GTE9BVF8yIiwiTFRDX0hBTEZfMSIsIkxUQ19IQUxGXzIiLCJzZXR1cFZpZXciLCJXZWJHTFJlbmRlclN0YXRlIiwibGlnaHRzQXJyYXkiLCJzaGFkb3dzQXJyYXkiLCJzZXR1cExpZ2h0cyIsInNldHVwTGlnaHRzVmlldyIsInB1c2hMaWdodCIsInB1c2hTaGFkb3ciLCJzaGFkb3dMaWdodCIsIldlYkdMUmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGUiLCJpc01lc2hEZXB0aE1hdGVyaWFsIiwiV2ViR0xTaGFkb3dNYXAiLCJfb2JqZWN0cyIsIl9jYXBhYmlsaXRpZXMiLCJfZnJ1c3R1bSIsIl9zaGFkb3dNYXBTaXplIiwiX3ZpZXdwb3J0U2l6ZSIsIl92aWV3cG9ydCIsIl9kZXB0aE1hdGVyaWFsIiwiX2Rpc3RhbmNlTWF0ZXJpYWwiLCJfbWF0ZXJpYWxDYWNoZSIsIl9tYXhUZXh0dXJlU2l6ZSIsInNoYWRvd01hdGVyaWFsVmVydGljYWwiLCJWU01fU0FNUExFUyIsInNoYWRvd19wYXNzIiwicmVzb2x1dGlvbiIsInNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbCIsIkhPUklaT05UQUxfUEFTUyIsImZ1bGxTY3JlZW5UcmkiLCJmdWxsU2NyZWVuTWVzaCIsIlZTTVBhc3MiLCJibHVyU2FtcGxlcyIsIm1hcFBhc3MiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJnZXREZXB0aE1hdGVyaWFsIiwiY3VzdG9tTWF0ZXJpYWwiLCJjdXN0b21EaXN0YW5jZU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImtleUEiLCJrZXlCIiwibWF0ZXJpYWxzRm9yVmFyaWFudCIsImNhY2hlZE1hdGVyaWFsIiwiaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsImtsIiwiZGVwdGhNYXRlcmlhbCIsImF1dG9VcGRhdGUiLCJhY3RpdmVDdWJlRmFjZSIsImdldEFjdGl2ZUN1YmVGYWNlIiwiYWN0aXZlTWlwbWFwTGV2ZWwiLCJnZXRBY3RpdmVNaXBtYXBMZXZlbCIsIl9zdGF0ZSIsInNldEJsZW5kaW5nIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0Iiwic2hhZG93RnJhbWVFeHRlbnRzIiwiZ2V0RnJhbWVFeHRlbnRzIiwiaXNQb2ludExpZ2h0U2hhZG93IiwicGFycyIsInZpZXdwb3J0Q291bnQiLCJnZXRWaWV3cG9ydENvdW50IiwidnAiLCJnZXRWaWV3cG9ydCIsInVwZGF0ZU1hdHJpY2VzIiwiZ2V0RnJ1c3R1bSIsIldlYkdMU3RhdGUiLCJjb2xvckJ1ZmZlciIsImxvY2tlZCIsImN1cnJlbnRDb2xvck1hc2siLCJjdXJyZW50Q29sb3JDbGVhciIsInNldE1hc2siLCJjb2xvck1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiY3VycmVudERlcHRoTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhDbGVhciIsImRlcHRoTWFzayIsInNldEZ1bmMiLCJjbGVhckRlcHRoIiwiY3VycmVudFN0ZW5jaWxNYXNrIiwiY3VycmVudFN0ZW5jaWxGdW5jIiwiY3VycmVudFN0ZW5jaWxSZWYiLCJjdXJyZW50U3RlbmNpbEZ1bmNNYXNrIiwiY3VycmVudFN0ZW5jaWxGYWlsIiwiY3VycmVudFN0ZW5jaWxaRmFpbCIsImN1cnJlbnRTdGVuY2lsWlBhc3MiLCJjdXJyZW50U3RlbmNpbENsZWFyIiwic3RlbmNpbFRlc3QiLCJzdGVuY2lsTWFzayIsInNldE9wIiwic3RlbmNpbE9wIiwiY2xlYXJTdGVuY2lsIiwiZW5hYmxlZENhcGFiaWxpdGllcyIsImN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyIsImN1cnJlbnREcmF3YnVmZmVycyIsImRlZmF1bHREcmF3YnVmZmVycyIsImN1cnJlbnRQcm9ncmFtIiwiY3VycmVudEJsZW5kaW5nRW5hYmxlZCIsImN1cnJlbnRCbGVuZGluZyIsImN1cnJlbnRCbGVuZEVxdWF0aW9uIiwiY3VycmVudEJsZW5kU3JjIiwiY3VycmVudEJsZW5kRHN0IiwiY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSIsImN1cnJlbnRCbGVuZFNyY0FscGhhIiwiY3VycmVudEJsZW5kRHN0QWxwaGEiLCJjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEiLCJjdXJyZW50RmxpcFNpZGVkIiwiY3VycmVudEN1bGxGYWNlIiwiY3VycmVudExpbmVXaWR0aCIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yIiwiY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyIsImxpbmVXaWR0aEF2YWlsYWJsZSIsImdsVmVyc2lvbiIsImN1cnJlbnRUZXh0dXJlU2xvdCIsImN1cnJlbnRCb3VuZFRleHR1cmVzIiwic2Npc3NvclBhcmFtIiwidmlld3BvcnRQYXJhbSIsImN1cnJlbnRTY2lzc29yIiwiY3VycmVudFZpZXdwb3J0IiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwidGV4UGFyYW1ldGVyaSIsInRleEltYWdlMkQiLCJlbXB0eVRleHR1cmVzIiwic2V0RmxpcFNpZGVkIiwic2V0Q3VsbEZhY2UiLCJlcXVhdGlvblRvR0wiLCJNSU5fRVhUIiwiTUFYX0VYVCIsImZhY3RvclRvR0wiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsImZyb250RmFjZSIsImN1bGxGYWNlIiwic2V0UG9seWdvbk9mZnNldCIsImZhY3RvciIsImFjdGl2ZVRleHR1cmUiLCJ3ZWJnbFNsb3QiLCJiaW5kRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlciIsImRyYXdCdWZmZXJzV0VCR0wiLCJ1c2VQcm9ncmFtIiwic2V0TWF0ZXJpYWwiLCJmcm9udEZhY2VDVyIsInNldExpbmVXaWR0aCIsImxpbmVXaWR0aCIsIndlYmdsVHlwZSIsIndlYmdsVGV4dHVyZSIsImJvdW5kVGV4dHVyZSIsInVuYmluZFRleHR1cmUiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsInRleEltYWdlM0QiLCJ0ZXhTdG9yYWdlMkQiLCJ0ZXhTdG9yYWdlM0QiLCJ0ZXhTdWJJbWFnZTJEIiwidGV4U3ViSW1hZ2UzRCIsImNvbXByZXNzZWRUZXhTdWJJbWFnZTJEIiwiV2ViR0xUZXh0dXJlcyIsIl9nbCIsInV0aWxzIiwibXVsdGlzYW1wbGVkUlRURXh0IiwiX3ZpZGVvVGV4dHVyZXMiLCJfc291cmNlcyIsInVzZU9mZnNjcmVlbkNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImVyciIsImNyZWF0ZUNhbnZhcyIsInJlc2l6ZUltYWdlIiwibmVlZHNQb3dlck9mVHdvIiwibmVlZHNOZXdDYW52YXMiLCJtYXhTaXplIiwiaXNQb3dlck9mVHdvJDEiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJzdXBwb3J0c01pcHMiLCJnZW5lcmF0ZU1pcG1hcCIsImdldEludGVybmFsRm9ybWF0IiwiaW50ZXJuYWxGb3JtYXROYW1lIiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJnZXRNaXBMZXZlbHMiLCJpc0ZyYW1lYnVmZmVyVGV4dHVyZSIsImlzQ29tcHJlc3NlZFRleHR1cmUiLCJmaWx0ZXJGYWxsYmFjayIsInRleHR1cmVQcm9wZXJ0aWVzIiwiX193ZWJnbEluaXQiLCJ3ZWJnbFRleHR1cmVzIiwiX19jYWNoZUtleSIsImRlbGV0ZVRleHR1cmUiLCJkZWFsbG9jYXRlVGV4dHVyZSIsIm9uUmVuZGVyVGFyZ2V0RGlzcG9zZSIsInJlbmRlclRhcmdldFByb3BlcnRpZXMiLCJfX3dlYmdsVGV4dHVyZSIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiX193ZWJnbEZyYW1lYnVmZmVyIiwiX193ZWJnbERlcHRoYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyIiwiX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyIiwiX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyIiwiYXR0YWNobWVudFByb3BlcnRpZXMiLCJkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0IiwidGV4dHVyZVVuaXRzIiwic2xvdCIsInVwZGF0ZVZpZGVvVGV4dHVyZSIsIl9fdmVyc2lvbiIsImNvbXBsZXRlIiwidXBsb2FkVGV4dHVyZSIsIndyYXBwaW5nVG9HTCIsImZpbHRlclRvR0wiLCJzZXRUZXh0dXJlUGFyYW1ldGVycyIsInRleHR1cmVUeXBlIiwiX19jdXJyZW50QW5pc290cm9weSIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsImluaXRUZXh0dXJlIiwiZm9yY2VVcGxvYWQiLCJ0ZXh0dXJlQ2FjaGVLZXkiLCJnZXRUZXh0dXJlQ2FjaGVLZXkiLCJfX2N1cnJlbnRWZXJzaW9uIiwicGl4ZWxTdG9yZWkiLCJ0ZXh0dXJlTmVlZHNQb3dlck9mVHdvIiwidmVyaWZ5Q29sb3JTcGFjZSIsImNvbnZlcnQiLCJtaXBtYXAiLCJnbEludGVybmFsRm9ybWF0IiwidXNlVGV4U3RvcmFnZSIsImFsbG9jYXRlTWVtb3J5IiwibGV2ZWxzIiwiaXNEZXB0aFRleHR1cmUiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiX19oYXNFeHRlcm5hbFRleHR1cmVzIiwidXNlTXVsdGlzYW1wbGVkUlRUIiwiZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCIsImdldFJlbmRlclRhcmdldFNhbXBsZXMiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsInNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSIsInJlbmRlcmJ1ZmZlciIsImlzTXVsdGlzYW1wbGUiLCJiaW5kUmVuZGVyYnVmZmVyIiwicmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUIiwicmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwic2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciIsImlzQ3ViZSIsIl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiX191c2VSZW5kZXJUb1RleHR1cmUiLCJzUkdCVG9MaW5lYXIiLCJ0ZXh0dXJlVW5pdCIsInJlc2V0VGV4dHVyZVVuaXRzIiwiaXNDb21wcmVzc2VkIiwiY3ViZUltYWdlIiwibWlwbWFwSW1hZ2UiLCJ1cGxvYWRDdWJlVGV4dHVyZSIsInJlYmluZFRleHR1cmVzIiwiY29sb3JUZXh0dXJlIiwic2V0dXBSZW5kZXJUYXJnZXQiLCJpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiZ2xUZXh0dXJlVHlwZSIsInVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCIsInVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiaW52YWxpZGF0aW9uQXJyYXkiLCJkZXB0aFN0eWxlIiwiaWdub3JlRGVwdGhWYWx1ZXMiLCJfX2lnbm9yZURlcHRoVmFsdWVzIiwiaW52YWxpZGF0ZUZyYW1lYnVmZmVyIiwiYmxpdEZyYW1lYnVmZmVyIiwiV2ViR0xVdGlscyIsIkhBTEZfRkxPQVRfT0VTIiwiU1JHQl9BTFBIQV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiQ09NUFJFU1NFRF9TUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9SR0I4X0VUQzIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUMiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9CUFRDX1VOT1JNX0VYVCIsIlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMIiwiQXJyYXlDYW1lcmEiLCJjYW1lcmFzIiwiaXNBcnJheUNhbWVyYSIsIkdyb3VwIiwiaXNHcm91cCIsIl9tb3ZlRXZlbnQiLCJXZWJYUkNvbnRyb2xsZXIiLCJfdGFyZ2V0UmF5IiwiX2dyaXAiLCJfaGFuZCIsImdldEhhbmRTcGFjZSIsImpvaW50cyIsImlucHV0U3RhdGUiLCJwaW5jaGluZyIsImdldFRhcmdldFJheVNwYWNlIiwiaGFzTGluZWFyVmVsb2NpdHkiLCJsaW5lYXJWZWxvY2l0eSIsImhhc0FuZ3VsYXJWZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImdldEdyaXBTcGFjZSIsImRpc2Nvbm5lY3QiLCJpbnB1dFNvdXJjZSIsInJlZmVyZW5jZVNwYWNlIiwiaW5wdXRQb3NlIiwiZ3JpcFBvc2UiLCJoYW5kUG9zZSIsInRhcmdldFJheSIsImdyaXAiLCJoYW5kIiwidmlzaWJpbGl0eVN0YXRlIiwiZ2V0UG9zZSIsInRhcmdldFJheVNwYWNlIiwidHJhbnNmb3JtIiwiaW5wdXRqb2ludCIsImpvaW50UG9zZSIsImdldEpvaW50UG9zZSIsImpvaW50TmFtZSIsImpvaW50Iiwiam9pbnRSYWRpdXMiLCJpbmRleFRpcCIsInRodW1iVGlwIiwiZGlzdGFuY2VUb1BpbmNoIiwidGhyZXNob2xkIiwiaGFuZGVkbmVzcyIsImdyaXBTcGFjZSIsIkRlcHRoVGV4dHVyZSIsIldlYlhSTWFuYWdlciIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJyZWZlcmVuY2VTcGFjZVR5cGUiLCJwb3NlIiwiZ2xCaW5kaW5nIiwiZ2xQcm9qTGF5ZXIiLCJnbEJhc2VMYXllciIsInhyRnJhbWUiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImluaXRpYWxSZW5kZXJUYXJnZXQiLCJuZXdSZW5kZXJUYXJnZXQiLCJjb250cm9sbGVycyIsImlucHV0U291cmNlc01hcCIsImNhbWVyYUwiLCJjYW1lcmFSIiwiY2FtZXJhVlIiLCJfY3VycmVudERlcHRoTmVhciIsIl9jdXJyZW50RGVwdGhGYXIiLCJvblNlc3Npb25FdmVudCIsImNvbnRyb2xsZXIiLCJvblNlc3Npb25FbmQiLCJmb3JFYWNoIiwiaXNQcmVzZW50aW5nIiwib25JbnB1dFNvdXJjZXNDaGFuZ2UiLCJpbnB1dFNvdXJjZXMiLCJyZW1vdmVkIiwiYWRkZWQiLCJjYW1lcmFBdXRvVXBkYXRlIiwiZ2V0Q29udHJvbGxlciIsImdldENvbnRyb2xsZXJHcmlwIiwiZ2V0SGFuZCIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJnZXRSZWZlcmVuY2VTcGFjZSIsImdldEJhc2VMYXllciIsImdldEJpbmRpbmciLCJnZXRGcmFtZSIsInNldFNlc3Npb24iLCJhc3luYyIsInhyQ29tcGF0aWJsZSIsIm1ha2VYUkNvbXBhdGlibGUiLCJsYXllckluaXQiLCJhbnRpYWxpYXMiLCJYUldlYkdMTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsImRlcHRoRm9ybWF0IiwiZGVwdGhUeXBlIiwiZ2xEZXB0aEZvcm1hdCIsInByb2plY3Rpb25sYXllckluaXQiLCJjb2xvckZvcm1hdCIsIlhSV2ViR0xCaW5kaW5nIiwiY3JlYXRlUHJvamVjdGlvbkxheWVyIiwidGV4dHVyZVdpZHRoIiwidGV4dHVyZUhlaWdodCIsInNldEZvdmVhdGlvbiIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwidXBkYXRlQ2FtZXJhIiwiZGVwdGhOZWFyIiwiZGVwdGhGYXIiLCJpcGQiLCJwcm9qTCIsInByb2pSIiwidG9wRm92IiwiYm90dG9tRm92IiwibGVmdEZvdiIsInJpZ2h0Rm92Iiwiek9mZnNldCIsInhPZmZzZXQiLCJuZWFyMiIsImZhcjIiLCJsZWZ0MiIsInJpZ2h0MiIsInRvcDIiLCJib3R0b20yIiwic2V0UHJvamVjdGlvbkZyb21VbmlvbiIsImdldENhbWVyYSIsImdldEZvdmVhdGlvbiIsImZpeGVkRm92ZWF0aW9uIiwiZm92ZWF0aW9uIiwib25BbmltYXRpb25GcmFtZUNhbGxiYWNrIiwiZ2V0Vmlld2VyUG9zZSIsInZpZXdzIiwic2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIiLCJjYW1lcmFWUk5lZWRzVXBkYXRlIiwiZ2xTdWJJbWFnZSIsImdldFZpZXdTdWJJbWFnZSIsInNldFJlbmRlclRhcmdldFRleHR1cmVzIiwiZGVwdGhTdGVuY2lsVGV4dHVyZSIsIldlYkdMTWF0ZXJpYWxzIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwidXZTY2FsZU1hcCIsInV2MlNjYWxlTWFwIiwicmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQiLCJyZWZyZXNoRm9nVW5pZm9ybXMiLCJpc0ZvZyIsImRlbnNpdHkiLCJyZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyIsInBpeGVsUmF0aW8iLCJ0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQiLCJpc01lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0IiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsImlzTWVzaFBob25nTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaG9uZyIsImlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCIsImlzTWVzaE1hdGNhcE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTWF0Y2FwIiwicmVmcmVzaFVuaWZvcm1zRGVwdGgiLCJyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSIsImlzTWVzaE5vcm1hbE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTm9ybWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0Rhc2giLCJpc1BvaW50c01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUG9pbnRzIiwiaXNTcHJpdGVNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMiLCJpc1NoYWRvd01hdGVyaWFsIiwiV2ViR0xSZW5kZXJlciIsImRpc3BsYXkiLCJjcmVhdGVDYW52YXNFbGVtZW50IiwiX2NvbnRleHQiLCJfZGVwdGgiLCJfc3RlbmNpbCIsIl9hbnRpYWxpYXMiLCJfcHJlbXVsdGlwbGllZEFscGhhIiwiX3ByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsIl9wb3dlclByZWZlcmVuY2UiLCJwb3dlclByZWZlcmVuY2UiLCJfZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfYWxwaGEiLCJjdXJyZW50UmVuZGVyTGlzdCIsImN1cnJlbnRSZW5kZXJTdGF0ZSIsInJlbmRlckxpc3RTdGFjayIsInJlbmRlclN0YXRlU3RhY2siLCJkb21FbGVtZW50Iiwic29ydE9iamVjdHMiLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9jdXJyZW50QWN0aXZlQ3ViZUZhY2UiLCJfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsIiwiX2N1cnJlbnRSZW5kZXJUYXJnZXQiLCJfY3VycmVudE1hdGVyaWFsSWQiLCJfY3VycmVudENhbWVyYSIsIl9jdXJyZW50Vmlld3BvcnQiLCJfY3VycmVudFNjaXNzb3IiLCJfY3VycmVudFNjaXNzb3JUZXN0IiwiX3dpZHRoIiwiX2hlaWdodCIsIl9waXhlbFJhdGlvIiwiX29wYXF1ZVNvcnQiLCJfdHJhbnNwYXJlbnRTb3J0IiwiX3NjaXNzb3IiLCJfc2Npc3NvclRlc3QiLCJfY2xpcHBpbmdFbmFibGVkIiwiX2xvY2FsQ2xpcHBpbmdFbmFibGVkIiwiX3RyYW5zbWlzc2lvblJlbmRlclRhcmdldCIsIl9wcm9qU2NyZWVuTWF0cml4IiwiX3ZlY3RvcjMiLCJfZW1wdHlTY2VuZSIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJnZXRUYXJnZXRQaXhlbFJhdGlvIiwicHJvZ3JhbUNhY2hlIiwicmVuZGVyTGlzdHMiLCJtb3JwaHRhcmdldHMiLCJidWZmZXJSZW5kZXJlciIsImluZGV4ZWRCdWZmZXJSZW5kZXJlciIsImNvbnRleHROYW1lcyIsImNvbnRleHRBdHRyaWJ1dGVzIiwiY29udGV4dE5hbWUiLCJvbkNvbnRleHRMb3N0Iiwib25Db250ZXh0UmVzdG9yZSIsImlzV2ViR0wxUmVuZGVyZXIiLCJzaGlmdCIsIm1lc3NhZ2UiLCJpbml0R0xDb250ZXh0IiwicHJldmVudERlZmF1bHQiLCJpbmZvQXV0b1Jlc2V0Iiwic2hhZG93TWFwQXV0b1VwZGF0ZSIsInNoYWRvd01hcE5lZWRzVXBkYXRlIiwib25NYXRlcmlhbERpc3Bvc2UiLCJyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlcyIsImRlYWxsb2NhdGVNYXRlcmlhbCIsImZvcmNlQ29udGV4dExvc3MiLCJsb3NlQ29udGV4dCIsImZvcmNlQ29udGV4dFJlc3RvcmUiLCJyZXN0b3JlQ29udGV4dCIsImdldFBpeGVsUmF0aW8iLCJzZXRQaXhlbFJhdGlvIiwidXBkYXRlU3R5bGUiLCJzZXRWaWV3cG9ydCIsImdldERyYXdpbmdCdWZmZXJTaXplIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRTY2lzc29yIiwic2V0U2Npc3NvciIsImdldFNjaXNzb3JUZXN0IiwiYm9vbGVhbiIsInNldE9wYXF1ZVNvcnQiLCJtZXRob2QiLCJzZXRUcmFuc3BhcmVudFNvcnQiLCJiaXRzIiwib25YUlNlc3Npb25TdGFydCIsIm9uWFJTZXNzaW9uRW5kIiwibmVlZHNQcm9ncmFtQ2hhbmdlIiwibmVlZHNMaWdodHMiLCJsaWdodHNTdGF0ZVZlcnNpb24iLCJnZXRQcm9ncmFtIiwicmVmcmVzaFByb2dyYW0iLCJyZWZyZXNoTWF0ZXJpYWwiLCJyZWZyZXNoTGlnaHRzIiwicF91bmlmb3JtcyIsIm1fdW5pZm9ybXMiLCJ1Q2FtUG9zIiwiY2FtZXJhUG9zaXRpb24iLCJib25lVGV4dHVyZSIsImNvbXB1dGVCb25lVGV4dHVyZSIsImJvbmVUZXh0dXJlU2l6ZSIsInVuaWZvcm1zTGlzdCIsInNldFByb2dyYW0iLCJyYW5nZUZhY3RvciIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwicHJvamVjdE9iamVjdCIsImlzTE9EIiwicmVuZGVyU2NlbmUiLCJvcGFxdWVPYmplY3RzIiwidHJhbnNtaXNzaXZlT2JqZWN0cyIsInRyYW5zcGFyZW50T2JqZWN0cyIsImN1cnJlbnRUb25lTWFwcGluZyIsInJlbmRlck9iamVjdHMiLCJyZW5kZXJUcmFuc21pc3Npb25QYXNzIiwicHJvZ3JhbUNhY2hlS2V5IiwidXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzIiwibWF0ZXJpYWxOZWVkc0xpZ2h0cyIsInByb2dVbmlmb3JtcyIsImNhbWVyYTIiLCJkZWZhdWx0RnJhbWVidWZmZXIiLCJfX3VzZURlZmF1bHRGcmFtZWJ1ZmZlciIsInVzZURlZmF1bHRGcmFtZWJ1ZmZlciIsImlzUmVuZGVyVGFyZ2V0M0QiLCJmcmFtZWJ1ZmZlclRleHR1cmVMYXllciIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHMiLCJhY3RpdmVDdWJlRmFjZUluZGV4IiwidGV4dHVyZUZvcm1hdCIsImhhbGZGbG9hdFN1cHBvcnRlZEJ5RXh0IiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsInJlYWRQaXhlbHMiLCJjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUiLCJsZXZlbCIsImxldmVsU2NhbGUiLCJjb3B5VGV4U3ViSW1hZ2UyRCIsImNvcHlUZXh0dXJlVG9UZXh0dXJlIiwic3JjVGV4dHVyZSIsImRzdFRleHR1cmUiLCJjb3B5VGV4dHVyZVRvVGV4dHVyZTNEIiwic291cmNlQm94IiwiZ2xUYXJnZXQiLCJ1bnBhY2tSb3dMZW4iLCJ1bnBhY2tJbWFnZUhlaWdodCIsInVucGFja1NraXBQaXhlbHMiLCJ1bnBhY2tTa2lwUm93cyIsInVucGFja1NraXBJbWFnZXMiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCIsInJlc2V0U3RhdGUiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsImlzV2ViR0xSZW5kZXJlciIsIldlYkdMMVJlbmRlcmVyIiwiRm9nRXhwMiIsIkZvZyIsIlNjZW5lIiwiSW50ZXJsZWF2ZWRCdWZmZXIiLCJhcnJheUJ1ZmZlcnMiLCJfdXVpZCIsImliIiwiaXNJbnRlcmxlYXZlZEJ1ZmZlciIsIl92ZWN0b3IkNiIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJpbnRlcmxlYXZlZEJ1ZmZlcnMiLCJfZ2VvbWV0cnkiLCJfaW50ZXJzZWN0UG9pbnQiLCJfd29ybGRTY2FsZSIsIl9tdlBvc2l0aW9uIiwiX2FsaWduZWRQb3NpdGlvbiIsIl9yb3RhdGVkUG9zaXRpb24iLCJfdmlld1dvcmxkTWF0cml4IiwiX3ZBIiwiX3ZCIiwiX3ZDIiwiX3V2QSIsIl91dkIiLCJfdXZDIiwiU3ByaXRlIiwiZmxvYXQzMkFycmF5IiwidHJhbnNmb3JtVmVydGV4IiwidmVydGV4UG9zaXRpb24iLCJtdlBvc2l0aW9uIiwiX3YxJDIiLCJfdjIkMSIsIkxPRCIsIl9jdXJyZW50TGV2ZWwiLCJhZGRMZXZlbCIsImdldEN1cnJlbnRMZXZlbCIsImdldE9iamVjdEZvckRpc3RhbmNlIiwiX2Jhc2VQb3NpdGlvbiIsIl9za2luSW5kZXgiLCJfc2tpbldlaWdodCIsIl92ZWN0b3IkNSIsIl9tYXRyaXgiLCJTa2lubmVkTWVzaCIsImJpbmRNYXRyaXhJbnZlcnNlIiwiYmluZCIsImNhbGN1bGF0ZUludmVyc2VzIiwibm9ybWFsaXplU2tpbldlaWdodHMiLCJza2luV2VpZ2h0Iiwic2tpbkluZGV4IiwiYm9uZUluZGV4IiwiYm9uZUludmVyc2VzIiwiQm9uZSIsImlzQm9uZSIsIkRhdGFUZXh0dXJlIiwiX29mZnNldE1hdHJpeCIsIl9pZGVudGl0eU1hdHJpeCIsIlNrZWxldG9uIiwiYm9uZU1hdHJpY2VzIiwiaW52ZXJzZSIsImJvbmUiLCJnZXRCb25lQnlOYW1lIiwiZnJvbUpTT04iLCJqc29uIiwiYm9uZUludmVyc2UiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJfaW5zdGFuY2VMb2NhbE1hdHJpeCIsIl9pbnN0YW5jZVdvcmxkTWF0cml4IiwiX2luc3RhbmNlSW50ZXJzZWN0cyIsIl9tZXNoIiwiSW5zdGFuY2VkTWVzaCIsImdldENvbG9yQXQiLCJnZXRNYXRyaXhBdCIsInJheWNhc3RUaW1lcyIsImluc3RhbmNlSWQiLCJzZXRDb2xvckF0Iiwic2V0TWF0cml4QXQiLCJsaW5lY2FwIiwibGluZWpvaW4iLCJfc3RhcnQkMSIsIl9lbmQkMSIsIl9pbnZlcnNlTWF0cml4JDEiLCJfcmF5JDEiLCJfc3BoZXJlJDEiLCJMaW5lIiwiY29tcHV0ZUxpbmVEaXN0YW5jZXMiLCJsaW5lRGlzdGFuY2VzIiwibG9jYWxUaHJlc2hvbGQiLCJsb2NhbFRocmVzaG9sZFNxIiwidlN0YXJ0IiwidkVuZCIsImludGVyU2VnbWVudCIsImludGVyUmF5IiwiX3N0YXJ0IiwiX2VuZCIsIkxpbmVTZWdtZW50cyIsIkxpbmVMb29wIiwiX2ludmVyc2VNYXRyaXgiLCJfcmF5IiwiX3NwaGVyZSIsIl9wb3NpdGlvbiQyIiwiUG9pbnRzIiwidGVzdFBvaW50IiwicmF5UG9pbnREaXN0YW5jZVNxIiwiaW50ZXJzZWN0UG9pbnQiLCJkaXN0YW5jZVRvUmF5IiwiVmlkZW9UZXh0dXJlIiwidmlkZW8iLCJyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrIiwidXBkYXRlVmlkZW8iLCJyZWFkeVN0YXRlIiwiSEFWRV9DVVJSRU5UX0RBVEEiLCJGcmFtZWJ1ZmZlclRleHR1cmUiLCJDb21wcmVzc2VkVGV4dHVyZSIsIkNhbnZhc1RleHR1cmUiLCJpc0NhbnZhc1RleHR1cmUiLCJDaXJjbGVHZW9tZXRyeSIsInNlZ21lbnRzIiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwidmVydGV4Iiwic2VnbWVudCIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJyYWRpYWxTZWdtZW50cyIsIm9wZW5FbmRlZCIsImluZGV4QXJyYXkiLCJnZW5lcmF0ZUNhcCIsImNlbnRlckluZGV4U3RhcnQiLCJjZW50ZXJJbmRleEVuZCIsImNvc1RoZXRhIiwic2luVGhldGEiLCJzbG9wZSIsImluZGV4Um93IiwiZ2VuZXJhdGVUb3JzbyIsIkNvbmVHZW9tZXRyeSIsIlBvbHloZWRyb25HZW9tZXRyeSIsInZlcnRleEJ1ZmZlciIsInV2QnVmZmVyIiwic3ViZGl2aWRlRmFjZSIsImNvbHMiLCJhaiIsImJqIiwicm93cyIsInB1c2hWZXJ0ZXgiLCJnZXRWZXJ0ZXhCeUluZGV4IiwiY29ycmVjdFVWIiwiYXppbXV0aCIsInN1YmRpdmlkZSIsImFwcGx5UmFkaXVzIiwiY2VudHJvaWQiLCJhemkiLCJjb3JyZWN0VVZzIiwiY29ycmVjdFNlYW0iLCJnZW5lcmF0ZVVWcyIsImRldGFpbHMiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsIl92MCIsIl92MSQxIiwiX25vcm1hbCIsIl90cmlhbmdsZSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInByZWNpc2lvblBvaW50cyIsInRocmVzaG9sZERvdCIsImluZGV4QXR0ciIsInBvc2l0aW9uQXR0ciIsImluZGV4Q291bnQiLCJpbmRleEFyciIsInZlcnRLZXlzIiwiaGFzaGVzIiwiZWRnZURhdGEiLCJqTmV4dCIsInZlY0hhc2gwIiwidmVjSGFzaDEiLCJyZXZlcnNlSGFzaCIsImluZGV4MCIsIkN1cnZlIiwiYXJjTGVuZ3RoRGl2aXNpb25zIiwiZ2V0UG9pbnQiLCJnZXRQb2ludEF0Iiwib3B0aW9uYWxUYXJnZXQiLCJnZXRVdG9UbWFwcGluZyIsImdldFBvaW50cyIsImRpdmlzaW9ucyIsImdldFNwYWNlZFBvaW50cyIsImdldExlbmd0aCIsImxlbmd0aHMiLCJnZXRMZW5ndGhzIiwiY2FjaGVBcmNMZW5ndGhzIiwiY3VycmVudCIsImxhc3QiLCJ1cGRhdGVBcmNMZW5ndGhzIiwiYXJjTGVuZ3RocyIsInRhcmdldEFyY0xlbmd0aCIsImNvbXBhcmlzb24iLCJsZW5ndGhCZWZvcmUiLCJnZXRUYW5nZW50IiwidDIiLCJwdDEiLCJwdDIiLCJnZXRUYW5nZW50QXQiLCJjb21wdXRlRnJlbmV0RnJhbWVzIiwiY2xvc2VkIiwiYmlub3JtYWxzIiwidmVjIiwibWF0IiwiTUFYX1ZBTFVFIiwidHoiLCJFbGxpcHNlQ3VydmUiLCJhWCIsImFZIiwieFJhZGl1cyIsInlSYWRpdXMiLCJhU3RhcnRBbmdsZSIsImFFbmRBbmdsZSIsImFDbG9ja3dpc2UiLCJhUm90YXRpb24iLCJ0d29QaSIsImRlbHRhQW5nbGUiLCJzYW1lUG9pbnRzIiwiaXNFbGxpcHNlQ3VydmUiLCJBcmNDdXJ2ZSIsImFSYWRpdXMiLCJDdWJpY1BvbHkiLCJjMCIsImluaXRDYXRtdWxsUm9tIiwieDMiLCJ0ZW5zaW9uIiwiaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tIiwiZHQwIiwiZHQxIiwiZHQyIiwiY2FsYyIsImlzQXJjQ3VydmUiLCJweCIsInB5IiwicHoiLCJDYXRtdWxsUm9tQ3VydmUzIiwiY3VydmVUeXBlIiwiaW50UG9pbnQiLCJDYXRtdWxsUm9tIiwiUXVhZHJhdGljQmV6aWVyIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiaXNDYXRtdWxsUm9tQ3VydmUzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsInYzIiwiaXNDdWJpY0JlemllckN1cnZlIiwiQ3ViaWNCZXppZXJDdXJ2ZTMiLCJpc0N1YmljQmV6aWVyQ3VydmUzIiwiTGluZUN1cnZlIiwiaXNMaW5lQ3VydmUiLCJMaW5lQ3VydmUzIiwiaXNMaW5lQ3VydmUzIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJpc1F1YWRyYXRpY0JlemllckN1cnZlIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZSIsImlzU3BsaW5lQ3VydmUiLCJDdXJ2ZXMiLCJDdXJ2ZVBhdGgiLCJjdXJ2ZXMiLCJhdXRvQ2xvc2UiLCJjdXJ2ZSIsImNsb3NlUGF0aCIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImN1cnZlTGVuZ3RocyIsImdldEN1cnZlTGVuZ3RocyIsImRpZmYiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJwdHMiLCJQYXRoIiwiY3VycmVudFBvaW50IiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFDUHgiLCJhQ1B5IiwiYmV6aWVyQ3VydmVUbyIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5Iiwic3BsaW5lVGhydSIsIm5wdHMiLCJhcmMiLCJhYnNhcmMiLCJhYnNlbGxpcHNlIiwiZWxsaXBzZSIsImZpcnN0UG9pbnQiLCJsYXN0UG9pbnQiLCJTaGFwZSIsImhvbGVzIiwiZ2V0UG9pbnRzSG9sZXMiLCJob2xlc1B0cyIsImV4dHJhY3RQb2ludHMiLCJob2xlIiwibGlua2VkTGlzdCIsImRpbSIsImNsb2Nrd2lzZSIsInNpZ25lZEFyZWEiLCJpbnNlcnROb2RlIiwicmVtb3ZlTm9kZSIsImZpbHRlclBvaW50cyIsImFnYWluIiwic3RlaW5lciIsInByZXYiLCJlYXJjdXRMaW5rZWQiLCJlYXIiLCJpbnZTaXplIiwicGFzcyIsInpPcmRlciIsInByZXZaIiwibmV4dFoiLCJ0YWlsIiwibnVtTWVyZ2VzIiwicFNpemUiLCJxU2l6ZSIsImluU2l6ZSIsInNvcnRMaW5rZWQiLCJpbmRleEN1cnZlIiwiaXNFYXJIYXNoZWQiLCJpc0VhciIsImN1cmVMb2NhbEludGVyc2VjdGlvbnMiLCJzcGxpdEVhcmN1dCIsInBvaW50SW5UcmlhbmdsZSIsIm1pblRYIiwibWluVFkiLCJtYXhUWCIsIm1heFRZIiwibG9jYWxseUluc2lkZSIsImlzVmFsaWREaWFnb25hbCIsInNwbGl0UG9seWdvbiIsImNvbXBhcmVYIiwiZWxpbWluYXRlSG9sZSIsIm91dGVyTm9kZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwic2VjdG9yQ29udGFpbnNTZWN0b3IiLCJmaW5kSG9sZUJyaWRnZSIsImdldExlZnRtb3N0IiwibGVmdG1vc3QiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInExIiwicTIiLCJvMSIsIm8yIiwibzMiLCJvNCIsIm9uU2VnbWVudCIsIm51bSIsIk5vZGUiLCJhbiIsImJwIiwiU2hhcGVVdGlscyIsImNvbnRvdXIiLCJhcmVhIiwiaG9sZUluZGljZXMiLCJyZW1vdmVEdXBFbmRQdHMiLCJhZGRDb250b3VyIiwiaG9sZUluZGV4IiwiaGFzSG9sZXMiLCJvdXRlckxlbiIsInF1ZXVlIiwiZWxpbWluYXRlSG9sZXMiLCJFYXJjdXQiLCJFeHRydWRlR2VvbWV0cnkiLCJ2ZXJ0aWNlc0FycmF5IiwidXZBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsT2Zmc2V0IiwiYmV2ZWxTZWdtZW50cyIsImV4dHJ1ZGVQYXRoIiwidXZnZW4iLCJVVkdlbmVyYXRvciIsIldvcmxkVVZHZW5lcmF0b3IiLCJhbW91bnQiLCJleHRydWRlUHRzIiwic3BsaW5lVHViZSIsImJpbm9ybWFsIiwicG9zaXRpb24yIiwiZXh0cnVkZUJ5UGF0aCIsInNoYXBlUG9pbnRzIiwiaXNDbG9ja1dpc2UiLCJyZXZlcnNlIiwiaGwiLCJhaG9sZSIsInRyaWFuZ3VsYXRlU2hhcGUiLCJzY2FsZVB0MiIsInB0IiwidmxlbiIsImZsZW4iLCJnZXRCZXZlbFZlYyIsImluUHQiLCJpblByZXYiLCJpbk5leHQiLCJ2X3RyYW5zX3giLCJ2X3RyYW5zX3kiLCJzaHJpbmtfYnkiLCJ2X3ByZXZfeCIsInZfcHJldl95Iiwidl9uZXh0X3giLCJ2X25leHRfeSIsInZfcHJldl9sZW5zcSIsImNvbGxpbmVhcjAiLCJ2X3ByZXZfbGVuIiwidl9uZXh0X2xlbiIsInB0UHJldlNoaWZ0X3giLCJwdFByZXZTaGlmdF95Iiwic2YiLCJ2X3RyYW5zX2xlbnNxIiwiZGlyZWN0aW9uX2VxIiwiY29udG91ck1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsInZlcnRpY2VzTW92ZW1lbnRzIiwiYnMiLCJ2ZXJ0Iiwic2lkZXdhbGxzIiwibGF5ZXJvZmZzZXQiLCJzbCIsInNsZW4xIiwic2xlbjIiLCJmNCIsImYzIiwiYWRkVmVydGV4IiwibmV4dEluZGV4IiwiZ2VuZXJhdGVUb3BVViIsImFkZFVWIiwiZ2VuZXJhdGVTaWRlV2FsbFVWIiwidmVjdG9yMiIsImJ1aWxkTGlkRmFjZXMiLCJidWlsZFNpZGVGYWNlcyIsInRvSlNPTiQxIiwiZ2VvbWV0cnlTaGFwZXMiLCJpbmRleEEiLCJpbmRleEIiLCJpbmRleEMiLCJhX3giLCJhX3kiLCJiX3giLCJiX3kiLCJjX3giLCJjX3kiLCJpbmRleEQiLCJhX3oiLCJiX3oiLCJjX3oiLCJkX3giLCJkX3kiLCJkX3oiLCJJY29zYWhlZHJvbkdlb21ldHJ5IiwiTGF0aGVHZW9tZXRyeSIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwiaW5pdE5vcm1hbHMiLCJpbnZlcnNlU2VnbWVudHMiLCJjdXJOb3JtYWwiLCJwcmV2Tm9ybWFsIiwiT2N0YWhlZHJvbkdlb21ldHJ5IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsInJhZGl1c1N0ZXAiLCJ0aGV0YVNlZ21lbnRMZXZlbCIsIlNoYXBlR2VvbWV0cnkiLCJpbmRleE9mZnNldCIsInNoYXBlVmVydGljZXMiLCJzaGFwZUhvbGVzIiwic2hhcGVIb2xlIiwiU3BoZXJlR2VvbWV0cnkiLCJ0aGV0YUVuZCIsImdyaWQiLCJ2ZXJ0aWNlc1JvdyIsInVPZmZzZXQiLCJUZXRyYWhlZHJvbkdlb21ldHJ5IiwiVG9ydXNHZW9tZXRyeSIsInR1YmUiLCJ0dWJ1bGFyU2VnbWVudHMiLCJUb3J1c0tub3RHZW9tZXRyeSIsIlAxIiwiUDIiLCJCIiwiVCIsIk4iLCJjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUiLCJjdSIsInN1IiwicXVPdmVyUCIsImNzIiwiVHViZUdlb21ldHJ5IiwiZnJhbWVzIiwiUCIsImdlbmVyYXRlU2VnbWVudCIsImdlbmVyYXRlSW5kaWNlcyIsImdlbmVyYXRlQnVmZmVyRGF0YSIsIldpcmVmcmFtZUdlb21ldHJ5IiwiZWRnZXMiLCJvbCIsImlzVW5pcXVlRWRnZSIsImhhc2gxIiwiaGFzaDIiLCJHZW9tZXRyaWVzIiwiQm94QnVmZmVyR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkNvbmVCdWZmZXJHZW9tZXRyeSIsIkN5bGluZGVyQnVmZmVyR2VvbWV0cnkiLCJEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSIsIkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSIsIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJMYXRoZUJ1ZmZlckdlb21ldHJ5IiwiT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiUGxhbmVCdWZmZXJHZW9tZXRyeSIsIlBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSIsIlJpbmdCdWZmZXJHZW9tZXRyeSIsIlNoYXBlQnVmZmVyR2VvbWV0cnkiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJUb3J1c0J1ZmZlckdlb21ldHJ5IiwiVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkiLCJUdWJlQnVmZmVyR2VvbWV0cnkiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIl9zaGVlbiIsIl9jbGVhcmNvYXQiLCJfdHJhbnNtaXNzaW9uIiwibWF0ZXJpYWxMaWIiLCJBbmltYXRpb25VdGlscyIsImFycmF5U2xpY2UiLCJmcm9tIiwidG8iLCJpc1R5cGVkQXJyYXkiLCJjb252ZXJ0QXJyYXkiLCJmb3JjZUNsb25lIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJnZXRLZXlmcmFtZU9yZGVyIiwidGltZXMiLCJzb3J0ZWRBcnJheSIsIm5WYWx1ZXMiLCJzcmNPZmZzZXQiLCJmbGF0dGVuSlNPTiIsImpzb25LZXlzIiwidmFsdWVQcm9wZXJ0eU5hbWUiLCJzdWJjbGlwIiwic291cmNlQ2xpcCIsInN0YXJ0RnJhbWUiLCJlbmRGcmFtZSIsImZwcyIsImNsaXAiLCJ0cmFja3MiLCJ0cmFjayIsInZhbHVlU2l6ZSIsImdldFZhbHVlU2l6ZSIsIm1pblN0YXJ0VGltZSIsInJlc2V0RHVyYXRpb24iLCJtYWtlQ2xpcEFkZGl0aXZlIiwidGFyZ2V0Q2xpcCIsInJlZmVyZW5jZUZyYW1lIiwicmVmZXJlbmNlQ2xpcCIsIm51bVRyYWNrcyIsInJlZmVyZW5jZVRpbWUiLCJyZWZlcmVuY2VUcmFjayIsInJlZmVyZW5jZVRyYWNrVHlwZSIsIlZhbHVlVHlwZU5hbWUiLCJ0YXJnZXRUcmFjayIsImZpbmQiLCJyZWZlcmVuY2VPZmZzZXQiLCJyZWZlcmVuY2VWYWx1ZVNpemUiLCJjcmVhdGVJbnRlcnBvbGFudCIsImlzSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lIiwidGFyZ2V0T2Zmc2V0IiwidGFyZ2V0VmFsdWVTaXplIiwicmVmZXJlbmNlVmFsdWUiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJpbnRlcnBvbGFudCIsImV2YWx1YXRlIiwicmVzdWx0QnVmZmVyIiwibnVtVGltZXMiLCJ2YWx1ZVN0YXJ0IiwibXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQiLCJ2YWx1ZUVuZCIsImJsZW5kTW9kZSIsIkludGVycG9sYW50IiwicGFyYW1ldGVyUG9zaXRpb25zIiwic2FtcGxlVmFsdWVzIiwic2FtcGxlU2l6ZSIsIl9jYWNoZWRJbmRleCIsInNldHRpbmdzIiwiRGVmYXVsdFNldHRpbmdzXyIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImFmdGVyRW5kXyIsInQxZ2xvYmFsIiwiYmVmb3JlU3RhcnRfIiwibWlkIiwiaW50ZXJ2YWxDaGFuZ2VkXyIsImludGVycG9sYXRlXyIsImdldFNldHRpbmdzXyIsImNvcHlTYW1wbGVWYWx1ZV8iLCJDdWJpY0ludGVycG9sYW50IiwiX3dlaWdodFByZXYiLCJfb2Zmc2V0UHJldiIsIl93ZWlnaHROZXh0IiwiX29mZnNldE5leHQiLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzAiLCJvUCIsIm9OIiwid1AiLCJ3TiIsInBwcCIsInNQIiwic04iLCJMaW5lYXJJbnRlcnBvbGFudCIsIm9mZnNldDEiLCJvZmZzZXQwIiwid2VpZ2h0MSIsIndlaWdodDAiLCJEaXNjcmV0ZUludGVycG9sYW50IiwiS2V5ZnJhbWVUcmFjayIsImludGVycG9sYXRpb24iLCJUaW1lQnVmZmVyVHlwZSIsIlZhbHVlQnVmZmVyVHlwZSIsInNldEludGVycG9sYXRpb24iLCJEZWZhdWx0SW50ZXJwb2xhdGlvbiIsInRyYWNrVHlwZSIsImdldEludGVycG9sYXRpb24iLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhciIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCIsImZhY3RvcnlNZXRob2QiLCJ0aW1lT2Zmc2V0IiwidGltZVNjYWxlIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsIm5LZXlzIiwidmFsaWRhdGUiLCJ2YWxpZCIsInByZXZUaW1lIiwiY3VyclRpbWUiLCJvcHRpbWl6ZSIsInNtb290aEludGVycG9sYXRpb24iLCJ3cml0ZUluZGV4Iiwia2VlcCIsIm9mZnNldFAiLCJvZmZzZXROIiwicmVhZE9mZnNldCIsIndyaXRlT2Zmc2V0IiwiVHlwZWRLZXlmcmFtZVRyYWNrIiwiQm9vbGVhbktleWZyYW1lVHJhY2siLCJDb2xvcktleWZyYW1lVHJhY2siLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50Iiwic2xlcnBGbGF0IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIkFuaW1hdGlvbkNsaXAiLCJkdXJhdGlvbiIsImpzb25UcmFja3MiLCJmcmFtZVRpbWUiLCJwYXJzZUtleWZyYW1lVHJhY2siLCJjbGlwVHJhY2tzIiwibW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm5vTG9vcCIsIm51bU1vcnBoVGFyZ2V0cyIsIm9iamVjdE9yQ2xpcEFycmF5IiwiY2xpcEFycmF5IiwiYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMiLCJwYXR0ZXJuIiwicGFydHMiLCJhbmltYXRpb25Nb3JwaFRhcmdldHMiLCJjbGlwcyIsIkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlIiwiYWRkTm9uZW1wdHlUcmFjayIsInRyYWNrTmFtZSIsImFuaW1hdGlvbktleXMiLCJwcm9wZXJ0eU5hbWUiLCJkZXN0VHJhY2tzIiwiY2xpcE5hbWUiLCJoaWVyYXJjaHlUcmFja3MiLCJoaWVyYXJjaHkiLCJtb3JwaFRhcmdldE5hbWVzIiwibW9ycGhUYXJnZXROYW1lIiwiYW5pbWF0aW9uS2V5IiwiYm9uZU5hbWUiLCJ0eXBlTmFtZSIsImdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUiLCJDYWNoZSIsImZpbGVzIiwiZmlsZSIsIkxvYWRpbmdNYW5hZ2VyIiwidXJsTW9kaWZpZXIiLCJpc0xvYWRpbmciLCJpdGVtc0xvYWRlZCIsIml0ZW1zVG90YWwiLCJoYW5kbGVycyIsIm9uU3RhcnQiLCJpdGVtU3RhcnQiLCJpdGVtRW5kIiwiaXRlbUVycm9yIiwicmVzb2x2ZVVSTCIsInNldFVSTE1vZGlmaWVyIiwiYWRkSGFuZGxlciIsInJlZ2V4IiwicmVtb3ZlSGFuZGxlciIsImdldEhhbmRsZXIiLCJnbG9iYWwiLCJMb2FkZXIiLCJjcm9zc09yaWdpbiIsIndpdGhDcmVkZW50aWFscyIsInJlc291cmNlUGF0aCIsInJlcXVlc3RIZWFkZXIiLCJsb2FkQXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldENyb3NzT3JpZ2luIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0UGF0aCIsInNldFJlc291cmNlUGF0aCIsInNldFJlcXVlc3RIZWFkZXIiLCJsb2FkaW5nIiwic2V0VGltZW91dCIsInJlcSIsIlJlcXVlc3QiLCJoZWFkZXJzIiwiSGVhZGVycyIsImNyZWRlbnRpYWxzIiwibWltZVR5cGUiLCJyZXNwb25zZVR5cGUiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIlJlYWRhYmxlU3RyZWFtIiwiYm9keSIsImdldFJlYWRlciIsImNhbGxiYWNrcyIsImNvbnRlbnRMZW5ndGgiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJzdHJlYW0iLCJyZWFkRGF0YSIsInJlYWQiLCJkb25lIiwiY2xvc2UiLCJQcm9ncmVzc0V2ZW50IiwiZW5xdWV1ZSIsIlJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImFycmF5QnVmZmVyIiwiYmxvYiIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImxhYmVsIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwiY2F0Y2giLCJmaW5hbGx5Iiwic2V0TWltZVR5cGUiLCJBbmltYXRpb25Mb2FkZXIiLCJDb21wcmVzc2VkVGV4dHVyZUxvYWRlciIsImxvYWRUZXh0dXJlIiwidGV4RGF0YXMiLCJtaXBtYXBDb3VudCIsImlzQ3ViZW1hcCIsIkltYWdlTG9hZGVyIiwib25JbWFnZUxvYWQiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsIm9uSW1hZ2VFcnJvciIsIkN1YmVUZXh0dXJlTG9hZGVyIiwidXJscyIsIkRhdGFUZXh0dXJlTG9hZGVyIiwidGV4RGF0YSIsIlRleHR1cmVMb2FkZXIiLCJMaWdodCIsIkhlbWlzcGhlcmVMaWdodCIsIl9wcm9qU2NyZWVuTWF0cml4JDEiLCJfbGlnaHRQb3NpdGlvbldvcmxkJDEiLCJfbG9va1RhcmdldCQxIiwiTGlnaHRTaGFkb3ciLCJfZnJhbWVFeHRlbnRzIiwiX3ZpZXdwb3J0Q291bnQiLCJfdmlld3BvcnRzIiwic2hhZG93TWF0cml4Iiwidmlld3BvcnRJbmRleCIsIlNwb3RMaWdodFNoYWRvdyIsImlzU3BvdExpZ2h0U2hhZG93IiwiU3BvdExpZ2h0IiwicG93ZXIiLCJfbGlnaHRQb3NpdGlvbldvcmxkIiwiX2xvb2tUYXJnZXQiLCJQb2ludExpZ2h0U2hhZG93IiwiX2N1YmVEaXJlY3Rpb25zIiwiX2N1YmVVcHMiLCJQb2ludExpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodFNoYWRvdyIsImlzRGlyZWN0aW9uYWxMaWdodFNoYWRvdyIsIkRpcmVjdGlvbmFsTGlnaHQiLCJBbWJpZW50TGlnaHQiLCJSZWN0QXJlYUxpZ2h0IiwiU3BoZXJpY2FsSGFybW9uaWNzMyIsInplcm8iLCJnZXRBdCIsImNvZWZmIiwiZ2V0SXJyYWRpYW5jZUF0IiwiYWRkU2NhbGVkU0giLCJzaEJhc2lzIiwiaXNTcGhlcmljYWxIYXJtb25pY3MzIiwiTGlnaHRQcm9iZSIsIk1hdGVyaWFsTG9hZGVyIiwiZ2V0VGV4dHVyZSIsInNoYWRpbmciLCJzZXRUZXh0dXJlcyIsIkxvYWRlclV0aWxzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwibGFzdEluZGV4T2YiLCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwiaW50ZXJsZWF2ZWRCdWZmZXJNYXAiLCJhcnJheUJ1ZmZlck1hcCIsImdldEludGVybGVhdmVkQnVmZmVyIiwiZ2V0QXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYnVmZmVyQXR0cmlidXRlIiwiZHJhd2NhbGxzIiwib2Zmc2V0cyIsIk9iamVjdExvYWRlciIsImV4dHJhY3RVcmxCYXNlIiwicGFyc2VBc3luYyIsInBhcnNlQW5pbWF0aW9ucyIsInBhcnNlU2hhcGVzIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsInBhcnNlU2tlbGV0b25zIiwiYmluZFNrZWxldG9ucyIsImhhc0ltYWdlcyIsInBhcnNlSW1hZ2VzQXN5bmMiLCJidWZmZXJHZW9tZXRyeUxvYWRlciIsImRlc2VyaWFsaXplSW1hZ2UiLCJsb2FkSW1hZ2UiLCJpbWFnZUFycmF5IiwiZGVzZXJpYWxpemVkSW1hZ2UiLCJjdXJyZW50VXJsIiwicGFyc2VDb25zdGFudCIsIlRFWFRVUkVfTUFQUElORyIsIlRFWFRVUkVfV1JBUFBJTkciLCJURVhUVVJFX0ZJTFRFUiIsImdldEdlb21ldHJ5IiwiZ2V0TWF0ZXJpYWwiLCJpc0ludGVnZXIiLCJvYmplY3RBbmltYXRpb25zIiwic2V0VGV4dHVyZVBhdGgiLCJJbWFnZUJpdG1hcExvYWRlciIsImNyZWF0ZUltYWdlQml0bWFwIiwic2V0T3B0aW9ucyIsImZldGNoT3B0aW9ucyIsInJlcyIsImNvbG9yU3BhY2VDb252ZXJzaW9uIiwiaW1hZ2VCaXRtYXAiLCJpc0ltYWdlQml0bWFwTG9hZGVyIiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiQXVkaW9Mb2FkZXIiLCJidWZmZXJDb3B5IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJIZW1pc3BoZXJlTGlnaHRQcm9iZSIsInNreSIsImdyb3VuZCIsImlzSGVtaXNwaGVyZUxpZ2h0UHJvYmUiLCJBbWJpZW50TGlnaHRQcm9iZSIsImlzQW1iaWVudExpZ2h0UHJvYmUiLCJfZXllUmlnaHQiLCJfZXllTGVmdCIsIl9wcm9qZWN0aW9uTWF0cml4IiwiU3RlcmVvQ2FtZXJhIiwiZXllU2VwIiwiX2NhY2hlIiwiZXllU2VwSGFsZiIsImV5ZVNlcE9uUHJvamVjdGlvbiIsInltYXgiLCJ4bWluIiwieG1heCIsIkNsb2NrIiwiYXV0b1N0YXJ0Iiwib2xkVGltZSIsImVsYXBzZWRUaW1lIiwicnVubmluZyIsIm5vdyIsImdldEVsYXBzZWRUaW1lIiwiZ2V0RGVsdGEiLCJuZXdUaW1lIiwicGVyZm9ybWFuY2UiLCJEYXRlIiwiX3Bvc2l0aW9uJDEiLCJfcXVhdGVybmlvbiQxIiwiX3NjYWxlJDEiLCJfb3JpZW50YXRpb24kMSIsIkF1ZGlvTGlzdGVuZXIiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInRpbWVEZWx0YSIsIl9jbG9jayIsImdldElucHV0IiwicmVtb3ZlRmlsdGVyIiwiZ2V0RmlsdGVyIiwic2V0RmlsdGVyIiwiZ2V0TWFzdGVyVm9sdW1lIiwic2V0TWFzdGVyVm9sdW1lIiwic2V0VGFyZ2V0QXRUaW1lIiwiY3VycmVudFRpbWUiLCJwb3NpdGlvblgiLCJsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZSIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsImZvcndhcmRYIiwiZm9yd2FyZFkiLCJmb3J3YXJkWiIsInVwWCIsInVwWSIsInVwWiIsInNldE9yaWVudGF0aW9uIiwiQXVkaW8iLCJhdXRvcGxheSIsImRldHVuZSIsImxvb3AiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwicGxheWJhY2tSYXRlIiwiaXNQbGF5aW5nIiwiaGFzUGxheWJhY2tDb250cm9sIiwic291cmNlVHlwZSIsIl9zdGFydGVkQXQiLCJfcHJvZ3Jlc3MiLCJfY29ubmVjdGVkIiwiZmlsdGVycyIsImdldE91dHB1dCIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRNZWRpYVN0cmVhbVNvdXJjZSIsIm1lZGlhU3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiZGVsYXkiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJvbmVuZGVkIiwib25FbmRlZCIsInNldERldHVuZSIsInNldFBsYXliYWNrUmF0ZSIsInBhdXNlIiwiZ2V0RmlsdGVycyIsInNldEZpbHRlcnMiLCJnZXREZXR1bmUiLCJnZXRQbGF5YmFja1JhdGUiLCJnZXRMb29wIiwic2V0TG9vcCIsInNldExvb3BTdGFydCIsInNldExvb3BFbmQiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfcG9zaXRpb24iLCJfcXVhdGVybmlvbiIsIl9zY2FsZSIsIl9vcmllbnRhdGlvbiIsIlBvc2l0aW9uYWxBdWRpbyIsInBhbm5lciIsImNyZWF0ZVBhbm5lciIsInBhbm5pbmdNb2RlbCIsImdldFJlZkRpc3RhbmNlIiwicmVmRGlzdGFuY2UiLCJzZXRSZWZEaXN0YW5jZSIsImdldFJvbGxvZmZGYWN0b3IiLCJyb2xsb2ZmRmFjdG9yIiwic2V0Um9sbG9mZkZhY3RvciIsImdldERpc3RhbmNlTW9kZWwiLCJkaXN0YW5jZU1vZGVsIiwic2V0RGlzdGFuY2VNb2RlbCIsImdldE1heERpc3RhbmNlIiwibWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsInNldERpcmVjdGlvbmFsQ29uZSIsImNvbmVJbm5lckFuZ2xlIiwiY29uZU91dGVyQW5nbGUiLCJjb25lT3V0ZXJHYWluIiwib3JpZW50YXRpb25YIiwib3JpZW50YXRpb25ZIiwib3JpZW50YXRpb25aIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJQcm9wZXJ0eU1peGVyIiwiYmluZGluZyIsIm1peEZ1bmN0aW9uIiwibWl4RnVuY3Rpb25BZGRpdGl2ZSIsInNldElkZW50aXR5IiwiX3NsZXJwIiwiX3NsZXJwQWRkaXRpdmUiLCJfc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb24iLCJfd29ya0luZGV4IiwiX3NlbGVjdCIsIl9zZXRBZGRpdGl2ZUlkZW50aXR5T3RoZXIiLCJfbGVycCIsIl9sZXJwQWRkaXRpdmUiLCJfc2V0QWRkaXRpdmVJZGVudGl0eU51bWVyaWMiLCJfbWl4QnVmZmVyUmVnaW9uIiwiX21peEJ1ZmZlclJlZ2lvbkFkZGl0aXZlIiwiX3NldElkZW50aXR5IiwiX29yaWdJbmRleCIsIl9hZGRJbmRleCIsImN1bXVsYXRpdmVXZWlnaHQiLCJjdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUiLCJ1c2VDb3VudCIsInJlZmVyZW5jZUNvdW50IiwiYWNjdW11bGF0ZSIsImFjY3VJbmRleCIsImN1cnJlbnRXZWlnaHQiLCJtaXgiLCJhY2N1bXVsYXRlQWRkaXRpdmUiLCJ3ZWlnaHRBZGRpdGl2ZSIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzYXZlT3JpZ2luYWxTdGF0ZSIsImdldFZhbHVlIiwicmVzdG9yZU9yaWdpbmFsU3RhdGUiLCJ0YXJnZXRJbmRleCIsIndvcmtPZmZzZXQiLCJfcmVzZXJ2ZWRSZSIsIlJlZ0V4cCIsIl93b3JkQ2hhciIsIl93b3JkQ2hhck9yRG90IiwiX2RpcmVjdG9yeVJlIiwiX25vZGVSZSIsIl9vYmplY3RSZSIsIl9wcm9wZXJ0eVJlIiwiX3RyYWNrUmUiLCJfc3VwcG9ydGVkT2JqZWN0TmFtZXMiLCJQcm9wZXJ0eUJpbmRpbmciLCJyb290Tm9kZSIsInBhcnNlZFBhdGgiLCJwYXJzZVRyYWNrTmFtZSIsIm5vZGUiLCJmaW5kTm9kZSIsIm5vZGVOYW1lIiwiX2dldFZhbHVlX3VuYm91bmQiLCJfc2V0VmFsdWVfdW5ib3VuZCIsInJvb3QiLCJpc0FuaW1hdGlvbk9iamVjdEdyb3VwIiwiQ29tcG9zaXRlIiwibWF0Y2hlcyIsInJlc3VsdHMiLCJvYmplY3ROYW1lIiwib2JqZWN0SW5kZXgiLCJwcm9wZXJ0eUluZGV4IiwibGFzdERvdCIsInN1YnN0cmluZyIsInNlYXJjaE5vZGVTdWJ0cmVlIiwiY2hpbGROb2RlIiwic3ViVHJlZU5vZGUiLCJfZ2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfc2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfZ2V0VmFsdWVfZGlyZWN0IiwidGFyZ2V0T2JqZWN0IiwiX2dldFZhbHVlX2FycmF5IiwicmVzb2x2ZWRQcm9wZXJ0eSIsIl9nZXRWYWx1ZV9hcnJheUVsZW1lbnQiLCJfZ2V0VmFsdWVfdG9BcnJheSIsIl9zZXRWYWx1ZV9kaXJlY3QiLCJfc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5IiwiZGVzdCIsIl9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5RWxlbWVudCIsIl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfZnJvbUFycmF5IiwiX3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInRhcmdldEFycmF5Iiwic291cmNlQXJyYXkiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJiaW5kaW5nVHlwZSIsIkJpbmRpbmdUeXBlIiwiRGlyZWN0IiwiQXJyYXlFbGVtZW50IiwiSGFzRnJvbVRvQXJyYXkiLCJFbnRpcmVBcnJheSIsIkdldHRlckJ5QmluZGluZ1R5cGUiLCJTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZyIsInVuYmluZCIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsImZpcnN0VmFsaWRJbmRleCIsIm5DYWNoZWRPYmplY3RzXyIsImJpbmRpbmdzIiwiQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJfaW5kaWNlc0J5VVVJRCIsIl9wYXRocyIsIl9wYXJzZWRQYXRocyIsIl9iaW5kaW5nc0luZGljZXNCeVBhdGgiLCJzdGF0cyIsImluVXNlIiwiYmluZGluZ3NQZXJPYmplY3QiLCJpbmRpY2VzQnlVVUlEIiwicGF0aHMiLCJwYXJzZWRQYXRocyIsIm5CaW5kaW5ncyIsImtub3duT2JqZWN0Iiwibk9iamVjdHMiLCJuQ2FjaGVkT2JqZWN0cyIsImZpcnN0QWN0aXZlSW5kZXgiLCJsYXN0Q2FjaGVkT2JqZWN0IiwiYmluZGluZ3NGb3JQYXRoIiwibGFzdENhY2hlZCIsImxhc3RDYWNoZWRJbmRleCIsImZpcnN0QWN0aXZlT2JqZWN0IiwiZmlyc3RBY3RpdmUiLCJ1bmNhY2hlIiwibGFzdE9iamVjdCIsImluZGljZXNCeVBhdGgiLCJ1bnN1YnNjcmliZV8iLCJsYXN0QmluZGluZ3NJbmRleCIsImxhc3RCaW5kaW5ncyIsIkFuaW1hdGlvbkFjdGlvbiIsIm1peGVyIiwibG9jYWxSb290IiwiX21peGVyIiwiX2NsaXAiLCJfbG9jYWxSb290IiwiblRyYWNrcyIsImludGVycG9sYW50cyIsImludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRTZXR0aW5ncyIsIl9pbnRlcnBvbGFudHMiLCJfcHJvcGVydHlCaW5kaW5ncyIsIl9jYWNoZUluZGV4IiwiX2J5Q2xpcENhY2hlSW5kZXgiLCJfdGltZVNjYWxlSW50ZXJwb2xhbnQiLCJfd2VpZ2h0SW50ZXJwb2xhbnQiLCJfbG9vcENvdW50IiwiX3N0YXJ0VGltZSIsIl9lZmZlY3RpdmVUaW1lU2NhbGUiLCJfZWZmZWN0aXZlV2VpZ2h0IiwicmVwZXRpdGlvbnMiLCJwYXVzZWQiLCJjbGFtcFdoZW5GaW5pc2hlZCIsInplcm9TbG9wZUF0U3RhcnQiLCJ6ZXJvU2xvcGVBdEVuZCIsIl9hY3RpdmF0ZUFjdGlvbiIsIl9kZWFjdGl2YXRlQWN0aW9uIiwic3RvcEZhZGluZyIsInN0b3BXYXJwaW5nIiwiaXNSdW5uaW5nIiwiX2lzQWN0aXZlQWN0aW9uIiwiaXNTY2hlZHVsZWQiLCJzdGFydEF0Iiwic2V0RWZmZWN0aXZlV2VpZ2h0IiwiZ2V0RWZmZWN0aXZlV2VpZ2h0IiwiZmFkZUluIiwiX3NjaGVkdWxlRmFkaW5nIiwiZmFkZU91dCIsImNyb3NzRmFkZUZyb20iLCJmYWRlT3V0QWN0aW9uIiwid2FycCIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwic3RhcnRFbmRSYXRpbyIsImVuZFN0YXJ0UmF0aW8iLCJjcm9zc0ZhZGVUbyIsImZhZGVJbkFjdGlvbiIsIndlaWdodEludGVycG9sYW50IiwiX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50Iiwic2V0RWZmZWN0aXZlVGltZVNjYWxlIiwiZ2V0RWZmZWN0aXZlVGltZVNjYWxlIiwic2V0RHVyYXRpb24iLCJzeW5jV2l0aCIsImFjdGlvbiIsImhhbHQiLCJzdGFydFRpbWVTY2FsZSIsImVuZFRpbWVTY2FsZSIsIl9sZW5kQ29udHJvbEludGVycG9sYW50IiwidGltZVNjYWxlSW50ZXJwb2xhbnQiLCJnZXRNaXhlciIsImdldENsaXAiLCJnZXRSb290IiwiX3Jvb3QiLCJfdXBkYXRlIiwiZGVsdGFUaW1lIiwidGltZURpcmVjdGlvbiIsIl91cGRhdGVXZWlnaHQiLCJ0aW1lUnVubmluZyIsIl91cGRhdGVUaW1lU2NhbGUiLCJjbGlwVGltZSIsIl91cGRhdGVUaW1lIiwicHJvcGVydHlNaXhlcnMiLCJpbnRlcnBvbGFudFZhbHVlIiwibG9vcENvdW50IiwicGluZ1BvbmciLCJfc2V0RW5kaW5ncyIsImhhbmRsZV9zdG9wIiwibG9vcERlbHRhIiwicGVuZGluZyIsImF0U3RhcnQiLCJhdEVuZCIsIndlaWdodE5vdyIsIndlaWdodFRoZW4iLCJBbmltYXRpb25NaXhlciIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY3JlYXRlIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zIiwiY29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnNCeUNsaXAiLCJhY3Rpb25CeVJvb3QiLCJfcmVtb3ZlSW5hY3RpdmVBY3Rpb24iLCJsYXN0SW5hY3RpdmVBY3Rpb24iLCJjYWNoZUluZGV4Iiwia25vd25BY3Rpb25zRm9yQ2xpcCIsImxhc3RLbm93bkFjdGlvbiIsImJ5Q2xpcENhY2hlSW5kZXgiLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmciLCJwcmV2SW5kZXgiLCJsYXN0QWN0aXZlSW5kZXgiLCJmaXJzdEluYWN0aXZlQWN0aW9uIiwiZmlyc3RJbmFjdGl2ZUluZGV4IiwibGFzdEFjdGl2ZUFjdGlvbiIsImJpbmRpbmdCeU5hbWUiLCJwcm9wQmluZGluZyIsImxhc3RJbmFjdGl2ZUJpbmRpbmciLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJfX2NhY2hlSW5kZXgiLCJsYXN0QWN0aXZlSW50ZXJwb2xhbnQiLCJjbGlwQWN0aW9uIiwib3B0aW9uYWxSb290IiwiY2xpcE9iamVjdCIsImZpbmRCeU5hbWUiLCJleGlzdGluZ0FjdGlvbiIsIm5ld0FjdGlvbiIsInN0b3BBbGxBY3Rpb24iLCJuQWN0aW9ucyIsInNldFRpbWUiLCJ0aW1lSW5TZWNvbmRzIiwidW5jYWNoZUNsaXAiLCJhY3Rpb25zVG9SZW1vdmUiLCJ1bmNhY2hlUm9vdCIsInVuY2FjaGVBY3Rpb24iLCJVbmlmb3JtIiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJHTEJ1ZmZlckF0dHJpYnV0ZSIsInNldFR5cGUiLCJzZXRJdGVtU2l6ZSIsInNldENvdW50IiwiUmF5Y2FzdGVyIiwic2V0RnJvbUNhbWVyYSIsImNvb3JkcyIsImludGVyc2VjdE9iamVjdCIsImFzY1NvcnQiLCJpbnRlcnNlY3RPYmplY3RzIiwiU3BoZXJpY2FsIiwib3RoZXIiLCJtYWtlU2FmZSIsIkVQUyIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJDeWxpbmRyaWNhbCIsIl92ZWN0b3IkNCIsIkJveDIiLCJpc0JveDIiLCJfc3RhcnRQIiwiX3N0YXJ0RW5kIiwiTGluZTMiLCJkaXN0YW5jZVNxIiwiY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciIsImNsYW1wVG9MaW5lIiwic3RhcnRFbmQyIiwiX3ZlY3RvciQzIiwiU3BvdExpZ2h0SGVscGVyIiwiY29uZSIsImNvbmVMZW5ndGgiLCJjb25lV2lkdGgiLCJfdmVjdG9yJDIiLCJfYm9uZU1hdHJpeCIsIl9tYXRyaXhXb3JsZEludiIsIlNrZWxldG9uSGVscGVyIiwiZ2V0Qm9uZUxpc3QiLCJpc1NrZWxldG9uSGVscGVyIiwiYm9uZUxpc3QiLCJQb2ludExpZ2h0SGVscGVyIiwic3BoZXJlU2l6ZSIsIl92ZWN0b3IkMSIsIl9jb2xvcjEiLCJfY29sb3IyIiwiSGVtaXNwaGVyZUxpZ2h0SGVscGVyIiwiR3JpZEhlbHBlciIsIlBvbGFyR3JpZEhlbHBlciIsInJhZGlhbHMiLCJjaXJjbGVzIiwiX3YxIiwiX3YyIiwiX3YzIiwiRGlyZWN0aW9uYWxMaWdodEhlbHBlciIsImxpZ2h0UGxhbmUiLCJ0YXJnZXRMaW5lIiwiX3ZlY3RvciIsIl9jYW1lcmEiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJzZXRQb2ludCIsIl9ib3giLCJCb3hIZWxwZXIiLCJCb3gzSGVscGVyIiwiUGxhbmVIZWxwZXIiLCJfYXhpcyIsIl9saW5lR2VvbWV0cnkiLCJfY29uZUdlb21ldHJ5IiwiQXJyb3dIZWxwZXIiLCJoZWFkTGVuZ3RoIiwiaGVhZFdpZHRoIiwic2V0RGlyZWN0aW9uIiwic2V0Q29sb3IiLCJBeGVzSGVscGVyIiwic2V0Q29sb3JzIiwieEF4aXNDb2xvciIsInlBeGlzQ29sb3IiLCJ6QXhpc0NvbG9yIiwiU2hhcGVQYXRoIiwic3ViUGF0aHMiLCJjdXJyZW50UGF0aCIsInRvU2hhcGVzIiwiaXNDQ1ciLCJub0hvbGVzIiwidG9TaGFwZXNOb0hvbGVzIiwiaW5TdWJwYXRocyIsInRtcFBhdGgiLCJ0bXBTaGFwZSIsImlzUG9pbnRJbnNpZGVQb2x5Z29uIiwiaW5Qb2x5Z29uIiwicG9seUxlbiIsImVkZ2VMb3dQdCIsImVkZ2VIaWdoUHQiLCJlZGdlRHgiLCJlZGdlRHkiLCJwZXJwRWRnZSIsImhvbGVzRmlyc3QiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJuZXdTaGFwZUhvbGVzIiwibWFpbklkeCIsImFtYmlndW91cyIsInRvQ2hhbmdlIiwic0lkeCIsInNMZW4iLCJzaG8iLCJoSWR4IiwiaG8iLCJob2xlX3VuYXNzaWduZWQiLCJzMklkeCIsIl9mbG9hdFZpZXciLCJfaW50MzJWaWV3IiwiRGF0YVV0aWxzIiwidmFsIiwiTGluZVN0cmlwIiwiTGluZVBpZWNlcyIsIk5vQ29sb3JzIiwiRmFjZUNvbG9ycyIsIlZlcnRleENvbG9ycyIsIk1lc2hGYWNlTWF0ZXJpYWwiLCJNdWx0aU1hdGVyaWFsIiwiaXNNdWx0aU1hdGVyaWFsIiwiUG9pbnRDbG91ZCIsIlBhcnRpY2xlIiwiUGFydGljbGVTeXN0ZW0iLCJQb2ludENsb3VkTWF0ZXJpYWwiLCJQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwiLCJQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIiwiVmVydGV4IiwiRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSIsIkludDhBdHRyaWJ1dGUiLCJVaW50OEF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSIsIkludDE2QXR0cmlidXRlIiwiVWludDE2QXR0cmlidXRlIiwiSW50MzJBdHRyaWJ1dGUiLCJVaW50MzJBdHRyaWJ1dGUiLCJGbG9hdDMyQXR0cmlidXRlIiwiRmxvYXQ2NEF0dHJpYnV0ZSIsIkF4aXNIZWxwZXIiLCJCb3VuZGluZ0JveEhlbHBlciIsIkVkZ2VzSGVscGVyIiwiV2lyZWZyYW1lSGVscGVyIiwiWEhSTG9hZGVyIiwiQmluYXJ5VGV4dHVyZUxvYWRlciIsIldlYkdMUmVuZGVyVGFyZ2V0Q3ViZSIsIkNhbnZhc1JlbmRlcmVyIiwiSlNPTkxvYWRlciIsImNvbnN0cnVjdCIsImZyb21Qb2ludHMiLCJIYW5kbGVycyIsImVtcHR5IiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInRvVmVjdG9yMyIsInNldEZyb21NYXRyaXgiLCJmbGF0dGVuVG9BcnJheU9mZnNldCIsIm11bHRpcGx5VmVjdG9yMyIsIm11bHRpcGx5VmVjdG9yM0FycmF5IiwiYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSIsImFwcGx5VG9WZWN0b3IzQXJyYXkiLCJnZXRJbnZlcnNlIiwiZXh0cmFjdFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJtdWx0aXBseVRvQXJyYXkiLCJtdWx0aXBseVZlY3RvcjQiLCJyb3RhdGVBeGlzIiwiY3Jvc3NWZWN0b3IiLCJyb3RhdGVCeUF4aXMiLCJtYWtlRnJ1c3R1bSIsImlzSW50ZXJzZWN0aW9uTGluZSIsImlzSW50ZXJzZWN0aW9uUGxhbmUiLCJiYXJ5Y29vcmRGcm9tUG9pbnQiLCJtaWRwb2ludCIsInByb3RvdHlwZW5vcm1hbCIsImV4dHJhY3RBbGxQb2ludHMiLCJleHRydWRlIiwibWFrZUdlb21ldHJ5IiwiZnJvbUF0dHJpYnV0ZSIsImRpc3RhbmNlVG9NYW5oYXR0YW4iLCJsZW5ndGhNYW5oYXR0YW4iLCJzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCIsInNldEV1bGVyRnJvbVF1YXRlcm5pb24iLCJnZXRQb3NpdGlvbkZyb21NYXRyaXgiLCJnZXRTY2FsZUZyb21NYXRyaXgiLCJnZXRDb2x1bW5Gcm9tTWF0cml4IiwiYXBwbHlQcm9qZWN0aW9uIiwiZ2V0Q2hpbGRCeU5hbWUiLCJyZW5kZXJEZXB0aCIsImdldFdvcmxkUm90YXRpb24iLCJhcHBseU1hdHJpeCIsImV1bGVyT3JkZXIiLCJ1c2VRdWF0ZXJuaW9uIiwic2V0RHJhd01vZGUiLCJkcmF3TW9kZSIsImluaXRCb25lcyIsInNldExlbnMiLCJvbmx5U2hhZG93Iiwic2hhZG93Q2FtZXJhRm92Iiwic2hhZG93Q2FtZXJhTGVmdCIsInNoYWRvd0NhbWVyYVJpZ2h0Iiwic2hhZG93Q2FtZXJhVG9wIiwic2hhZG93Q2FtZXJhQm90dG9tIiwic2hhZG93Q2FtZXJhVmlzaWJsZSIsInNoYWRvd0RhcmtuZXNzIiwic2hhZG93TWFwV2lkdGgiLCJzaGFkb3dNYXBIZWlnaHQiLCJkeW5hbWljIiwic2V0RHluYW1pYyIsImNvcHlJbmRpY2VzQXJyYXkiLCJzZXRBcnJheSIsImFkZEluZGV4IiwiYWRkRHJhd0NhbGwiLCJjbGVhckRyYXdDYWxscyIsImNvbXB1dGVPZmZzZXRzIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIm92ZXJkcmF3Iiwid3JhcFJHQiIsImNsZWFyVGFyZ2V0IiwiYW5pbWF0ZSIsImdldEN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRQcmVjaXNpb24iLCJyZXNldEdMU3RhdGUiLCJzdXBwb3J0c0Zsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzIiwic3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzIiwic3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEMiLCJzdXBwb3J0c0JsZW5kTWluTWF4Iiwic3VwcG9ydHNJbnN0YW5jZWRBcnJheXMiLCJlbmFibGVTY2lzc29yVGVzdCIsImluaXRNYXRlcmlhbCIsImFkZFByZVBsdWdpbiIsImFkZFBvc3RQbHVnaW4iLCJ1cGRhdGVTaGFkb3dNYXAiLCJzZXRGYWNlQ3VsbGluZyIsImFsbG9jVGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlIiwiZ2V0QWN0aXZlTWlwTWFwTGV2ZWwiLCJzaGFkb3dNYXBDdWxsRmFjZSIsInZyIiwiZ2FtbWFJbnB1dCIsImdhbW1hT3V0cHV0IiwidG9uZU1hcHBpbmdXaGl0ZVBvaW50IiwiZ2FtbWFGYWN0b3IiLCJyZW5kZXJSZXZlcnNlU2lkZWQiLCJyZW5kZXJTaW5nbGVTaWRlZCIsImdldERhdGEiLCJ1cGRhdGVDdWJlTWFwIiwibG9hZFRleHR1cmVDdWJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSIsIlNjZW5lVXRpbHMiLCJjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0IiwiZGV0YWNoIiwiTGVuc0ZsYXJlIiwiUGFyYW1ldHJpY0dlb21ldHJ5IiwiVGV4dEdlb21ldHJ5IiwiRm9udExvYWRlciIsIkZvbnQiLCJJbW1lZGlhdGVSZW5kZXJPYmplY3QiLCJXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiRGF0YVRleHR1cmUyREFycmF5IiwiRGF0YVRleHR1cmUzRCIsIkNvaW4iLCJjb2luIiwiUG93ZXJ1cCIsInBvd2VydXAiLCJyZXZpc2lvbiIsIl9fVEhSRUVfXyIsIkdob3N0IiwidHh0TWF0Y2FwIiwiZ2hvc3RNYXRlcmlhbCIsImdob3N0IiwicHJldldheXBvaW50IiwibmV4dFdheXBvaW50Iiwid2F5cG9pbnRzIiwic3BlZWQiLCJnb3RvWCIsImdvdG9aIiwibmV4dElkIiwicG9zc2libGVOZXh0V2F5cG9pbnRzIiwiYWRkQm91bmRzIiwiYmJveCIsImJvdW5kcyIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJ6TWluIiwiek1heCIsImlzSG9yaXpvbnRhbCIsImZpbGxTdHlsZSIsIl9ldWxlciIsIl9jaGFuZ2VFdmVudCIsIl9sb2NrRXZlbnQiLCJfdW5sb2NrRXZlbnQiLCJfUElfMiIsInJlcXVpcmUiLCJteVBvaW50TGlnaHQiLCJza3lib3hHZW8iLCJza3lib3giLCJtYXRlcmlhbENvcm9uYSIsIm1hdGVyaWFsUmVkRWNsaXBzZSIsIm1vdmVGb3J3YXJkIiwibW92ZUJhY2t3YXJkIiwibW92ZUxlZnQiLCJtb3ZlUmlnaHQiLCJmYWxsaW5nIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwidmVsb2NpdHkiLCJjb250cm9scyIsImlzTG9ja2VkIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJwb2ludGVyU3BlZWQiLCJvbk1vdXNlTW92ZSIsIm1vdmVtZW50WCIsIm1vek1vdmVtZW50WCIsIndlYmtpdE1vdmVtZW50WCIsIm1vdmVtZW50WSIsIm1vek1vdmVtZW50WSIsIndlYmtpdE1vdmVtZW50WSIsIm9uUG9pbnRlcmxvY2tDaGFuZ2UiLCJvd25lckRvY3VtZW50IiwicG9pbnRlckxvY2tFbGVtZW50Iiwib25Qb2ludGVybG9ja0Vycm9yIiwiZ2V0T2JqZWN0IiwiZ2V0RGlyZWN0aW9uIiwicmVxdWVzdFBvaW50ZXJMb2NrIiwidW5sb2NrIiwiZXhpdFBvaW50ZXJMb2NrIiwibWluaW1hcCIsImdldEVsZW1lbnRCeUlkIiwiZ3JlYXRlciIsImN0eCIsImZvbGxvd1giLCJmb2xsb3daIiwibGFzdFB4IiwibGFzdFB6IiwiZWF0VGltZSIsIm9uUmVzaXplIiwiWCIsIloiLCJjbGVhclJlY3QiLCJkaXN0YW5jZVRyYXZlbGxlZCIsImZpbGxSZWN0IiwicG14IiwicG16IiwiYmVnaW5QYXRoIiwibm9tIiwiYmxvY2tlciIsImluc3RydWN0aW9ucyIsInJlc3RhcnRCdG4iLCJnYW1lb3ZlciIsImdhbWUiLCJsYXN0U3RhZ2UiLCJjb2lucyIsInNjb3JlIiwiY29pbnNUb3RhbCIsInBvd2VydXBBY3RpdmUiLCJwb3dlcnVwRHVyYXRpb24iLCJnaG9zdHMiLCJwb3dlcnVwQ291bnRkb3duIiwiZ2FtZU92ZXIiLCJoaWdoc2NvcmUiLCJsb2FkU3RhZ2UiLCJpbm5lckhUTUwiLCJmbG9vckdlb21ldHJ5IiwiY29sb3JzRmxvb3IiLCJmbG9vck1hdGVyaWFsIiwiZmxvb3JGYWN0b3J5IiwidHh0IiwiYmx1ZU1hdGVyaWFsIiwiYm94R2VvbWV0cnkiLCJjb2xvcnNCb3giLCJpbWciLCJwaXhlbERhdGEiLCJwb2ludEFycmF5IiwicmVjdHMiLCJyZWN0YW5nbGVzIiwiY29udmVydFBvaW50c1RvUmVjdGFuZ2xlcyIsInJlY3RhbmdsZSIsIndhbGxNYXRlcmlhbCIsIm1hdGVyaWFsMSIsIm1hdGVyaWFsMiIsImxvbmdlc3RTaWRlIiwiY3JlYXRlQm94Iiwid2FsbEZhY3RvcnkiLCJnaG9zdENvbG9ycyIsImdob3N0Q29vcmRzIiwiZ2hvc3RBcnIiLCJ0ZXh0dXJlTWF0Y2FwIiwiZ2hvc3RGYWN0b3J5Iiwic2V0VG90YWxDb2lucyIsImFkZENvaW4iLCJsb3NlR2FtZSIsImFkZFBvd2VydXAiLCJyZW1vdmVQb3dlcnVwIiwibG9zdCIsImNyZWF0ZU1hdGVyaWFsQXJyYXkiLCJmaWxlbmFtZSIsInNreWJveEltYWdlcGF0aHMiLCJiYXNlRmlsZW5hbWUiLCJjcmVhdGVQYXRoU3RyaW5ncyIsImRldmljZVBpeGVsUmF0aW8iLCJsYXN0U2FmZVBvc2l0aW9uIiwicm90YXRpb25Qb2ludCIsInBsYXllclNpemUiLCJkZXRlY3RDb2xsaXNpb25zIiwiY2FtRGlyZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==